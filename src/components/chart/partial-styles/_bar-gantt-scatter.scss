@use '../../../style/mixins';

$min-item-size: 0.5rem;
// $space-for-text: 4rem;
@mixin line($direction: portrait, $color: rgb(var(--contrast-800), 0.4)) {
    @if $direction == portrait {
        background: linear-gradient(to bottom, $color 0%, $color 100%)
            center/1px
            100%
            no-repeat;
    } @else if $direction == landscape {
        background: linear-gradient(to right, $color 0%, $color 100%)
            center/100%
            1px
            no-repeat;
    }
}

:host(limel-chart[type='bar']),
:host(limel-chart[type='scatter']) {
    display: flex;
    width: 100%;
    height: 100%;

    .chart {
        display: flex;
        gap: 0.5rem;
        background-color: var(--chart-background-color, transparent);
    }

    .item {
        @include mixins.visualize-keyboard-focus;
        display: flex;
        align-items: center;
        justify-content: center;

        position: relative;

        border-radius: var(--chart-item-border-radius, 0.125rem);

        // &:after {
        //     content: attr(data-item-text);
        //     position: absolute;

        //     @include mixins.truncate-text;

        //     text-align: right;
        //     font-size: 0.625rem;
        //     transform-origin: right;
        //     padding: 0 0.25rem;
        //     width: $space-for-text;
        // }
    }
}

:host(limel-chart[type='bar']) {
    .item {
        background-color: var(--limel-chart-item-color);
    }
}

:host(limel-chart[type='scatter']) {
    .item {
        &:before,
        &:after {
            content: '';
            position: absolute;
            margin: auto;

            width: $min-item-size;
            height: $min-item-size;
            border-radius: 50%;
        }
        &::after {
            background-color: var(--limel-chart-item-color);
        }

        &.has-start-value {
            &:before {
                background-color: var(--limel-chart-item-color);
            }
        }
    }
}

:host(limel-chart[type='bar'][orientation='landscape']),
:host(limel-chart[type='scatter'][orientation='landscape']) {
    --limel-chart-padding: 0.5rem 0.5rem 0.5rem 2rem;
    overflow: auto hidden;

    .chart {
        flex-direction: row;
        align-items: flex-end;
    }

    .item {
        min-width: $min-item-size;
        width: inherit;
        height: calc(var(--limel-chart-item-size) * 1%);
        bottom: calc(var(--limel-chart-item-offset) * 1%);
    }
}

:host(limel-chart[type='scatter'][orientation='landscape']) {
    .item {
        &.has-start-value,
        &:hover,
        &:focus-visible {
            @include line(portrait);
        }

        &:before {
            inset: auto 0 0 0;
            transform: translateY(50%);
        }
        &::after {
            inset: 0 0 auto 0;
            transform: translateY(-50%);
        }
    }
}

:host(limel-chart[type='bar'][orientation='portrait']),
:host(limel-chart[type='scatter'][orientation='portrait']) {
    --limel-chart-padding: 0.5rem 0.5rem 2rem 0.5rem;
    overflow: hidden auto;

    .chart {
        flex-direction: column;
    }

    .item {
        min-height: $min-item-size;
        height: inherit;
        width: calc(var(--limel-chart-item-size) * 1%);
        left: calc(var(--limel-chart-item-offset) * 1%);
    }
}

:host(limel-chart[type='scatter'][orientation='portrait']) {
    .item {
        &.has-start-value,
        &:hover,
        &:focus-visible {
            @include line(landscape);
        }

        &:before {
            inset: 0 auto 0 0;
            transform: translateX(-50%);
        }

        &:after {
            inset: 0 0 0 auto;
            transform: translateX(50%);
        }
    }
}
