{"version":3,"names":["pickerCss","SEARCH_DEBOUNCE","CHIP_SET_TAG_NAME","Picker","constructor","hostRef","this","chipSetEditMode","handleTextInput","bind","handleInputKeyDown","handleDropdownKeyDown","handleInputFieldFocus","handleChange","handleInteract","handleListChange","handleActionListChange","handleStopEditAndBlur","createDebouncedSearcher","handleCloseMenu","onListKeyDown","portalId","createRandomString","componentWillLoad","chips","createChips","value","componentDidLoad","searcher","chipSet","host","shadowRoot","querySelector","async","getEditMode","render","props","multiple","maxItems","h","Object","assign","type","inputType","label","helperText","leadingIcon","disabled","invalid","delimiter","renderDelimiter","readonly","required","searchLabel","onInput","onKeyDown","onChange","onInteract","onStartEdit","onStopEdit","emptyInputOnBlur","clearAllButton","renderDropdown","onChangeValue","newValue","debouncedSearch","AwesomeDebouncePromise","listItems","map","createChip","listItem","name","getIconName","icon","color","getIconFillColor","iconColor","id","text","removable","undefined","dropDownContent","getDropdownContent","content","shouldShowDropDownContent","actionContent","getActionContent","actionPosition","push","renderPortal","actionCount","_b","_a","actions","length","class","actionScrollBehavior","badgeIcons","items","removeUnusedPropertiesOnAction","action","isFull","loading","renderSpinner","renderEmptyMessage","renderListResult","style","width","display","padding","limeBranded","emptyResultMessage","margin","event","keyFound","TAB","ESCAPE","ENTER","includes","key","keyCodeFound","TAB_KEY_CODE","ESCAPE_KEY_CODE","ENTER_KEY_CODE","keyCode","setFocus","dropdownZIndex","getComputedStyle","getPropertyValue","visible","containerId","inheritParentWidth","containerStyle","open","allowClicksElement","onDismiss","element","activeElement","document","portalElement","isDescendant","clearInputField","stopPropagation","query","detail","textValue","searchFn","result","handleSearchResult","change","emit","chip","find","item","valueId","interact","isForwardTab","altKey","metaKey","shiftKey","isUp","ARROW_UP","ARROW_UP_KEY_CODE","isDown","ARROW_DOWN","ARROW_DOWN_KEY_CODE","list","preventDefault","listElement","focus","isEscape","values","filter","emptyInput"],"sources":["./src/components/picker/picker.scss?tag=limel-picker&encapsulation=shadow","./src/components/picker/picker.tsx"],"sourcesContent":["// Note! The `--dropdown-z-index` property is used from `picker.tsx`.\n/**\n  * @prop --dropdown-z-index: z-index of the dropdown menu.\n  */\n\n:host {\n    position: relative;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n","import { Action } from '../collapsible-section/action';\nimport { ActionPosition, ActionScrollBehavior } from '../picker/actions.types';\nimport { Chip } from '../chip-set/chip.types';\nimport { ListItem } from '../list/list-item.types';\nimport { Searcher } from '../picker/searcher.types';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport { isDescendant } from '../../util/dom';\nimport {\n    ARROW_DOWN,\n    ARROW_DOWN_KEY_CODE,\n    ARROW_UP,\n    ARROW_UP_KEY_CODE,\n    ENTER,\n    ENTER_KEY_CODE,\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\nimport { createRandomString } from '../../util/random-string';\nimport { LimelChipSetCustomEvent, LimelListCustomEvent } from 'src/components';\nimport { getIconFillColor, getIconName } from '../icon/get-icon-props';\n\nconst SEARCH_DEBOUNCE = 500;\nconst CHIP_SET_TAG_NAME = 'limel-chip-set';\n\n/**\n * @exampleComponent limel-example-picker-single\n * @exampleComponent limel-example-picker-multiple\n * @exampleComponent limel-example-picker-value-as-object\n * @exampleComponent limel-example-picker-icons\n * @exampleComponent limel-example-picker-empty-suggestions\n * @exampleComponent limel-example-picker-leading-icon\n * @exampleComponent limel-example-picker-static-actions\n * @exampleComponent limel-example-picker-composite\n */\n@Component({\n    tag: 'limel-picker',\n    shadow: true,\n    styleUrl: 'picker.scss',\n})\nexport class Picker {\n    /**\n     * True if the picker should be disabled\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to disable adding and removing items,\n     * but allow interaction with existing items.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Text to display for the input field of the picker\n     */\n    @Prop()\n    public label: string;\n\n    /**\n     * Search label to display in the input field when searching\n     */\n    @Prop()\n    public searchLabel: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Leading icon to show to the far left in the text field\n     */\n    @Prop()\n    public leadingIcon: string;\n\n    /**\n     * A message to display when the search returned an empty result\n     */\n    @Prop()\n    public emptyResultMessage: string;\n\n    /**\n     * True if the control requires a value\n     */\n    @Prop()\n    public required: boolean = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Currently selected value or values\n     */\n    @Prop()\n    public value: ListItem<number | string> | Array<ListItem<number | string>>;\n\n    /**\n     * A search function that takes a search-string as an argument,\n     * and returns a promise that will eventually be resolved with\n     * an array of `ListItem`:s.\n     *\n     * See the docs for the type `Searcher` for type information on\n     * the searcher function itself.\n     */\n    @Prop()\n    public searcher: Searcher;\n\n    /**\n     * True if multiple values are allowed\n     */\n    @Prop()\n    public multiple: boolean = false;\n\n    /**\n     * Sets delimiters between chips. Works only when `multiple` is `true`.\n     */\n    @Prop({ reflect: true })\n    public delimiter: string = null;\n\n    /**\n     * Static actions that can be clicked by the user.\n     */\n    @Prop()\n    public actions: Array<ListItem<Action>> = [];\n\n    /**\n     * Position of the custom static actions in the picker's results dropdown.\n     * Can be set to `'top'` or `'bottom'`.\n     */\n    @Prop()\n    public actionPosition: ActionPosition = 'bottom';\n\n    /**\n     * Scroll behavior of the custom static actions, when user scrolls\n     * in the picker's results dropdown. Can be set to `'scroll'` which means\n     * the action items will scroll together with the list, or `'sticky'` which\n     * retains their position at the top or bottom of the drop down while\n     * scrolling.\n     */\n    @Prop()\n    public actionScrollBehavior: ActionScrollBehavior = 'sticky';\n\n    /**\n     * Whether badge icons should be used in the result list or not\n     */\n    @Prop({ reflect: true })\n    public badgeIcons: boolean = false;\n\n    /**\n     * Fired when a new value has been selected from the picker\n     */\n    @Event()\n    private change: EventEmitter<\n        ListItem<number | string> | Array<ListItem<number | string>>\n    >;\n\n    /**\n     * Fired when clicking on a selected value\n     */\n    @Event()\n    private interact: EventEmitter<ListItem<number | string>>;\n\n    /**\n     * Emitted when the user selects an action.\n     */\n    @Event()\n    private action: EventEmitter<Action>;\n\n    @State()\n    private items: Array<ListItem<number | string>>;\n\n    @State()\n    private textValue: string = '';\n\n    @State()\n    private loading: boolean = false;\n\n    @State()\n    private chips: Chip[] = [];\n\n    @Element()\n    private host: HTMLLimelPickerElement;\n\n    // Should NOT be decorated with State(), since this\n    // should not trigger a re-render by itself.\n    private chipSetEditMode = false;\n\n    private debouncedSearch: Searcher;\n    private chipSet: HTMLLimelChipSetElement;\n    private portalId: string;\n\n    constructor() {\n        this.handleTextInput = this.handleTextInput.bind(this);\n        this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n        this.handleDropdownKeyDown = this.handleDropdownKeyDown.bind(this);\n        this.handleInputFieldFocus = this.handleInputFieldFocus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleInteract = this.handleInteract.bind(this);\n        this.handleListChange = this.handleListChange.bind(this);\n        this.handleActionListChange = this.handleActionListChange.bind(this);\n        this.handleStopEditAndBlur = this.handleStopEditAndBlur.bind(this);\n        this.createDebouncedSearcher = this.createDebouncedSearcher.bind(this);\n        this.handleCloseMenu = this.handleCloseMenu.bind(this);\n        this.onListKeyDown = this.onListKeyDown.bind(this);\n\n        this.portalId = createRandomString();\n    }\n\n    public componentWillLoad() {\n        this.chips = this.createChips(this.value);\n    }\n\n    public componentDidLoad() {\n        this.createDebouncedSearcher(this.searcher);\n        this.chipSet = this.host.shadowRoot.querySelector(CHIP_SET_TAG_NAME);\n    }\n\n    public async componentWillUpdate() {\n        this.chipSetEditMode = false;\n        if (this.chipSet) {\n            this.chipSetEditMode = await this.chipSet.getEditMode();\n        }\n    }\n\n    public render() {\n        const props: {\n            maxItems?: number;\n        } = {};\n\n        if (!this.multiple) {\n            props.maxItems = 1;\n        }\n\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"search\"\n                label={this.label}\n                helperText={this.helperText}\n                leadingIcon={this.leadingIcon}\n                value={this.chips}\n                disabled={this.disabled}\n                invalid={this.invalid}\n                delimiter={this.renderDelimiter()}\n                readonly={this.readonly}\n                required={this.required}\n                searchLabel={this.searchLabel}\n                onInput={this.handleTextInput}\n                onKeyDown={this.handleInputKeyDown}\n                onChange={this.handleChange}\n                onInteract={this.handleInteract}\n                onStartEdit={this.handleInputFieldFocus}\n                onStopEdit={this.handleStopEditAndBlur}\n                emptyInputOnBlur={false}\n                clearAllButton={this.multiple && !this.chipSetEditMode}\n                {...props}\n            />,\n            this.renderDropdown(),\n        ];\n    }\n\n    @Watch('value')\n    protected onChangeValue() {\n        this.chips = this.createChips(this.value);\n    }\n\n    @Watch('searcher')\n    protected createDebouncedSearcher(newValue: Searcher) {\n        if (typeof newValue !== 'function') {\n            return;\n        }\n\n        this.debouncedSearch = AwesomeDebouncePromise(\n            newValue,\n            SEARCH_DEBOUNCE,\n        );\n    }\n\n    private renderDelimiter() {\n        if (this.multiple) {\n            return this.delimiter;\n        }\n\n        return null;\n    }\n\n    private createChips(value: ListItem | ListItem[]): Chip[] {\n        if (!value) {\n            return [];\n        }\n\n        if (this.multiple) {\n            const listItems: ListItem[] = value as ListItem[];\n\n            return listItems.map(this.createChip);\n        }\n\n        const listItem: ListItem = value as ListItem;\n\n        return [this.createChip(listItem)];\n    }\n\n    private createChip(listItem: ListItem): Chip {\n        const name = getIconName(listItem.icon);\n        const color = getIconFillColor(listItem.icon, listItem.iconColor);\n        const value = listItem.value;\n        const id = typeof value !== 'object' ? value : value.id;\n\n        return {\n            id: `${id}`,\n            text: listItem.text,\n            removable: true,\n            icon: name ? { name: name, color: color } : undefined,\n            value: listItem,\n        };\n    }\n\n    /**\n     * Renders the dropdown with the items to pick from, or a spinner if the picker\n     * is waiting for items to be received\n     *\n     * @returns picker dropdown\n     */\n    private renderDropdown() {\n        const dropDownContent = this.getDropdownContent();\n\n        const content = [];\n\n        if (this.shouldShowDropDownContent()) {\n            const actionContent = this.getActionContent();\n            if (this.actionPosition === 'top') {\n                content.push(actionContent);\n            }\n\n            if (dropDownContent) {\n                content.push(dropDownContent);\n            }\n\n            if (this.actionPosition === 'bottom') {\n                content.push(actionContent);\n            }\n        }\n\n        return this.renderPortal(content);\n    }\n\n    private getActionContent() {\n        const actionCount = this.actions?.length ?? 0;\n        if (actionCount === 0) {\n            return null;\n        }\n\n        return [\n            <limel-list\n                class={{\n                    'static-actions-list': true,\n                    'is-on-top': this.actionPosition === 'top',\n                    'is-at-bottom': this.actionPosition === 'bottom',\n                    'has-position-sticky':\n                        this.actionScrollBehavior === 'sticky',\n                }}\n                badgeIcons={true}\n                type={'selectable'}\n                onChange={this.handleActionListChange}\n                items={this.actions.map(this.removeUnusedPropertiesOnAction)}\n            />,\n        ];\n    }\n\n    private removeUnusedPropertiesOnAction(\n        action: ListItem<Action>,\n    ): ListItem<Action> {\n        return {\n            ...action,\n            actions: [],\n        };\n    }\n\n    private shouldShowDropDownContent() {\n        if (this.isFull()) {\n            return false;\n        }\n\n        return !!this.chipSetEditMode;\n    }\n\n    private getDropdownContent() {\n        if (!this.shouldShowDropDownContent()) {\n            return;\n        }\n\n        if (this.loading) {\n            return this.renderSpinner();\n        }\n\n        if (!this.items || !this.items.length) {\n            return this.renderEmptyMessage();\n        }\n\n        return this.renderListResult();\n    }\n\n    /**\n     * Returns true if the picker is \"full\"\n     * The picker is considered to be full if it has a value and only one is allowed\n     *\n     * @returns true if the picker is full\n     */\n    private isFull(): boolean {\n        return !this.multiple && !!this.value;\n    }\n\n    private renderSpinner() {\n        return (\n            <div\n                style={{\n                    width: '100%',\n                    display: 'flex',\n                    'align-items': 'center',\n                    'justify-content': 'center',\n                    padding: '1rem 0',\n                }}\n            >\n                <limel-spinner limeBranded={false} />\n            </div>\n        );\n    }\n\n    private renderEmptyMessage() {\n        if (!this.emptyResultMessage) {\n            return;\n        }\n\n        const style = {\n            color: 'rgb(var(--contrast-1100))',\n            'text-align': 'center',\n            margin: '0.5rem 1rem',\n        };\n\n        return <p style={style}>{this.emptyResultMessage}</p>;\n    }\n\n    private renderListResult() {\n        return (\n            <limel-list\n                badgeIcons={this.badgeIcons}\n                onChange={this.handleListChange}\n                onKeyDown={this.onListKeyDown}\n                type=\"selectable\"\n                items={this.items}\n            />\n        );\n    }\n\n    private onListKeyDown(event: KeyboardEvent) {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        const keyCodeFound = [\n            TAB_KEY_CODE,\n            ESCAPE_KEY_CODE,\n            ENTER_KEY_CODE,\n        ].includes(event.keyCode);\n        if (keyFound || keyCodeFound) {\n            this.chipSet.setFocus();\n        }\n    }\n\n    private renderPortal(content: any[] = []) {\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index',\n        );\n\n        return (\n            <limel-portal\n                visible={content.length > 0}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={content.length > 0}\n                    allowClicksElement={this.host}\n                    style={{\n                        '--mdc-menu-min-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {content}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    }\n\n    /**\n     * Check if a descendant still has focus. If not, reset text value and search result.\n     */\n    private handleStopEditAndBlur() {\n        // In browsers where shadow DOM is not supported activeElement on shadowRoot will return null\n        // However, document.activeElement will return the actual focused element instead of the outermost shadow host\n        const element =\n            this.host.shadowRoot.activeElement || document.activeElement;\n        const portalElement = document.querySelector(`#${this.portalId}`);\n        if (\n            isDescendant(element as HTMLElement, this.host) ||\n            isDescendant(element as HTMLElement, portalElement as HTMLElement)\n        ) {\n            return;\n        }\n\n        this.clearInputField();\n    }\n\n    /**\n     * Input handler for the input field\n     *\n     * @param event - event\n     */\n    private async handleTextInput(event) {\n        event.stopPropagation();\n\n        const query = event.detail;\n        this.textValue = query;\n        this.loading = true;\n\n        // If the search-query is an empty string, bypass debouncing.\n        const searchFn = query === '' ? this.searcher : this.debouncedSearch;\n        const result = await searchFn(query);\n        this.handleSearchResult(query, result);\n    }\n\n    /**\n     * Change handler for the list\n     *\n     * @param event - event\n     */\n    private handleListChange(event: LimelListCustomEvent<ListItem>) {\n        event.stopPropagation();\n        if (!this.value || this.value !== event.detail) {\n            let newValue: ListItem | ListItem[] = event.detail;\n            if (this.multiple) {\n                newValue = [...(this.value as ListItem[]), event.detail];\n            }\n\n            this.change.emit(newValue);\n            this.items = [];\n        }\n\n        if (this.multiple) {\n            this.chipSet?.setFocus(true);\n        }\n    }\n\n    /**\n     * Change handler for the list\n     *\n     * @param event - event\n     */\n    private handleActionListChange(\n        event: LimelListCustomEvent<ListItem<Action>>,\n    ) {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.action.emit(event.detail.value);\n        this.items = [];\n    }\n\n    /**\n     * Focus handler for the chip set\n     * Prevent focus if the picker has a value and does not support multiple values\n     */\n    private async handleInputFieldFocus() {\n        this.loading = true;\n        const query = this.textValue;\n        const result = await this.searcher(query);\n        this.handleSearchResult(query, result);\n    }\n\n    private handleChange(event: LimelChipSetCustomEvent<Chip | Chip[]>) {\n        event.stopPropagation();\n\n        let newValue = null;\n        if (this.multiple) {\n            const chips = event.detail as Chip[];\n            newValue = chips.map((chip) => {\n                return (this.value as ListItem[]).find((item) => {\n                    const valueId =\n                        // eslint-disable-next-line prettier/prettier\n                        typeof item.value !== 'object' ? item.value : item.value.id;\n\n                    return `${valueId}` === chip.id;\n                });\n            });\n        }\n\n        this.change.emit(newValue);\n    }\n\n    private handleInteract(event: LimelChipSetCustomEvent<Chip>) {\n        event.stopPropagation();\n        this.interact.emit(event.detail ? event.detail.value : event.detail);\n    }\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     *\n     * @param event - event\n     */\n    private handleInputKeyDown(event: KeyboardEvent) {\n        const isForwardTab =\n            (event.key === TAB || event.keyCode === TAB_KEY_CODE) &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp =\n            event.key === ARROW_UP || event.keyCode === ARROW_UP_KEY_CODE;\n        const isDown =\n            event.key === ARROW_DOWN || event.keyCode === ARROW_DOWN_KEY_CODE;\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child',\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child',\n            );\n            listElement.focus();\n        }\n    }\n\n    /**\n     * Key handler for the dropdown\n     *\n     * @param event - event\n     */\n    private handleDropdownKeyDown(event: KeyboardEvent) {\n        const isEscape =\n            event.key === ESCAPE || event.keyCode === ESCAPE_KEY_CODE;\n\n        if (isEscape) {\n            event.preventDefault();\n            this.textValue = '';\n            this.chipSet.setFocus(true);\n        }\n    }\n\n    private handleSearchResult(query: string, result: ListItem[]) {\n        if (query === this.textValue) {\n            this.items = result;\n            if (this.multiple) {\n                const values = this.value as ListItem[];\n                this.items = result.filter((item) => {\n                    return !values.includes(item);\n                });\n            }\n\n            this.loading = false;\n        }\n    }\n\n    private handleCloseMenu() {\n        if (this.items.length > 0) {\n            return;\n        }\n\n        this.clearInputField();\n    }\n\n    private clearInputField() {\n        this.chipSet.emptyInput();\n        this.textValue = '';\n        this.handleSearchResult('', []);\n    }\n}\n"],"mappings":"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"}