{"version":3,"names":["FormLayoutType"],"sources":["./src/components/form/form.types.ts"],"sourcesContent":["import { Help } from '../help/help.types';\nimport { EventEmitter } from '@stencil/core';\n\n/**\n * @public\n */\nexport interface ValidationStatus {\n    /**\n     * True if the form is valid, false otherwise\n     *\n     * If the form is invalid, any errors can be found on the `errors` property\n     */\n    valid: boolean;\n\n    /**\n     * List of validation errors\n     */\n    errors?: FormError[];\n}\n\n/**\n * @public\n */\nexport interface FormError {\n    /**\n     * Name of the error\n     */\n    name: string;\n\n    /**\n     * Params of the error\n     */\n    params?: unknown;\n\n    /**\n     * Name of the invalid property\n     */\n    property: string;\n\n    /**\n     * Path to the property within the schema\n     */\n    schemaPath: string;\n\n    /**\n     * String describing the error\n     */\n    message: string;\n}\n\n/**\n * @public\n */\nexport type ValidationError = {\n    /**\n     * Name of the field the error belongs to\n     */\n    [key: string]: string[] | ValidationError;\n};\n\n/**\n * @public\n */\nexport interface FormComponent<T = any> {\n    /**\n     * The value of the current property\n     */\n    value: T;\n\n    /**\n     * Whether or not the current property is required\n     */\n    required?: boolean;\n\n    /**\n     * Whether or not the current property is readonly\n     */\n    readonly?: boolean;\n\n    /**\n     * Whether or not the current property is disabled\n     */\n    disabled?: boolean;\n\n    /**\n     * The label of the current property\n     */\n    label?: string;\n\n    /**\n     * The helper text for the current property\n     */\n    helperText?: string;\n\n    /**\n     * Additional contextual information about the form\n     */\n    formInfo?: FormInfo;\n\n    /**\n     * The event to emit when the value of the current property has changed\n     */\n    change: EventEmitter<T>;\n}\n\n/**\n * @public\n */\nexport interface FormInfo {\n    /**\n     * The schema of the current property\n     */\n    schema?: object;\n\n    /**\n     * The schema of the whole form\n     */\n    rootSchema?: object;\n\n    /**\n     * A tree of errors for this property and its children\n     */\n    errorSchema?: object;\n\n    /**\n     * The value of the whole form\n     */\n    rootValue?: any;\n\n    /**\n     * The name of the current property\n     */\n    name?: string;\n\n    /**\n     * Path to the property within the schema\n     */\n    schemaPath?: string[];\n}\n\n/**\n * Lime elements specific options that can be specified under the `lime` key in\n * a schema, e.g.\n *\n * ```ts\n * const schema = {\n *     type: 'object',\n *     lime: {\n *         collapsible: true,\n *     },\n * };\n * ```\n *\n * @public\n */\nexport interface LimeSchemaOptions {\n    /**\n     * When specified on an object it will render all sub components inside a\n     * collapsible section\n     */\n    collapsible?: boolean;\n\n    /**\n     * When `collapsible` is `true`, set this to `false` to make the\n     * collapsible section load in the open state.\n     * Defaults to `true`.\n     */\n    collapsed?: boolean;\n\n    /**\n     * Will render the field using the specified component. The component\n     * should implement the `FormComponent` interface\n     */\n    component?: FormComponentOptions;\n\n    /**\n     * When specified on an object it will render the sub components with the\n     * specified layout\n     */\n    layout?: FormLayoutOptions<any>;\n\n    /**\n     * Mark the field as disabled\n     */\n    disabled?: boolean;\n\n    help?: string | Help;\n}\n\n/**\n * Options for a component to be rendered inside a form\n *\n * @public\n */\nexport interface FormComponentOptions {\n    /**\n     * Name of the component\n     */\n    name?: string;\n\n    /**\n     * Extra properties to give the component in addition to the properties\n     * specified on the `FormComponent` interface\n     */\n    props?: Record<string, any>;\n}\n\n/**\n * @public\n */\nexport interface FormLayoutOptions<T = FormLayoutType.Default> {\n    /**\n     * The type of layout to use\n     */\n    type: T;\n}\n\n/**\n * @public\n */\nexport interface GridLayoutOptions\n    extends FormLayoutOptions<FormLayoutType.Grid> {\n    /**\n     * When specified on a component within the grid, the component will take\n     * up the the specified number of columns in the form\n     */\n    // eslint-disable-next-line no-magic-numbers\n    colSpan?: 1 | 2 | 3 | 4 | 5 | 'all';\n\n    /**\n     * When specified on a component within the grid, the component will take\n     * up the the specified number of rows in the form\n     */\n    rowSpan?: number;\n\n    /**\n     * Number of columns to use in the layout\n     */\n    // eslint-disable-next-line no-magic-numbers\n    columns?: 1 | 2 | 3 | 4 | 5;\n\n    /**\n     * Attempts to fill in holes earlier in the grid, if smaller items come up\n     * later. This may cause items to appear out-of-order, when doing so would\n     * fill holes left by larger items. Defaults to `true`.\n     */\n    dense?: boolean;\n}\n\n/**\n * @public\n */\nexport interface RowLayoutOptions\n    extends FormLayoutOptions<FormLayoutType.Row> {\n    /**\n     * When specified on a field, the chosen icon will be displayed\n     * on the left side of the row, beside the title.\n     */\n    icon?: string;\n}\n\n/**\n * @public\n */\nexport enum FormLayoutType {\n    /**\n     * The default layout\n     */\n    Default = 'default',\n\n    /**\n     * Render the form fields using a responsive grid layout\n     */\n    Grid = 'grid',\n\n    /**\n     * Render the form fields in full-width rows.\n     * Each row can have a leading `icon`, and a field.\n     * `title` and `description` provided by the schema will be placed\n     * on the row itself, and not on the field.\n     * This layout is good for creating UIs for user settings pages.\n     */\n    Row = 'row',\n}\n"],"mappings":"IAwQYA,GAAZ,SAAYA,GAIRA,EAAA,qBAKAA,EAAA,eASAA,EAAA,YACH,EAnBD,CAAYA,MAAc,Y"}