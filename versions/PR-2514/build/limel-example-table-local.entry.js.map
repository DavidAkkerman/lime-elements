{"version":3,"names":["ColumnAggregatorType","tableCss","TableExampleLocal","this","columns","pageSize","addUnit","unit","value","handleChangePage","event","currentPage","detail","handleSort","currentSorting","column","title","componentWillLoad","field","formatter","capitalize","aggregator","Average","horizontalAlign","render","h","data","onChangePage","onSort","label"],"sources":["./src/components/table/table.types.ts","./src/components/table/examples/table.scss?tag=limel-example-table-local&encapsulation=shadow","./src/components/table/examples/table-local.tsx"],"sourcesContent":["export interface Column<T extends object = any> {\n    /**\n     * Column title to be displayed\n     */\n    title: string;\n\n    /**\n     * Name of the field in the data\n     */\n    field: keyof T;\n\n    /**\n     * Function to format the value before rendering\n     */\n    formatter?: TableFormatter;\n\n    /**\n     * Component used to render the field value\n     */\n    component?: TableComponentDefinition;\n\n    /**\n     * Type of aggregator to use for the column\n     */\n    aggregator?: ColumnAggregatorType | ColumnAggregatorFunction<T>;\n\n    /**\n     * A component used to render inside the column header\n     */\n    headerComponent?: TableComponentDefinition;\n\n    /**\n     * Sets the horizontal text alignment for the column\n     */\n    horizontalAlign?: 'left' | 'center' | 'right';\n\n    /**\n     * Defines whether end-user can sort a column\n     */\n    headerSort?: boolean;\n}\n\nexport type TableFormatter = (value: any, data?: object) => string;\n\n/**\n * Definition for a component to be displayed in a cell in the table\n * @note The table will display the component as `inline-block` in order\n * to give the column the correct size. If the component should have the\n * full width of the column, this might have to be overridden by setting\n * the display mode to `block`, e.g.\n *\n * ```css\n * :host(*) {\n *     display: block !important;\n * }\n * ```\n */\nexport interface TableComponentDefinition {\n    /**\n     * Name of the component\n     */\n    name: string;\n\n    /**\n     * Properties to send to the component\n     */\n    props?: Record<string, any>;\n\n    /**\n     * Factory for creating properties dynamically for a custom component.\n     *\n     * The properties returned from this function will be merged with the\n     * `props` properties when the component is created.\n     *\n     * When the propsFactory is used for header components there will be no data available\n     * @param {*} data the data for the current row\n     * @returns {object} properties for the component\n     */\n    propsFactory?: (data: object) => Record<string, any>;\n}\n\nexport interface TableComponent<T extends object = any> {\n    /**\n     * Name of the field being rendered\n     */\n    field?: string;\n\n    /**\n     * Value being rendered\n     */\n    value?: any;\n\n    /**\n     * Data for the current row of the table\n     */\n    data?: T;\n}\n\nexport interface ColumnSorter {\n    /**\n     * The column being sorted\n     */\n    column: Column;\n\n    /**\n     * The direction to sort on\n     */\n    direction: 'ASC' | 'DESC';\n}\n\nexport interface TableParams {\n    /**\n     * The current page being set\n     */\n    page: number;\n\n    /**\n     * Sorters applied to the current page\n     */\n    sorters?: ColumnSorter[];\n}\n\nexport enum ColumnAggregatorType {\n    /**\n     * Calculates the average value of all numerical cells in the column\n     */\n    Average = 'avg',\n\n    /**\n     * Displays the maximum value from all numerical cells in the column\n     */\n    Maximum = 'max',\n\n    /**\n     * Displays the minimum value from all numerical cells in the column\n     */\n    Minimum = 'min',\n\n    /**\n     * Displays the sum of all numerical cells in the column\n     */\n    Sum = 'sum',\n\n    /**\n     * Counts the number of non empty cells in the column\n     */\n    Count = 'count',\n}\n\n/**\n * Calculate an aggregated value for a column\n * @param {Column} column the configuration for the column\n * @param {*[]} values list of all values to be aggregated\n * @param {T[]} data list of all objects to be aggregated\n * @returns {*} the aggregated data\n */\nexport type ColumnAggregatorFunction<T = object> = (\n    column?: Column,\n    values?: any[],\n    data?: T[]\n) => any;\n\n/**\n * Defines aggregate values for columns\n */\nexport interface ColumnAggregate {\n    /**\n     * The name of the `Column` field\n     */\n    field: string;\n    /**\n     * The aggregate value\n     */\n    value: any;\n}\n",":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n","import { Component, h, State } from '@stencil/core';\nimport { Column, ColumnSorter, ColumnAggregatorType } from '../table.types';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Local sorting and pagination\n * @link birds.ts\n */\n@Component({\n    tag: 'limel-example-table-local',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLocal {\n    private columns: Array<Column<Bird>> = [];\n\n    @State()\n    private currentPage: number = 1;\n\n    @State()\n    private currentSorting: string = 'None';\n\n    private pageSize = 10;\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                field: 'eggs',\n                aggregator: ColumnAggregatorType.Average,\n                horizontalAlign: 'right',\n            },\n            { title: 'Origin', field: 'origin' },\n        ];\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n\n    private handleChangePage = (event: CustomEvent<number>) => {\n        this.currentPage = event.detail;\n    };\n\n    private handleSort = (event: CustomEvent<ColumnSorter[]>) => {\n        this.currentSorting = event.detail[0].column.title;\n    };\n\n    public render() {\n        return [\n            <limel-table\n                data={data}\n                columns={this.columns}\n                pageSize={this.pageSize}\n                onChangePage={this.handleChangePage}\n                onSort={this.handleSort}\n            />,\n            <limel-example-value\n                label=\"Current page is\"\n                value={this.currentPage}\n            />,\n            <limel-example-value\n                label=\"Currently sorting on\"\n                value={this.currentSorting}\n            />,\n        ];\n    }\n}\n"],"mappings":"kWA0HA,IAAYA,GAAZ,SAAYA,GAIRA,EAAA,iBAKAA,EAAA,iBAKAA,EAAA,iBAKAA,EAAA,aAKAA,EAAA,gBACH,EAzBD,CAAYA,MAAoB,KC1HhC,MAAMC,EAAW,gD,MCcJC,EAAiB,M,yBAClBC,KAAAC,QAA+B,GAQ/BD,KAAAE,SAAW,GAsBXF,KAAAG,QAAWC,GAAkBC,GAC1B,GAAGA,KAASD,IAGfJ,KAAAM,iBAAoBC,IACxBP,KAAKQ,YAAcD,EAAME,MAAM,EAG3BT,KAAAU,WAAcH,IAClBP,KAAKW,eAAiBJ,EAAME,OAAO,GAAGG,OAAOC,KAAK,E,iBApCxB,E,oBAGG,M,CAI1BC,oBACHd,KAAKC,QAAU,CACX,CAAEY,MAAO,OAAQE,MAAO,QACxB,CAAEF,MAAO,iBAAkBE,MAAO,iBAClC,CACIF,MAAO,WACPE,MAAO,WACPC,UAAWhB,KAAKG,QAAQ,OAE5B,CAAEU,MAAO,YAAaE,MAAO,OAAQC,UAAWC,GAChD,CACIJ,MAAO,kBACPE,MAAO,OACPG,WAAYrB,EAAqBsB,QACjCC,gBAAiB,SAErB,CAAEP,MAAO,SAAUE,MAAO,U,CAgB3BM,SACH,MAAO,CACHC,EAAA,eACIC,KAAMA,EACNtB,QAASD,KAAKC,QACdC,SAAUF,KAAKE,SACfsB,aAAcxB,KAAKM,iBACnBmB,OAAQzB,KAAKU,aAEjBY,EAAA,uBACII,MAAM,kBACNrB,MAAOL,KAAKQ,cAEhBc,EAAA,uBACII,MAAM,uBACNrB,MAAOL,KAAKW,iB"}