{"version":3,"names":["createFileInfo","file","limeFile","id","createRandomString","filename","name","contentType","type","size","fileContent","Object","assign","icon","getFileIcon","title","getFileExtensionTitle","color","getFileColor","backgroundColor","getFileBackgroundColor","isTypeAccepted","accept","undefined","acceptList","split","map","raw","trim","some","acceptedType","endsWith","baseType","startsWith","fileType"],"sources":["./src/util/files.ts"],"sourcesContent":["import { FileInfo } from '../global/shared-types/file.types';\nimport { createRandomString } from './random-string';\nimport {\n    getFileBackgroundColor,\n    getFileColor,\n    getFileExtensionTitle,\n    getFileIcon,\n} from './file-metadata';\n\nexport function createFileInfo(file: File): FileInfo {\n    let limeFile: FileInfo = {\n        id: createRandomString(),\n        filename: file.name,\n        contentType: file.type,\n        size: file.size,\n        fileContent: file,\n    };\n    limeFile = {\n        ...limeFile,\n        icon: {\n            name: getFileIcon(limeFile),\n            title: getFileExtensionTitle(limeFile),\n            color: getFileColor(limeFile),\n            backgroundColor: getFileBackgroundColor(limeFile),\n        },\n    };\n\n    return limeFile;\n}\n\nexport function isTypeAccepted(file: FileInfo, accept: string): boolean {\n    if (accept === undefined || accept === '*') {\n        return true;\n    }\n\n    const acceptList = accept.split(',').map((raw) => raw.trim());\n\n    return acceptList.some((acceptedType: string) => {\n        if (acceptedType === file.contentType) {\n            return true;\n        }\n\n        if (acceptedType.endsWith('/*')) {\n            const baseType = acceptedType.split('/')[0];\n\n            return file.contentType.startsWith(`${baseType}/`);\n        }\n\n        if (acceptedType.startsWith('.')) {\n            const fileType = acceptedType.split('.')[1];\n\n            return file.contentType.endsWith(`/${fileType}`);\n        }\n    });\n}\n"],"mappings":"8HASgBA,EAAeC,GAC3B,IAAIC,EAAqB,CACrBC,GAAIC,IACJC,SAAUJ,EAAKK,KACfC,YAAaN,EAAKO,KAClBC,KAAMR,EAAKQ,KACXC,YAAaT,GAEjBC,EAAQS,OAAAC,OAAAD,OAAAC,OAAA,GACDV,GAAQ,CACXW,KAAM,CACFP,KAAMQ,EAAYZ,GAClBa,MAAOC,EAAsBd,GAC7Be,MAAOC,EAAahB,GACpBiB,gBAAiBC,EAAuBlB,MAIhD,OAAOA,CACX,C,SAEgBmB,EAAepB,EAAgBqB,GAC3C,GAAIA,IAAWC,WAAaD,IAAW,IAAK,CACxC,OAAO,I,CAGX,MAAME,EAAaF,EAAOG,MAAM,KAAKC,KAAKC,GAAQA,EAAIC,SAEtD,OAAOJ,EAAWK,MAAMC,IACpB,GAAIA,IAAiB7B,EAAKM,YAAa,CACnC,OAAO,I,CAGX,GAAIuB,EAAaC,SAAS,MAAO,CAC7B,MAAMC,EAAWF,EAAaL,MAAM,KAAK,GAEzC,OAAOxB,EAAKM,YAAY0B,WAAW,GAAGD,K,CAG1C,GAAIF,EAAaG,WAAW,KAAM,CAC9B,MAAMC,EAAWJ,EAAaL,MAAM,KAAK,GAEzC,OAAOxB,EAAKM,YAAYwB,SAAS,IAAIG,I,IAGjD,Q"}