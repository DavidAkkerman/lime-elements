{"version":3,"names":["fileDropzoneCss","FileDropzone","this","renderOnDragLayout","hasFileToDrop","h","class","name","onDropLayoutIcon","renderOnDragLayoutText","onDragLayoutText","length","handleDrop","event","stopPropagation","preventDefault","disabled","files","Array","from","dataTransfer","fileInfos","map","createFileInfo","acceptedFileInfos","filter","file","isTypeAccepted","accept","rejectedFileInfos","filesSelected","emit","filesRejected","handleDragOver","handleDragLeave","render","Host","onDrop","onDragOver","onDragLeave"],"sources":["./src/components/file-dropzone/file-dropzone.scss?tag=limel-file-dropzone&encapsulation=shadow","./src/components/file-dropzone/file-dropzone.tsx"],"sourcesContent":["\n:host(limel-file-dropzone){\n    position: relative;\n    display: grid;;\n    position: relative;\n    height: 100%;\n    width: 100%;\n}\n\n.has-file-to-drop{\n   position: absolute;\n   top: 0;\n   left: 0;\n   overflow: hidden;\n   display: flex;\n   flex-direction: column;\n   justify-content: center;\n   align-items: center;\n   width: 100%;\n   height: 100%;\n   box-sizing: border-box;\n \n   border: 0.25rem dashed rgb(var(--color-gray-light));\n   border-radius: 1rem;\n   background-color: rgb(var(--color-gray-dark));\n            \n    \n   opacity: 0.9;\n   margin: 0.125rem;\n   isolation: isolate;\n   z-index: 1;\n            \n   limel-icon.dropzone-icon {\n        height: clamp(2rem, 4vh, 6rem);\n        width: clamp(2rem, 4vh, 6rem);\n        color: rgb(var(--contrast-800));\n   }\n            \n   .dropzone-text{\n        font-size: clamp(1rem, 2vh, 1.75rem);\n        padding-top: 1rem;\n        color: rgb(var(--contrast-800));\n    }\n}\n","import {\n    Component,\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo, isTypeAccepted } from '../../util/files';\n\n/**\n * This component enables you to seamlessly convert any region of the user interface into\n * a file dropzone area, just by wrapping it inside the `limel-file-dropzone`.\n *\n * The file dropzone can then be used to allow end-users to upload files\n * by dragging and dropping them into the specified area.\n *\n * After receiving the files, the component emits a `newFiles` event.\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-dropzone\n * @exampleComponent limel-example-file-dropzone-type-filtering\n */\n@Component({\n    tag: 'limel-file-dropzone',\n    shadow: true,\n    styleUrl: 'file-dropzone.scss',\n})\nexport class FileDropzone {\n    /**\n     * Used to specify the types of files that the dropzone will accept.\n     * By default, it accepts all file types (`*`).\n     * For media files, it is possible to specify any format, using:\n     * `audio/*`, `video/*`, `image/*`.\n     * Additionally, you can use unique file type specifiers, such as:\n     * `.jpg`, or `.pdf`; or use a comma-separated list of file extensions or MIME types,\n     * for instance: `image/png, image/jpeg` or `.png, .jpg, .jpeg`.\n     *\n     * Read more about\n     * [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept)\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable the file dropzone.\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Text to be displayed when the user is dragging a file over the dropzone.\n     */\n    @Prop()\n    public onDragLayoutText: string = '';\n\n    /**\n     * Icon to be displayed when the user is dragging a file over the dropzone.\n     */\n    @Prop()\n    public onDropLayoutIcon: string = 'upload_2';\n\n    /**\n     * Sets to true when there is a file to drop\n     */\n    @State()\n    private hasFileToDrop: boolean = false;\n\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    @Event()\n    filesRejected: EventEmitter<FileInfo[]>;\n\n    public render() {\n        return (\n            <Host\n                onDrop={this.handleDrop}\n                onDragOver={this.handleDragOver}\n                onDragLeave={this.handleDragLeave}\n            >\n                <slot />\n                {this.renderOnDragLayout()}\n            </Host>\n        );\n    }\n\n    private renderOnDragLayout = () => {\n        if (this.hasFileToDrop) {\n            return (\n                <div class=\"has-file-to-drop\">\n                    <limel-icon\n                        class=\"dropzone-icon\"\n                        name={this.onDropLayoutIcon}\n                    ></limel-icon>\n                    {this.renderOnDragLayoutText()}\n                </div>\n            );\n        }\n    };\n\n    private renderOnDragLayoutText = () => {\n        if (this.onDragLayoutText.length === 0) {\n            return;\n        }\n\n        return <span class=\"dropzone-text\">{this.onDragLayoutText}</span>;\n    };\n\n    private handleDrop = (event: DragEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.hasFileToDrop = false;\n\n        if (this.disabled) {\n            return;\n        }\n\n        const files: File[] = Array.from(event.dataTransfer.files);\n        const fileInfos: FileInfo[] = files.map(createFileInfo);\n\n        const acceptedFileInfos: FileInfo[] = fileInfos.filter((file) =>\n            isTypeAccepted(file, this.accept),\n        );\n        const rejectedFileInfos: FileInfo[] = fileInfos.filter(\n            (file) => !isTypeAccepted(file, this.accept),\n        );\n\n        if (acceptedFileInfos.length > 0) {\n            this.filesSelected.emit(acceptedFileInfos);\n        }\n\n        if (rejectedFileInfos.length > 0) {\n            this.filesRejected.emit(rejectedFileInfos);\n        }\n    };\n\n    private handleDragOver = (event: DragEvent) => {\n        this.hasFileToDrop = true;\n        event.preventDefault();\n    };\n\n    private handleDragLeave = (event: DragEvent) => {\n        this.hasFileToDrop = false;\n        event.preventDefault();\n    };\n}\n"],"mappings":"yNAAA,MAAMA,EAAkB,ssB,MC+BXC,EAAY,M,mHA2DbC,KAAAC,mBAAqB,KACzB,GAAID,KAAKE,cAAe,CACpB,OACIC,EAAA,OAAKC,MAAM,oBACPD,EAAA,cACIC,MAAM,gBACNC,KAAML,KAAKM,mBAEdN,KAAKO,yB,GAMdP,KAAAO,uBAAyB,KAC7B,GAAIP,KAAKQ,iBAAiBC,SAAW,EAAG,CACpC,M,CAGJ,OAAON,EAAA,QAAMC,MAAM,iBAAiBJ,KAAKQ,iBAAwB,EAG7DR,KAAAU,WAAcC,IAClBA,EAAMC,kBACND,EAAME,iBACNb,KAAKE,cAAgB,MAErB,GAAIF,KAAKc,SAAU,CACf,M,CAGJ,MAAMC,EAAgBC,MAAMC,KAAKN,EAAMO,aAAaH,OACpD,MAAMI,EAAwBJ,EAAMK,IAAIC,GAExC,MAAMC,EAAgCH,EAAUI,QAAQC,GACpDC,EAAeD,EAAMxB,KAAK0B,UAE9B,MAAMC,EAAgCR,EAAUI,QAC3CC,IAAUC,EAAeD,EAAMxB,KAAK0B,UAGzC,GAAIJ,EAAkBb,OAAS,EAAG,CAC9BT,KAAK4B,cAAcC,KAAKP,E,CAG5B,GAAIK,EAAkBlB,OAAS,EAAG,CAC9BT,KAAK8B,cAAcD,KAAKF,E,GAIxB3B,KAAA+B,eAAkBpB,IACtBX,KAAKE,cAAgB,KACrBS,EAAME,gBAAgB,EAGlBb,KAAAgC,gBAAmBrB,IACvBX,KAAKE,cAAgB,MACrBS,EAAME,gBAAgB,E,YAtGF,I,cAMG,M,sBAMO,G,sBAMA,W,mBAMD,K,CAQ1BoB,SACH,OACI9B,EAAC+B,EAAI,CACDC,OAAQnC,KAAKU,WACb0B,WAAYpC,KAAK+B,eACjBM,YAAarC,KAAKgC,iBAElB7B,EAAA,aACCH,KAAKC,qB"}