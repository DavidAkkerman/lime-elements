{"version":3,"names":["FormLayoutType","ColumnAggregatorType"],"sources":["./src/components/form/form.types.ts","./src/components/table/table.types.ts"],"sourcesContent":["import { JSONSchema7 } from 'json-schema';\nimport { Help } from '../help/help.types';\nimport { EventEmitter } from '@stencil/core';\n\n/**\n * @public\n */\nexport interface ValidationStatus {\n    /**\n     * True if the form is valid, false otherwise\n     *\n     * If the form is invalid, any errors can be found on the `errors` property\n     */\n    valid: boolean;\n\n    /**\n     * List of validation errors\n     */\n    errors?: FormError[];\n}\n\n/**\n * @public\n */\nexport interface FormError {\n    /**\n     * Name of the error\n     */\n    name: string;\n\n    /**\n     * Params of the error\n     */\n    params?: unknown;\n\n    /**\n     * Name of the invalid property\n     */\n    property: string;\n\n    /**\n     * Path to the property within the schema\n     */\n    schemaPath: string;\n\n    /**\n     * String describing the error\n     */\n    message: string;\n}\n\n/**\n * @public\n */\nexport type ValidationError = {\n    /**\n     * Name of the field the error belongs to\n     */\n    [key: string]: string[] | ValidationError;\n};\n\n/**\n * @public\n */\nexport interface FormComponent<T = any> {\n    /**\n     * The value of the current property\n     */\n    value: T;\n\n    /**\n     * Whether or not the current property is required\n     */\n    required?: boolean;\n\n    /**\n     * Whether or not the current property is readonly\n     */\n    readonly?: boolean;\n\n    /**\n     * Whether or not the current property is disabled\n     */\n    disabled?: boolean;\n\n    /**\n     * The label of the current property\n     */\n    label?: string;\n\n    /**\n     * The helper text for the current property\n     */\n    helperText?: string;\n\n    /**\n     * Additional contextual information about the form\n     */\n    formInfo?: FormInfo;\n\n    /**\n     * The event to emit when the value of the current property has changed\n     */\n    change: EventEmitter<T>;\n}\n\n/**\n * @public\n */\nexport interface FormInfo {\n    /**\n     * The schema of the current property\n     */\n    schema?: LimeJSONSchema;\n\n    /**\n     * The schema of the whole form\n     */\n    rootSchema?: LimeJSONSchema;\n\n    /**\n     * A tree of errors for this property and its children\n     */\n    errorSchema?: object;\n\n    /**\n     * The value of the whole form\n     */\n    rootValue?: any;\n\n    /**\n     * The name of the current property\n     */\n    name?: string;\n\n    /**\n     * Path to the property within the schema\n     */\n    schemaPath?: string[];\n}\n\n/**\n * Lime elements specific options that can be specified under the `lime` key in\n * a schema, e.g.\n *\n * ```ts\n * const schema = {\n *     type: 'object',\n *     lime: {\n *         collapsible: true,\n *     },\n * };\n * ```\n *\n * @public\n */\nexport interface LimeSchemaOptions {\n    /**\n     * When specified on an object it will render all sub components inside a\n     * collapsible section\n     */\n    collapsible?: boolean;\n\n    /**\n     * When `collapsible` is `true`, set this to `false` to make the\n     * collapsible section load in the open state.\n     * Defaults to `true`.\n     */\n    collapsed?: boolean;\n\n    /**\n     * Will render the field using the specified component. The component\n     * should implement the `FormComponent` interface\n     */\n    component?: FormComponentOptions;\n\n    /**\n     * When specified on an object it will render the sub components with the\n     * specified layout\n     */\n    layout?: LimeLayoutOptions;\n\n    /**\n     * Mark the field as disabled\n     */\n    disabled?: boolean;\n\n    help?: string | Partial<Help>;\n}\n\nexport type LimeLayoutOptions = GridLayoutOptions & RowLayoutOptions;\n\n/**\n * Options for a component to be rendered inside a form\n *\n * @public\n */\nexport interface FormComponentOptions {\n    /**\n     * Name of the component\n     */\n    name?: string;\n\n    /**\n     * Extra properties to give the component in addition to the properties\n     * specified on the `FormComponent` interface\n     */\n    props?: Record<string, any>;\n}\n\n/**\n * @public\n */\nexport interface FormLayoutOptions<\n    T extends FormLayoutType | `${FormLayoutType}` = FormLayoutType.Default,\n> {\n    /**\n     * The type of layout to use\n     */\n    type?: T;\n}\n\n/**\n * @public\n */\nexport interface GridLayoutOptions\n    extends FormLayoutOptions<FormLayoutType | `${FormLayoutType}`> {\n    /**\n     * When specified on a component within the grid, the component will take\n     * up the the specified number of columns in the form\n     */\n    // eslint-disable-next-line no-magic-numbers\n    colSpan?: 1 | 2 | 3 | 4 | 5 | 'all';\n\n    /**\n     * When specified on a component within the grid, the component will take\n     * up the the specified number of rows in the form\n     */\n    rowSpan?: number;\n\n    /**\n     * Number of columns to use in the layout\n     */\n    // eslint-disable-next-line no-magic-numbers\n    columns?: 1 | 2 | 3 | 4 | 5;\n\n    /**\n     * Attempts to fill in holes earlier in the grid, if smaller items come up\n     * later. This may cause items to appear out-of-order, when doing so would\n     * fill holes left by larger items. Defaults to `true`.\n     */\n    dense?: boolean;\n}\n\n/**\n * @public\n */\nexport interface RowLayoutOptions\n    extends FormLayoutOptions<FormLayoutType | `${FormLayoutType}`> {\n    /**\n     * When specified on a field, the chosen icon will be displayed\n     * on the left side of the row, beside the title.\n     */\n    icon?: string;\n}\n\n/**\n * @public\n * Represents the layout types for a form.\n */\nexport enum FormLayoutType {\n    /**\n     * The default layout\n     */\n    Default = 'default',\n\n    /**\n     * Render the form fields using a responsive grid layout\n     */\n    Grid = 'grid',\n\n    /**\n     * Render the form fields in full-width rows.\n     * Each row can have a leading `icon`, and a field.\n     * `title` and `description` provided by the schema will be placed\n     * on the row itself, and not on the field.\n     * This layout is good for creating UIs for user settings pages.\n     */\n    Row = 'row',\n}\n\n/**\n * @public\n * Represents the JSON schema with Lime specific options\n */\nexport interface LimeJSONSchema extends JSONSchema7 {\n    lime?: LimeSchemaOptions;\n    properties?: {\n        [key: string]: LimeJSONSchema | boolean;\n    };\n}\n","/**\n * Defines the data for a table\n * @public\n */\nexport interface Column<T extends object = any> {\n    /**\n     * Column title to be displayed\n     */\n    title: string;\n\n    /**\n     * Name of the field in the data\n     */\n    field: keyof T;\n\n    /**\n     * Function to format the value before rendering\n     */\n    formatter?: TableFormatter;\n\n    /**\n     * Component used to render the field value\n     */\n    component?: TableComponentDefinition;\n\n    /**\n     * Type of aggregator to use for the column\n     */\n    aggregator?: ColumnAggregatorType | ColumnAggregatorFunction<T>;\n\n    /**\n     * A component used to render inside the column header\n     */\n    headerComponent?: TableComponentDefinition;\n\n    /**\n     * Sets the horizontal text alignment for the column\n     */\n    horizontalAlign?: 'left' | 'center' | 'right';\n\n    /**\n     * Defines whether end-user can sort a column\n     */\n    headerSort?: boolean;\n}\n\n/**\n * Definition for a formatter function\n * @param value - The value to be formatted\n * @param data - The data for the current row\n * @returns The formatted value\n * @public\n */\nexport type TableFormatter = (value: any, data?: object) => string;\n\n/**\n * The `component` key in the schema uses this interface to define a\n * component to be rendered inside a cell in the table.\n *\n * @note The table will display the component as `inline-block` in order\n * to give the column the correct size. If the component should have the\n * full width of the column, this might have to be overridden by setting\n * the display mode to `block`, e.g.\n *\n * ```css\n * :host(*) {\n *     display: block !important;\n * }\n * ```\n * @public\n */\nexport interface TableComponentDefinition {\n    /**\n     * Name of the component\n     */\n    name: string;\n\n    /**\n     * Properties to send to the component\n     */\n    props?: Record<string, any>;\n\n    /**\n     * Factory for creating properties dynamically for a custom component.\n     *\n     * The properties returned from this function will be merged with the\n     * `props` properties when the component is created.\n     *\n     * When the propsFactory is used for header components there will be no data available.\n     *\n     * @param data - The data for the current row\n     * @returns Properties for the component\n     */\n    propsFactory?: (data: object) => Record<string, any>;\n}\n\n/**\n * Interface for custom components rendered inside a `limel-table`.\n * @public\n */\nexport interface TableComponent<T extends object = any> {\n    /**\n     * Name of the field being rendered\n     */\n    field?: string;\n\n    /**\n     * Value being rendered\n     */\n    value?: any;\n\n    /**\n     * Data for the current row of the table\n     */\n    data?: T;\n}\n\n/**\n * Indicates whether the specified column is sorted ascending or descending.\n * @public\n */\nexport interface ColumnSorter {\n    /**\n     * The column being sorted\n     */\n    column: Column;\n\n    /**\n     * The direction to sort on\n     */\n    direction: 'ASC' | 'DESC';\n}\n\n/**\n * Specifies the current page, and which columns the table is currently sorted on.\n * @public\n */\nexport interface TableParams {\n    /**\n     * The current page being set\n     */\n    page: number;\n\n    /**\n     * Sorters applied to the current page\n     */\n    sorters?: ColumnSorter[];\n}\n\n/**\n * The built-in aggregators available for columns\n * @public\n */\nexport enum ColumnAggregatorType {\n    /**\n     * Calculates the average value of all numerical cells in the column\n     */\n    Average = 'avg',\n\n    /**\n     * Displays the maximum value from all numerical cells in the column\n     */\n    Maximum = 'max',\n\n    /**\n     * Displays the minimum value from all numerical cells in the column\n     */\n    Minimum = 'min',\n\n    /**\n     * Displays the sum of all numerical cells in the column\n     */\n    Sum = 'sum',\n\n    /**\n     * Counts the number of non empty cells in the column\n     */\n    Count = 'count',\n}\n\n/**\n * Instead of using one of the built-in aggregators, it is possible to\n * define a custom aggregator function.\n *\n * @param column - the configuration for the column\n * @param values - list of all values to be aggregated\n * @param data - list of all objects to be aggregated\n * @returns the aggregated data\n *\n * @public\n */\nexport type ColumnAggregatorFunction<T = object> = (\n    column?: Column,\n    values?: any[],\n    data?: T[],\n) => any;\n\n/**\n * Defines aggregate values for columns\n * @public\n */\nexport interface ColumnAggregate {\n    /**\n     * The name of the `Column` field\n     */\n    field: string;\n    /**\n     * The aggregate value\n     */\n    value: any;\n}\n"],"mappings":"IA8QYA,GAAZ,SAAYA,GAIRA,EAAA,qBAKAA,EAAA,eASAA,EAAA,YACH,EAnBD,CAAYA,MAAc,K,ICrHdC,GAAZ,SAAYA,GAIRA,EAAA,iBAKAA,EAAA,iBAKAA,EAAA,iBAKAA,EAAA,aAKAA,EAAA,gBACH,EAzBD,CAAYA,MAAoB,Y"}