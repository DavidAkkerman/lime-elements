{"version":3,"names":["EditorPlugin","constructor","props","name","this","key","undefined","PluginKey","getPluginKey","getName","getProps","LimeObjectSelectorPlugin","super","ProsemirrorAdapterSearcherPluginExample","exclamationItems","text","value","atItems","handleChange","event","stopPropagation","detail","handleSearcherChange","componentWillLoad","trigger","searcher","getSearcher","onChange","plugin","render","h","plugins","items","query","Promise","resolve","filteredItems","filter","item","toLowerCase","includes"],"sources":["./src/components/text-editor/prosemirror-adapter/plugins/editor-plugin.ts","./src/components/text-editor/prosemirror-adapter/plugins/limeobject-selector/types.ts","./src/components/text-editor/prosemirror-adapter/examples/prosemirror-adapter-with-searcher-plugin.tsx"],"sourcesContent":["import { PluginKey } from 'prosemirror-state';\n\nexport class EditorPlugin<T = any> {\n    private key: PluginKey = undefined;\n\n    constructor(\n        private props: T,\n        private name: string,\n    ) {\n        this.key = new PluginKey(name);\n    }\n\n    public getPluginKey(): PluginKey {\n        return this.key;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public getProps(): T {\n        return this.props;\n    }\n}\n","import { Searcher } from 'src/components/picker/searcher.types';\nimport { EditorPlugin } from '../editor-plugin';\n\nexport class LimeObjectSelectorPlugin extends EditorPlugin<LimeObjectSelectorPluginProps> {\n    constructor(props: LimeObjectSelectorPluginProps) {\n        super(props, 'limeobjectSelector');\n    }\n}\n\nexport interface LimeObjectSelectorPluginProps {\n    trigger: LimeObjectSelectorPluginTrigger;\n    onChange: (value: string) => void;\n    searcher: (trigger: LimeObjectSelectorPluginTrigger) => Searcher;\n}\n\nexport interface LimeObjectSelectorPluginState {\n    query: string;\n}\n\nexport type LimeObjectSelectorPluginTrigger = '!' | '@';\n","import { LimelProsemirrorAdapterCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport {\n    LimeObjectSelectorPlugin,\n    LimeObjectSelectorPluginProps,\n    LimeObjectSelectorPluginTrigger,\n} from '../plugins/limeobject-selector/types';\nimport { ListItem } from 'src/components/list/list-item.types';\n/**\n * Searcher example\n *\n * Try typing an exclamation mark\n */\n@Component({\n    tag: 'limel-example-prosemirror-adapter-with-searcher-plugin',\n    shadow: true,\n})\nexport class ProsemirrorAdapterSearcherPluginExample {\n    @State()\n    private text: string = '';\n\n    private plugin: LimeObjectSelectorPlugin;\n    private exclamationItems: Array<ListItem<string>> = [\n        { text: 'Google', value: 'https://www.google.com' },\n    ];\n    private atItems: Array<ListItem<string>> = [\n        { text: 'Facebook', value: 'https://www.facebook.com' },\n    ];\n\n    public componentWillLoad() {\n        const props: LimeObjectSelectorPluginProps = {\n            trigger: '!',\n            searcher: (trigger: LimeObjectSelectorPluginTrigger) => {\n                if (trigger === '!') {\n                    return this.getSearcher(this.exclamationItems);\n                } else if (trigger === '@') {\n                    return this.getSearcher(this.atItems);\n                }\n            },\n            onChange: this.handleSearcherChange,\n        };\n\n        this.plugin = new LimeObjectSelectorPlugin(props);\n    }\n\n    public render() {\n        return [\n            <limel-prosemirror-adapter\n                onChange={this.handleChange}\n                plugins={[this.plugin]}\n            />,\n            <limel-example-value value={this.text} />,\n        ];\n    }\n\n    private getSearcher(items: Array<ListItem<string>>) {\n        return (query: string): Promise<Array<ListItem<string>>> => {\n            return new Promise((resolve) => {\n                if (query === '') {\n                    return resolve(items);\n                }\n\n                const filteredItems = items.filter((item) => {\n                    return item.text\n                        .toLowerCase()\n                        .includes(query.toLowerCase());\n                });\n\n                return resolve(filteredItems);\n            });\n        };\n    }\n\n    private handleChange = (\n        event: LimelProsemirrorAdapterCustomEvent<string>,\n    ): void => {\n        event.stopPropagation();\n\n        this.text = event.detail;\n    };\n\n    private handleSearcherChange = (value: string): void => {\n        event.stopPropagation();\n\n        this.text = value;\n    };\n}\n"],"mappings":"6FAEaA,EAGTC,YACYC,EACAC,GADAC,KAAAF,QACAE,KAAAD,OAJJC,KAAAC,IAAiBC,UAMrBF,KAAKC,IAAM,IAAIE,EAAUJ,E,CAGtBK,eACH,OAAOJ,KAAKC,G,CAGTI,UACH,OAAOL,KAAKD,I,CAGTO,WACH,OAAON,KAAKF,K,QClBPS,UAAiCX,EAC1CC,YAAYC,GACRU,MAAMV,EAAO,qB,QCYRW,EAAuC,M,yBAKxCT,KAAAU,iBAA4C,CAChD,CAAEC,KAAM,SAAUC,MAAO,2BAErBZ,KAAAa,QAAmC,CACvC,CAAEF,KAAM,WAAYC,MAAO,6BA+CvBZ,KAAAc,aACJC,IAEAA,EAAMC,kBAENhB,KAAKW,KAAOI,EAAME,MAAM,EAGpBjB,KAAAkB,qBAAwBN,IAC5BG,MAAMC,kBAENhB,KAAKW,KAAOC,CAAK,E,UAjEE,E,CAUhBO,oBACH,MAAMrB,EAAuC,CACzCsB,QAAS,IACTC,SAAWD,IACP,GAAIA,IAAY,IAAK,CACjB,OAAOpB,KAAKsB,YAAYtB,KAAKU,iB,MAC1B,GAAIU,IAAY,IAAK,CACxB,OAAOpB,KAAKsB,YAAYtB,KAAKa,Q,GAGrCU,SAAUvB,KAAKkB,sBAGnBlB,KAAKwB,OAAS,IAAIjB,EAAyBT,E,CAGxC2B,SACH,MAAO,CACHC,EAAA,6BACIH,SAAUvB,KAAKc,aACfa,QAAS,CAAC3B,KAAKwB,UAEnBE,EAAA,uBAAqBd,MAAOZ,KAAKW,O,CAIjCW,YAAYM,GAChB,OAAQC,GACG,IAAIC,SAASC,IAChB,GAAIF,IAAU,GAAI,CACd,OAAOE,EAAQH,E,CAGnB,MAAMI,EAAgBJ,EAAMK,QAAQC,GACzBA,EAAKvB,KACPwB,cACAC,SAASP,EAAMM,iBAGxB,OAAOJ,EAAQC,EAAc,G"}