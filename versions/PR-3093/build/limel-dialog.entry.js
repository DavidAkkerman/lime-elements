import{r as e,c as n,h as t,g as o}from"./index-6156b4fd.js";import{c as a}from"./random-string-812b1c35.js";const i="@charset \"UTF-8\";\n/**\n * Note! This file is exported to `dist/scss/` in the published\n * node module, for consumer projects to import.\n * That means this file cannot import from any file that isn't\n * also exported, keeping the same relative path.\n *\n * Or, just don't import anything, that works too.\n */\n/**\n* This can be used on a trigger element that opens a dropdown menu or a popover.\n*/\n/**\n * This mixin will mask out the content that is close to\n * the edges of a scrollable area.\n * - If the scrollable content has `overflow-y`, use `vertically`\n * as an argument for `$direction`.\n - If the scrollable content has `overflow-x`, use `horizontally`\n * as an argument for `$direction`.\n *\n * For the visual effect to work smoothly, we need to make sure that\n * the size of the fade-out edge effect is the same as the\n * internal paddings of the scrollable area. Otherwise, content of a\n * scrollable area that does not have a padding will fade out before\n * any scrolling has been done.\n * This is why this mixin already adds paddings, which automatically\n * default to the size of the fade-out effect.\n * This size defaults to `1rem`, but to override the size use\n * `--limel-top-edge-fade-height` & `--limel-bottom-edge-fade-height`\n * when `vertically` argument is set, and use\n * `--limel-left-edge-fade-width` & `--limel-right-edge-fade-width`\n * when `horizontally` argument is set.\n * Of course you can also programmatically increase and decrease the\n * size of these variables for each edge, based on the amount of\n * scrolling that has been done by the user. In this case, make sure\n * to add a custom padding where the mixin is used, to override\n * the paddings that are automatically added by the mixin in the\n * compiled CSS code.\n */\n/**\n* This mixin will add an animated underline to the bottom of an `a` elements.\n* Note that you may need to add `all: unset;` –depending on your use case–\n* before using this mixin.\n*/\n/**\n* This mixin creates a cross-browser font stack.\n* - `sans-serif` can be used for the UI of the components.\n* - `monospace` can be used for code.\n*\n* ⚠️ If we change the font stacks, we need to update\n* 1. the consumer documentation in `README.md`, and\n* 2. the CSS variables of `--kompendium-example-font-family`\n* in the `<style>` tag of `index.html`.\n*/\n/**\n * @prop --dialog-width: Width of the dialog.\n * @prop --dialog-max-width: Max width of the dialog.\n * @prop --dialog-height: Height of the dialog.\n * @prop --dialog-max-height: Max height of the dialog.\n * @prop --dialog-padding-top-bottom: Padding on top and bottom of dialog content. Affects the height of fade-out effects on top and bottom edges when the content is scrollable and has overflowed out of the content area. Defaults to `1.5rem`. Note that if you use this variable and set it to numbers smaller than 1rem, you will loose the fade-out effects on the edges. If you have set these paddings to `0`, losing the fade out effects should be however fine for your use case! Because in such a case your intention is to handle the `overflow` internally in the component that is displayed in the dialog's content.\n * @prop --dialog-padding-left-right: Padding on the sides of dialog content. Defaults to `1.25rem`.\n * @prop --dialog-heading-title-color: Color of the title.\n * @prop --dialog-heading-subtitle-color: Color of the subtitle.\n * @prop --dialog-heading-supporting-text-color: Color of the supporting text.\n * @prop --dialog-heading-icon-color: Color of the icon.\n * @prop --dialog-heading-icon-background-color: Background color of the icon when displayed as a badge.\n */\n:host(limel-dialog) {\n  --limel-dialog-border-radius: 0.75rem;\n  --header-heading-color: var(--dialog-heading-title-color);\n  --header-subheading-color: var(--dialog-heading-subtitle-color);\n  --header-supporting-text-color: var(--dialog-heading-supporting-text-color);\n  --header-icon-color: var(--dialog-heading-icon-color);\n  --header-icon-background-color: var(--dialog-heading-icon-background-color);\n}\n\n* {\n  box-sizing: border-box;\n}\n\ndialog {\n  border: none;\n  padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);\n  border-radius: var(--limel-dialog-border-radius);\n  width: var(--dialog-width, fit-content);\n  height: var(--dialog-height, fit-content);\n  max-width: var(--dialog-max-width, calc(100vw - 1rem));\n  max-height: var(--dialog-max-height, calc(100% - 1rem));\n  background-color: transparent;\n  box-shadow: var(--shadow-depth-8), var(--shadow-depth-64);\n}\ndialog.fullscreen {\n  --dialog-width: 100%;\n  --dialog-height: 100%;\n  width: 100%;\n  height: 100%;\n}\n\n.surface {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  border-radius: var(--limel-dialog-border-radius);\n  background-color: var(--lime-elevated-surface-background-color);\n}\n\n.content {\n  flex-grow: 1;\n  overflow-y: auto;\n  --limel-top-edge-fade-height: var(--dialog-padding-top-bottom, 1.5rem);\n  --limel-bottom-edge-fade-height: var(--dialog-padding-top-bottom, 1.5rem);\n  --limel-overflow-mask-vertical: linear-gradient(\n      to bottom,\n      transparent 0%,\n      black calc(0% + var(--limel-top-edge-fade-height, 1rem)),\n      black calc(100% - var(--limel-bottom-edge-fade-height, 1rem)),\n      transparent 100%\n  );\n  -webkit-mask-image: var(--limel-overflow-mask-vertical);\n  mask-image: var(--limel-overflow-mask-vertical);\n  padding-top: var(--limel-top-edge-fade-height, 1rem);\n  padding-bottom: var(--limel-bottom-edge-fade-height, 1rem);\n  color: var(--mdc-theme-on-surface);\n  padding-left: var(--dialog-padding-left-right, min(1.25rem, 3vw));\n  padding-right: var(--dialog-padding-left-right, min(1.25rem, 3vw));\n}\n\nlimel-header,\n.actions {\n  flex-shrink: 0;\n}\n\n.actions {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  min-height: 52px;\n  margin: 0px;\n  padding: 8px;\n  border-top: 1px solid transparent;\n}\n\nslot[name=header] {\n  display: none;\n}\n\nslot[name=button] {\n  display: flex;\n  gap: 0.5rem;\n  width: 100%;\n  justify-content: flex-end;\n}\n\n@media screen and (max-width: 760px) {\n  slot[name=button] {\n    flex-direction: column-reverse;\n  }\n  .mdc-dialog__actions {\n    padding: min(1.5rem, 3vw);\n    padding-top: 1rem;\n  }\n}\ndialog {\n  --limel-dialog-display-speed: 0.2s;\n  transition: opacity 0.2s ease, display var(--limel-dialog-display-speed) ease, transform var(--limel-dialog-display-speed) ease;\n  transition-behavior: allow-discrete;\n  opacity: 0;\n  transform: translate3d(0, 1rem, 0);\n}\ndialog::backdrop {\n  transition: background-color 0.6s ease;\n  transition-behavior: allow-discrete;\n  background-color: rgb(var(--color-black), 0);\n}\ndialog[open] {\n  --limel-dialog-display-speed: 0.4s;\n  opacity: 1;\n  transform: translate3d(0, 0, 0) scale(1);\n}\n@starting-style {\n  dialog[open] {\n    opacity: 0;\n    transform: translate3d(0, -1rem, 0) scale(0.9);\n  }\n}\ndialog[open]::backdrop {\n  transition-delay: var(--limel-dialog-display-speed);\n  background-color: rgb(var(--color-black), 0.4);\n}\n@starting-style {\n  dialog[open]::backdrop {\n    background-color: rgb(var(--color-black), 0);\n  }\n}\n\ndialog {\n  position: fixed;\n  inset: 0;\n}";const r=class{constructor(t){e(this,t);this.close=n(this,"close",7);this.closing=n(this,"closing",7);this.showFooter=true;this.handleCancel=e=>{if(!this.closingActions.escapeKey&&e.cancelable){e.preventDefault();return}this.closeDialog()};this.heading=undefined;this.fullscreen=false;this.open=false;this.closingActions={escapeKey:true,scrimClick:true}}connectedCallback(){this.initialize()}componentWillLoad(){this.id=a();this.showFooter=!!this.host.querySelector('[slot="button"]')}componentDidLoad(){this.initialize()}initialize(){if(!this.dialog){return}if(this.open){this.dialog.showModal()}}handleClick(e){if(!this.closingActions.scrimClick){return}const n=this.dialog.getBoundingClientRect();const t=n.top<=e.clientY&&e.clientY<=n.top+n.height&&n.left<=e.clientX&&e.clientX<=n.left+n.width;if(!t){this.closeDialog()}}closeDialog(){if(!this.open){return}const e=this.closing.emit();if(e.defaultPrevented){return}this.close.emit();this.open=false}render(){return t("dialog",Object.assign({class:{fullscreen:!!this.fullscreen}},this.getDialogAttributes(this.open,this.id),{onCancel:this.handleCancel}),t("div",{class:"surface"},this.renderHeading(),t("div",{class:"content",id:"limel-dialog-content-"+this.id},t("slot",null)),this.renderFooter()))}watchHandler(e,n){if(n===e){return}if(e){this.dialog.showModal()}else{this.dialog.close()}}getDialogAttributes(e,n){if(e){return{role:"alertdialog","aria-modal":"true","aria-labelledby":"limel-dialog-title-"+n,"aria-describedby":"limel-dialog-content-"+n}}return{}}isBadgeHeading(e){return typeof e==="object"&&!!e.title&&!!e.icon}renderHeading(){if(this.isBadgeHeading(this.heading)){const{title:e,subtitle:n,supportingText:o,icon:a}=this.heading;return t("limel-header",{icon:a,heading:e,subheading:n,supportingText:o},t("slot",{name:"header-actions",slot:"actions"}))}else if(typeof this.heading==="string"){return t("limel-header",{heading:this.heading})}return null}renderFooter(){if(this.showFooter){return t("footer",{class:"actions"},t("slot",{name:"button"}))}}get dialog(){return this.host.shadowRoot.querySelector("dialog")}get host(){return o(this)}static get watchers(){return{open:["watchHandler"]}}};r.style=i;export{r as limel_dialog};
//# sourceMappingURL=limel-dialog.entry.js.map