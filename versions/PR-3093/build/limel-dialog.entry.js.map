{"version":3,"names":["dialogCss","Dialog","this","showFooter","handleCancel","event","closingActions","escapeKey","cancelable","preventDefault","closeDialog","scrimClick","connectedCallback","initialize","componentWillLoad","id","createRandomString","host","querySelector","componentDidLoad","dialog","open","showModal","handleClick","rect","getBoundingClientRect","clickedInDialog","top","clientY","height","left","clientX","width","closing","emit","defaultPrevented","close","render","h","Object","assign","class","fullscreen","getDialogAttributes","onCancel","renderHeading","renderFooter","watchHandler","newValue","oldValue","isOpen","role","isBadgeHeading","heading","title","icon","subtitle","supportingText","subheading","name","slot","shadowRoot"],"sources":["./src/components/dialog/dialog.scss?tag=limel-dialog&encapsulation=shadow","./src/components/dialog/dialog.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n * @prop --dialog-width: Width of the dialog.\n * @prop --dialog-max-width: Max width of the dialog.\n * @prop --dialog-height: Height of the dialog.\n * @prop --dialog-max-height: Max height of the dialog.\n * @prop --dialog-padding-top-bottom: Padding on top and bottom of dialog content. Affects the height of fade-out effects on top and bottom edges when the content is scrollable and has overflowed out of the content area. Defaults to `1.5rem`. Note that if you use this variable and set it to numbers smaller than 1rem, you will loose the fade-out effects on the edges. If you have set these paddings to `0`, losing the fade out effects should be however fine for your use case! Because in such a case your intention is to handle the `overflow` internally in the component that is displayed in the dialog's content.\n * @prop --dialog-padding-left-right: Padding on the sides of dialog content. Defaults to `1.25rem`.\n * @prop --dialog-heading-title-color: Color of the title.\n * @prop --dialog-heading-subtitle-color: Color of the subtitle.\n * @prop --dialog-heading-supporting-text-color: Color of the supporting text.\n * @prop --dialog-heading-icon-color: Color of the icon.\n * @prop --dialog-heading-icon-background-color: Background color of the icon when displayed as a badge.\n */\n\n:host(limel-dialog) {\n    --limel-dialog-border-radius: 0.75rem;\n    --header-heading-color: var(--dialog-heading-title-color);\n    --header-subheading-color: var(--dialog-heading-subtitle-color);\n    --header-supporting-text-color: var(--dialog-heading-supporting-text-color);\n    --header-icon-color: var(--dialog-heading-icon-color);\n    --header-icon-background-color: var(--dialog-heading-icon-background-color);\n}\n\n* {\n    box-sizing: border-box;\n}\n\n$responsive-body-padding: 3vw;\n\ndialog {\n    border: none;\n\n    padding: env(safe-area-inset-top) env(safe-area-inset-right)\n        env(safe-area-inset-bottom) env(safe-area-inset-left);\n    border-radius: var(--limel-dialog-border-radius);\n\n    width: var(--dialog-width, fit-content);\n    height: var(--dialog-height, fit-content);\n\n    max-width: var(--dialog-max-width, calc(100vw - 1rem));\n    max-height: var(--dialog-max-height, calc(100% - 1rem));\n\n    background-color: transparent;\n    box-shadow: var(--shadow-depth-8), var(--shadow-depth-64);\n\n    &.fullscreen {\n        --dialog-width: 100%;\n        --dialog-height: 100%;\n        width: 100%;\n        height: 100%;\n    }\n}\n\n.surface {\n    display: flex;\n    flex-direction: column;\n\n    height: 100%;\n    width: 100%;\n\n    border-radius: var(--limel-dialog-border-radius);\n    background-color: var(--lime-elevated-surface-background-color);\n}\n\n.content {\n    flex-grow: 1;\n    overflow-y: auto;\n\n    --limel-top-edge-fade-height: var(--dialog-padding-top-bottom, 1.5rem);\n    --limel-bottom-edge-fade-height: var(--dialog-padding-top-bottom, 1.5rem);\n    @include mixins.fade-out-overflowed-content-on-edges(vertically);\n\n    color: var(--mdc-theme-on-surface);\n    padding-left: var(\n        --dialog-padding-left-right,\n        min(1.25rem, $responsive-body-padding)\n    );\n    padding-right: var(\n        --dialog-padding-left-right,\n        min(1.25rem, $responsive-body-padding)\n    );\n}\n\nlimel-header,\n.actions {\n    flex-shrink: 0;\n}\n\n.actions {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    min-height: 52px;\n    margin: 0px;\n    padding: 8px;\n    border-top: 1px solid transparent;\n}\n\nslot[name='header'] {\n    display: none;\n}\n\nslot[name='button'] {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n}\n\n@media screen and (max-width: 760px) {\n    slot[name='button'] {\n        flex-direction: column-reverse;\n    }\n    .mdc-dialog__actions {\n        padding: min(1.5rem, $responsive-body-padding);\n        padding-top: 1rem;\n    }\n}\n\n@import './partial-styles/show-hide-animations.scss';\n","import { DialogHeading, ClosingActions } from './dialog.types';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Listen,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\n\n/**\n * :::note\n * Regarding the `close` event: When putting other elements that emit `close`\n * events inside a dialog, those events must be caught and stopped inside the\n * dialog. If not, they will bubble to the event handler listening for `close`\n * events on the dialog, which will close the dialog too.\n *\n * See the example _Nested `close` events_.\n * :::\n *\n * :::important\n * Are you developing for\n * [Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\n * you should use the [DialogRenderer](https://lundalogik.github.io/lime-web-components/versions/latest/interfaces/DialogRenderer.html)\n * from Lime Web Components to open dialogs in Lime CRM.\n * :::\n *\n * @exampleComponent limel-example-dialog\n * @exampleComponent limel-example-dialog-nested-close-events\n * @exampleComponent limel-example-dialog-heading\n * @exampleComponent limel-example-dialog-heading-actions\n * @exampleComponent limel-example-dialog-form\n * @exampleComponent limel-example-dialog-size\n * @exampleComponent limel-example-dialog-fullscreen\n * @exampleComponent limel-example-dialog-closing-actions\n * @exampleComponent limel-example-dialog-action-buttons\n * @slot - Content to put inside the dialog\n * @slot header-actions - The dialog header buttons\n * @slot button - The dialog buttons\n */\n@Component({\n    tag: 'limel-dialog',\n    shadow: true,\n    styleUrl: 'dialog.scss',\n})\nexport class Dialog {\n    /**\n     * The heading for the dialog, if any.\n     */\n    @Prop()\n    public heading: string | DialogHeading;\n\n    /**\n     * Set to `true` to make the dialog \"fullscreen\".\n     */\n    @Prop({ reflect: true })\n    public fullscreen = false;\n\n    /**\n     * `true` if the dialog is open, `false` otherwise.\n     */\n    @Prop({ mutable: true, reflect: true })\n    public open = false;\n\n    /**\n     * Defines which action triggers a close-event.\n     */\n    @Prop({ reflect: true })\n    public closingActions: ClosingActions = {\n        escapeKey: true,\n        scrimClick: true,\n    };\n    /**\n     * Emitted when the dialog is closed from inside the component.\n     * (*Not* emitted when the consumer sets the `open`-property to `false`.)\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    /**\n     * Emitted when the dialog is in the process of being closed.\n     */\n    @Event()\n    private closing: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelDialogElement;\n\n    private id: string;\n\n    private showFooter = true;\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentWillLoad() {\n        this.id = createRandomString();\n        this.showFooter = !!this.host.querySelector('[slot=\"button\"]');\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        if (!this.dialog) {\n            return;\n        }\n\n        if (this.open) {\n            this.dialog.showModal();\n        }\n    }\n\n    @Listen('click')\n    protected handleClick(event: MouseEvent) {\n        if (!this.closingActions.scrimClick) {\n            return;\n        }\n\n        const rect = this.dialog.getBoundingClientRect();\n        const clickedInDialog =\n            rect.top <= event.clientY &&\n            event.clientY <= rect.top + rect.height &&\n            rect.left <= event.clientX &&\n            event.clientX <= rect.left + rect.width;\n\n        if (!clickedInDialog) {\n            this.closeDialog();\n        }\n    }\n\n    private handleCancel = (event: Event) => {\n        if (!this.closingActions.escapeKey && event.cancelable) {\n            event.preventDefault();\n\n            return;\n        }\n\n        this.closeDialog();\n    };\n\n    private closeDialog() {\n        if (!this.open) {\n            return;\n        }\n\n        const event = this.closing.emit();\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        this.close.emit();\n        this.open = false;\n    }\n\n    public render() {\n        return (\n            <dialog\n                class={{\n                    fullscreen: !!this.fullscreen,\n                }}\n                {...this.getDialogAttributes(this.open, this.id)}\n                onCancel={this.handleCancel}\n            >\n                <div class=\"surface\">\n                    {this.renderHeading()}\n                    <div class=\"content\" id={'limel-dialog-content-' + this.id}>\n                        <slot />\n                    </div>\n                    {this.renderFooter()}\n                </div>\n            </dialog>\n        );\n    }\n\n    @Watch('open')\n    protected watchHandler(newValue: boolean, oldValue: boolean) {\n        if (oldValue === newValue) {\n            return;\n        }\n\n        if (newValue) {\n            this.dialog.showModal();\n        } else {\n            this.dialog.close();\n        }\n    }\n\n    private getDialogAttributes(isOpen, id) {\n        if (isOpen) {\n            return {\n                role: 'alertdialog',\n                'aria-modal': 'true',\n                'aria-labelledby': 'limel-dialog-title-' + id,\n                'aria-describedby': 'limel-dialog-content-' + id,\n            };\n        }\n\n        return {};\n    }\n\n    private isBadgeHeading(\n        heading: string | DialogHeading,\n    ): heading is DialogHeading {\n        return typeof heading === 'object' && !!heading.title && !!heading.icon;\n    }\n\n    private renderHeading() {\n        if (this.isBadgeHeading(this.heading)) {\n            const { title, subtitle, supportingText, icon } = this.heading;\n\n            return (\n                <limel-header\n                    icon={icon}\n                    heading={title}\n                    subheading={subtitle}\n                    supportingText={supportingText}\n                >\n                    <slot name=\"header-actions\" slot=\"actions\" />\n                </limel-header>\n            );\n        } else if (typeof this.heading === 'string') {\n            return <limel-header heading={this.heading} />;\n        }\n\n        return null;\n    }\n\n    private renderFooter() {\n        if (this.showFooter) {\n            return (\n                <footer class=\"actions\">\n                    <slot name=\"button\" />\n                </footer>\n            );\n        }\n    }\n\n    private get dialog() {\n        return this.host.shadowRoot.querySelector('dialog');\n    }\n}\n"],"mappings":"6GAAA,MAAMA,EAAY,o2N,MCgDLC,EAAM,M,uFA6CPC,KAAAC,WAAa,KA2CbD,KAAAE,aAAgBC,IACpB,IAAKH,KAAKI,eAAeC,WAAaF,EAAMG,WAAY,CACpDH,EAAMI,iBAEN,M,CAGJP,KAAKQ,aAAa,E,uCApFF,M,UAMN,M,oBAM0B,CACpCH,UAAW,KACXI,WAAY,K,CAsBTC,oBACHV,KAAKW,Y,CAGFC,oBACHZ,KAAKa,GAAKC,IACVd,KAAKC,aAAeD,KAAKe,KAAKC,cAAc,kB,CAGzCC,mBACHjB,KAAKW,Y,CAGDA,aACJ,IAAKX,KAAKkB,OAAQ,CACd,M,CAGJ,GAAIlB,KAAKmB,KAAM,CACXnB,KAAKkB,OAAOE,W,EAKVC,YAAYlB,GAClB,IAAKH,KAAKI,eAAeK,WAAY,CACjC,M,CAGJ,MAAMa,EAAOtB,KAAKkB,OAAOK,wBACzB,MAAMC,EACFF,EAAKG,KAAOtB,EAAMuB,SAClBvB,EAAMuB,SAAWJ,EAAKG,IAAMH,EAAKK,QACjCL,EAAKM,MAAQzB,EAAM0B,SACnB1B,EAAM0B,SAAWP,EAAKM,KAAON,EAAKQ,MAEtC,IAAKN,EAAiB,CAClBxB,KAAKQ,a,EAcLA,cACJ,IAAKR,KAAKmB,KAAM,CACZ,M,CAGJ,MAAMhB,EAAQH,KAAK+B,QAAQC,OAC3B,GAAI7B,EAAM8B,iBAAkB,CACxB,M,CAGJjC,KAAKkC,MAAMF,OACXhC,KAAKmB,KAAO,K,CAGTgB,SACH,OACIC,EAAA,SAAAC,OAAAC,OAAA,CACIC,MAAO,CACHC,aAAcxC,KAAKwC,aAEnBxC,KAAKyC,oBAAoBzC,KAAKmB,KAAMnB,KAAKa,IAAG,CAChD6B,SAAU1C,KAAKE,eAEfkC,EAAA,OAAKG,MAAM,WACNvC,KAAK2C,gBACNP,EAAA,OAAKG,MAAM,UAAU1B,GAAI,wBAA0Bb,KAAKa,IACpDuB,EAAA,cAEHpC,KAAK4C,gB,CAOZC,aAAaC,EAAmBC,GACtC,GAAIA,IAAaD,EAAU,CACvB,M,CAGJ,GAAIA,EAAU,CACV9C,KAAKkB,OAAOE,W,KACT,CACHpB,KAAKkB,OAAOgB,O,EAIZO,oBAAoBO,EAAQnC,GAChC,GAAImC,EAAQ,CACR,MAAO,CACHC,KAAM,cACN,aAAc,OACd,kBAAmB,sBAAwBpC,EAC3C,mBAAoB,wBAA0BA,E,CAItD,MAAO,E,CAGHqC,eACJC,GAEA,cAAcA,IAAY,YAAcA,EAAQC,SAAWD,EAAQE,I,CAG/DV,gBACJ,GAAI3C,KAAKkD,eAAelD,KAAKmD,SAAU,CACnC,MAAMC,MAAEA,EAAKE,SAAEA,EAAQC,eAAEA,EAAcF,KAAEA,GAASrD,KAAKmD,QAEvD,OACIf,EAAA,gBACIiB,KAAMA,EACNF,QAASC,EACTI,WAAYF,EACZC,eAAgBA,GAEhBnB,EAAA,QAAMqB,KAAK,iBAAiBC,KAAK,Y,MAGtC,UAAW1D,KAAKmD,UAAY,SAAU,CACzC,OAAOf,EAAA,gBAAce,QAASnD,KAAKmD,S,CAGvC,OAAO,I,CAGHP,eACJ,GAAI5C,KAAKC,WAAY,CACjB,OACImC,EAAA,UAAQG,MAAM,WACVH,EAAA,QAAMqB,KAAK,W,EAMfvC,aACR,OAAOlB,KAAKe,KAAK4C,WAAW3C,cAAc,S"}