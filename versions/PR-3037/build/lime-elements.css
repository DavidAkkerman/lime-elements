@charset "UTF-8";
/*
 * This file is imported into every component!
 *
 * Nothing in this file may output any CSS
 * without being explicitly called by outside code.
 */
/*
 * This file is imported into every component that uses MDC!
 *
 * Anything in this file that generates CSS output on its own,
 * without being explicitly used, will output that CSS in every
 * single component, increasing the size of the production build.
 * Avoid that unless there's very good reason for it!
 */
/*
 * This file is imported into every component that uses MDC!
 *
 * Anything in this file that generates CSS output on its own,
 * without being explicitly used, will output that CSS in every
 * single component, increasing the size of the production build.
 * Avoid that unless there's very good reason for it!
 */
:host {
  --mdc-theme-primary: var(
      --lime-primary-color,
      rgb(var(--color-teal-default))
  );
  --mdc-theme-secondary: var(
      --lime-secondary-color,
      rgb(var(--contrast-1100))
  );
  --mdc-theme-on-primary: var(
      --lime-on-primary-color,
      rgb(var(--contrast-100))
  );
  --mdc-theme-on-secondary: var(
      --lime-on-secondary-color,
      rgb(var(--contrast-100))
  );
  --mdc-theme-text-disabled-on-background: var(
      --lime-text-disabled-on-background-color,
      rgba(var(--contrast-1700), 0.38)
  );
  --mdc-theme-text-primary-on-background: var(
      --lime-text-primary-on-background-color,
      rgba(var(--contrast-1700), 0.87)
  );
  --mdc-theme-text-secondary-on-background: var(
      --lime-text-secondary-on-background-color,
      rgba(var(--contrast-1700), 0.54)
  );
  --mdc-theme-error: var(
      --lime-error-background-color,
      rgb(var(--color-red-dark))
  );
  --lime-error-text-color: rgb(var(--color-red-darker));
  --mdc-theme-surface: var(
      --lime-surface-background-color,
      rgb(var(--contrast-100))
  );
  --mdc-theme-on-surface: var(
      --lime-on-surface-color,
      rgb(var(--contrast-1500))
  );
}

:root {
  --lime-deep-red: rgb(var(--lime-brand-color-deep-red));
  --lime-red: rgb(var(--lime-brand-color-sellable-orange));
  --lime-orange: rgb(var(--lime-brand-color-orange));
  --lime-yellow: rgb(var(--lime-brand-color-yellow));
  --lime-green: rgb(var(--lime-brand-color-lime-green));
  --lime-turquoise: rgb(var(--lime-brand-color-flexible-turquoise));
  --lime-blue: rgb(var(--lime-brand-color-simple-blue));
  --lime-dark-blue: rgb(var(--lime-brand-color-dark-blue));
  --lime-magenta: rgb(var(--lime-brand-color-loving-magenta));
  --lime-light-grey: rgb(var(--lime-brand-color-light-grey));
  --lime-dark-grey: rgb(var(--lime-brand-color-grey));
  --color-percent--0: rgb(var(--color-gray-default));
  --color-percent--0to10: rgb(var(--color-red-dark));
  --color-percent--10to20: rgb(var(--color-red-default));
  --color-percent--20to30: rgb(var(--color-coral-default));
  --color-percent--30to40: rgb(var(--color-orange-default));
  --color-percent--40to50: rgb(var(--color-amber-default));
  --color-percent--50to60: rgb(var(--color-yellow-default));
  --color-percent--60to70: rgb(var(--color-grass-default));
  --color-percent--70to80: rgb(var(--color-lime-default));
  --color-percent--80to90: rgb(var(--color-teal-default));
  --color-percent--90to100: rgb(var(--color-teal-dark));
}

/**
 * Note! This file is exported to `dist/scss/` in the published
 * node module, for consumer projects to import.
 * That means this file cannot import from any file that isn't
 * also exported, keeping the same relative path.
 *
 * Or, just don't import anything, that works too.
 */
/**
* This can be used on a trigger element that opens a dropdown menu or a popover.
*/
/**
 * This mixin will mask out the content that is close to
 * the edges of a scrollable area.
 * - If the scrollable content has `overflow-y`, use `vertically`
 * as an argument for `$direction`.
 - If the scrollable content has `overflow-x`, use `horizontally`
 * as an argument for `$direction`.
 *
 * For the visual effect to work smoothly, we need to make sure that
 * the size of the fade-out edge effect is the same as the
 * internal paddings of the scrollable area. Otherwise, content of a
 * scrollable area that does not have a padding will fade out before
 * any scrolling has been done.
 * This is why this mixin already adds paddings, which automatically
 * default to the size of the fade-out effect.
 * This size defaults to `1rem`, but to override the size use
 * `--limel-top-edge-fade-height` & `--limel-bottom-edge-fade-height`
 * when `vertically` argument is set, and use
 * `--limel-left-edge-fade-width` & `--limel-right-edge-fade-width`
 * when `horizontally` argument is set.
 * Of course you can also programmatically increase and decrease the
 * size of these variables for each edge, based on the amount of
 * scrolling that has been done by the user. In this case, make sure
 * to add a custom padding where the mixin is used, to override
 * the paddings that are automatically added by the mixin in the
 * compiled CSS code.
 */
/**
* This mixin will add an animated underline to the bottom of an `a` elements.
* Note that you may need to add `all: unset;` –depending on your use case–
* before using this mixin.
*/
/**
* This mixin creates a cross-browser font stack.
* - `sans-serif` can be used for the UI of the components.
* - `monospace` can be used for code.
*
* ⚠️ If we change the font stacks, we need to update
* 1. the consumer documentation in `README.md`, and
* 2. the CSS variables of `--kompendium-example-font-family`
* in the `<style>` tag of `index.html`.
*/
:root {
  --shadow-focused-state: 0 0 0 0.125rem var(--mdc-theme-primary);
  --shadow-error-state: 0 0 0 0.125rem rgb(var(--color-red-default));
  --button-shadow-normal: 0 0.09375rem 0.225rem 0 rgba(var(--color-black), 0.232),
      0 0.01875rem 0.05625rem 0
          rgba(var(--color-black), 0.208);
  --button-shadow-hovered: 0 0.125rem 0.375rem
          rgba(var(--color-black), 0.15),
      0 0.375rem 0.625rem
          rgba(var(--color-black), 0.05);
  --button-shadow-pressed: 0 0.0625rem 0.1875rem 0
          rgba(var(--color-black), 0.132),
      0 0.01875rem 0.05625rem 0
          rgba(var(--color-black), 0.108);
  --button-shadow-inset: 0 0.03125rem 0.21875rem
          0 rgba(var(--color-black), 0.132) inset,
      0 0.01875rem 0.05625rem 0
          rgba(var(--color-black), 0.108) inset,
      0 0 0.25rem rgba(var(--color-white), 0.9);
  --button-shadow-inset-pressed: 0 0.03125rem 0.34375rem 0 rgba(var(--color-black), 0.132) inset,
      0 0.01875rem 0.11875rem 0
          rgba(var(--color-black), 0.12) inset,
      0 0 0.1875rem rgba(var(--color-white), 0.9);
  --shadow-depth-8: 0 0.2rem 0.45rem 0
          rgba(var(--color-black), 0.132),
      0 0.0375rem 0.1125rem 0
          rgba(var(--color-black), 0.108);
  --shadow-depth-8-focused: var(--shadow-depth-8), var(--shadow-focused-state);
  --shadow-depth-8-error: var(--shadow-depth-8), var(--shadow-error-state);
  --shadow-depth-8-reversed: 0 -0.2rem 0.45rem 0 rgba(var(--color-black), 0.132),
      0 -0.0375rem 0.1125rem 0
          rgba(var(--color-black), 0.108);
  --shadow-depth-16: 0 0.4rem 0.9rem 0
          rgba(var(--color-black), 0.132),
      0 0.075rem 0.225rem 0
          rgba(var(--color-black), 0.108);
  --shadow-depth-16-focused: var(--shadow-depth-16),
      var(--shadow-focused-state);
  --shadow-depth-64: 0 1.6rem 3.6rem 0
          rgba(var(--color-black), 0.22),
      0 0.3rem 0.9rem 0
          rgba(var(--color-black), 0.18);
  --shadow-depth-64-focused: var(--shadow-depth-64),
      var(--shadow-focused-state);
  --shadow-inflated-8: -0.125rem -0.125rem 0.375rem rgba(var(--color-black), 0.01),
      -0.25rem -0.25rem 0.625rem rgba(var(--color-white), 0.6),
      0.25rem 0.25rem 0.625rem
          rgba(var(--color-black), 0.05),
      0.0625rem 0.0625rem 0.625rem
          rgba(var(--color-white), 0.7),
      -1px -1px 0 1px rgba(var(--color-black), 0.07) inset,
      0 0 1px 1px rgba(var(--color-white), 0.98) inset;
  --shadow-inflated-16: -0.1875rem -0.1875rem 0.375rem rgba(var(--color-black), 0.01),
      -0.375rem -0.375rem 1rem rgba(var(--color-white), 0.8),
      0.375rem 0.375rem 1rem
          rgba(var(--color-black), 0.05),
      0.125rem 0.125rem 0.625rem
          rgba(var(--color-white), 0.7),
      -1px -1px 0 1px rgba(var(--color-black), 0.07) inset,
      0 0 1px 1px rgba(var(--color-white), 0.98) inset;
  --shadow-inflated-64: -0.1875rem -0.1875rem 0.375rem rgba(var(--color-black), 0.01),
      -0.625rem -0.625rem 1.875rem rgba(var(--color-white), 1),
      0.625rem 0.625rem 2.25rem rgba(var(--color-black), 0.06),
      0.125rem 0.125rem 0.625rem
          rgba(var(--color-white), 0.7),
      -1px -1px 0 1px rgba(var(--color-black), 0.07) inset,
      0 0 1px 1px rgba(var(--color-white), 0.98) inset;
}

.CodeMirror-lint-tooltip.cm-s-lime {
  position: fixed;
  z-index: var(--tooltip-z-index, var(--dropdown-z-index, 130));
  transition: opacity 0.4s ease 0s;
  opacity: 0;
  color: var(--mdc-theme-text-primary-on-background);
  background-color: var(--mdc-theme-on-primary);
  font-family: monospace;
  font-size: 0.875rem;
  white-space: pre-wrap;
  padding: 0.25rem 0.5rem;
  border-radius: 0.5rem;
  max-width: 40rem;
  box-shadow: var(--shadow-depth-64);
}

:root {
  --mdc-theme-primary: var(
      --lime-primary-color,
      rgb(var(--color-teal-default))
  );
  --mdc-theme-secondary: var(
      --lime-secondary-color,
      rgb(var(--contrast-1100))
  );
  --mdc-theme-on-primary: var(
      --lime-on-primary-color,
      rgb(var(--contrast-100))
  );
  --mdc-theme-on-secondary: var(
      --lime-on-secondary-color,
      rgb(var(--contrast-100))
  );
  --mdc-theme-text-disabled-on-background: var(
      --lime-text-disabled-on-background-color,
      rgba(var(--contrast-1700), 0.38)
  );
  --mdc-theme-text-primary-on-background: var(
      --lime-text-primary-on-background-color,
      rgba(var(--contrast-1700), 0.87)
  );
  --mdc-theme-text-secondary-on-background: var(
      --lime-text-secondary-on-background-color,
      rgba(var(--contrast-1700), 0.54)
  );
  --mdc-theme-error: var(
      --lime-error-background-color,
      rgb(var(--color-red-dark))
  );
  --lime-error-text-color: rgb(var(--color-red-darker));
  --mdc-theme-surface: var(
      --lime-surface-background-color,
      rgb(var(--contrast-100))
  );
  --mdc-theme-on-surface: var(
      --lime-on-surface-color,
      rgb(var(--contrast-1500))
  );
  --lime-elevated-surface-background-color: rgb(var(--contrast-100));
}

.limel-portal--container {
  font-family: var(--limel-portal-font-family, inherit);
  transition: opacity 0.2s ease, display 0.2s ease;
  transition-behavior: allow-discrete;
  opacity: 0;
  display: none;
}
.limel-portal--container.is-visible {
  opacity: 1;
  display: inline-block;
}
@starting-style {
  .limel-portal--container.is-visible {
    opacity: 0;
    display: none;
  }
}