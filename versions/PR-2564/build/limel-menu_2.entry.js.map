{"version":3,"names":["menuCss","Menu","constructor","hostRef","this","setTriggerAttributes","element","attributes","open","disabled","role","key","value","Object","entries","removeAttribute","setAttribute","String","onClose","cancel","emit","onTriggerClick","event","stopPropagation","handleSelect","select","detail","setListElement","list","focusMenuItem","activeElement","shadowRoot","blur","MenuItems","items","filter","isMenuItem","selectedIndex","Math","max","findIndex","item","selected","menuElements","Array","from","querySelectorAll","_a","focus","renderNotificationBadge","some","hasNotificationBadge","h","badge","undefined","portalId","createRandomString","openWatcher","observer","IntersectionObserver","unobserve","observe","render","cssProperties","getCssProperties","dropdownZIndex","getComputedStyle","host","getPropertyValue","class","onClick","name","visible","containerId","openDirection","position","containerStyle","onDismiss","style","gridLayout","type","badgeIcons","onSelect","ref","componentDidRender","slotElement","querySelector","assignedElements","forEach","propertyNames","values","map","property","zipObject","cssClasses","MENU_SELECTED_LIST_ITEM","MENU_SELECTION_GROUP","ROOT","strings","ARIA_CHECKED_ATTR","ARIA_DISABLED_ATTR","CHECKBOX_SELECTOR","LIST_SELECTOR","SELECTED_EVENT","SKIP_RESTORE_FOCUS","numbers","FOCUS_ROOT_INDEX","DefaultFocusState","MDCMenuFoundation","_super","__extends","adapter","_this","call","__assign","defaultAdapter","closeAnimationEndTimerId","defaultFocusState","LIST_ROOT","defineProperty","get","enumerable","configurable","addClassToElementAtIndex","removeClassFromElementAtIndex","addAttributeToElementAtIndex","removeAttributeFromElementAtIndex","getAttributeFromElementAtIndex","elementContainsClass","closeSurface","getElementIndex","notifySelected","getMenuItemCount","focusItemAtIndex","focusListRoot","getSelectedSiblingOfItemAtIndex","isSelectableItemAtIndex","prototype","destroy","clearTimeout","handleKeydown","evt","keyCode","isTab","handleItemAction","listItem","index","skipRestoreFocus","setTimeout","recomputedIndex","setSelectedIndex","MDCMenuSurfaceFoundation","TRANSITION_CLOSE_DURATION","handleMenuSurfaceOpened","FIRST_ITEM","LAST_ITEM","NONE","setDefaultFocusState","focusState","getSelectedIndex","validatedIndex","Error","prevSelectedIndex","setEnabled","isEnabled","listCssClasses","LIST_ITEM_DISABLED_CLASS","menuSize","isIndexInRange","MDCFoundation","MDCMenu","apply","arguments","attachTo","root","initialize","menuSurfaceFactory","listFactory","el","MDCMenuSurface","MDCList","initialSyncWithDOM","menuSurface","wrapFocus","foundation","listen","OPENED_EVENT","MDCListFoundation","ACTION_EVENT","unlisten","isOpen","set","close","hasTypeahead","typeaheadInProgress","typeaheadMatchItem","nextChar","startingIndex","layout","listElements","singleSelection","listConstants","UNSET_INDEX","quickOpen","setAnchorCorner","corner","setAnchorMargin","margin","getOptionByIndex","length","getPrimaryTextAtIndex","getPrimaryText","setFixedPosition","isFixed","setIsHoisted","isHoisted","setAbsolutePosition","x","y","setAnchorElement","anchorElement","getDefaultFoundation","className","classList","add","remove","attr","getAttribute","contains","indexOf","evtData","closest","selectionGroupEl","selectedItemEl","MDCComponent","MenuListRenderer","defaultConfig","getIndexForWhichToApplyTabIndex","result","i","renderMenuItem","rendertext","classNames","applyTabIndexToItemAtIndex","tabindex","assign","icon","renderIcon","config","renderText","renderNotification","twoLines","avatarList","renderDivider","isSimpleItem","text","renderCommandText","secondaryText","commandText","iconColor","color","size","iconSize","label","classes","commandKey","hasIcons","selectable","includes","menuListCss","listStrings","menuStrings","MenuList","setup","setupMenu","setupListeners","mdcMenu","MDCRipple","handleMenuSelect","teardown","mdcList","handleAction","_b","_c","_d","handleSingleSelect","selectedItem","find","connectedCallback","disconnectedCallback","componentDidLoad","html","handleType","itemsChanged"],"sources":["./src/components/menu/menu.scss?tag=limel-menu&encapsulation=shadow","./src/components/menu/menu.tsx","./node_modules/@material/menu/constants.js","./node_modules/@material/menu/foundation.js","./node_modules/@material/menu/component.js","./src/components/menu-list/menu-list-renderer.tsx","./src/components/menu-list/menu-list.scss?tag=limel-menu-list&encapsulation=shadow","./src/components/menu-list/menu-list.tsx"],"sourcesContent":["@use '../../style/functions';\n\n// Note! The `--dropdown-z-index` property is used from `menu.tsx`.\n\n/**\n * @prop --dropdown-z-index: `z-index` of the dropdown menu.\n * @prop --menu-surface-width: Width of the menu surface.\n * @prop --list-grid-item-max-width: Maximum width of items in the menu list when `gridLayout={true}`. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in the menu list when `gridLayout={true}`. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between the items in the menu list when `gridLayout={true}`. Defaults to `0.75rem`.\n * @prop --notification-badge-text-color: Defines the text color of notification badges. Defaults to `--color-white`.\n * @prop --notification-badge-background-color: Defines the background color of notification badges. Defaults to `--color-red-default`.\n */\n\n:host(limel-menu) {\n    isolation: isolate;\n    position: relative;\n    display: inline-block;\n    --badge-background-color: var(\n        --notification-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    --badge-text-color: var(\n        --notification-badge-text-color,\n        rgb(var(--color-white))\n    );\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n.menu__trigger {\n    border-color: transparent;\n    border-width: 1px;\n    border-style: solid;\n    background: none;\n    color: rgb(var(--contrast-800));\n    height: functions.pxToRem(36);\n\n    &-enabled {\n        &:hover {\n            border-color: rgb(var(--contrast-800));\n            color: rgb(var(--contrast-1100));\n        }\n    }\n}\n\n.mdc-menu-surface--anchor {\n    position: relative;\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.25rem;\n    right: -0.25rem;\n}\n","import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Element,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { zipObject } from 'lodash-es';\nimport { ListSeparator, MenuItem, OpenDirection } from '../../interface';\n\n/**\n * @slot trigger - Element to use as a trigger for the menu.\n * @exampleComponent limel-example-menu-basic\n * @exampleComponent limel-example-menu-disabled\n * @exampleComponent limel-example-menu-open-direction\n * @exampleComponent limel-example-menu-separators\n * @exampleComponent limel-example-menu-icons\n * @exampleComponent limel-example-menu-badge-icons\n * @exampleComponent limel-example-menu-grid\n * @exampleComponent limel-example-menu-hotkeys\n * @exampleComponent limel-example-menu-secondary-text\n * @exampleComponent limel-example-menu-notification\n * @exampleComponent limel-example-menu-composite\n */\n@Component({\n    tag: 'limel-menu',\n    shadow: true,\n    styleUrl: 'menu.scss',\n})\nexport class Menu {\n    /**\n     * A list of items and separators to show in the menu.\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator> = [];\n\n    /**\n     * Sets the disabled state of the menu.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Decides the menu's location in relation to its trigger\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'bottom-start';\n\n    /**\n     * Sets the open state of the menu.\n     */\n    @Prop({ mutable: true, reflect: true })\n    public open = false;\n\n    /**\n     * Defines whether the menu should show badges.\n     */\n    @Prop({ reflect: true })\n    public badgeIcons = false;\n\n    /**\n     * Renders list items in a grid layout, rather than a vertical list\n     */\n    @Prop({ reflect: true })\n    public gridLayout = false;\n\n    /**\n     * Is emitted when the menu is cancelled.\n     */\n    @Event()\n    private cancel: EventEmitter<void>;\n\n    /**\n     * Is emitted when a menu item is selected.\n     */\n    @Event()\n    private select: EventEmitter<MenuItem | MenuItem[]>;\n\n    @Element()\n    private host: HTMLLimelMenuElement;\n\n    private list: HTMLLimelMenuListElement;\n\n    private portalId: string;\n\n    constructor() {\n        this.portalId = createRandomString();\n    }\n\n    @Watch('open')\n    protected openWatcher() {\n        if (!this.open) {\n            return;\n        }\n\n        const observer = new IntersectionObserver(() => {\n            observer.unobserve(this.list);\n            this.focusMenuItem();\n        });\n        observer.observe(this.list);\n    }\n\n    public render() {\n        const cssProperties = this.getCssProperties();\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index'\n        );\n\n        return (\n            <div class=\"mdc-menu-surface--anchor\" onClick={this.onTriggerClick}>\n                <slot name=\"trigger\" />\n                {this.renderNotificationBadge()}\n                <limel-portal\n                    visible={this.open}\n                    containerId={this.portalId}\n                    openDirection={this.openDirection}\n                    position=\"absolute\"\n                    containerStyle={{ 'z-index': dropdownZIndex }}\n                >\n                    <limel-menu-surface\n                        open={this.open}\n                        onDismiss={this.onClose}\n                        style={cssProperties}\n                        class={{\n                            'has-grid-layout': this.gridLayout,\n                        }}\n                    >\n                        <limel-menu-list\n                            class={{\n                                'has-grid-layout has-interactive-items':\n                                    this.gridLayout,\n                            }}\n                            items={this.items}\n                            type=\"menu\"\n                            badgeIcons={this.badgeIcons}\n                            onSelect={this.handleSelect}\n                            ref={this.setListElement}\n                        />\n                    </limel-menu-surface>\n                </limel-portal>\n            </div>\n        );\n    }\n\n    public componentDidRender() {\n        const slotElement = this.host.shadowRoot.querySelector('slot');\n        slotElement.assignedElements().forEach(this.setTriggerAttributes);\n    }\n\n    private setTriggerAttributes = (element: HTMLElement) => {\n        const attributes = {\n            'aria-haspopup': true,\n            'aria-expanded': this.open,\n            disabled: this.disabled,\n            role: 'button',\n        };\n\n        for (const [key, value] of Object.entries(attributes)) {\n            if (!value) {\n                element.removeAttribute(key);\n            } else {\n                element.setAttribute(key, String(value));\n            }\n        }\n    };\n\n    private onClose = () => {\n        this.cancel.emit();\n        this.open = false;\n    };\n\n    private onTriggerClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        if (this.disabled) {\n            return;\n        }\n\n        this.open = !this.open;\n    };\n\n    private handleSelect = (event: CustomEvent<MenuItem>) => {\n        event.stopPropagation();\n        this.select.emit(event.detail);\n        this.open = false;\n    };\n\n    private getCssProperties() {\n        const propertyNames = [\n            '--menu-surface-width',\n            '--list-grid-item-max-width',\n            '--list-grid-item-min-width',\n            '--list-grid-gap',\n            '--notification-badge-background-color',\n            '--notification-badge-text-color',\n        ];\n        const style = getComputedStyle(this.host);\n        const values = propertyNames.map((property) => {\n            return style.getPropertyValue(property);\n        });\n\n        return zipObject(propertyNames, values);\n    }\n\n    private setListElement = (element: HTMLLimelMenuListElement) => {\n        this.list = element;\n    };\n\n    private focusMenuItem = () => {\n        const activeElement = this.list.shadowRoot.activeElement as HTMLElement;\n        activeElement?.blur();\n\n        const MenuItems = this.items.filter(this.isMenuItem);\n        const selectedIndex = Math.max(\n            MenuItems.findIndex((item) => item.selected),\n            0\n        );\n        const menuElements: HTMLElement[] = Array.from(\n            this.list.shadowRoot.querySelectorAll('[role=\"menuitem\"]')\n        );\n        menuElements[selectedIndex]?.focus();\n    };\n\n    private isMenuItem(item: MenuItem | ListSeparator): item is MenuItem {\n        return !('separator' in item);\n    }\n\n    private renderNotificationBadge = () => {\n        if (this.items.some(this.hasNotificationBadge)) {\n            return <limel-badge />;\n        }\n    };\n\n    private hasNotificationBadge = (item: MenuItem | ListSeparator) =>\n        this.isMenuItem(item) && item.badge !== undefined;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar cssClasses = {\n    MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',\n    MENU_SELECTION_GROUP: 'mdc-menu__selection-group',\n    ROOT: 'mdc-menu',\n};\nvar strings = {\n    ARIA_CHECKED_ATTR: 'aria-checked',\n    ARIA_DISABLED_ATTR: 'aria-disabled',\n    CHECKBOX_SELECTOR: 'input[type=\"checkbox\"]',\n    LIST_SELECTOR: '.mdc-list,.mdc-deprecated-list',\n    SELECTED_EVENT: 'MDCMenu:selected',\n    SKIP_RESTORE_FOCUS: 'data-menu-item-skip-restore-focus',\n};\nvar numbers = {\n    FOCUS_ROOT_INDEX: -1,\n};\nvar DefaultFocusState;\n(function (DefaultFocusState) {\n    DefaultFocusState[DefaultFocusState[\"NONE\"] = 0] = \"NONE\";\n    DefaultFocusState[DefaultFocusState[\"LIST_ROOT\"] = 1] = \"LIST_ROOT\";\n    DefaultFocusState[DefaultFocusState[\"FIRST_ITEM\"] = 2] = \"FIRST_ITEM\";\n    DefaultFocusState[DefaultFocusState[\"LAST_ITEM\"] = 3] = \"LAST_ITEM\";\n})(DefaultFocusState || (DefaultFocusState = {}));\nexport { cssClasses, strings, numbers, DefaultFocusState };\n//# sourceMappingURL=constants.js.map","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses as listCssClasses } from '@material/list/constants';\nimport { MDCMenuSurfaceFoundation } from '@material/menu-surface/foundation';\nimport { cssClasses, DefaultFocusState, numbers, strings } from './constants';\nvar MDCMenuFoundation = /** @class */ (function (_super) {\n    __extends(MDCMenuFoundation, _super);\n    function MDCMenuFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCMenuFoundation.defaultAdapter), adapter)) || this;\n        _this.closeAnimationEndTimerId = 0;\n        _this.defaultFocusState = DefaultFocusState.LIST_ROOT;\n        _this.selectedIndex = -1;\n        return _this;\n    }\n    Object.defineProperty(MDCMenuFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuFoundation, \"defaultAdapter\", {\n        /**\n         * @see {@link MDCMenuAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClassToElementAtIndex: function () { return undefined; },\n                removeClassFromElementAtIndex: function () { return undefined; },\n                addAttributeToElementAtIndex: function () { return undefined; },\n                removeAttributeFromElementAtIndex: function () { return undefined; },\n                getAttributeFromElementAtIndex: function () { return null; },\n                elementContainsClass: function () { return false; },\n                closeSurface: function () { return undefined; },\n                getElementIndex: function () { return -1; },\n                notifySelected: function () { return undefined; },\n                getMenuItemCount: function () { return 0; },\n                focusItemAtIndex: function () { return undefined; },\n                focusListRoot: function () { return undefined; },\n                getSelectedSiblingOfItemAtIndex: function () { return -1; },\n                isSelectableItemAtIndex: function () { return false; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCMenuFoundation.prototype.destroy = function () {\n        if (this.closeAnimationEndTimerId) {\n            clearTimeout(this.closeAnimationEndTimerId);\n        }\n        this.adapter.closeSurface();\n    };\n    MDCMenuFoundation.prototype.handleKeydown = function (evt) {\n        var key = evt.key, keyCode = evt.keyCode;\n        var isTab = key === 'Tab' || keyCode === 9;\n        if (isTab) {\n            this.adapter.closeSurface(/** skipRestoreFocus */ true);\n        }\n    };\n    MDCMenuFoundation.prototype.handleItemAction = function (listItem) {\n        var _this = this;\n        var index = this.adapter.getElementIndex(listItem);\n        if (index < 0) {\n            return;\n        }\n        this.adapter.notifySelected({ index: index });\n        var skipRestoreFocus = this.adapter.getAttributeFromElementAtIndex(index, strings.SKIP_RESTORE_FOCUS) === 'true';\n        this.adapter.closeSurface(skipRestoreFocus);\n        // Wait for the menu to close before adding/removing classes that affect styles.\n        this.closeAnimationEndTimerId = setTimeout(function () {\n            // Recompute the index in case the menu contents have changed.\n            var recomputedIndex = _this.adapter.getElementIndex(listItem);\n            if (recomputedIndex >= 0 &&\n                _this.adapter.isSelectableItemAtIndex(recomputedIndex)) {\n                _this.setSelectedIndex(recomputedIndex);\n            }\n        }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);\n    };\n    MDCMenuFoundation.prototype.handleMenuSurfaceOpened = function () {\n        switch (this.defaultFocusState) {\n            case DefaultFocusState.FIRST_ITEM:\n                this.adapter.focusItemAtIndex(0);\n                break;\n            case DefaultFocusState.LAST_ITEM:\n                this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);\n                break;\n            case DefaultFocusState.NONE:\n                // Do nothing.\n                break;\n            default:\n                this.adapter.focusListRoot();\n                break;\n        }\n    };\n    /**\n     * Sets default focus state where the menu should focus every time when menu\n     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by\n     * default.\n     */\n    MDCMenuFoundation.prototype.setDefaultFocusState = function (focusState) {\n        this.defaultFocusState = focusState;\n    };\n    /** @return Index of the currently selected list item within the menu. */\n    MDCMenuFoundation.prototype.getSelectedIndex = function () {\n        return this.selectedIndex;\n    };\n    /**\n     * Selects the list item at `index` within the menu.\n     * @param index Index of list item within the menu.\n     */\n    MDCMenuFoundation.prototype.setSelectedIndex = function (index) {\n        this.validatedIndex(index);\n        if (!this.adapter.isSelectableItemAtIndex(index)) {\n            throw new Error('MDCMenuFoundation: No selection group at specified index.');\n        }\n        var prevSelectedIndex = this.adapter.getSelectedSiblingOfItemAtIndex(index);\n        if (prevSelectedIndex >= 0) {\n            this.adapter.removeAttributeFromElementAtIndex(prevSelectedIndex, strings.ARIA_CHECKED_ATTR);\n            this.adapter.removeClassFromElementAtIndex(prevSelectedIndex, cssClasses.MENU_SELECTED_LIST_ITEM);\n        }\n        this.adapter.addClassToElementAtIndex(index, cssClasses.MENU_SELECTED_LIST_ITEM);\n        this.adapter.addAttributeToElementAtIndex(index, strings.ARIA_CHECKED_ATTR, 'true');\n        this.selectedIndex = index;\n    };\n    /**\n     * Sets the enabled state to isEnabled for the menu item at the given index.\n     * @param index Index of the menu item\n     * @param isEnabled The desired enabled state of the menu item.\n     */\n    MDCMenuFoundation.prototype.setEnabled = function (index, isEnabled) {\n        this.validatedIndex(index);\n        if (isEnabled) {\n            this.adapter.removeClassFromElementAtIndex(index, listCssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter.addAttributeToElementAtIndex(index, strings.ARIA_DISABLED_ATTR, 'false');\n        }\n        else {\n            this.adapter.addClassToElementAtIndex(index, listCssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter.addAttributeToElementAtIndex(index, strings.ARIA_DISABLED_ATTR, 'true');\n        }\n    };\n    MDCMenuFoundation.prototype.validatedIndex = function (index) {\n        var menuSize = this.adapter.getMenuItemCount();\n        var isIndexInRange = index >= 0 && index < menuSize;\n        if (!isIndexInRange) {\n            throw new Error('MDCMenuFoundation: No list item at specified index.');\n        }\n    };\n    return MDCMenuFoundation;\n}(MDCFoundation));\nexport { MDCMenuFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCMenuFoundation;\n//# sourceMappingURL=foundation.js.map","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { MDCList } from '@material/list/component';\nimport { numbers as listConstants } from '@material/list/constants';\nimport { MDCListFoundation } from '@material/list/foundation';\nimport { MDCMenuSurface } from '@material/menu-surface/component';\nimport { MDCMenuSurfaceFoundation } from '@material/menu-surface/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCMenuFoundation } from './foundation';\nvar MDCMenu = /** @class */ (function (_super) {\n    __extends(MDCMenu, _super);\n    function MDCMenu() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCMenu.attachTo = function (root) {\n        return new MDCMenu(root);\n    };\n    MDCMenu.prototype.initialize = function (menuSurfaceFactory, listFactory) {\n        if (menuSurfaceFactory === void 0) { menuSurfaceFactory = function (el) { return new MDCMenuSurface(el); }; }\n        if (listFactory === void 0) { listFactory = function (el) { return new MDCList(el); }; }\n        this.menuSurfaceFactory = menuSurfaceFactory;\n        this.listFactory = listFactory;\n    };\n    MDCMenu.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.menuSurface = this.menuSurfaceFactory(this.root);\n        var list = this.root.querySelector(strings.LIST_SELECTOR);\n        if (list) {\n            this.list = this.listFactory(list);\n            this.list.wrapFocus = true;\n        }\n        else {\n            this.list = null;\n        }\n        this.handleKeydown = function (evt) {\n            _this.foundation.handleKeydown(evt);\n        };\n        this.handleItemAction = function (evt) {\n            _this.foundation.handleItemAction(_this.items[evt.detail.index]);\n        };\n        this.handleMenuSurfaceOpened = function () {\n            _this.foundation.handleMenuSurfaceOpened();\n        };\n        this.menuSurface.listen(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);\n        this.listen('keydown', this.handleKeydown);\n        this.listen(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);\n    };\n    MDCMenu.prototype.destroy = function () {\n        if (this.list) {\n            this.list.destroy();\n        }\n        this.menuSurface.destroy();\n        this.menuSurface.unlisten(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);\n        this.unlisten('keydown', this.handleKeydown);\n        this.unlisten(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);\n        _super.prototype.destroy.call(this);\n    };\n    Object.defineProperty(MDCMenu.prototype, \"open\", {\n        get: function () {\n            return this.menuSurface.isOpen();\n        },\n        set: function (value) {\n            if (value) {\n                this.menuSurface.open();\n            }\n            else {\n                this.menuSurface.close();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"wrapFocus\", {\n        get: function () {\n            return this.list ? this.list.wrapFocus : false;\n        },\n        set: function (value) {\n            if (this.list) {\n                this.list.wrapFocus = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"hasTypeahead\", {\n        /**\n         * Sets whether the menu has typeahead functionality.\n         * @param value Whether typeahead is enabled.\n         */\n        set: function (value) {\n            if (this.list) {\n                this.list.hasTypeahead = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"typeaheadInProgress\", {\n        /**\n         * @return Whether typeahead logic is currently matching some user prefix.\n         */\n        get: function () {\n            return this.list ? this.list.typeaheadInProgress : false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Given the next desired character from the user, adds it to the typeahead\n     * buffer. Then, attempts to find the next option matching the buffer. Wraps\n     * around if at the end of options.\n     *\n     * @param nextChar The next character to add to the prefix buffer.\n     * @param startingIndex The index from which to start matching. Only relevant\n     *     when starting a new match sequence. To start a new match sequence,\n     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer\n     *     to clear after a set interval defined in list foundation. Defaults to\n     *     the currently focused index.\n     * @return The index of the matched item, or -1 if no match.\n     */\n    MDCMenu.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {\n        if (this.list) {\n            return this.list.typeaheadMatchItem(nextChar, startingIndex);\n        }\n        return -1;\n    };\n    /**\n     * Layout the underlying list element in the case of any dynamic updates\n     * to its structure.\n     */\n    MDCMenu.prototype.layout = function () {\n        if (this.list) {\n            this.list.layout();\n        }\n    };\n    Object.defineProperty(MDCMenu.prototype, \"items\", {\n        /**\n         * Return the items within the menu. Note that this only contains the set of elements within\n         * the items container that are proper list items, and not supplemental / presentational DOM\n         * elements.\n         */\n        get: function () {\n            return this.list ? this.list.listElements : [];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"singleSelection\", {\n        /**\n         * Turns on/off the underlying list's single selection mode. Used mainly\n         * by select menu.\n         *\n         * @param singleSelection Whether to enable single selection mode.\n         */\n        set: function (singleSelection) {\n            if (this.list) {\n                this.list.singleSelection = singleSelection;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"selectedIndex\", {\n        /**\n         * Retrieves the selected index. Only applicable to select menus.\n         * @return The selected index, which is a number for single selection and\n         *     radio lists, and an array of numbers for checkbox lists.\n         */\n        get: function () {\n            return this.list ? this.list.selectedIndex : listConstants.UNSET_INDEX;\n        },\n        /**\n         * Sets the selected index of the list. Only applicable to select menus.\n         * @param index The selected index, which is a number for single selection and\n         *     radio lists, and an array of numbers for checkbox lists.\n         */\n        set: function (index) {\n            if (this.list) {\n                this.list.selectedIndex = index;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"quickOpen\", {\n        set: function (quickOpen) {\n            this.menuSurface.quickOpen = quickOpen;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets default focus state where the menu should focus every time when menu\n     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by\n     * default.\n     * @param focusState Default focus state.\n     */\n    MDCMenu.prototype.setDefaultFocusState = function (focusState) {\n        this.foundation.setDefaultFocusState(focusState);\n    };\n    /**\n     * @param corner Default anchor corner alignment of top-left menu corner.\n     */\n    MDCMenu.prototype.setAnchorCorner = function (corner) {\n        this.menuSurface.setAnchorCorner(corner);\n    };\n    MDCMenu.prototype.setAnchorMargin = function (margin) {\n        this.menuSurface.setAnchorMargin(margin);\n    };\n    /**\n     * Sets the list item as the selected row at the specified index.\n     * @param index Index of list item within menu.\n     */\n    MDCMenu.prototype.setSelectedIndex = function (index) {\n        this.foundation.setSelectedIndex(index);\n    };\n    /**\n     * Sets the enabled state to isEnabled for the menu item at the given index.\n     * @param index Index of the menu item\n     * @param isEnabled The desired enabled state of the menu item.\n     */\n    MDCMenu.prototype.setEnabled = function (index, isEnabled) {\n        this.foundation.setEnabled(index, isEnabled);\n    };\n    /**\n     * @return The item within the menu at the index specified.\n     */\n    MDCMenu.prototype.getOptionByIndex = function (index) {\n        var items = this.items;\n        if (index < items.length) {\n            return this.items[index];\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @param index A menu item's index.\n     * @return The primary text within the menu at the index specified.\n     */\n    MDCMenu.prototype.getPrimaryTextAtIndex = function (index) {\n        var item = this.getOptionByIndex(index);\n        if (item && this.list) {\n            return this.list.getPrimaryText(item) || '';\n        }\n        return '';\n    };\n    MDCMenu.prototype.setFixedPosition = function (isFixed) {\n        this.menuSurface.setFixedPosition(isFixed);\n    };\n    MDCMenu.prototype.setIsHoisted = function (isHoisted) {\n        this.menuSurface.setIsHoisted(isHoisted);\n    };\n    MDCMenu.prototype.setAbsolutePosition = function (x, y) {\n        this.menuSurface.setAbsolutePosition(x, y);\n    };\n    /**\n     * Sets the element that the menu-surface is anchored to.\n     */\n    MDCMenu.prototype.setAnchorElement = function (element) {\n        this.menuSurface.anchorElement = element;\n    };\n    MDCMenu.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            addClassToElementAtIndex: function (index, className) {\n                var list = _this.items;\n                list[index].classList.add(className);\n            },\n            removeClassFromElementAtIndex: function (index, className) {\n                var list = _this.items;\n                list[index].classList.remove(className);\n            },\n            addAttributeToElementAtIndex: function (index, attr, value) {\n                var list = _this.items;\n                list[index].setAttribute(attr, value);\n            },\n            removeAttributeFromElementAtIndex: function (index, attr) {\n                var list = _this.items;\n                list[index].removeAttribute(attr);\n            },\n            getAttributeFromElementAtIndex: function (index, attr) {\n                var list = _this.items;\n                return list[index].getAttribute(attr);\n            },\n            elementContainsClass: function (element, className) {\n                return element.classList.contains(className);\n            },\n            closeSurface: function (skipRestoreFocus) {\n                _this.menuSurface.close(skipRestoreFocus);\n            },\n            getElementIndex: function (element) { return _this.items.indexOf(element); },\n            notifySelected: function (evtData) {\n                _this.emit(strings.SELECTED_EVENT, {\n                    index: evtData.index,\n                    item: _this.items[evtData.index],\n                });\n            },\n            getMenuItemCount: function () { return _this.items.length; },\n            focusItemAtIndex: function (index) {\n                _this.items[index].focus();\n            },\n            focusListRoot: function () {\n                _this.root.querySelector(strings.LIST_SELECTOR).focus();\n            },\n            isSelectableItemAtIndex: function (index) {\n                return !!closest(_this.items[index], \".\" + cssClasses.MENU_SELECTION_GROUP);\n            },\n            getSelectedSiblingOfItemAtIndex: function (index) {\n                var selectionGroupEl = closest(_this.items[index], \".\" + cssClasses.MENU_SELECTION_GROUP);\n                var selectedItemEl = selectionGroupEl.querySelector(\".\" + cssClasses.MENU_SELECTED_LIST_ITEM);\n                return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;\n            },\n        };\n        // tslint:enable:object-literal-sort-keys\n        return new MDCMenuFoundation(adapter);\n    };\n    return MDCMenu;\n}(MDCComponent));\nexport { MDCMenu };\n//# sourceMappingURL=component.js.map","import { ListSeparator, MenuItem } from '../../interface';\nimport { h } from '@stencil/core';\nimport { MenuListRendererConfig } from './menu-list-renderer-config';\n\nexport class MenuListRenderer {\n    private defaultConfig: MenuListRendererConfig = {\n        isOpen: true,\n        badgeIcons: false,\n    };\n\n    private config: MenuListRendererConfig;\n\n    private hasIcons: boolean;\n    private twoLines: boolean;\n    private avatarList: boolean;\n    private commandKey: boolean;\n\n    private applyTabIndexToItemAtIndex: number;\n\n    public render(\n        items: Array<MenuItem | ListSeparator>,\n        config: MenuListRendererConfig = {}\n    ) {\n        items = items || [];\n        this.config = { ...this.defaultConfig, ...config };\n\n        this.twoLines = items.some((item) => {\n            return 'secondaryText' in item && !!item.secondaryText;\n        });\n\n        this.commandKey = items.some((item) => {\n            return 'commandText' in item && !!item.commandText;\n        });\n\n        this.hasIcons = items.some((item) => {\n            return 'icon' in item && !!item.icon;\n        });\n\n        this.avatarList = this.config.badgeIcons && this.hasIcons;\n\n        this.applyTabIndexToItemAtIndex =\n            this.getIndexForWhichToApplyTabIndex(items);\n\n        const classNames = {\n            'mdc-deprecated-list': true,\n            'mdc-deprecated-list--two-line': this.twoLines,\n            selectable: true,\n            'mdc-deprecated-list--avatar-list': this.avatarList,\n            'list--compact':\n                this.twoLines &&\n                this.commandKey &&\n                ['small', 'x-small'].includes(this.config.iconSize),\n        };\n\n        return (\n            <ul\n                class={classNames}\n                aria-hidden={true}\n                role=\"menu\"\n                aria-orientation=\"vertical\"\n                style={{ '--maxLinesSecondaryText': '2' }}\n            >\n                {items.map(this.renderMenuItem)}\n            </ul>\n        );\n    }\n\n    /**\n     * Determine which MenuItem should have the `tab-index` attribute set,\n     * and return the index at which that MenuItem is located in `items`.\n     * Returns `undefined` if no item should have the attribute set.\n     * See https://github.com/material-components/material-components-web/tree/e66a43a75fef4f9179e24856649518e15e279a04/packages/mdc-list#accessibility\n     * @param {Array<MenuItem | ListSeparator>} items the items of the list, including any `ListSeparator`:s\n     * @returns {number} the index as per the description\n     */\n    private getIndexForWhichToApplyTabIndex = (\n        items: Array<MenuItem | ListSeparator>\n    ) => {\n        let result;\n        for (let i = 0, max = items.length; i < max; i += 1) {\n            if ('separator' in items[i]) {\n                // Ignore ListSeparator\n            } else {\n                const item = items[i] as MenuItem<any>;\n                if (item.selected) {\n                    result = i;\n                    break;\n                }\n\n                if (result === undefined && !item.disabled) {\n                    result = i;\n                    // Do NOT break, as any later item with\n                    // `selected=true` should get the tab-index instead!\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Render a single list item\n     * @param {MenuItem | ListSeparator} item the item to render\n     * @param {number} index the index the item had in the `items` array\n     * @returns {HTMLElement} the list item\n     */\n    private renderMenuItem = (\n        item: MenuItem | ListSeparator,\n        index: number\n    ) => {\n        if ('separator' in item) {\n            return (\n                <li class=\"mdc-deprecated-list-divider\" role=\"separator\">\n                    {this.rendertext(item)}\n                    <div class=\"limel-list-divider-line\" />\n                </li>\n            );\n        }\n\n        const classNames = {\n            'mdc-deprecated-list-item': true,\n            'mdc-deprecated-list-item--disabled': item.disabled,\n            'mdc-deprecated-list-item--selected': item.selected,\n        };\n\n        const attributes: { tabindex?: string } = {};\n        if (index === this.applyTabIndexToItemAtIndex) {\n            attributes.tabindex = '0';\n        }\n\n        return (\n            <li\n                class={classNames}\n                role=\"menuitem\"\n                aria-disabled={item.disabled ? 'true' : 'false'}\n                aria-selected={item.selected ? 'true' : 'false'}\n                data-index={index}\n                {...attributes}\n            >\n                {item.icon ? this.renderIcon(this.config, item) : null}\n                {this.renderText(item)}\n                {this.renderNotification(item)}\n                {this.twoLines && this.avatarList ? this.renderDivider() : null}\n            </li>\n        );\n    };\n\n    /**\n     * Render the text of the list item\n     * @param {MenuItem} item the list item\n     * @returns {HTMLElement | string} the text for the list item\n     */\n    private renderText = (item: MenuItem) => {\n        if (this.isSimpleItem(item)) {\n            return (\n                <span class=\"mdc-deprecated-list-item__text\">{item.text}</span>\n            );\n        }\n\n        return (\n            <div class=\"mdc-deprecated-list-item__text\">\n                <div class=\"mdc-deprecated-list-item__primary-command-text\">\n                    <div class=\"mdc-deprecated-list-item__primary-text\">\n                        {item.text}\n                    </div>\n                    {this.renderCommandText(item)}\n                </div>\n                <div class=\"mdc-deprecated-list-item__secondary-text\">\n                    {item.secondaryText}\n                </div>\n            </div>\n        );\n    };\n\n    private rendertext = (item: ListSeparator) => {\n        if ('text' in item) {\n            return <h2 class=\"limel-list-divider-title\">{item.text}</h2>;\n        }\n    };\n\n    private renderCommandText = (item: MenuItem) => {\n        if (!('commandText' in item)) {\n            return;\n        }\n\n        return (\n            <div class=\"mdc-deprecated-list-item__command-text\">\n                {item.commandText}\n            </div>\n        );\n    };\n\n    private isSimpleItem = (item: MenuItem): boolean => {\n        if ('commandText' in item) {\n            return false;\n        }\n\n        return !('secondaryText' in item);\n    };\n\n    /**\n     * Render an icon for a list item\n     * @param {MenuListRendererConfig} config the config object, passed on from the `renderMenuItem` function\n     * @param {MenuItem} item the list item\n     * @returns {HTMLElement} the icon element\n     */\n    private renderIcon = (config: MenuListRendererConfig, item: MenuItem) => {\n        const style: any = {};\n        if (item.iconColor) {\n            if (config.badgeIcons) {\n                style['--icon-background-color'] = item.iconColor;\n            } else {\n                style.color = item.iconColor;\n            }\n        }\n\n        return (\n            <limel-icon\n                badge={config.badgeIcons}\n                class=\"mdc-deprecated-list-item__graphic\"\n                name={item.icon}\n                style={style}\n                size={config.iconSize}\n            />\n        );\n    };\n\n    private renderNotification = (item: MenuItem) => {\n        if (item.badge !== undefined) {\n            return <limel-badge label={item.badge} />;\n        }\n    };\n\n    private renderDivider = () => {\n        const classes = {\n            'mdc-deprecated-list-divider': true,\n            'mdc-deprecated-list-divider--inset': true,\n        };\n        if (this.config.iconSize) {\n            classes[this.config.iconSize] = true;\n        }\n\n        return <hr class={classes} />;\n    };\n}\n","@use '../../style/functions';\n\n@import '../list/list';\n\n:host(limel-menu-list) {\n    display: block;\n    --badge-background-color: var(\n        --notification-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    --badge-text-color: var(\n        --notification-badge-text-color,\n        rgb(var(--color-white))\n    );\n}\n\n.mdc-menu {\n    max-height: 70vh; // force tall menus render inside the viewport when menu is at the bottom of the screen\n}\n\n.mdc-deprecated-list {\n    margin: functions.pxToRem(4);\n    // added space to visualize keyboard-focused items\n    .mdc-deprecated-list-item[role='menuitem'] {\n        font-size: functions.pxToRem(13);\n\n        .mdc-deprecated-list-item__graphic {\n            margin-right: functions.pxToRem(14);\n        }\n    }\n\n    hr.mdc-deprecated-list-divider {\n        &.mdc-deprecated-list-divider--inset {\n            display: none;\n        }\n    }\n}\n\nlimel-badge {\n    transform: translateX(0.75rem);\n}\n","import {\n    IconSize,\n    ListSeparator,\n    MenuItem,\n    MenuListType,\n} from '../../interface';\nimport { MDCList, MDCListActionEvent } from '@material/list';\nimport { MDCMenu, MDCMenuItemEvent } from '@material/menu';\nimport { MDCRipple } from '@material/ripple';\nimport { strings as listStrings } from '@material/list/constants';\nimport { strings as menuStrings } from '@material/menu/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { MenuListRenderer } from './menu-list-renderer';\nimport { MenuListRendererConfig } from './menu-list-renderer-config';\n\nconst { ACTION_EVENT } = listStrings;\nconst { SELECTED_EVENT } = menuStrings;\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-menu-list',\n    shadow: true,\n    styleUrl: 'menu-list.scss',\n})\nexport class MenuList {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * The type of the menu, omit to get a regular vertical menu.\n     * Available types are:\n     * `menu`: regular vertical menu.\n     */\n    @Prop()\n    public type: MenuListType;\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n    // eslint-disable-next-line no-magic-numbers\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelMenuListElement;\n\n    private config: MenuListRendererConfig;\n    private MenuListRenderer = new MenuListRenderer();\n    private mdcList: MDCList;\n    private mdcMenu: MDCMenu;\n\n    /**\n     * Fired when a new value has been selected from the list.\n     */\n    @Event()\n    private select: EventEmitter<MenuItem>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            type: this.type,\n            iconSize: this.iconSize,\n        };\n\n        const html = this.MenuListRenderer.render(this.items, this.config);\n\n        return <div class=\"mdc-menu mdc-menu-surface\">{html}</div>;\n    }\n\n    @Watch('type')\n    protected handleType() {\n        this.setupListeners();\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        if (!this.mdcList) {\n            return;\n        }\n\n        const MenuItems = this.items.filter(this.isMenuItem);\n\n        this.mdcList.selectedIndex = MenuItems.findIndex(\n            (item: MenuItem) => item.selected\n        );\n    }\n\n    private setup = () => {\n        this.setupMenu();\n        this.setupListeners();\n    };\n\n    private setupMenu = () => {\n        const element = this.element.shadowRoot.querySelector('.mdc-menu');\n        if (!element) {\n            return;\n        }\n\n        this.mdcMenu = new MDCMenu(element);\n        this.mdcMenu.hasTypeahead = true;\n        this.mdcMenu.wrapFocus = true;\n        this.mdcMenu.items.forEach((item) => new MDCRipple(item));\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcMenu) {\n            return;\n        }\n\n        this.mdcMenu.unlisten(SELECTED_EVENT, this.handleMenuSelect);\n        this.mdcMenu.listen(SELECTED_EVENT, this.handleMenuSelect);\n    };\n\n    private teardown = () => {\n        this.mdcList?.unlisten(ACTION_EVENT, this.handleAction);\n        this.mdcList?.destroy();\n\n        this.mdcMenu?.unlisten(SELECTED_EVENT, this.handleMenuSelect);\n        this.mdcMenu?.destroy();\n    };\n\n    private handleAction = (event: MDCListActionEvent) => {\n        this.handleSingleSelect(event.detail.index);\n    };\n\n    private handleMenuSelect = (event: MDCMenuItemEvent) => {\n        this.handleSingleSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const MenuItems = this.items.filter(this.isMenuItem) as MenuItem[];\n        if (MenuItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: MenuItem = MenuItems.find((item: MenuItem) => {\n            return !!item.selected;\n        });\n\n        if (selectedItem) {\n            this.select.emit({ ...selectedItem, selected: false });\n        }\n\n        if (MenuItems[index] !== selectedItem) {\n            this.select.emit({ ...MenuItems[index], selected: false });\n        }\n    };\n\n    private isMenuItem = (item: MenuItem): boolean => {\n        return !('separator' in item);\n    };\n}\n"],"mappings":"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"}