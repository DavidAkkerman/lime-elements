{"version":3,"names":["getIconName","icon","name","getIconColor","iconColor","color"],"sources":["./src/components/icon/get-icon-props.ts"],"sourcesContent":["import { Icon } from '../../interface';\n\n/**\n * Get the icon name.\n * This helps in setting the right icon, both if the consumer only types `icon: string`,\n * and if they use the `Icon` interface for writing the icon name.\n * @param {string | Icon | undefined} icon - The icon to retrieve the name from.\n * @returns {string | undefined} The icon name or the provided string, or `undefined` if `icon` is falsy.\n */\nexport function getIconName(icon: string | Icon | undefined): string {\n    if (!icon) {\n        return;\n    }\n\n    if (typeof icon === 'string') {\n        return icon;\n    }\n\n    return icon.name;\n}\n\n/**\n * Get the icon color.\n * This is added because the old way of specifying `iconColor` is\n * deprecated in our components. So consumers should now use the new\n * `Icon` interface instead. But our components must still support the\n * old way of writing `iconColor: string`.\n * @param {string | Icon} icon - The icon to retrieve the color from.\n * @param {string | undefined} [iconColor] - The color to use when the deprecated `iconColor` is used.\n * @returns {string | undefined} The icon color or the provided color string, or `undefined` if `iconColor` is falsy.\n */\nexport function getIconColor(\n    icon: string | Icon,\n    iconColor?: string | undefined\n): string {\n    if (!iconColor) {\n        return;\n    }\n\n    if (typeof icon === 'string') {\n        return iconColor;\n    }\n\n    return icon.color;\n}\n"],"mappings":"SASgBA,EAAYC,GACxB,IAAKA,EAAM,CACP,M,CAGJ,UAAWA,IAAS,SAAU,CAC1B,OAAOA,C,CAGX,OAAOA,EAAKC,IAChB,C,SAYgBC,EACZF,EACAG,GAEA,IAAKA,EAAW,CACZ,M,CAGJ,UAAWH,IAAS,SAAU,CAC1B,OAAOG,C,CAGX,OAAOH,EAAKI,KAChB,Q"}