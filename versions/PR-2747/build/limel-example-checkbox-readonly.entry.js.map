{"version":3,"names":["CheckboxReadonlyExample","this","setReadonly","event","stopPropagation","readonly","detail","setChecked","value","setDisabled","disabled","setInvalid","invalid","setRequired","required","render","h","label","readonlyProps","trueIcon","falseIcon","name","color","trueLabel","falseLabel","helperText","id","checked","onChange"],"sources":["./src/components/checkbox/examples/checkbox-readonly.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\n/**\n * Customizing the visualization of the `readonly` state\n * It is possible and recommended that you enhance the visualization of a `boolean` field\n * in a `readonly` state.\n *\n * Because depending on the context, the default UI of the `readonly` state may not always\n * provide the best way of _visualizing information_, potentially leading to\n * confusion and negatively affecting the end-users' experience.\n *\n * :::important\n * Before reading the documentations below, make sure read\n * 1. our guides about the difference between\n * [Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n * 2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n * :::\n *\n * Using the readonly-related optional props of `trueLabel`, and `falseLabel`,\n * you can override the `label` and customize it accordingly.\n * Additionally, by using the `trueIcon` and `falseIcon` props,\n * you can override the default icons and their colors.\n */\n@Component({\n    tag: 'limel-example-checkbox-readonly',\n    shadow: true,\n})\nexport class CheckboxReadonlyExample {\n    @State()\n    private readonly = true;\n\n    @State()\n    private value = true;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private required = false;\n\n    public render() {\n        return [\n            <limel-checkbox\n                disabled={this.disabled}\n                label=\"Subscribe to email newsletters\"\n                readonlyProps={{\n                    trueIcon: 'news',\n                    falseIcon: {\n                        name: 'cancel_subscription',\n                        color: 'rgb(var(--color-orange-default))',\n                    },\n                    trueLabel: 'Is subscribed to receive newsletters',\n                    falseLabel: 'Is unsubscribed from newsletters',\n                }}\n                helperText={this.invalid ? 'Something is wrong' : ''}\n                id=\"1\"\n                checked={this.value}\n                required={this.required}\n                invalid={this.invalid}\n                readonly={this.readonly}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Checked\"\n                    onChange={this.setChecked}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value label=\"Checked\" value={this.value} />,\n        ];\n    }\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"],"mappings":"qDA0BaA,EAAuB,M,yBAoExBC,KAAAC,YAAeC,IACnBA,EAAMC,kBACNH,KAAKI,SAAWF,EAAMG,MAAM,EAGxBL,KAAAM,WAAcJ,IAClBA,EAAMC,kBACNH,KAAKO,MAAQL,EAAMG,MAAM,EAGrBL,KAAAQ,YAAeN,IACnBA,EAAMC,kBACNH,KAAKS,SAAWP,EAAMG,MAAM,EAGxBL,KAAAU,WAAcR,IAClBA,EAAMC,kBACNH,KAAKW,QAAUT,EAAMG,MAAM,EAGvBL,KAAAY,YAAeV,IACnBA,EAAMC,kBACNH,KAAKa,SAAWX,EAAMG,MAAM,E,cAxFb,K,WAGH,K,cAGG,M,aAGD,M,cAGC,K,CAEZS,SACH,MAAO,CACHC,EAAA,kBACIN,SAAUT,KAAKS,SACfO,MAAM,iCACNC,cAAe,CACXC,SAAU,OACVC,UAAW,CACPC,KAAM,sBACNC,MAAO,oCAEXC,UAAW,uCACXC,WAAY,oCAEhBC,WAAYxB,KAAKW,QAAU,qBAAuB,GAClDc,GAAG,IACHC,QAAS1B,KAAKO,MACdM,SAAUb,KAAKa,SACfF,QAASX,KAAKW,QACdP,SAAUJ,KAAKI,WAEnBW,EAAA,8BACIA,EAAA,kBACIW,QAAS1B,KAAKI,SACdY,MAAM,WACNW,SAAU3B,KAAKC,cAEnBc,EAAA,kBACIW,QAAS1B,KAAKS,SACdO,MAAM,WACNW,SAAU3B,KAAKQ,cAEnBO,EAAA,kBACIW,QAAS1B,KAAKW,QACdK,MAAM,UACNW,SAAU3B,KAAKU,aAEnBK,EAAA,kBACIW,QAAS1B,KAAKO,MACdS,MAAM,UACNW,SAAU3B,KAAKM,aAEnBS,EAAA,kBACIW,QAAS1B,KAAKa,SACdG,MAAM,WACNW,SAAU3B,KAAKY,eAGvBG,EAAA,uBAAqBC,MAAM,UAAUT,MAAOP,KAAKO,Q"}