{"version":3,"names":["readonlyBooleanCss","ReadonlyBoolean","render","this","renderIcon","renderLabel","trueIcon","falseIcon","icon","value","iconName","getIconName","iconColor","iconBackgroundColor","color","backgroundColor","iconProps","role","name","style","h","Object","assign","label","trueLabel","falseLabel"],"sources":["./src/components/readonly-boolean/readonly-boolean.scss?tag=limel-readonly-boolean&encapsulation=shadow","./src/components/readonly-boolean/readonly-boolean.tsx"],"sourcesContent":["@use '../../style/mixins.scss';\n\n* {\n    box-sizing: border-box;\n    min-width: 0;\n}\n\n:host(limel-readonly-boolean) {\n    --limel-readonly-min-height: 1.75rem;\n    display: flex;\n    gap: 0.5rem;\n    align-items: center;\n    border-radius: 0.5rem;\n    min-width: 0;\n}\n\nlimel-icon {\n    --limel-icon-svg-margin: 0.125rem;\n    border-radius: 0.25rem;\n    flex-shrink: 0;\n    width: var(--limel-readonly-min-height);\n    color: rgb(\n        var(--contrast-900)\n    ); // The default `false` color. Will be overwritten by `Icon`\n}\n\nspan {\n    @include mixins.truncate-text;\n    flex-grow: 1;\n    font-size: 0.8125rem; // `13px`, Like Checkbox & Switch\n    color: var(--mdc-theme-on-surface);\n}\n\n:host(limel-readonly-boolean[value]),\n:host(limel-readonly-boolean[value='true']:not([value='false'])) {\n    limel-icon {\n        color: var(\n            --mdc-theme-primary\n        ); // The default `true` color. Will be overwritten by `Icon`\n    }\n}\n","import { Icon } from '../../interface';\nimport { getIconName } from '../icon/get-icon-props';\nimport { Component, Prop, h } from '@stencil/core';\n\n/**\n * This component enhances the visualization of a `boolean` field\n * in a `readonly` state.\n * The reason we offer this component is that the default styling\n * of the Checkbox or Toggle switch in the `readonly` state may not always\n * provide the best way of _visualizing information_, potentially leading to\n * confusion and negatively affecting the end-users' experience.\n *\n * @private\n * @exampleComponent limel-example-readonly-boolean\n */\n\n@Component({\n    tag: 'limel-readonly-boolean',\n    shadow: true,\n    styleUrl: 'readonly-boolean.scss',\n})\nexport class ReadonlyBoolean {\n    /**\n     * The value of the component.\n     * - `true` means for instance a checkbox is \"checked\" or toggle switch in \"ON\".\n     * - `false` means \"unchecked\", or \"OFF\".\n     */\n    @Prop({ reflect: true })\n    public value: boolean;\n\n    /**\n     * The checkbox label.\n     * Will be replaced by `trueLabel` and `falseLabel` if they are set.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The text to show, when the `value` is `true`.\n     */\n    @Prop({ reflect: true })\n    public trueLabel?: string;\n\n    /**\n     * The text to show, when the `value` is `false`.\n     */\n    @Prop({ reflect: true })\n    public falseLabel?: string;\n\n    /**\n     * The icon to show, when the `value` is `true`.\n     */\n    @Prop({ reflect: true })\n    public trueIcon?: string | Icon = 'ok';\n\n    /**\n     * The icon to show, when the `value` is `false`.\n     */\n    @Prop({ reflect: true })\n    public falseIcon?: string | Icon = 'minus';\n\n    public render() {\n        return [this.renderIcon(), this.renderLabel()];\n    }\n\n    private renderIcon() {\n        if (!this.trueIcon && !this.falseIcon) {\n            return;\n        }\n\n        let icon;\n        if (this.value) {\n            icon = this.trueIcon;\n        } else {\n            icon = this.falseIcon;\n        }\n\n        const iconName = getIconName(icon);\n\n        if (!iconName) {\n            return;\n        }\n\n        let iconColor;\n        let iconBackgroundColor;\n\n        if (typeof icon === 'object' && 'name' in icon) {\n            iconColor = icon.color;\n            iconBackgroundColor = icon.backgroundColor;\n        }\n\n        const iconProps = {\n            role: 'presentation',\n            name: iconName,\n            style: {\n                color: iconColor,\n                'background-color': iconBackgroundColor,\n            },\n        };\n\n        return <limel-icon {...iconProps} />;\n    }\n\n    private renderLabel() {\n        let label;\n\n        if (this.trueLabel && this.falseLabel) {\n            label = this.value ? this.trueLabel : this.falseLabel;\n        } else {\n            label = this.label;\n        }\n\n        return <span>{label}</span>;\n    }\n}\n"],"mappings":"gGAAA,MAAMA,EAAqB,onB,MCqBdC,EAAe,M,oIAgCU,K,eAMC,O,CAE5BC,SACH,MAAO,CAACC,KAAKC,aAAcD,KAAKE,c,CAG5BD,aACJ,IAAKD,KAAKG,WAAaH,KAAKI,UAAW,CACnC,M,CAGJ,IAAIC,EACJ,GAAIL,KAAKM,MAAO,CACZD,EAAOL,KAAKG,Q,KACT,CACHE,EAAOL,KAAKI,S,CAGhB,MAAMG,EAAWC,EAAYH,GAE7B,IAAKE,EAAU,CACX,M,CAGJ,IAAIE,EACJ,IAAIC,EAEJ,UAAWL,IAAS,UAAY,SAAUA,EAAM,CAC5CI,EAAYJ,EAAKM,MACjBD,EAAsBL,EAAKO,e,CAG/B,MAAMC,EAAY,CACdC,KAAM,eACNC,KAAMR,EACNS,MAAO,CACHL,MAAOF,EACP,mBAAoBC,IAI5B,OAAOO,EAAA,aAAAC,OAAAC,OAAA,GAAgBN,G,CAGnBX,cACJ,IAAIkB,EAEJ,GAAIpB,KAAKqB,WAAarB,KAAKsB,WAAY,CACnCF,EAAQpB,KAAKM,MAAQN,KAAKqB,UAAYrB,KAAKsB,U,KACxC,CACHF,EAAQpB,KAAKoB,K,CAGjB,OAAOH,EAAA,YAAOG,E"}