{"version":3,"names":["readonlyBooleanCss","ReadonlyBoolean","name","render","this","renderIcon","renderLabel","trueIcon","falseIcon","color","backgroundColor","value","_a","_b","_c","_d","_e","_f","iconProps","role","badge","style","h","Object","assign","text","trueText","falseText","label"],"sources":["./src/components/readonly-boolean/readonly-boolean.scss?tag=limel-readonly-boolean&encapsulation=shadow","./src/components/readonly-boolean/readonly-boolean.tsx"],"sourcesContent":["@use '../../style/mixins.scss';\n\n* {\n    box-sizing: border-box;\n    min-width: 0;\n}\n\n:host(limel-readonly-boolean) {\n    display: flex;\n    gap: 0.5rem;\n    align-items: center;\n    border-radius: 0.5rem;\n    min-width: 0;\n}\n\nlimel-icon {\n    --limel-icon-svg-margin: 0.125rem;\n    border-radius: 0.25rem;\n    flex-shrink: 0;\n    width: 1.75rem;\n    color: rgb(\n        var(--contrast-900)\n    ); // The default `false` color. Will be overwritten by `Icon`\n}\n\nspan {\n    @include mixins.truncate-text;\n    flex-grow: 1;\n    font-size: 0.8125rem; // `13px`, Like Checkbox & Switch\n    color: var(--mdc-theme-on-surface);\n}\n\n:host(limel-readonly-boolean[value]),\n:host(limel-readonly-boolean[value='true']:not([value='false'])) {\n    limel-icon {\n        color: var(\n            --mdc-theme-primary\n        ); // The default `true` color. Will be overwritten by `Icon`\n    }\n}\n","import { Icon } from '../../interface';\nimport { Component, Prop, h } from '@stencil/core';\n\n/**\n * This component enhances the visualization of a `boolean` field\n * in a `readonly` state.\n * The reason we offer this component is that the default styling\n * of the Checkbox or Toggle switch in the `readonly` state may not always\n * provide the best way of _visualizing information_, potentially leading to\n * confusion and negatively affecting the end-users' experience.\n *\n * @private\n * @exampleComponent limel-example-readonly-boolean\n */\n\n@Component({\n    tag: 'limel-readonly-boolean',\n    shadow: true,\n    styleUrl: 'readonly-boolean.scss',\n})\nexport class ReadonlyBoolean {\n    /**\n     * The value of the component.\n     * - `true` means for instance a checkbox is \"checked\" or toggle switch in \"ON\".\n     * - `false` means \"unchecked\", or \"OFF\".\n     */\n    @Prop({ reflect: true })\n    public value: boolean;\n\n    /**\n     * The checkbox label.\n     * Will be replaced by `trueText` and `falseText` if they are set.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The text to show, when the value is `true`.\n     */\n    @Prop({ reflect: true })\n    public trueText?: string;\n\n    /**\n     * The text to show, when the value is `false`.\n     */\n    @Prop({ reflect: true })\n    public falseText?: string;\n\n    /**\n     * The icon to show, when the value is `true`.\n     */\n    @Prop({ reflect: true })\n    public trueIcon?: Icon = { name: 'ok' };\n\n    /**\n     * The icon to show, when the value is `false`.\n     */\n    @Prop({ reflect: true })\n    public falseIcon?: Icon = { name: 'minus' };\n\n    public render() {\n        return [this.renderIcon(), this.renderLabel()];\n    }\n\n    private renderIcon() {\n        if (!this.trueIcon || !this.falseIcon) {\n            return;\n        }\n\n        let name;\n        let color;\n        let backgroundColor;\n\n        if (this.value) {\n            name = this.trueIcon?.name;\n            color = this.trueIcon?.color;\n            backgroundColor = this.trueIcon?.backgroundColor;\n        } else {\n            name = this.falseIcon?.name;\n            color = this.falseIcon?.color;\n            backgroundColor = this.falseIcon?.backgroundColor;\n        }\n\n        const iconProps = {\n            role: 'presentation',\n            badge: true,\n            name: name,\n            style: {\n                color: color,\n                'background-color': backgroundColor,\n            },\n        };\n\n        return <limel-icon {...iconProps} />;\n    }\n\n    private renderLabel() {\n        let text;\n\n        if (this.trueText && this.falseText) {\n            text = this.value ? this.trueText : this.falseText;\n        } else {\n            text = this.label;\n        }\n\n        return <span>{text}</span>;\n    }\n}\n"],"mappings":"+CAAA,MAAMA,EAAqB,ujB,MCoBdC,EAAe,M,kIAgCC,CAAEC,KAAM,M,eAMP,CAAEA,KAAM,Q,CAE3BC,SACH,MAAO,CAACC,KAAKC,aAAcD,KAAKE,c,CAG5BD,a,gBACJ,IAAKD,KAAKG,WAAaH,KAAKI,UAAW,CACnC,M,CAGJ,IAAIN,EACJ,IAAIO,EACJ,IAAIC,EAEJ,GAAIN,KAAKO,MAAO,CACZT,GAAOU,EAAAR,KAAKG,YAAQ,MAAAK,SAAA,SAAAA,EAAEV,KACtBO,GAAQI,EAAAT,KAAKG,YAAQ,MAAAM,SAAA,SAAAA,EAAEJ,MACvBC,GAAkBI,EAAAV,KAAKG,YAAQ,MAAAO,SAAA,SAAAA,EAAEJ,e,KAC9B,CACHR,GAAOa,EAAAX,KAAKI,aAAS,MAAAO,SAAA,SAAAA,EAAEb,KACvBO,GAAQO,EAAAZ,KAAKI,aAAS,MAAAQ,SAAA,SAAAA,EAAEP,MACxBC,GAAkBO,EAAAb,KAAKI,aAAS,MAAAS,SAAA,SAAAA,EAAEP,e,CAGtC,MAAMQ,EAAY,CACdC,KAAM,eACNC,MAAO,KACPlB,KAAMA,EACNmB,MAAO,CACHZ,MAAOA,EACP,mBAAoBC,IAI5B,OAAOY,EAAA,aAAAC,OAAAC,OAAA,GAAgBN,G,CAGnBZ,cACJ,IAAImB,EAEJ,GAAIrB,KAAKsB,UAAYtB,KAAKuB,UAAW,CACjCF,EAAOrB,KAAKO,MAAQP,KAAKsB,SAAWtB,KAAKuB,S,KACtC,CACHF,EAAOrB,KAAKwB,K,CAGhB,OAAON,EAAA,YAAOG,E"}