{"version":3,"names":["inputFieldCss","InputField","constructor","hostRef","this","completionsList","initialize","element","limelInputField","shadowRoot","querySelector","mdcTextField","MDCTextField","mapCompletions","window","addEventListener","layout","passive","setFocus","completions","map","item","text","focus","getContainerClassList","classList","label","isInvalid","disabled","readonly","required","value","hasPrefix","hasSuffix","type","helperText","maxlength","leadingIcon","getTrailingIcon","renderInput","properties","h","Object","assign","pattern","onWheel","handleWheel","onKeyDown","placeholder","renderTextarea","class","_a","getAdditionalProps","props","step","Number","isInteger","min","max","minlength","onFocus","isFocused","showCompletions","onBlur","isModified","hasHelperText","undefined","hasHelperLine","renderHelperLine","length","helperTextId","maxLength","invalid","renderEmptyValueForReadonly","renderSuffix","suffix","renderPrefix","prefix","getInputElement","checkValidity","elementName","renderLabel","labelClassList","id","labelId","renderLeadingIcon","name","renderTrailingLinkOrButton","html","trailingIcon","hasLink","push","renderLinkIcon","getLink","renderTrailingIcon","showLink","includes","href","getHref","target","getTarget","linkProps","icon","tabindex","role","tabIndex","onKeyPress","handleIconKeyPress","onClick","handleIconClick","renderFormattedNumber","renderValue","formatNumber","Intl","NumberFormat","locale","format","event","isForwardTab","key","TAB","keyCode","TAB_KEY_CODE","altKey","metaKey","shiftKey","isUp","ARROW_UP","ARROW_UP_KEY_CODE","isDown","ARROW_DOWN","ARROW_DOWN_KEY_CODE","list","document","portalId","preventDefault","listElement","handleCompletionChange","stopPropagation","detail","changeEmitter","renderAutocompleteList","dropdownZIndex","getComputedStyle","getPropertyValue","visible","containerId","inheritParentWidth","containerStyle","open","allowClicksElement","style","display","onDismiss","handleCloseMenu","renderListResult","filteredCompletions","filterCompletions","onChange","handleKeyDownInDropdown","items","keyFound","ESCAPE","ENTER","keyCodeFound","ESCAPE_KEY_CODE","ENTER_KEY_CODE","filter","completion","toLowerCase","indexOf","handleChange","data","change","emit","action","isEnter","isSpace","SPACE","SPACE_KEY_CODE","globalConfig","defaultLocale","debounceTimeout","debounce","createRandomString","connectedCallback","componentDidLoad","disconnectedCallback","destroy","removeEventListener","componentDidUpdate","valid","render","onInput","valueWatcher","newValue","completionsWatcher","RadioButtonTemplate","checked","htmlFor","ListRenderer","defaultConfig","isOpen","badgeIcons","getIndexForWhichToApplyTabIndex","result","i","selected","renderListItem","index","rendertext","config","renderVariantListItem","classNames","hasPrimaryComponent","attributes","applyTabIndexToItemAtIndex","renderIcon","getPrimaryComponent","renderText","twoLines","avatarList","renderDivider","renderActionMenu","actions","primaryComponent","isSimpleItem","secondaryText","getIconName","color","getIconColor","iconColor","badge","size","iconSize","classes","openDirection","slot","itemTemplate","CheckboxTemplate","renderVariantListItemContent","hasIcons","some","selectableListTypes","selectable","commandKey","PrimaryComponent","listCss","ACTION_EVENT","listStrings","List","listRenderer","setup","setupList","setupListeners","mdcList","teardown","MDCList","hasTypeahead","unlisten","handleAction","multiple","listen","singleSelection","_b","handleSingleSelect","handleMultiSelect","listItems","isListItem","selectedItem","find","selectedIndex","selectedItems","listIndex","triggerIconColorWarning","maxLinesSecondaryText","toFixed","Host","handleType","itemsChanged","setTimeout","findIndex","initializeListType","console","warn","menuSurfaceCss","MenuSurface","menuElement","host","menuSurface","MDCMenuSurface","setAnchorCorner","Corner","TOP_START","handleDocumentClick","capture","handleKeyDown","handleResize","elementPath","composedPath","isDescendant","clickedInAllowedElement","dismiss","preventClickEventPropagation","stopEvent","once","isEscape","isTab"],"sources":["./src/components/input-field/input-field.scss?tag=limel-input-field&encapsulation=shadow","./src/components/input-field/input-field.tsx","./src/components/list/radio-button/radio-button.template.tsx","./src/components/list/list-renderer.tsx","./src/components/list/list.scss?tag=limel-list&encapsulation=shadow","./src/components/list/list.tsx","./src/components/menu-surface/menu-surface.scss?tag=limel-menu-surface&encapsulation=shadow","./src/components/menu-surface/menu-surface.tsx"],"sourcesContent":["@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/textfield';\n@use '@material/textfield/icon';\n@use '@material/notched-outline/mdc-notched-outline';\n@use '@material/floating-label';\n@use '@material/floating-label/mdc-floating-label';\n@use '@material/ripple';\n@use '@material/list';\n@use '@material/elevation';\n@use '@material/menu-surface';\n\n/**\n * @prop --textarea-height: Height of the field when type is set to `textarea`\n */\n\n:host {\n    position: relative;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([type='textarea']) {\n    height: var(--textarea-height, 100%);\n\n    .mdc-text-field.mdc-text-field--textarea {\n        height: var(--textarea-height, 100%);\n\n        .mdc-text-field__input {\n            @include shared_input-select-picker.input-field-placeholder;\n            margin-top: functions.pxToRem(8);\n            margin-bottom: 0;\n        }\n    }\n}\n\n@include mixins.hide-helper-line-when-not-needed(limel-input-field);\n\n@include textfield.core-styles;\n@include icon.icon-core-styles;\n\n@include shared_input-select-picker.outlined-style-overrides;\n@include shared_input-select-picker.readonly-overrides;\n@include shared_input-select-picker.cropped-label-hack;\n@include shared_input-select-picker.disabled-overrides;\n@include shared_input-select-picker.leading-icon;\n@include shared_input-select-picker.trailing-icon;\n@include shared_input-select-picker.floating-label-overrides;\n@include shared_input-select-picker.lime-empty-value-for-readonly;\n@include shared_input-select-picker.lime-looks-like-input-value;\n\n.lime-text-field--empty {\n    .mdc-text-field__icon--trailing {\n        @include shared_input-select-picker.looks-disabled;\n        pointer-events: none;\n        box-shadow: none !important;\n    }\n}\n\n.mdc-text-field {\n    width: 100%;\n\n    &:not(.mdc-text-field--disabled) {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-900));\n        }\n    }\n    &.mdc-text-field--disabled {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-700));\n        }\n    }\n}\n\n.lime-formatted-input {\n    display: none;\n    width: calc(100% - #{functions.pxToRem(20)});\n    z-index: z-index.$input-field--formatted-value;\n\n    pointer-events: none;\n\n    :not(.mdc-text-field--focused):not(.mdc-text-field--invalid) & {\n        display: block;\n    }\n\n    + .mdc-text-field__input {\n        z-index: z-index.$input-field--input-with-formatted-value;\n    }\n}\n\n:not(.mdc-text-field--focused):not(.mdc-text-field--invalid) {\n    .mdc-text-field__input[type='number'] {\n        color: transparent;\n        -webkit-text-fill-color: transparent;\n    }\n\n    &.lime-text-field--readonly {\n        .mdc-text-field__input[type='number'] {\n            visibility: hidden;\n            // Not having `visibility: hidden;` makes the unformatted\n            // value selectable; which is not so nice when users\n            // click drag to select content on the screen.\n            // The reason to have it only on `readonly` mode is\n            // 1. This is the use case where it makes most sense\n            // 2. We don't want to repeat the same thing in the\n            // accessibility tree, and make it readable for assistive\n            // technologies.\n            // 3. When not readonly, clicking on the `<input />`\n            // element sets the focus and activates the edit mode.\n            // So we cannot always have it `hidden` on.\n            // which is why we have instead\n            // `color: transparent` a few lines before this.\n        }\n    }\n}\n\n.autocomplete-list-container {\n    position: relative;\n}\n\n.autocomplete-list {\n    background-color: var(--lime-elevated-surface-background-color);\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    max-height: functions.pxToRem(200);\n    overflow-y: auto;\n}\n\n.mdc-deprecated-list-item {\n    cursor: pointer;\n}\n\ninput.mdc-text-field__input {\n    @include shared_input-select-picker.input-field-placeholder;\n\n    &::-webkit-search-cancel-button {\n        @include mixins.clear-all-button;\n\n        -webkit-appearance: none;\n\n        position: absolute;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        margin: auto;\n\n        &:active {\n            transform: none; //Makes the \"clear-all button\" work\n        }\n        .mdc-text-field--label-floating & {\n            opacity: 1;\n        }\n    }\n}\n\n@import './partial-styles/trailing-icon.scss';\n@import './partial-styles/readonly';\n\n// To make the input field render smaller than the default MDC UI\n.mdc-text-field {\n    &.mdc-text-field--outlined {\n        height: shared_input-select-picker.$height-of-mdc-text-field;\n    }\n}\n.mdc-text-field--with-trailing-icon {\n    .mdc-text-field__icon--trailing {\n        padding: 0.25rem;\n        margin-right: 0.25rem;\n    }\n}\n.mdc-text-field--outlined.mdc-text-field--with-leading-icon {\n    .mdc-text-field__icon--leading {\n        margin-left: 0.25rem;\n    }\n    .mdc-floating-label {\n        left: 1.5rem;\n    }\n}\n","import { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { debounce } from 'lodash-es';\nimport {\n    ARROW_DOWN,\n    ARROW_DOWN_KEY_CODE,\n    ARROW_UP,\n    ARROW_UP_KEY_CODE,\n    ENTER,\n    ENTER_KEY_CODE,\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    SPACE,\n    SPACE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\nimport { InputType } from '../input-field/input-field.types';\nimport { ListItem } from '../list/list-item.types';\nimport { getHref, getTarget } from '../../util/link-helper';\nimport { JSXBase } from '@stencil/core/internal';\nimport { createRandomString } from '../../util/random-string';\nimport { LimelListCustomEvent } from '../../components';\nimport { globalConfig } from '../../global/config';\n\ninterface LinkProperties {\n    href: string;\n    target?: string;\n}\n\n/**\n * @exampleComponent limel-example-input-field-text\n * @exampleComponent limel-example-input-field-placeholder\n * @exampleComponent limel-example-input-field-text-multiple\n * @exampleComponent limel-example-input-field-number\n * @exampleComponent limel-example-input-field-autocomplete\n * @exampleComponent limel-example-input-field-icon-leading\n * @exampleComponent limel-example-input-field-icon-trailing\n * @exampleComponent limel-example-input-field-icon-both\n * @exampleComponent limel-example-input-field-showlink\n * @exampleComponent limel-example-input-field-error-icon\n * @exampleComponent limel-example-input-field-textarea\n * @exampleComponent limel-example-input-field-suffix\n * @exampleComponent limel-example-input-field-prefix\n * @exampleComponent limel-example-input-field-search\n * @exampleComponent limel-example-input-field-pattern\n * @exampleComponent limel-example-input-field-focus\n */\n@Component({\n    tag: 'limel-input-field',\n    shadow: true,\n    styleUrl: 'input-field.scss',\n})\nexport class InputField {\n    /**\n     * Set to `true` to disable the field.\n     * Use `disabled` to indicate that the field can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to make the field read-only.\n     * Use `readonly` when the field is only there to present the data it holds,\n     * and will not become possible for the current user to edit.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * The input label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The placeholder text shown inside the input field, when the field is focused and empty.\n     */\n    @Prop({ reflect: true })\n    public placeholder: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * A short piece of text to display before the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public prefix: string;\n\n    /**\n     * A short piece of text to display after the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public suffix: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * The value of the field.\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * Trailing icon to show to the far right in the field.\n     */\n    @Prop({ reflect: true })\n    public trailingIcon: string;\n\n    /**\n     * Leading icon to show to the far left in the field.\n     */\n    @Prop({ reflect: true })\n    public leadingIcon: string;\n\n    /**\n     * Regular expression that the current value of the input field must match.\n     * No forward slashes should be specified around the pattern.\n     * Only used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n     * `password`, or `search`.\n     */\n    @Prop({ reflect: true })\n    public pattern: string;\n\n    /**\n     * Type of input.\n     *\n     * Note** regarding type `url`: `limel-input` uses the native validation\n     * built into the browser for many types of input fields. The native\n     * validation for `url` is very strict, and does not allow relative urls,\n     * nor any other formats that are not a \"fully qualified\" url. To allow\n     * such urls, use the type `urlAsText` instead. `urlAsText` works exactly\n     * like `text` in all regards, except that it enables use of the `showLink`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public type: InputType = 'text';\n\n    /**\n     * Set to `true` to format the current value of the input field only\n     * if the field is of type number.\n     * The number format is determined by the current language of the browser.\n     */\n    @Prop({ reflect: true })\n    public formatNumber = true;\n\n    /**\n     * Incremental values that are valid if the field type is `number`.\n     */\n    @Prop({ reflect: true })\n    public step: number | 'any' = 'any';\n\n    /**\n     * Maximum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public max: number;\n\n    /**\n     * Minimum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public min: number;\n\n    /**\n     * Maximum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public maxlength: number;\n\n    /**\n     * Minimum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public minlength: number;\n\n    /**\n     * list of suggestions `value` can autocomplete to.\n     */\n    @Prop()\n    public completions: string[] = [];\n\n    /**\n     * For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n     * `true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\n     * respectively. The default icon can be overridden using the `trailingIcon`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public showLink = false;\n\n    /**\n     * The locale to use for formatting numbers.\n     */\n    @Prop({ reflect: true })\n    public locale: string = globalConfig.defaultLocale;\n\n    /**\n     * Emitted when the input value is changed.\n     */\n    @Event()\n    private change: EventEmitter<string>;\n\n    /**\n     * Emitted when `trailingIcon` or `leadingIcon` is set\n     * and the icon is interacted with.\n     */\n    @Event()\n    private action: EventEmitter<void>;\n\n    @Element()\n    private limelInputField: HTMLLimelInputFieldElement;\n\n    @State()\n    private isFocused: boolean = false;\n\n    @State()\n    private isModified: boolean = false;\n\n    @State()\n    public showCompletions: boolean = false;\n\n    private mdcTextField: MDCTextField;\n    private completionsList: ListItem[] = [];\n    private portalId: string;\n    private helperTextId: string;\n    private labelId: string;\n\n    constructor() {\n        const debounceTimeout = 300;\n        this.changeEmitter = debounce(this.changeEmitter, debounceTimeout);\n\n        this.portalId = createRandomString();\n        this.helperTextId = createRandomString();\n        this.labelId = createRandomString();\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n\n        window.removeEventListener('resize', this.layout);\n        this.limelInputField.removeEventListener('focus', this.setFocus);\n    }\n\n    public componentDidUpdate() {\n        if (this.invalid) {\n            this.mdcTextField.valid = false;\n        }\n    }\n\n    public render() {\n        const properties = this.getAdditionalProps();\n        properties['aria-labelledby'] = this.labelId;\n        properties.class = 'mdc-text-field__input';\n        properties.onInput = this.handleChange;\n        properties.onFocus = this.onFocus;\n        properties.onBlur = this.onBlur;\n        properties.required = this.required;\n        properties.readonly = this.readonly;\n        properties.disabled = this.disabled || this.readonly;\n\n        if (this.hasHelperText()) {\n            properties['aria-controls'] = this.helperTextId;\n            properties['aria-describedby'] = this.helperTextId;\n        }\n\n        return [\n            <label class={this.getContainerClassList()}>\n                <span class=\"mdc-notched-outline\" tabindex=\"-1\">\n                    <span class=\"mdc-notched-outline__leading\"></span>\n                    {this.renderLabel()}\n                    <span class=\"mdc-notched-outline__trailing\"></span>\n                </span>\n                {this.renderLeadingIcon()}\n                {this.renderEmptyValueForReadonly()}\n                {this.renderPrefix()}\n                {this.renderFormattedNumber()}\n                {this.renderInput(properties)}\n                {this.renderSuffix()}\n                {this.renderTextarea(properties)}\n                {this.renderTrailingLinkOrButton()}\n            </label>,\n            this.renderHelperLine(),\n            this.renderAutocompleteList(),\n        ];\n    }\n\n    @Watch('value')\n    protected valueWatcher(newValue: string) {\n        if (!this.mdcTextField) {\n            return;\n        }\n\n        if (newValue !== this.mdcTextField.value) {\n            this.mdcTextField.value = newValue || '';\n        }\n    }\n\n    @Watch('completions')\n    protected completionsWatcher() {\n        this.mapCompletions();\n    }\n\n    private initialize = () => {\n        const element =\n            this.limelInputField.shadowRoot.querySelector('.mdc-text-field');\n        if (!element) {\n            return;\n        }\n\n        this.mdcTextField = new MDCTextField(element);\n\n        this.mapCompletions();\n\n        window.addEventListener('resize', this.layout, { passive: true });\n        this.limelInputField.addEventListener('focus', this.setFocus);\n    };\n\n    private mapCompletions = () => {\n        this.completionsList = [...this.completions].map((item) => {\n            return { text: item };\n        });\n    };\n\n    private setFocus = () => {\n        this.mdcTextField.focus();\n    };\n\n    private getContainerClassList = () => {\n        const classList = {\n            'mdc-text-field': true,\n            'mdc-text-field--no-label': !this.label,\n            'mdc-text-field--outlined': true,\n            'mdc-text-field--invalid': this.isInvalid(),\n            'mdc-text-field--disabled': this.disabled || this.readonly,\n            'lime-text-field--readonly': this.readonly,\n            'mdc-text-field--required': this.required,\n            'lime-text-field--empty': !this.value,\n            'lime-has-prefix': this.hasPrefix(),\n            'lime-has-suffix': this.hasSuffix(),\n        };\n\n        if (this.type === 'textarea') {\n            classList['mdc-text-field--textarea'] = true;\n            classList['has-helper-line'] =\n                !!this.helperText || !!this.maxlength;\n        } else {\n            classList['mdc-text-field--with-leading-icon'] = !!this.leadingIcon;\n            classList['mdc-text-field--with-trailing-icon'] =\n                !!this.getTrailingIcon();\n        }\n\n        return classList;\n    };\n\n    private renderInput = (\n        properties: JSXBase.InputHTMLAttributes<HTMLInputElement>,\n    ) => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const type = this.type === 'urlAsText' ? 'text' : this.type;\n\n        return (\n            <input\n                {...properties}\n                type={type}\n                pattern={this.pattern}\n                onWheel={this.handleWheel}\n                onKeyDown={this.onKeyDown}\n                value={this.value}\n                placeholder={this.placeholder}\n            />\n        );\n    };\n\n    private renderTextarea = (\n        properties: JSXBase.TextareaHTMLAttributes<HTMLTextAreaElement>,\n    ) => {\n        if (this.type !== 'textarea') {\n            return;\n        }\n\n        return (\n            <span class=\"mdc-text-field__resizer\">\n                <textarea {...properties} placeholder={this.placeholder}>\n                    {this.value}\n                </textarea>\n            </span>\n        );\n    };\n\n    private layout = () => {\n        this.mdcTextField?.layout();\n    };\n\n    private getAdditionalProps = () => {\n        const props: any = {};\n\n        if (this.type === 'number') {\n            props.step = this.step;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.min)) {\n            props.min = this.min;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.max)) {\n            props.max = this.max;\n        }\n\n        if (this.minlength) {\n            props.minlength = this.minlength;\n        }\n\n        if (this.maxlength) {\n            props.maxlength = this.maxlength;\n        }\n\n        return props;\n    };\n\n    private onFocus = () => {\n        this.isFocused = true;\n        this.showCompletions = true;\n    };\n\n    private onBlur = () => {\n        this.isFocused = false;\n        this.isModified = true;\n    };\n\n    private hasHelperText = () => {\n        return this.helperText !== null && this.helperText !== undefined;\n    };\n\n    private hasHelperLine = () => {\n        return this.maxlength || this.hasHelperText();\n    };\n\n    private renderHelperLine = () => {\n        const text: string = this.value || '';\n        const length = text.length;\n\n        if (!this.hasHelperLine()) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                helperTextId={this.helperTextId}\n                helperText={this.helperText}\n                length={length}\n                maxLength={this.maxlength}\n                invalid={this.isInvalid()}\n            />\n        );\n    };\n\n    private renderEmptyValueForReadonly = () => {\n        if (this.readonly && !this.value) {\n            return (\n                <span class=\"lime-empty-value-for-readonly lime-looks-like-input-value\">\n                    –\n                </span>\n            );\n        }\n    };\n\n    private renderSuffix = () => {\n        if (!this.hasSuffix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--suffix': true,\n        };\n\n        return <span class={classList}>{this.suffix}</span>;\n    };\n\n    private hasSuffix = () => {\n        return this.suffix !== null && this.suffix !== undefined;\n    };\n\n    private renderPrefix = () => {\n        if (!this.hasPrefix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--prefix': true,\n        };\n\n        return <span class={classList}>{this.prefix}</span>;\n    };\n\n    private hasPrefix = () => {\n        return this.prefix !== null && this.prefix !== undefined;\n    };\n\n    private isInvalid = () => {\n        if (this.readonly) {\n            // A readonly field can never be invalid.\n            return false;\n        }\n\n        if (this.invalid) {\n            // `this.invalid` is set by the consumer. If the consumer explicitly\n            // told us to consider the field invalid, we consider it invalid\n            // regardless of what our internal validation thinks, and regardless\n            // of whether the field has been modified.\n            return true;\n        }\n\n        if (!this.isModified) {\n            return false;\n        }\n\n        const element = this.getInputElement();\n\n        return !(element && element.checkValidity());\n    };\n\n    private getInputElement = (): HTMLInputElement | HTMLTextAreaElement => {\n        let elementName = 'input';\n        if (this.type === 'textarea') {\n            elementName = 'textarea';\n        }\n\n        return this.limelInputField.shadowRoot.querySelector(elementName);\n    };\n\n    private renderLabel = () => {\n        const labelClassList = {\n            'mdc-floating-label': true,\n            'mdc-floating-label--float-above':\n                !!this.value || this.isFocused || this.readonly,\n        };\n\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <span class=\"mdc-notched-outline__notch\">\n                <span class={labelClassList} id={this.labelId}>\n                    {this.label}\n                </span>\n            </span>\n        );\n    };\n\n    private renderLeadingIcon = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        if (this.leadingIcon) {\n            return (\n                <i class=\"material-icons mdc-text-field__icon mdc-text-field__icon--leading\">\n                    <limel-icon name={this.leadingIcon} />\n                </i>\n            );\n        }\n    };\n\n    private renderTrailingLinkOrButton = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const html = [];\n\n        const trailingIcon = this.getTrailingIcon();\n\n        if (!this.isInvalid() && this.hasLink()) {\n            html.push(this.renderLinkIcon(this.getLink(), trailingIcon));\n        } else if (trailingIcon) {\n            html.push(this.renderTrailingIcon(trailingIcon));\n        }\n\n        return html;\n    };\n\n    private hasLink = () => {\n        return (\n            this.showLink &&\n            ['email', 'tel', 'url', 'urlAsText'].includes(this.type)\n        );\n    };\n\n    private getLink = () => {\n        const props: LinkProperties = { href: '' };\n        switch (this.type) {\n            case 'email':\n                props.href = `mailto:${this.value}`;\n                break;\n            case 'tel':\n                props.href = `tel:${this.value}`;\n                break;\n            default:\n                props.href = getHref(this.value);\n                props.target = getTarget(this.value);\n        }\n\n        return props;\n    };\n\n    private renderLinkIcon = (linkProps: LinkProperties, icon: string) => {\n        // If the trailing icon uses the class `mdc-text-field__icon--trailing`,\n        // MDC attaches a click handler to it, which apparently runs\n        // `preventDefault()` on the event. For links, we don't want that,\n        // so instead of `mdc-text-field__icon--trailing`, we use our own class\n        // `lime-trailing-icon-for-link`, which uses all the same styling. /Ads\n        return (\n            <a\n                {...linkProps}\n                class=\"material-icons mdc-text-field__icon lime-trailing-icon-for-link\"\n                tabindex={this.disabled || !this.value ? '-1' : '0'}\n                role=\"button\"\n            >\n                <limel-icon name={icon} />\n            </a>\n        );\n    };\n\n    private renderTrailingIcon = (icon: string) => {\n        const props: any = {\n            tabIndex: this.isInvalid() ? '-1' : '0',\n        };\n        if (!this.isInvalid()) {\n            props.onKeyPress = this.handleIconKeyPress;\n            props.onClick = this.handleIconClick;\n            props.role = 'button';\n        }\n\n        return (\n            <i\n                class=\"material-icons mdc-text-field__icon mdc-text-field__icon--trailing\"\n                {...props}\n            >\n                <limel-icon name={icon} />\n            </i>\n        );\n    };\n\n    private getTrailingIcon = () => {\n        if (this.isInvalid()) {\n            return 'high_importance';\n        }\n\n        if (this.trailingIcon) {\n            return this.trailingIcon;\n        }\n\n        if (this.showLink && this.type === 'email') {\n            return 'filled_message';\n        }\n\n        if (this.showLink && this.type === 'tel') {\n            return 'phone';\n        }\n\n        if (\n            this.showLink &&\n            (this.type === 'url' || this.type === 'urlAsText')\n        ) {\n            return 'external_link';\n        }\n    };\n\n    private renderFormattedNumber = () => {\n        if (this.type !== 'number') {\n            return;\n        }\n\n        let renderValue = this.value;\n        if (this.formatNumber && this.value) {\n            renderValue = new Intl.NumberFormat(this.locale).format(\n                Number(this.value),\n            );\n        }\n\n        return (\n            <span class=\"lime-formatted-input lime-looks-like-input-value\">\n                {renderValue}\n            </span>\n        );\n    };\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     *\n     * @param event - event\n     */\n\n    private onKeyDown = (event: KeyboardEvent): void => {\n        this.showCompletions = true;\n        const isForwardTab =\n            (event.key === TAB || event.keyCode === TAB_KEY_CODE) &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp =\n            event.key === ARROW_UP || event.keyCode === ARROW_UP_KEY_CODE;\n        const isDown =\n            event.key === ARROW_DOWN || event.keyCode === ARROW_DOWN_KEY_CODE;\n\n        if (event.keyCode === TAB_KEY_CODE && event.shiftKey) {\n            this.showCompletions = false;\n        }\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child',\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child',\n            );\n            listElement.focus();\n        }\n    };\n\n    private handleCompletionChange = (\n        event: LimelListCustomEvent<ListItem>,\n    ) => {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.showCompletions = false;\n\n        /*\n         This change event doesn't need to be debounced in itself, but we want\n         to make absolutely sure that an earlier change event that *has* been\n         debounced doesn't emit after this one. Therefore, we run this through\n         the same debounced emitter function. /Ads\n         */\n        this.changeEmitter(event.detail.text);\n    };\n\n    private renderAutocompleteList = () => {\n        if (this.type === 'textarea' || !this.completions.length) {\n            return;\n        }\n\n        const dropdownZIndex = getComputedStyle(\n            this.limelInputField,\n        ).getPropertyValue('--dropdown-z-index');\n\n        return (\n            <limel-portal\n                visible={this.showCompletions}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={this.showCompletions}\n                    allowClicksElement={this.limelInputField}\n                    style={{\n                        '--mdc-menu-min-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {this.renderListResult()}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    };\n\n    private renderListResult = () => {\n        const filteredCompletions: ListItem[] = this.filterCompletions(\n            this.value,\n        );\n        if (!filteredCompletions || filteredCompletions.length === 0) {\n            return null;\n        }\n\n        return (\n            <limel-list\n                onChange={this.handleCompletionChange}\n                onKeyDown={this.handleKeyDownInDropdown}\n                type=\"selectable\"\n                items={filteredCompletions}\n            />\n        );\n    };\n\n    private handleKeyDownInDropdown = (event: KeyboardEvent) => {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        const keyCodeFound = [\n            TAB_KEY_CODE,\n            ESCAPE_KEY_CODE,\n            ENTER_KEY_CODE,\n        ].includes(event.keyCode);\n        if (keyFound || keyCodeFound) {\n            this.setFocus();\n        }\n    };\n\n    private handleCloseMenu = () => {\n        this.showCompletions = false;\n    };\n\n    private filterCompletions = (filter: string) => {\n        if (!filter) {\n            return this.completionsList;\n        }\n\n        return this.completionsList.filter(\n            (completion) =>\n                completion.text.toLowerCase().indexOf(filter.toLowerCase()) >\n                -1,\n        );\n    };\n\n    private handleChange = (event) => {\n        event.stopPropagation();\n        let value = event.target.value;\n\n        if (this.type === 'number') {\n            if (!value && event.data) {\n                event.stopPropagation();\n\n                return;\n            }\n\n            if (value) {\n                value = Number(value);\n            }\n        }\n\n        this.changeEmitter(value);\n    };\n\n    private changeEmitter = (value: string) => {\n        this.change.emit(value);\n    };\n\n    private handleIconClick = () => {\n        if (!this.isInvalid()) {\n            this.action.emit();\n        }\n    };\n\n    private handleIconKeyPress = (event: KeyboardEvent) => {\n        const isEnter = event.key === ENTER || event.keyCode === ENTER_KEY_CODE;\n        const isSpace = event.key === SPACE || event.keyCode === SPACE_KEY_CODE;\n\n        if ((isSpace || isEnter) && !this.isInvalid()) {\n            this.action.emit();\n        }\n    };\n\n    private handleWheel = () => {\n        // This empty event handler is here to circumvent a bug.\n        // In some browsers (Chrome for example), hovering the input with\n        // the input focused, and scrolling, will both change the value\n        // AND scroll the page. We would prefer to never change the value\n        // on scroll, instead always scrolling the page, but since we\n        // haven't found a way to do that, this is the next best thing, as\n        // it prevents the page from being scrolled, but only in the\n        // circumstances when the value is changed by the scrolling.\n        // Please test THOROUGHLY if you remove this event handler 😄\n    };\n}\n","import { FunctionalComponent, h } from '@stencil/core';\n\ninterface RadioButtonTemplateProps {\n    disabled?: boolean;\n    id: string;\n    checked?: boolean;\n    onChange?: (event: Event) => void;\n    label?: string;\n}\n\nexport const RadioButtonTemplate: FunctionalComponent<\n    RadioButtonTemplateProps\n> = (props) => {\n    return (\n        <div class=\"mdc-form-field\">\n            <div\n                class={`\n                        mdc-radio\n                        ${props.disabled ? 'mdc-radio--disabled' : ''}\n                    `}\n            >\n                <input\n                    class=\"mdc-radio__native-control\"\n                    type=\"radio\"\n                    id={props.id}\n                    checked={props.checked}\n                    disabled={props.disabled}\n                    onChange={props.onChange}\n                />\n                <div class=\"mdc-radio__background\">\n                    <div class=\"mdc-radio__outer-circle\" />\n                    <div class=\"mdc-radio__inner-circle\" />\n                </div>\n            </div>\n            <label\n                class={`${props.disabled ? 'disabled' : ''}`}\n                htmlFor={props.id}\n            >\n                {props.label}\n            </label>\n        </div>\n    );\n};\n","import { ListItem } from './list-item.types';\nimport { ListSeparator } from '../../global/shared-types/separator.types';\nimport { MenuItem } from '../menu/menu.types';\nimport { h } from '@stencil/core';\nimport { CheckboxTemplate } from '../checkbox/checkbox.template';\nimport { ListRendererConfig } from './list-renderer-config';\nimport { RadioButtonTemplate } from './radio-button/radio-button.template';\nimport { getIconColor, getIconName } from '../icon/get-icon-props';\n\nexport class ListRenderer {\n    private defaultConfig: ListRendererConfig = {\n        isOpen: true,\n        badgeIcons: false,\n    };\n\n    private config: ListRendererConfig;\n\n    private hasIcons: boolean;\n    private twoLines: boolean;\n    private avatarList: boolean;\n    private commandKey: boolean;\n\n    private applyTabIndexToItemAtIndex: number;\n\n    public render(\n        items: Array<ListItem | ListSeparator>,\n        config: ListRendererConfig = {},\n    ) {\n        items = items || [];\n        this.config = { ...this.defaultConfig, ...config };\n\n        this.twoLines = items.some((item) => {\n            return 'secondaryText' in item && !!item.secondaryText;\n        });\n\n        this.hasIcons = items.some((item) => {\n            return 'icon' in item && !!item.icon;\n        });\n\n        this.avatarList = this.config.badgeIcons && this.hasIcons;\n        const selectableListTypes = ['selectable', 'radio', 'checkbox'];\n\n        let role;\n        switch (this.config.type) {\n            case 'checkbox':\n                role = 'group';\n                break;\n            case 'radio':\n                role = 'radiogroup';\n                break;\n            default:\n                role = 'listbox';\n        }\n\n        this.applyTabIndexToItemAtIndex =\n            this.getIndexForWhichToApplyTabIndex(items);\n\n        const classNames = {\n            'mdc-deprecated-list': true,\n            'mdc-deprecated-list--two-line': this.twoLines,\n            selectable: selectableListTypes.includes(this.config.type),\n            'mdc-deprecated-list--avatar-list': this.avatarList,\n            'list--compact':\n                this.twoLines &&\n                this.commandKey &&\n                ['small', 'x-small'].includes(this.config.iconSize),\n        };\n\n        return (\n            <ul class={classNames} role={role} aria-orientation=\"vertical\">\n                {items.map(this.renderListItem)}\n            </ul>\n        );\n    }\n\n    /**\n     * Determine which ListItem should have the `tab-index` attribute set,\n     * and return the index at which that ListItem is located in `items`.\n     * Returns `undefined` if no item should have the attribute set.\n     * See https://github.com/material-components/material-components-web/tree/e66a43a75fef4f9179e24856649518e15e279a04/packages/mdc-list#accessibility\n     *\n     * @param items - the items of the list, including any `ListSeparator`:s\n     * @returns the index as per the description\n     */\n    private getIndexForWhichToApplyTabIndex = (\n        items: Array<ListItem | ListSeparator>,\n    ) => {\n        let result;\n        for (let i = 0, max = items.length; i < max; i += 1) {\n            if ('separator' in items[i]) {\n                // Ignore ListSeparator\n            } else {\n                const item = items[i] as ListItem<any>;\n                if (item.selected) {\n                    result = i;\n                    break;\n                }\n\n                if (result === undefined && !item.disabled) {\n                    result = i;\n                    // Do NOT break, as any later item with\n                    // `selected=true` should get the tab-index instead!\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Render a single list item\n     *\n     * @param item - the item to render\n     * @param index - the index the item had in the `items` array\n     * @returns the list item\n     */\n    private renderListItem = (\n        item: ListItem | ListSeparator,\n        index: number,\n    ) => {\n        if ('separator' in item) {\n            return (\n                <li class=\"mdc-deprecated-list-divider\" role=\"separator\">\n                    {this.rendertext(item)}\n                    <div class=\"limel-list-divider-line\" />\n                </li>\n            );\n        }\n\n        if (['radio', 'checkbox'].includes(this.config.type)) {\n            return this.renderVariantListItem(this.config, item, index);\n        }\n\n        const classNames = {\n            'mdc-deprecated-list-item': true,\n            'mdc-deprecated-list-item--disabled': item.disabled,\n            'mdc-deprecated-list-item--selected': item.selected,\n            'has-primary-component': this.hasPrimaryComponent(item),\n        };\n\n        const attributes: { tabindex?: string } = {};\n        if (index === this.applyTabIndexToItemAtIndex) {\n            attributes.tabindex = '0';\n        }\n\n        return (\n            <li\n                class={classNames}\n                aria-disabled={item.disabled ? 'true' : 'false'}\n                aria-selected={item.selected ? 'true' : 'false'}\n                data-index={index}\n                {...attributes}\n            >\n                {this.renderIcon(this.config, item)}\n                {this.getPrimaryComponent(item)}\n                {this.renderText(item)}\n                {this.twoLines && this.avatarList ? this.renderDivider() : null}\n                {this.renderActionMenu(item.actions)}\n            </li>\n        );\n    };\n\n    private rendertext = (item: ListSeparator) => {\n        if ('text' in item) {\n            return <h2 class=\"limel-list-divider-title\">{item.text}</h2>;\n        }\n    };\n\n    private getPrimaryComponent(item: ListItem): Element {\n        if (!this.hasPrimaryComponent(item)) {\n            return;\n        }\n\n        const PrimaryComponent = item.primaryComponent.name;\n        const props = item.primaryComponent.props;\n\n        return <PrimaryComponent {...props} />;\n    }\n\n    private hasPrimaryComponent = (item: ListItem) => {\n        return !!item?.primaryComponent?.name;\n    };\n\n    /**\n     * Render the text of the list item\n     *\n     * @param item - the list item\n     * @returns the text for the list item\n     */\n    private renderText = (item: ListItem) => {\n        if (this.isSimpleItem(item)) {\n            return (\n                <span class=\"mdc-deprecated-list-item__text\">{item.text}</span>\n            );\n        }\n\n        return (\n            <div class=\"mdc-deprecated-list-item__text\">\n                <div class=\"mdc-deprecated-list-item__primary-command-text\">\n                    <div class=\"mdc-deprecated-list-item__primary-text\">\n                        {item.text}\n                    </div>\n                </div>\n                <div class=\"mdc-deprecated-list-item__secondary-text\">\n                    {item.secondaryText}\n                </div>\n            </div>\n        );\n    };\n\n    private isSimpleItem = (item: ListItem): boolean => {\n        return !('secondaryText' in item);\n    };\n\n    /**\n     * Render an icon for a list item\n     *\n     * @param config - the config object, passed on from the `renderListItem` function\n     * @param item - the list item\n     * @returns the icon element\n     */\n    private renderIcon = (config: ListRendererConfig, item: ListItem) => {\n        const style: any = {};\n        const name = getIconName(item.icon);\n        if (!name) {\n            return;\n        }\n\n        const color = getIconColor(item.icon, item.iconColor);\n\n        if (color) {\n            if (config.badgeIcons) {\n                style['--icon-background-color'] = color;\n            } else {\n                style.color = color;\n            }\n        }\n\n        return (\n            <limel-icon\n                badge={config.badgeIcons}\n                class=\"mdc-deprecated-list-item__graphic\"\n                name={name}\n                style={style}\n                size={config.iconSize}\n            />\n        );\n    };\n\n    private renderDivider = () => {\n        const classes = {\n            'mdc-deprecated-list-divider': true,\n            'mdc-deprecated-list-divider--inset': true,\n        };\n        if (this.config.iconSize) {\n            classes[this.config.iconSize] = true;\n        }\n\n        return <hr class={classes} />;\n    };\n\n    private renderActionMenu = (actions: Array<MenuItem | ListSeparator>) => {\n        if (!actions || actions.length === 0) {\n            return;\n        }\n\n        return (\n            <limel-menu\n                class=\"mdc-deprecated-list-item__meta\"\n                items={actions}\n                openDirection=\"left-start\"\n            >\n                <limel-icon-button\n                    class=\"action-menu-trigger\"\n                    slot=\"trigger\"\n                    icon=\"menu_2\"\n                />\n            </limel-menu>\n        );\n    };\n\n    private renderVariantListItem = (\n        config: ListRendererConfig,\n        item: ListItem,\n        index: number,\n    ) => {\n        let itemTemplate;\n        if (config.type === 'radio') {\n            itemTemplate = (\n                <RadioButtonTemplate\n                    id={`c_${index}`}\n                    checked={item.selected}\n                    disabled={item.disabled}\n                />\n            );\n        } else if (config.type === 'checkbox') {\n            itemTemplate = (\n                <CheckboxTemplate\n                    id={`c_${index}`}\n                    checked={item.selected}\n                    disabled={item.disabled}\n                />\n            );\n        }\n\n        const classNames = {\n            'mdc-deprecated-list-item': true,\n            'mdc-deprecated-list-item--disabled': item.disabled,\n            'mdc-deprecated-list-item__text': !item.secondaryText,\n            'has-primary-component': this.hasPrimaryComponent(item),\n        };\n\n        const attributes: { tabindex?: string } = {};\n        if (index === this.applyTabIndexToItemAtIndex) {\n            attributes.tabindex = '0';\n        }\n\n        return (\n            <li\n                class={classNames}\n                role={config.type}\n                aria-checked={item.selected ? 'true' : 'false'}\n                aria-disabled={item.disabled ? 'true' : 'false'}\n                data-index={index}\n                {...attributes}\n            >\n                {this.renderVariantListItemContent(config, item, itemTemplate)}\n            </li>\n        );\n    };\n\n    private renderVariantListItemContent = (\n        config: ListRendererConfig,\n        item: ListItem,\n        itemTemplate: any,\n    ) => {\n        if (this.hasIcons) {\n            return [\n                item.icon ? this.renderIcon(config, item) : null,\n                this.getPrimaryComponent(item),\n                this.renderText(item),\n                <div class=\"mdc-deprecated-list-item__meta\">\n                    {itemTemplate}\n                </div>,\n            ];\n        }\n\n        return [\n            <div class=\"mdc-deprecated-list-item__graphic\">{itemTemplate}</div>,\n            this.getPrimaryComponent(item),\n            this.renderText(item),\n        ];\n    };\n}\n","@use '../../style/functions';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n@use '../checkbox/checkbox.scss';\n\n@use '@material/list';\n\n$list-border-radius: 0.375rem; // 6px\n$list--has-interactive-items--mdc-list-item--hover: 1;\n$list-static-actions-list: 1;\n$list-mdc-list-item: 0;\n\n/**\n * @prop --icon-background-color: Color to use for icon background when `badgeIcons=true`.\n * @prop --icon-color: Color to use for icon. Defaults to grey when `badgeIcons=false`. Defaults to white when `badgeIcons=true`.\n * @prop --list-grid-max-width: Maximum width of a list that has `has-grid-layout` class. Defaults to `100%`.\n * @prop --list-grid-item-max-width: Maximum width of items in a list that has `has-grid-layout` class. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in a list that has `has-grid-layout` class. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between items in a list that has `has-grid-layout` class. Defaults to `0.75rem`.\n * @prop --list-background-color-of-odd-interactive-items: Background color of odd list items, when `has-striped-rows` class is applied to the component. Defaults to `--contrast-200`.\n * @prop --list-background-color-of-even-interactive-items:  Background color of even list items, when `has-striped-rows` class is applied to the component. Defaults to `transparent`.\n * @prop --list-margin: Space around the list. Defaults to `0.25rem`, which visualizes keyboard-focused items in a better way, as it adds some space for the outline effect;\n */\n\n:host(limel-list) {\n    display: block;\n    isolation: isolate;\n    @include checkbox.custom-checkbox-styles;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n@include list.deprecated-core-styles;\n\n.mdc-deprecated-list,\n.mdc-deprecated-list-item__secondary-text {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.mdc-deprecated-list {\n    --mdc-theme-text-icon-on-background: var(\n        --icon-color,\n        rgb(var(--contrast-900))\n    );\n    margin: var(\n        --list-margin,\n        0.25rem\n    ); // added space to visualize keyboard-focused items\n    padding: 0;\n    border-radius: $list-border-radius;\n\n    .mdc-deprecated-list-divider {\n        border-bottom-color: transparent;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n        height: auto;\n        padding: 0 0.5rem;\n    }\n\n    .limel-list-divider-line {\n        background-color: rgb(var(--contrast-400));\n        height: 0.125rem;\n        border-radius: 1rem;\n        min-width: 1rem;\n        flex-grow: 1;\n    }\n\n    .limel-list-divider-title {\n        all: unset;\n        @include mixins.truncate-text;\n        color: rgb(var(--contrast-900));\n        font-size: 0.8125rem; // 13px\n    }\n\n    .mdc-deprecated-list-item {\n        transition: background-color 0.2s ease;\n        box-sizing: border-box;\n        z-index: $list-mdc-list-item; // in Chrome on Windows, menus flicker when they have a scroll bar and user hovers on them. We may be able to remove this in future versions of Chrome. Kia 2021-May-12\n        min-height: 2.5rem;\n\n        &:not(.mdc-deprecated-list-item--disabled) {\n            &:hover {\n                background-color: rgb(var(--contrast-300));\n                z-index: 1;\n            }\n        }\n\n        &.mdc-deprecated-list-item--disabled {\n            cursor: not-allowed;\n\n            limel-icon {\n                opacity: 0.38; // similar to `mdc-deprecated-list-item__text` when disabled\n            }\n        }\n\n        &:first-child {\n            border-top-left-radius: $list-border-radius;\n            border-top-right-radius: $list-border-radius;\n        }\n        &:last-child {\n            border-bottom-right-radius: $list-border-radius;\n            border-bottom-left-radius: $list-border-radius;\n        }\n    }\n\n    &.selectable\n        .mdc-deprecated-list-item:not(.mdc-deprecated-list-item--disabled) {\n        cursor: pointer;\n    }\n\n    .mdc-deprecated-list-item__meta {\n        // the action menu on the right side a list item\n        line-height: 100%;\n        margin-right: -0.5rem;\n    }\n\n    .mdc-deprecated-list-item__graphic {\n        margin-right: functions.pxToRem(8);\n    }\n\n    &.mdc-deprecated-list--avatar-list {\n        position: relative;\n\n        limel-icon.mdc-deprecated-list-item__graphic {\n            background-color: var(\n                --icon-background-color,\n                rgb(var(--contrast-900))\n            );\n            color: var(--icon-color, rgba(var(--color-white), 0.88));\n            margin-right: functions.pxToRem(12);\n            margin-left: functions.pxToRem(-4);\n        }\n\n        hr.mdc-deprecated-list-divider {\n            position: absolute;\n            bottom: 0;\n\n            &.mdc-deprecated-list-divider--inset {\n                --icon-width: #{functions.pxToRem(40)};\n                --icon-right-padding: #{functions.pxToRem(12)};\n                --list-right-padding: #{functions.pxToRem(12)};\n                right: 0;\n                width: calc(\n                    100% - var(--icon-width) - var(--icon-right-padding) - var(\n                            --list-right-padding\n                        )\n                );\n\n                &.x-small {\n                    --icon-width: #{functions.pxToRem(24)};\n                }\n\n                &.small {\n                    --icon-width: #{functions.pxToRem(32)};\n                }\n\n                &.medium {\n                    --icon-width: #{functions.pxToRem(40)};\n                }\n\n                &.large {\n                    --icon-width: #{functions.pxToRem(48)};\n                }\n            }\n        }\n\n        .mdc-deprecated-list-item:last-child hr.mdc-deprecated-list-divider {\n            display: none;\n        }\n    }\n\n    &.mdc-deprecated-list--two-line {\n        .mdc-deprecated-list-item__text {\n            padding-top: functions.pxToRem(8);\n            padding-bottom: functions.pxToRem(8);\n        }\n    }\n\n    .mdc-deprecated-list-item__secondary-text,\n    .mdc-deprecated-list-item__primary-text,\n    .mdc-deprecated-list-item__command-text {\n        margin: 0;\n        &:before,\n        &:after {\n            display: none;\n        }\n    }\n\n    .mdc-deprecated-list-item__command-text {\n        color: rgb(var(--contrast-800));\n        margin-left: 0.7rem;\n    }\n\n    .mdc-deprecated-list-item__text {\n        align-self: center;\n        width: 100%;\n    }\n\n    .has-primary-component {\n        .mdc-deprecated-list-item__text {\n            margin-left: 0.5rem;\n        }\n    }\n    .mdc-deprecated-list-item__primary-command-text {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: baseline;\n    }\n\n    // Tweaks to display the icon correctly in Edge\n    limel-icon.mdc-deprecated-list-item__graphic {\n        display: block;\n    }\n}\n\n.mdc-deprecated-list:not(.mdc-deprecated-list--avatar-list) {\n    limel-icon.mdc-deprecated-list-item__graphic {\n        // Tweaks to make icon lists align nicely with badge-icon lists.\n        &[size='x-small'] {\n            margin-right: functions.pxToRem(4);\n        }\n        &[size='small'] {\n            margin-right: functions.pxToRem(8);\n        }\n        &[size='medium'] {\n            margin-right: functions.pxToRem(8);\n        }\n        &[size='large'] {\n            margin-right: functions.pxToRem(12);\n        }\n    }\n}\n\n.mdc-deprecated-list-item.mdc-deprecated-list-item--selected {\n    &:before {\n        background-color: var(--mdc-theme-primary);\n        opacity: 0.15;\n    }\n}\n\n:not(.mdc-deprecated-list--non-interactive) {\n    > {\n        :not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item {\n            @include mixins.visualize-keyboard-focus;\n\n            &:focus-visible {\n                border-radius: $list-border-radius;\n                z-index: $list--has-interactive-items--mdc-list-item--hover;\n            }\n        }\n    }\n}\n\n@import '../checkbox/checkbox.scss';\n\n@import './radio-button/radio-button.scss';\n\n@import './partial-styles/custom-styles.scss';\n@import './partial-styles/enable-multiline-text.scss';\n@import './partial-styles/_has-grid-layout.scss';\n@import './partial-styles/_static-actions.scss';\n","import { IconSize } from '../icon/icon.types';\nimport { ListItem, ListSeparator } from './list-item.types';\nimport { ListType } from './list.types';\nimport { MDCList, MDCListActionEvent } from '@material/list';\nimport { strings as listStrings } from '@material/list/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { ListRenderer } from './list-renderer';\nimport { ListRendererConfig } from './list-renderer-config';\n\nconst { ACTION_EVENT } = listStrings;\n\n/**\n * @exampleComponent limel-example-list\n * @exampleComponent limel-example-list-secondary\n * @exampleComponent limel-example-list-separator\n * @exampleComponent limel-example-list-selectable\n * @exampleComponent limel-example-list-icons\n * @exampleComponent limel-example-list-badge-icons\n * @exampleComponent limel-example-list-checkbox\n * @exampleComponent limel-example-list-checkbox-icons\n * @exampleComponent limel-example-list-radio-button\n * @exampleComponent limel-example-list-radio-button-icons\n * @exampleComponent limel-example-list-action\n * @exampleComponent limel-example-list-striped\n * @exampleComponent limel-example-list-badge-icons-with-multiple-lines\n * @exampleComponent limel-example-list-grid\n * @exampleComponent limel-example-list-primary-component\n */\n@Component({\n    tag: 'limel-list',\n    shadow: true,\n    styleUrl: 'list.scss',\n})\nexport class List {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<ListItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * The type of the list, omit to get a regular list. Available types are:\n     * `selectable`: regular list with single selection.\n     * `radio`: radio button list with single selection.\n     * `checkbox`: checkbox list with multiple selection.\n     */\n    @Prop()\n    public type: ListType;\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n    // eslint-disable-next-line no-magic-numbers\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelListElement;\n\n    private config: ListRendererConfig;\n    private listRenderer = new ListRenderer();\n    private mdcList: MDCList;\n    private multiple: boolean;\n    private selectable: boolean;\n\n    /**\n     * Fired when a new value has been selected from the list.\n     * Only fired if `type` is set to `selectable`, `radio` or `checkbox`.\n     */\n    @Event()\n    private change: EventEmitter<ListItem | ListItem[]>;\n\n    /**\n     * Fired when an action has been selected from the action menu of a list item\n     */\n    @Event()\n    protected select: EventEmitter<ListItem | ListItem[]>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n        this.triggerIconColorWarning();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            type: this.type,\n            iconSize: this.iconSize,\n        };\n        let maxLinesSecondaryText = +this.maxLinesSecondaryText?.toFixed();\n        if (this.maxLinesSecondaryText < 1) {\n            maxLinesSecondaryText = 1;\n        }\n\n        const html = this.listRenderer.render(this.items, this.config);\n\n        return (\n            <Host\n                style={{\n                    '--maxLinesSecondaryText': `${maxLinesSecondaryText}`,\n                }}\n            >\n                {html}\n            </Host>\n        );\n    }\n\n    @Watch('type')\n    protected handleType() {\n        this.setupListeners();\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        if (!this.mdcList) {\n            return;\n        }\n\n        setTimeout(() => {\n            this.setup();\n\n            const listItems = this.items.filter(this.isListItem);\n\n            if (this.multiple) {\n                this.mdcList.selectedIndex = listItems\n                    .filter((item: ListItem) => item.selected)\n                    .map((item: ListItem) => listItems.indexOf(item));\n            } else {\n                const selectedIndex = listItems.findIndex(\n                    (item: ListItem) => item.selected,\n                );\n\n                if (selectedIndex === -1) {\n                    this.mdcList.initializeListType();\n                } else {\n                    this.mdcList.selectedIndex = selectedIndex;\n                }\n            }\n        }, 0);\n    }\n\n    private setup = () => {\n        this.setupList();\n\n        this.setupListeners();\n    };\n\n    private setupList = () => {\n        if (this.mdcList) {\n            this.teardown();\n            this.mdcList = null;\n        }\n\n        const element = this.element.shadowRoot.querySelector(\n            '.mdc-deprecated-list',\n        );\n        if (!element) {\n            return;\n        }\n\n        this.mdcList = new MDCList(element);\n        this.mdcList.hasTypeahead = true;\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcList) {\n            return;\n        }\n\n        this.mdcList.unlisten(ACTION_EVENT, this.handleAction);\n\n        this.selectable = ['selectable', 'radio', 'checkbox'].includes(\n            this.type,\n        );\n        this.multiple = this.type === 'checkbox';\n\n        if (!this.selectable) {\n            return;\n        }\n\n        this.mdcList.listen(ACTION_EVENT, this.handleAction);\n        this.mdcList.singleSelection = !this.multiple;\n    };\n\n    private teardown = () => {\n        this.mdcList?.unlisten(ACTION_EVENT, this.handleAction);\n        this.mdcList?.destroy();\n    };\n\n    private handleAction = (event: MDCListActionEvent) => {\n        if (!this.multiple) {\n            this.handleSingleSelect(event.detail.index);\n\n            return;\n        }\n\n        this.handleMultiSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: ListItem = listItems.find((item: ListItem) => {\n            return !!item.selected;\n        });\n\n        if (selectedItem) {\n            this.mdcList.selectedIndex = -1;\n            this.change.emit({ ...selectedItem, selected: false });\n        }\n\n        if (listItems[index] !== selectedItem) {\n            this.change.emit({ ...listItems[index], selected: true });\n        }\n    };\n\n    private handleMultiSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItems: ListItem[] = listItems\n            .filter((item: ListItem, listIndex: number) => {\n                if (listIndex === index) {\n                    // This is the item that was selected or deselected,\n                    // so we negate its previous selection status.\n                    return !item.selected;\n                }\n\n                // This is an item that didn't change, so we keep its selection status.\n                return item.selected;\n            })\n            .map((item: ListItem) => {\n                return { ...item, selected: true };\n            });\n\n        this.change.emit(selectedItems);\n    };\n\n    private isListItem = (item: ListItem): boolean => {\n        return !('separator' in item);\n    };\n\n    private triggerIconColorWarning() {\n        if (this.items.some((item) => 'iconColor' in item)) {\n            /* eslint-disable-next-line no-console */\n            console.warn(\n                \"The `iconColor` prop is deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name'` write `icon {name: 'icon-name', color: 'color-name'}`.\",\n            );\n        }\n    }\n}\n","@use '@material/menu-surface';\n@use '@material/elevation';\n@use '@material/menu';\n\n/**\n* @prop --limel-menu-surface-display: defines whether the surface is treated as a block, flex or grid. It affects layout used to display its children. Defaults to `block`.\n* @prop --limel-menu-surface-flex-direction: defines the direction of menu-surface layout.\n*/\n\n:host(limel-menu-surface) {\n    display: block;\n    max-height: inherit;\n}\n\n@include menu-surface.core-styles;\n@include menu.core-styles;\n\n.mdc-menu-surface {\n    display: var(--limel-menu-surface-display, block);\n    flex-direction: var(--limel-menu-surface-flex-direction, row);\n    max-height: inherit;\n    position: relative;\n    --mdc-menu-max-width: var(\n        --menu-surface-width,\n        min(calc(100vw - 2rem), 20rem)\n    );\n    background-color: var(--lime-elevated-surface-background-color);\n}\n\n:host(limel-menu-surface.has-grid-layout) {\n    .mdc-menu-surface {\n        width: var(--menu-surface-width, min(calc(100vw - 2rem), 40rem));\n        max-width: unset;\n    }\n}\n","import { Corner, MDCMenuSurface } from '@material/menu-surface';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { isDescendant } from '../../util/dom';\nimport {\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\n\n/**\n * @slot - Content to put inside the surface\n * @private\n */\n@Component({\n    tag: 'limel-menu-surface',\n    shadow: true,\n    styleUrl: 'menu-surface.scss',\n})\nexport class MenuSurface {\n    /**\n     * True if the menu surface is open, false otherwise\n     */\n    @Prop()\n    public open = false;\n\n    /**\n     * Clicks in this element should not be prevented when the menu surface is open\n     */\n    @Prop()\n    public allowClicksElement: HTMLElement;\n\n    /**\n     * Emitted when the menu surface is dismissed and should be closed\n     */\n    @Event()\n    public dismiss: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelMenuSurfaceElement;\n\n    private menuSurface: MDCMenuSurface;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public render() {\n        const classList = {\n            'mdc-menu': true,\n            'mdc-menu-surface': true,\n            'mdc-menu-surface--open': this.open,\n            'mdc-elevation-transition': true,\n            'mdc-elevation--z4': true,\n        };\n\n        return (\n            <div class={classList} tabindex=\"-1\">\n                <slot />\n            </div>\n        );\n    }\n\n    private setup = () => {\n        const menuElement: HTMLElement =\n            this.host.shadowRoot.querySelector('.mdc-menu-surface');\n        if (!menuElement) {\n            return;\n        }\n\n        this.menuSurface = new MDCMenuSurface(menuElement);\n        this.menuSurface.setAnchorCorner(Corner.TOP_START);\n\n        document.addEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('resize', this.handleResize, {\n            passive: true,\n        });\n    };\n\n    private teardown = () => {\n        this.menuSurface?.destroy();\n        document.removeEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('resize', this.handleResize);\n    };\n\n    private handleDocumentClick = (event) => {\n        const elementPath = event.composedPath ? event.composedPath() : [];\n\n        if (!this.open) {\n            return;\n        }\n\n        if (isDescendant(event.target, this.host)) {\n            return;\n        }\n\n        if (this.allowClicksElement) {\n            const clickedInAllowedElement = elementPath.includes(\n                this.allowClicksElement,\n            );\n\n            if (clickedInAllowedElement) {\n                return;\n            }\n        }\n\n        this.dismiss.emit();\n        this.preventClickEventPropagation();\n    };\n\n    private handleResize = () => {\n        if (this.open) {\n            this.dismiss.emit();\n        }\n    };\n\n    private preventClickEventPropagation = () => {\n        // When the menu surface is open, we want to stop the `click` event from propagating\n        // when clicking outside the surface itself. This is to prevent any dialog that might\n        // be open from closing, etc. However, when dragging a scrollbar no `click` event is emitted,\n        // only mousedown and mouseup. So we listen for `mousedown` and attach a one-time listener\n        // for `click`, so we can capture and \"kill\" it.\n        document.addEventListener('click', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // We also capture and \"kill\" the next `mouseup` event.\n        document.addEventListener('mouseup', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // If the user dragged the scrollbar, no `click` event happens. So when we get the\n        // `mouseup` event, remove the handler for `click` if it's still there.\n        // Otherwise, we would catch the next click even though the menu is no longer open.\n        document.addEventListener(\n            'mouseup',\n            () => {\n                document.removeEventListener('click', this.stopEvent, {\n                    capture: true,\n                });\n            },\n            {\n                once: true,\n            },\n        );\n    };\n\n    private stopEvent = (event) => {\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        const isEscape =\n            event.key === ESCAPE || event.keyCode === ESCAPE_KEY_CODE;\n        const isTab = event.key === TAB || event.keyCode === TAB_KEY_CODE;\n\n        if (this.open && (isEscape || isTab)) {\n            event.stopPropagation();\n            this.dismiss.emit();\n        }\n    };\n}\n"],"mappings":"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"}