{"version":3,"names":["helperLineCss","HelperLine","this","hasContent","maxLength","helperText","length","renderHelperText","h","class","id","helperTextId","renderCharacterCounter","counter","render","Host","tabIndex","invalid","style","display","readonlyBooleanCss","ReadonlyBoolean","renderIcon","renderLabel","icon","value","trueIcon","falseIcon","iconName","getIconName","iconColor","iconBackgroundColor","color","backgroundColor","iconProps","role","name","Object","assign","label","trueLabel","falseLabel"],"sources":["./src/components/helper-line/helper-line.scss?tag=limel-helper-line&encapsulation=shadow","./src/components/helper-line/helper-line.tsx","./src/components/readonly-boolean/readonly-boolean.scss?tag=limel-readonly-boolean&encapsulation=shadow","./src/components/readonly-boolean/readonly-boolean.tsx"],"sourcesContent":[":host(limel-helper-line) {\n    transition: opacity 0.2s ease;\n\n    box-sizing: border-box;\n    display: grid;\n\n    min-width: 0; // prevents overflowing, if component is placed in flex containers\n\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    font-size: 0.6875rem;\n\n    color: rgb(var(--contrast-1200));\n}\n\ndiv {\n    display: flex;\n    justify-content: space-between;\n    gap: 0.75rem;\n    overflow: hidden;\n    padding: 0 1rem;\n}\n\n:host(limel-helper-line.invalid) {\n    .helper-text {\n        color: var(--mdc-theme-error);\n    }\n}\n\n.counter {\n    flex-shrink: 0;\n    margin-left: auto;\n}\n\n.helper-text,\n.counter {\n    padding-top: 0.125rem;\n}\n\n// This animates height of the helper line, from `0` to `auto`.\n// To get this animation effect, the consumer component should\n// add `hide` classed accordingly.\n:host(limel-helper-line) {\n    transition: grid-template-rows\n        var(--limel-h-l-grid-template-rows-transition-speed, 0.46s)\n        cubic-bezier(1, 0.09, 0, 0.89);\n    grid-template-rows: var(--limel-h-l-grid-template-rows, 1fr);\n}\n\n:host(limel-helper-line.hide) {\n    --limel-h-l-grid-template-rows-transition-speed: 0.3s;\n    --limel-h-l-grid-template-rows: 0fr;\n}\n// End: animating height\n","import { Component, Host, Prop, h } from '@stencil/core';\n\n/**\n * This is an internal and private component that many input fields\n * use to display a helper text, along with a character counter below the\n * input field.\n *\n * We created this to keep the visual styles the same everywhere\n * and to avoid importing styles separately.\n *\n * Also this enables us to open the helper line in limel-portal,\n * more easily without having to send the styles to the portal.\n *\n * @exampleComponent limel-example-helper-line\n * @exampleComponent limel-example-helper-line-invalid\n * @exampleComponent limel-example-helper-line-long-text\n * @exampleComponent limel-example-helper-line-long-text-no-counter\n * @exampleComponent limel-example-helper-line-character-counter\n * @exampleComponent limel-example-helper-line-empty\n * @exampleComponent limel-example-helper-line-animation\n * @private\n */\n@Component({\n    tag: 'limel-helper-line',\n    shadow: true,\n    styleUrl: 'helper-line.scss',\n})\nexport class HelperLine {\n    /**\n     * The helper text that is displayed on the left side.\n     */\n    @Prop({ reflect: true })\n    public helperText?: string;\n\n    /**\n     * Length of the current input value, coming from the parent component.\n     * Used in the character counter section on the right side.\n     */\n    @Prop({ reflect: true })\n    public length?: number;\n\n    /**\n     * Maximum length of the characters, defined on the parent component.\n     * Used in the character counter section on the right side.\n     */\n    @Prop({ reflect: true })\n    public maxLength?: number;\n\n    /**\n     * Turns `true`, when the parent component is invalid.\n     * For example, when the parent component is `required` but is left empty.\n     * Or when the input format is invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid?: boolean = false;\n\n    /**\n     * Used by `aria-controls` and `aria-describedby` in the parent component.\n     */\n    @Prop({ reflect: true })\n    public helperTextId?: string;\n\n    public render() {\n        return (\n            <Host\n                tabIndex={-1}\n                class={{\n                    invalid: this.invalid,\n                }}\n                style={!this.hasContent() ? { display: 'none' } : {}}\n                aria-hidden={!this.hasContent()}\n            >\n                <div>\n                    {this.renderHelperText()}\n                    {this.renderCharacterCounter()}\n                </div>\n            </Host>\n        );\n    }\n\n    private hasContent = () => {\n        return !!(\n            this.maxLength > 0 ||\n            (this.helperText && this.helperText.length > 0)\n        );\n    };\n\n    private renderHelperText = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return (\n            <span class=\"helper-text\" id={this.helperTextId}>\n                {this.helperText}\n            </span>\n        );\n    };\n\n    private renderCharacterCounter = () => {\n        const counter = `${this.length} / ${this.maxLength}`;\n\n        if (!this.maxLength) {\n            return;\n        }\n\n        return <span class=\"counter\">{counter}</span>;\n    };\n}\n","@use '../../style/mixins.scss';\n\n* {\n    box-sizing: border-box;\n    min-width: 0;\n}\n\n:host(limel-readonly-boolean) {\n    --limel-readonly-min-height: 1.75rem;\n    display: flex;\n    gap: 0.5rem;\n    align-items: center;\n    border-radius: 0.5rem;\n    min-width: 0;\n}\n\nlimel-icon {\n    --limel-icon-svg-margin: 0.125rem;\n    border-radius: 0.25rem;\n    flex-shrink: 0;\n    width: var(--limel-readonly-min-height);\n    color: rgb(\n        var(--contrast-900)\n    ); // The default `false` color. Will be overwritten by `Icon`\n}\n\nspan {\n    @include mixins.truncate-text;\n    flex-grow: 1;\n    font-size: 0.8125rem; // `13px`, Like Checkbox & Switch\n    color: var(--mdc-theme-on-surface);\n}\n\n:host(limel-readonly-boolean[value]),\n:host(limel-readonly-boolean[value='true']:not([value='false'])) {\n    limel-icon {\n        color: var(\n            --mdc-theme-primary\n        ); // The default `true` color. Will be overwritten by `Icon`\n    }\n}\n","import { Icon } from '../../interface';\nimport { getIconName } from '../icon/get-icon-props';\nimport { Component, Prop, h } from '@stencil/core';\n\n/**\n * This component enhances the visualization of a `boolean` field\n * in a `readonly` state.\n * The reason we offer this component is that the default styling\n * of the Checkbox or Toggle switch in the `readonly` state may not always\n * provide the best way of _visualizing information_, potentially leading to\n * confusion and negatively affecting the end-users' experience.\n *\n * @private\n * @exampleComponent limel-example-readonly-boolean\n */\n\n@Component({\n    tag: 'limel-readonly-boolean',\n    shadow: true,\n    styleUrl: 'readonly-boolean.scss',\n})\nexport class ReadonlyBoolean {\n    /**\n     * The value of the component.\n     * - `true` means for instance a checkbox is \"checked\" or toggle switch in \"ON\".\n     * - `false` means \"unchecked\", or \"OFF\".\n     */\n    @Prop({ reflect: true })\n    public value: boolean;\n\n    /**\n     * The checkbox label.\n     * Will be replaced by `trueLabel` and `falseLabel` if they are set.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The text to show, when the `value` is `true`.\n     */\n    @Prop({ reflect: true })\n    public trueLabel?: string;\n\n    /**\n     * The text to show, when the `value` is `false`.\n     */\n    @Prop({ reflect: true })\n    public falseLabel?: string;\n\n    /**\n     * The icon to show, when the `value` is `true`.\n     */\n    @Prop({ reflect: true })\n    public trueIcon?: string | Icon = 'ok';\n\n    /**\n     * The icon to show, when the `value` is `false`.\n     */\n    @Prop({ reflect: true })\n    public falseIcon?: string | Icon = 'minus';\n\n    public render() {\n        return [this.renderIcon(), this.renderLabel()];\n    }\n\n    private renderIcon() {\n        let icon;\n        if (this.value) {\n            icon = this.trueIcon;\n        } else {\n            icon = this.falseIcon;\n        }\n\n        const iconName = getIconName(icon);\n\n        if (!iconName) {\n            return;\n        }\n\n        let iconColor;\n        let iconBackgroundColor;\n\n        if (typeof icon === 'object' && 'name' in icon) {\n            iconColor = icon.color;\n            iconBackgroundColor = icon.backgroundColor;\n        }\n\n        const iconProps = {\n            role: 'presentation',\n            name: iconName,\n            style: {\n                color: iconColor,\n                'background-color': iconBackgroundColor,\n            },\n        };\n\n        return <limel-icon {...iconProps} />;\n    }\n\n    private renderLabel() {\n        let label;\n\n        if (this.trueLabel && this.falseLabel) {\n            label = this.value ? this.trueLabel : this.falseLabel;\n        } else {\n            label = this.label;\n        }\n\n        return <span>{label}</span>;\n    }\n}\n"],"mappings":"uGAAA,MAAMA,EAAgB,6xB,MC2BTC,EAAU,M,yBAqDXC,KAAAC,WAAa,OAEbD,KAAKE,UAAY,GAChBF,KAAKG,YAAcH,KAAKG,WAAWC,OAAS,GAI7CJ,KAAAK,iBAAmB,KACvB,IAAKL,KAAKG,WAAY,CAClB,M,CAGJ,OACIG,EAAA,QAAMC,MAAM,cAAcC,GAAIR,KAAKS,cAC9BT,KAAKG,WACH,EAIPH,KAAAU,uBAAyB,KAC7B,MAAMC,EAAU,GAAGX,KAAKI,YAAYJ,KAAKE,YAEzC,IAAKF,KAAKE,UAAW,CACjB,M,CAGJ,OAAOI,EAAA,QAAMC,MAAM,WAAWI,EAAe,E,sFApDtB,M,4BAQpBC,SACH,OACIN,EAACO,EAAI,CACDC,UAAW,EACXP,MAAO,CACHQ,QAASf,KAAKe,SAElBC,OAAQhB,KAAKC,aAAe,CAAEgB,QAAS,QAAW,GAAE,eACtCjB,KAAKC,cAEnBK,EAAA,WACKN,KAAKK,mBACLL,KAAKU,0B,aC1E1B,MAAMQ,EAAqB,onB,MCqBdC,EAAe,M,oIAgCU,K,eAMC,O,CAE5BP,SACH,MAAO,CAACZ,KAAKoB,aAAcpB,KAAKqB,c,CAG5BD,aACJ,IAAIE,EACJ,GAAItB,KAAKuB,MAAO,CACZD,EAAOtB,KAAKwB,Q,KACT,CACHF,EAAOtB,KAAKyB,S,CAGhB,MAAMC,EAAWC,EAAYL,GAE7B,IAAKI,EAAU,CACX,M,CAGJ,IAAIE,EACJ,IAAIC,EAEJ,UAAWP,IAAS,UAAY,SAAUA,EAAM,CAC5CM,EAAYN,EAAKQ,MACjBD,EAAsBP,EAAKS,e,CAG/B,MAAMC,EAAY,CACdC,KAAM,eACNC,KAAMR,EACNV,MAAO,CACHc,MAAOF,EACP,mBAAoBC,IAI5B,OAAOvB,EAAA,aAAA6B,OAAAC,OAAA,GAAgBJ,G,CAGnBX,cACJ,IAAIgB,EAEJ,GAAIrC,KAAKsC,WAAatC,KAAKuC,WAAY,CACnCF,EAAQrC,KAAKuB,MAAQvB,KAAKsC,UAAYtC,KAAKuC,U,KACxC,CACHF,EAAQrC,KAAKqC,K,CAGjB,OAAO/B,EAAA,YAAO+B,E"}