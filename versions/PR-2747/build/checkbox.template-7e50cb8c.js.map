{"version":3,"names":["CheckboxTemplate","props","inputProps","readonly","h","value","checked","helperTextId","label","trueLabel","readonlyTrueLabel","falseLabel","readonlyFalseLabel","trueIcon","readonlyTrueIcon","falseIcon","readonlyFalseIcon","HelperText","text","helperText","indeterminate","class","invalid","disabled","required","Object","assign","type","id","onChange","viewBox","fill","d","htmlFor","trim"],"sources":["./src/components/checkbox/checkbox.template.tsx"],"sourcesContent":["import { FunctionalComponent, h } from '@stencil/core';\nimport { Icon } from '../../interface';\n\ninterface CheckboxTemplateProps {\n    disabled?: boolean;\n    id: string;\n    checked?: boolean;\n    readonly?: boolean;\n    indeterminate?: boolean;\n    required?: boolean;\n    invalid?: boolean;\n    onChange?: (event: Event) => void;\n    label?: string;\n    helperText?: string;\n    helperTextId?: string;\n    readonlyTrueLabel?: string;\n    readonlyFalseLabel?: string;\n    readonlyTrueIcon?: string | Icon;\n    readonlyFalseIcon?: string | Icon;\n}\n\nexport const CheckboxTemplate: FunctionalComponent<CheckboxTemplateProps> = (\n    props,\n) => {\n    const inputProps = {};\n    if (props.readonly) {\n        return [\n            <limel-readonly-boolean\n                value={props.checked}\n                aria-controls={props.helperTextId}\n                label={props.label}\n                trueLabel={props.readonlyTrueLabel}\n                falseLabel={props.readonlyFalseLabel}\n                trueIcon={props.readonlyTrueIcon}\n                falseIcon={props.readonlyFalseIcon}\n            />,\n            <HelperText\n                text={props.helperText}\n                helperTextId={props.helperTextId}\n            />,\n        ];\n    }\n\n    if (props.indeterminate) {\n        inputProps['data-indeterminate'] = 'true';\n    }\n\n    return [\n        <div class=\"mdc-form-field \">\n            <div\n                class={{\n                    'mdc-checkbox': true,\n                    'mdc-checkbox--invalid': props.invalid,\n                    'mdc-checkbox--disabled': props.disabled,\n                    'mdc-checkbox--required': props.required,\n                    'mdc-checkbox--indeterminate': props.indeterminate,\n                    'lime-checkbox--readonly': props.readonly,\n                }}\n            >\n                <input\n                    type=\"checkbox\"\n                    class=\"mdc-checkbox__native-control\"\n                    id={props.id}\n                    checked={props.checked}\n                    disabled={props.disabled || props.readonly}\n                    required={props.required}\n                    onChange={props.onChange}\n                    aria-controls={props.helperTextId}\n                    aria-describedby={props.helperTextId}\n                    {...inputProps}\n                />\n                <div class=\"mdc-checkbox__background\">\n                    <svg class=\"mdc-checkbox__checkmark\" viewBox=\"0 0 24 24\">\n                        <path\n                            class=\"mdc-checkbox__checkmark-path\"\n                            fill=\"none\"\n                            d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"\n                        />\n                    </svg>\n                    <div class=\"mdc-checkbox__mixedmark\" />\n                </div>\n            </div>\n            <label\n                class={{\n                    'mdc-checkbox--invalid': props.invalid,\n                    'mdc-checkbox--disabled': props.disabled,\n                    'mdc-checkbox--required': props.required,\n                    'mdc-checkbox--indeterminate': props.indeterminate,\n                    'lime-checkbox--readonly': props.readonly,\n                }}\n                htmlFor={props.id}\n            >\n                {props.label}\n            </label>\n        </div>,\n        <HelperText\n            text={props.helperText}\n            helperTextId={props.helperTextId}\n        />,\n    ];\n};\n\nconst HelperText: FunctionalComponent<{\n    helperTextId: string;\n    text: string;\n}> = (props) => {\n    if (typeof props.text !== 'string') {\n        return;\n    }\n\n    return (\n        <limel-helper-line\n            helperText={props.text.trim()}\n            helperTextId={props.helperTextId}\n        />\n    );\n};\n"],"mappings":"8CAqBaA,EACTC,IAEA,MAAMC,EAAa,GACnB,GAAID,EAAME,SAAU,CAChB,MAAO,CACHC,EAAA,0BACIC,MAAOJ,EAAMK,QAAO,gBACLL,EAAMM,aACrBC,MAAOP,EAAMO,MACbC,UAAWR,EAAMS,kBACjBC,WAAYV,EAAMW,mBAClBC,SAAUZ,EAAMa,iBAChBC,UAAWd,EAAMe,oBAErBZ,EAACa,EAAU,CACPC,KAAMjB,EAAMkB,WACZZ,aAAcN,EAAMM,e,CAKhC,GAAIN,EAAMmB,cAAe,CACrBlB,EAAW,sBAAwB,M,CAGvC,MAAO,CACHE,EAAA,OAAKiB,MAAM,mBACPjB,EAAA,OACIiB,MAAO,CACH,eAAgB,KAChB,wBAAyBpB,EAAMqB,QAC/B,yBAA0BrB,EAAMsB,SAChC,yBAA0BtB,EAAMuB,SAChC,8BAA+BvB,EAAMmB,cACrC,0BAA2BnB,EAAME,WAGrCC,EAAA,QAAAqB,OAAAC,OAAA,CACIC,KAAK,WACLN,MAAM,+BACNO,GAAI3B,EAAM2B,GACVtB,QAASL,EAAMK,QACfiB,SAAUtB,EAAMsB,UAAYtB,EAAME,SAClCqB,SAAUvB,EAAMuB,SAChBK,SAAU5B,EAAM4B,SAAQ,gBACT5B,EAAMM,aAAY,mBACfN,EAAMM,cACpBL,IAERE,EAAA,OAAKiB,MAAM,4BACPjB,EAAA,OAAKiB,MAAM,0BAA0BS,QAAQ,aACzC1B,EAAA,QACIiB,MAAM,+BACNU,KAAK,OACLC,EAAE,sCAGV5B,EAAA,OAAKiB,MAAM,8BAGnBjB,EAAA,SACIiB,MAAO,CACH,wBAAyBpB,EAAMqB,QAC/B,yBAA0BrB,EAAMsB,SAChC,yBAA0BtB,EAAMuB,SAChC,8BAA+BvB,EAAMmB,cACrC,0BAA2BnB,EAAME,UAErC8B,QAAShC,EAAM2B,IAEd3B,EAAMO,QAGfJ,EAACa,EAAU,CACPC,KAAMjB,EAAMkB,WACZZ,aAAcN,EAAMM,eAE3B,EAGL,MAAMU,EAGAhB,IACF,UAAWA,EAAMiB,OAAS,SAAU,CAChC,M,CAGJ,OACId,EAAA,qBACIe,WAAYlB,EAAMiB,KAAKgB,OACvB3B,aAAcN,EAAMM,cACtB,S"}