{"version":3,"names":["ChipSetInputExample","constructor","hostRef","this","handleInput","event","textValue","detail","onKeyUp","key","ENTER","keyCode","ENTER_KEY_CODE","trim","value","createChip","handleChange","name","id","text","removable","render","h","type","inputType","label","maxItems","onChange","onInput","emptyInputOnBlur"],"sources":["./src/components/chip-set/examples/chip-set-input-type-search.tsx"],"sourcesContent":["import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER, ENTER_KEY_CODE } from '../../../util/keycodes';\n\n/**\n * Input chip set with `inputType` of `search`\n *\n * When autocorrection is potentially harmful for the user experience and for\n * your intended result, use `search` as `inputType`. For instance, for a\n * question like \"Please suggest unique names for our newly founded company\",\n * you probably don't want autocorrection, because you would expect many\n * valid suggestions to not exist in the autocorrection dictionary. Therefore,\n * you do not want the respondent's input to be regarded as a typo and to be\n * changed when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.\n */\n@Component({\n    tag: 'limel-example-chip-set-input-type-search',\n    shadow: true,\n})\nexport class ChipSetInputExample {\n    @State()\n    private value: Chip[];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private maxItems = 3;\n\n    @State()\n    private emptyInputOnBlur: boolean = true;\n\n    constructor() {\n        this.value = [this.createChip('Lundalogik'), this.createChip('Lime')];\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"search\"\n                label=\"Suggest three unique names for our newly founded company\"\n                maxItems={this.maxItems}\n                value={this.value}\n                onChange={this.handleChange}\n                onInput={this.handleInput}\n                onKeyUp={this.onKeyUp}\n                emptyInputOnBlur={this.emptyInputOnBlur}\n            />,\n        ];\n    }\n\n    private handleInput = (event: CustomEvent<string>) => {\n        this.textValue = event.detail;\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (\n            (event.key === ENTER || event.keyCode === ENTER_KEY_CODE) &&\n            this.textValue.trim()\n        ) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.textValue = '';\n        }\n    };\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        this.value = event.detail;\n    };\n\n    private createChip = (name: string): Chip => {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n        };\n    };\n}\n"],"mappings":"uGAmBaA,EAAmB,MAa5BC,YAAAC,G,UAoBQC,KAAAC,YAAeC,IACnBF,KAAKG,UAAYD,EAAME,MAAM,EAGzBJ,KAAAK,QAAWH,IACf,IACKA,EAAMI,MAAQC,GAASL,EAAMM,UAAYC,IAC1CT,KAAKG,UAAUO,OACjB,CACEV,KAAKW,MAAQ,IACNX,KAAKW,MACRX,KAAKY,WAAWZ,KAAKG,UAAUO,SAEnCV,KAAKG,UAAY,E,GAIjBH,KAAAa,aAAgBX,IACpBF,KAAKW,MAAQT,EAAME,MAAM,EAGrBJ,KAAAY,WAAcE,IACX,CACHC,GAAID,EACJE,KAAMF,EACNG,UAAW,O,oCArDC,G,cAGD,E,sBAGiB,KAGhCjB,KAAKW,MAAQ,CAACX,KAAKY,WAAW,cAAeZ,KAAKY,WAAW,Q,CAG1DM,SACH,MAAO,CACHC,EAAA,kBACIC,KAAK,QACLC,UAAU,SACVC,MAAM,2DACNC,SAAUvB,KAAKuB,SACfZ,MAAOX,KAAKW,MACZa,SAAUxB,KAAKa,aACfY,QAASzB,KAAKC,YACdI,QAASL,KAAKK,QACdqB,iBAAkB1B,KAAK0B,mB"}