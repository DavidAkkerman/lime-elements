{"version":3,"names":["ChipSetInputExample","constructor","hostRef","this","handleInput","event","CustomEvent","textValue","detail","onKeyUp","key","ENTER","keyCode","ENTER_KEY_CODE","trim","value","createChip","handleChange","console","log","handleInteraction","name","id","text","removable","icon","toLowerCase","setDisabled","disabled","setReadonly","readonly","setRequired","required","setEmptyInputOnBlur","emptyInputOnBlur","setLeadingIcon","hasLeadingIcon","setMaxItems","maxItems","useDelimiters","delimiter","render","h","type","label","helperText","searchLabel","leadingIcon","onChange","onInput","onInteract","style","toString","checked"],"sources":["./src/components/chip-set/examples/chip-set-input.tsx"],"sourcesContent":["import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER, ENTER_KEY_CODE } from '../../../util/keycodes';\n\n/**\n * Input chip set\n *\n * Useful for collections of tags or labels. Can also be used as an advanced\n * search input, with leading icon and a delimiter between search terms.\n */\n@Component({\n    tag: 'limel-example-chip-set-input',\n    shadow: true,\n})\nexport class ChipSetInputExample {\n    @State()\n    private value: Chip[];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private required: boolean = false;\n\n    @State()\n    private readonly: boolean = false;\n\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private maxItems = 0;\n\n    @State()\n    private emptyInputOnBlur: boolean = true;\n\n    @State()\n    private hasLeadingIcon: boolean = false;\n\n    @State()\n    private delimiter: string = null;\n\n    constructor() {\n        this.value = [\n            this.createChip('Elephant'),\n            this.createChip('Caterpillar'),\n            this.createChip('Badger'),\n            this.createChip('Fish'),\n        ];\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                type=\"input\"\n                label=\"Animal\"\n                helperText=\"For some animal names, icons are displayed on the chips\"\n                searchLabel=\"Type an animal name & press Enter\"\n                value={this.value}\n                required={this.required}\n                readonly={this.readonly}\n                disabled={this.disabled}\n                leadingIcon={this.hasLeadingIcon ? 'search' : null}\n                maxItems={this.maxItems}\n                onChange={this.handleChange}\n                onInput={this.handleInput}\n                onInteract={this.handleInteraction}\n                onKeyUp={this.onKeyUp}\n                emptyInputOnBlur={this.emptyInputOnBlur}\n                delimiter={this.delimiter}\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-max-columns-width': '9rem' }}\n            >\n                <limel-input-field\n                    label=\"Max items\"\n                    value={this.maxItems.toString()}\n                    type=\"number\"\n                    onChange={this.setMaxItems}\n                />\n                <limel-checkbox\n                    label=\"Empty input on blur\"\n                    onChange={this.setEmptyInputOnBlur}\n                    checked={this.emptyInputOnBlur}\n                />\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                    checked={this.disabled}\n                />\n                <limel-checkbox\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                    checked={this.readonly}\n                />\n                <limel-checkbox\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                    checked={this.required}\n                />\n                <limel-checkbox\n                    label={'Leading icon'}\n                    onChange={this.setLeadingIcon}\n                    checked={this.hasLeadingIcon}\n                />\n                <limel-checkbox\n                    label=\"Use delimiters\"\n                    onChange={this.useDelimiters}\n                    checked={this.delimiter !== null}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleInput = (\n        event: LimelChipSetCustomEvent<string> | InputEvent\n    ) => {\n        if (event instanceof CustomEvent) {\n            this.textValue = event.detail;\n        }\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (\n            (event.key === ENTER || event.keyCode === ENTER_KEY_CODE) &&\n            this.textValue.trim()\n        ) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.textValue = '';\n        }\n    };\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        console.log(event.detail);\n        this.value = event.detail;\n    };\n\n    private handleInteraction = (event: CustomEvent<Chip>) => {\n        console.log('Chip interacted with: ', event.detail);\n    };\n\n    private createChip = (name: string): Chip => {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n            icon: `${name}`.toLowerCase(),\n        };\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        this.required = event.detail;\n    };\n\n    private setEmptyInputOnBlur = (event: CustomEvent<boolean>) => {\n        this.emptyInputOnBlur = event.detail;\n    };\n\n    private setLeadingIcon = (event: CustomEvent<boolean>) => {\n        this.hasLeadingIcon = event.detail;\n    };\n\n    private setMaxItems = (event: CustomEvent<string>) => {\n        this.maxItems = +event.detail;\n    };\n\n    private useDelimiters = (event: CustomEvent<boolean>) => {\n        this.delimiter = event.detail ? '&' : null;\n    };\n}\n"],"mappings":"uGAcaA,EAAmB,MA4B5BC,YAAAC,G,UAyEQC,KAAAC,YACJC,IAEA,GAAIA,aAAiBC,YAAa,CAC9BH,KAAKI,UAAYF,EAAMG,M,GAIvBL,KAAAM,QAAWJ,IACf,IACKA,EAAMK,MAAQC,GAASN,EAAMO,UAAYC,IAC1CV,KAAKI,UAAUO,OACjB,CACEX,KAAKY,MAAQ,IACNZ,KAAKY,MACRZ,KAAKa,WAAWb,KAAKI,UAAUO,SAEnCX,KAAKI,UAAY,E,GAIjBJ,KAAAc,aAAgBZ,IACpBa,QAAQC,IAAId,EAAMG,QAClBL,KAAKY,MAAQV,EAAMG,MAAM,EAGrBL,KAAAiB,kBAAqBf,IACzBa,QAAQC,IAAI,yBAA0Bd,EAAMG,OAAO,EAG/CL,KAAAa,WAAcK,IACX,CACHC,GAAID,EACJE,KAAMF,EACNG,UAAW,KACXC,KAAM,GAAGJ,IAAOK,gBAIhBvB,KAAAwB,YAAetB,IACnBF,KAAKyB,SAAWvB,EAAMG,MAAM,EAGxBL,KAAA0B,YAAexB,IACnBF,KAAK2B,SAAWzB,EAAMG,MAAM,EAGxBL,KAAA4B,YAAe1B,IACnBF,KAAK6B,SAAW3B,EAAMG,MAAM,EAGxBL,KAAA8B,oBAAuB5B,IAC3BF,KAAK+B,iBAAmB7B,EAAMG,MAAM,EAGhCL,KAAAgC,eAAkB9B,IACtBF,KAAKiC,eAAiB/B,EAAMG,MAAM,EAG9BL,KAAAkC,YAAehC,IACnBF,KAAKmC,UAAYjC,EAAMG,MAAM,EAGzBL,KAAAoC,cAAiBlC,IACrBF,KAAKqC,UAAYnC,EAAMG,OAAS,IAAM,IAAI,E,oCAhK1B,G,cAGQ,M,cAGA,M,cAGA,M,cAGT,E,sBAGiB,K,oBAGF,M,eAGN,KAGxBL,KAAKY,MAAQ,CACTZ,KAAKa,WAAW,YAChBb,KAAKa,WAAW,eAChBb,KAAKa,WAAW,UAChBb,KAAKa,WAAW,Q,CAIjByB,SACH,MAAO,CACHC,EAAA,kBACIC,KAAK,QACLC,MAAM,SACNC,WAAW,0DACXC,YAAY,oCACZ/B,MAAOZ,KAAKY,MACZiB,SAAU7B,KAAK6B,SACfF,SAAU3B,KAAK2B,SACfF,SAAUzB,KAAKyB,SACfmB,YAAa5C,KAAKiC,eAAiB,SAAW,KAC9CE,SAAUnC,KAAKmC,SACfU,SAAU7C,KAAKc,aACfgC,QAAS9C,KAAKC,YACd8C,WAAY/C,KAAKiB,kBACjBX,QAASN,KAAKM,QACdyB,iBAAkB/B,KAAK+B,iBACvBM,UAAWrC,KAAKqC,YAEpBE,EAAA,0BACIS,MAAO,CAAE,uCAAwC,SAEjDT,EAAA,qBACIE,MAAM,YACN7B,MAAOZ,KAAKmC,SAASc,WACrBT,KAAK,SACLK,SAAU7C,KAAKkC,cAEnBK,EAAA,kBACIE,MAAM,sBACNI,SAAU7C,KAAK8B,oBACfoB,QAASlD,KAAK+B,mBAElBQ,EAAA,kBACIE,MAAM,WACNI,SAAU7C,KAAKwB,YACf0B,QAASlD,KAAKyB,WAElBc,EAAA,kBACIE,MAAM,WACNI,SAAU7C,KAAK0B,YACfwB,QAASlD,KAAK2B,WAElBY,EAAA,kBACIE,MAAM,WACNI,SAAU7C,KAAK4B,YACfsB,QAASlD,KAAK6B,WAElBU,EAAA,kBACIE,MAAO,eACPI,SAAU7C,KAAKgC,eACfkB,QAASlD,KAAKiC,iBAElBM,EAAA,kBACIE,MAAM,iBACNI,SAAU7C,KAAKoC,cACfc,QAASlD,KAAKqC,YAAc,QAGpCE,EAAA,uBAAqB3B,MAAOZ,KAAKY,Q"}