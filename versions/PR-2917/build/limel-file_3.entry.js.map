{"version":3,"names":["arrayAggregator","array","setter","iteratee","accumulator","index","length","value","createBaseEach","eachFunc","fromRight","collection","isArrayLike","iterable","Object","baseEach","baseForOwn","baseAggregator","key","createAggregator","initializer","func","isArray","baseIteratee","partition","result","push","getFileIcon","file","name","getIconName","icon","extension","getExtension","getIconForFile","getFileColor","color","getIconColor","iconColor","getIconFillColorForFile","getFileBackgroundColor","backgroundColor","getIconBackgroundColor","iconBackgroundColor","getIconBackgroundColorForFile","getFileExtensionTitle","filename","split","pop","fileCss","DEFAULT_FILE_CHIP","id","text","removable","File","this","handleNewFiles","event","preventAndStop","change","emit","detail","handleChipSetChange","stopPropagation","handleChipInteract","interact","render","h","disabled","readonly","accept","onFilesSelected","renderChipset","getChipArray","title","href","chipset","invalid","label","leadingIcon","language","onChange","onInteract","required","type","getTranslation","preventDefault","translate","get","createFileInfo","limeFile","crypto","randomUUID","contentType","size","fileContent","isTypeAccepted","undefined","acceptList","map","raw","trim","some","acceptedType","endsWith","baseType","startsWith","fileType","fileDropzoneCss","FileDropzone","renderOnDragLayout","hasFileToDrop","class","renderText","renderHelperText","helperText","handleDrop","files","Array","from","dataTransfer","fileInfos","acceptedFileInfos","rejectedFileInfos","filesSelected","filesRejected","handleDragOver","handleDragLeave","Host","onDrop","onDragOver","onDragLeave","FileInput","fileInputId","createRandomString","handleClick","triggerFileDialog","handleKeyUp","code","handleFileChange","fileInput","componentDidLoad","element","shadowRoot","getElementById","onClick","onKeyUp","onKeyDown","handleKeyDown","hidden","multiple","click"],"sources":["./node_modules/lodash-es/_arrayAggregator.js","./node_modules/lodash-es/_createBaseEach.js","./node_modules/lodash-es/_baseEach.js","./node_modules/lodash-es/_baseAggregator.js","./node_modules/lodash-es/_createAggregator.js","./node_modules/lodash-es/partition.js","./src/util/file-metadata.ts","./src/components/file/file.scss?tag=limel-file&encapsulation=shadow","./src/components/file/file.tsx","./src/util/files.ts","./src/components/file-dropzone/file-dropzone.scss?tag=limel-file-dropzone&encapsulation=shadow","./src/components/file-dropzone/file-dropzone.tsx","./src/components/file-input/file-input.tsx"],"sourcesContent":["/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import isArrayLike from './isArrayLike.js';\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nexport default createBaseEach;\n","import baseForOwn from './_baseForOwn.js';\nimport createBaseEach from './_createBaseEach.js';\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nexport default baseEach;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import createAggregator from './_createAggregator.js';\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nexport default partition;\n","import { FileInfo } from '../global/shared-types/file.types';\nimport { getIconBackgroundColorForFile } from '../components/file/icon-background-colors';\nimport { getIconFillColorForFile } from '../components/file/icon-fill-colors';\nimport { getIconForFile } from '../components/file/icons';\nimport {\n    getIconBackgroundColor,\n    getIconColor,\n    getIconName,\n} from '../components/icon/get-icon-props';\n\nexport function getFileIcon(file: FileInfo) {\n    const name = getIconName(file.icon);\n\n    if (name) {\n        return name;\n    }\n\n    const extension = getExtension(file);\n    if (!extension) {\n        return;\n    }\n\n    return getIconForFile(extension);\n}\n\nexport function getFileColor(file: FileInfo) {\n    const color = getIconColor(file.icon, file.iconColor);\n\n    if (color) {\n        return color;\n    }\n\n    const extension = getExtension(file);\n    if (!extension) {\n        return;\n    }\n\n    return getIconFillColorForFile(extension);\n}\n\nexport function getFileBackgroundColor(file: FileInfo) {\n    const backgroundColor = getIconBackgroundColor(\n        file.icon,\n        file.iconBackgroundColor,\n    );\n\n    if (backgroundColor) {\n        return backgroundColor;\n    }\n\n    const extension = getExtension(file);\n    if (!extension) {\n        return;\n    }\n\n    return getIconBackgroundColorForFile(extension);\n}\n\nexport function getFileExtensionTitle(file: FileInfo) {\n    const name = getIconName(file.icon);\n\n    if (name) {\n        return name;\n    }\n\n    return getExtension(file);\n}\n\nexport function getExtension(file: FileInfo) {\n    if (!file) {\n        return;\n    }\n\n    return file.filename.split('.').pop();\n}\n","/**\n * @prop --icon-background-color: Background color of the icon. Defaults to `--contrast-400`.\n * @prop --icon-color: Color of the icon. Defaults to `--contrast-1100`.\n */\n","import translate from '../../global/translations';\nimport { Chip } from '../chip-set/chip.types';\nimport { Languages } from '../date-picker/date.types';\nimport { Component, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport {\n    getFileBackgroundColor,\n    getFileColor,\n    getFileExtensionTitle,\n    getFileIcon,\n} from '../../util/file-metadata';\nimport { FileInfo } from '../../global/shared-types/file.types';\n\nconst DEFAULT_FILE_CHIP: Chip = {\n    id: null,\n    text: null,\n    removable: true,\n};\n\n/**\n * This component lets end-users select a *single* file from their device\n * storage. Regardless of the user's device or operating system, this component\n * opens up a file picker dialog that allows the user to choose a file.\n *\n * ## Using correct labels\n *\n * This file picker can be used in different contexts. The component's distinct\n * visual design including the upload icon hints end-users that this is not a\n * normal input field like other fields in the form for example.\n *\n * :::important\n * you need to use a descriptive `label` that clarifies the\n * functionality of the file picker, and/or provides users with clear\n * instructions.\n *\n * Depending on the context, you may need to avoid labels such as:\n * - File\n * - Document\n *\n * and instead consider using labels like:\n * - Attach a file\n * - Upload a file\n * - Choose a document\n * - Choose a file\n *\n * and similar phrases...\n * :::\n *\n * @exampleComponent limel-example-file\n * @exampleComponent limel-example-file-custom-icon\n * @exampleComponent limel-example-file-accepted-types\n * @exampleComponent limel-example-file-composite\n */\n@Component({\n    tag: 'limel-file',\n    shadow: true,\n    styleUrl: 'file.scss',\n})\nexport class File {\n    /**\n     * The selected file.\n     */\n    @Prop()\n    public value: FileInfo;\n\n    /**\n     * The input label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    /**\n     * True if the input should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to disable adding and removing files, but allow interaction\n     * with any already existing file.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the chosen file is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Defines the localisation for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Dispatched when a file is selected/deselected\n     */\n    @Event()\n    private change: EventEmitter<FileInfo>;\n\n    /**\n     * Dispatched when clicking on a chip\n     */\n    @Event()\n    private interact: EventEmitter<number | string>;\n\n    public render() {\n        return (\n            <limel-file-dropzone\n                disabled={this.disabled || this.readonly || !!this.value}\n                accept={this.accept}\n                onFilesSelected={this.handleNewFiles}\n            >\n                {this.renderChipset()}\n            </limel-file-dropzone>\n        );\n    }\n\n    private handleNewFiles = (event: CustomEvent<FileInfo[]>) => {\n        this.preventAndStop(event);\n        this.change.emit(event.detail[0]);\n    };\n\n    private getChipArray(): Chip[] {\n        if (!this.value) {\n            return [];\n        }\n\n        return [\n            {\n                ...DEFAULT_FILE_CHIP,\n                text: this.value.filename,\n                id: this.value.id,\n                icon: {\n                    name: getFileIcon(this.value),\n                    title: getFileExtensionTitle(this.value),\n                    color: getFileColor(this.value),\n                    backgroundColor: getFileBackgroundColor(this.value),\n                },\n                href: this.value.href,\n            },\n        ];\n    }\n\n    private renderChipset() {\n        const chipset = (\n            <limel-chip-set\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                label={this.label}\n                leadingIcon=\"upload_to_cloud\"\n                language={this.language}\n                onChange={this.handleChipSetChange}\n                onInteract={this.handleChipInteract}\n                required={this.required}\n                type=\"input\"\n                value={this.getChipArray()}\n                title={this.getTranslation('drag-and-drop-tips')}\n            />\n        );\n\n        if (this.value) {\n            return chipset;\n        }\n\n        return (\n            <limel-file-input\n                accept={this.accept}\n                disabled={this.disabled || this.readonly}\n            >\n                {chipset}\n            </limel-file-input>\n        );\n    }\n\n    private handleChipSetChange = (event: CustomEvent) => {\n        event.stopPropagation();\n        const file = !event.detail.length ? event.detail[0] : null;\n        if (!file) {\n            this.change.emit(file);\n        }\n    };\n\n    private handleChipInteract = (event: CustomEvent<Chip>) => {\n        this.preventAndStop(event);\n        this.interact.emit(event.detail.id);\n    };\n\n    private preventAndStop(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    private getTranslation(key: string) {\n        return translate.get(`file.${key}`, this.language);\n    }\n}\n","import { FileInfo } from '../global/shared-types/file.types';\nimport {\n    getFileBackgroundColor,\n    getFileColor,\n    getFileExtensionTitle,\n    getFileIcon,\n} from './file-metadata';\n\nexport function createFileInfo(file: File): FileInfo {\n    const limeFile: FileInfo = {\n        id: crypto.randomUUID(),\n        filename: file.name,\n        contentType: file.type,\n        size: file.size,\n        fileContent: file,\n    };\n    limeFile.icon = {\n        name: getFileIcon(limeFile),\n        title: getFileExtensionTitle(limeFile),\n        color: getFileColor(limeFile),\n        backgroundColor: getFileBackgroundColor(limeFile),\n    };\n\n    return limeFile;\n}\n\nexport function isTypeAccepted(file: FileInfo, accept?: string): boolean {\n    if (accept === undefined || accept === '*') {\n        return true;\n    }\n\n    const acceptList = accept.split(',').map((raw) => raw.trim());\n\n    return acceptList.some((acceptedType: string) => {\n        if (acceptedType === file.contentType) {\n            return true;\n        }\n\n        if (acceptedType.endsWith('/*')) {\n            const baseType = acceptedType.split('/')[0];\n\n            return file.contentType.startsWith(`${baseType}/`);\n        }\n\n        if (acceptedType.startsWith('.')) {\n            const fileType = acceptedType.split('.')[1];\n\n            return file.contentType.endsWith(`/${fileType}`);\n        }\n    });\n}\n",":host(limel-file-dropzone) {\n    display: block;\n    position: relative;\n}\n\n.has-file-to-drop {\n    animation: display-drop-zone 0.6s ease forwards;\n\n    box-sizing: border-box;\n    isolation: isolate;\n    z-index: 1;\n    position: absolute;\n    inset: 0.25rem;\n\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 0.5rem;\n\n    color: rgb(var(--contrast-700));\n\n    border: 0.125rem dashed rgb(var(--color-cyan-light));\n    border-radius: 0.75rem;\n}\n\n.text-helpertext {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.icon {\n    width: clamp(2rem, 5vh, 7rem);\n}\n\n.text {\n    font-size: clamp(1rem, 2vh, 1.75rem);\n}\n\n.helper-text {\n    font-size: clamp(0.75rem, 1.5vh, 1rem);\n}\n\n@keyframes display-drop-zone {\n    0% {\n        background-color: rgb(var(--contrast-1100), 0);\n        backdrop-filter: blur(0);\n        -webkit-backdrop-filter: blur(0);\n        scale: 0.9;\n        opacity: 0;\n    }\n\n    50% {\n        scale: 1;\n        opacity: 1;\n    }\n\n    100% {\n        background-color: rgb(var(--contrast-1100), 0.8);\n        backdrop-filter: blur(0.25rem);\n        -webkit-backdrop-filter: blur(0.25rem);\n    }\n}\n","import {\n    Component,\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo, isTypeAccepted } from '../../util/files';\nimport { partition } from 'lodash-es';\n\n/**\n * This component enables you to seamlessly convert any region of the user interface into\n * a file dropzone area, just by wrapping it inside the `limel-file-dropzone`.\n *\n * The file dropzone can then be used to allow end-users to upload files\n * by dragging and dropping them into the specified area, for example to trigger an upload process.\n *\n * After receiving the files, the component emits a `filesSelected` event. For unsupported\n * files (specified with the `accept` prop) a `filesRejected` event will be emitted.\n *\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-dropzone\n * @exampleComponent limel-example-file-dropzone-type-filtering\n * @private\n */\n@Component({\n    tag: 'limel-file-dropzone',\n    shadow: true,\n    styleUrl: 'file-dropzone.scss',\n})\nexport class FileDropzone {\n    /**\n     * Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n     *\n     * For media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\n     * Unique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\n     * A comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n     * `.png, .jpg, .jpeg`.\n     *\n     * @see [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\n     * details.\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable the file dropzone.\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Is displayed when the user is dragging a file over the dropzone.\n     * A suitable text could for instance be \"Drop your files here\".\n     */\n    @Prop()\n    public text: string;\n\n    /**\n     * Is displayed to provide supplementary information to the end users,\n     * for instance, which filetypes or file sizes are accepted.\n     */\n    @Prop()\n    public helperText?: string = '';\n\n    /**\n     * Sets to true when there is a file to drop\n     */\n    @State()\n    private hasFileToDrop: boolean = false;\n\n    /**\n     * Emitted when files are selected\n     */\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    /**\n     * Emitted when files are selected but do not conform with the `accept` property specifications.\n     * This can happen when the file types or formats of the selected files are not among the ones allowed by the dropzone,\n     * as defined by the `accept` property.\n     *\n     * @see `accept` for details on how to specify acceptable file types.\n     */\n    @Event()\n    filesRejected: EventEmitter<FileInfo[]>;\n\n    public render() {\n        return (\n            <Host\n                onDrop={this.handleDrop}\n                onDragOver={this.handleDragOver}\n                onDragLeave={this.handleDragLeave}\n            >\n                <slot />\n                {this.renderOnDragLayout()}\n            </Host>\n        );\n    }\n\n    private renderOnDragLayout = () => {\n        if (this.disabled || !this.hasFileToDrop) {\n            return;\n        }\n\n        return (\n            <div class=\"has-file-to-drop\">\n                <limel-icon class=\"icon\" name=\"upload_2\" />\n                <div class=\"text-helpertext\">\n                    {this.renderText()}\n                    {this.renderHelperText()}\n                </div>\n            </div>\n        );\n    };\n\n    private renderText = () => {\n        if (!this.text) {\n            return;\n        }\n\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderHelperText = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return <span class=\"helper-text\">{this.helperText}</span>;\n    };\n\n    private handleDrop = (event: DragEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.hasFileToDrop = false;\n\n        if (this.disabled) {\n            return;\n        }\n\n        const files: File[] = Array.from(event.dataTransfer.files);\n        const fileInfos: FileInfo[] = files.map(createFileInfo);\n\n        const [acceptedFileInfos, rejectedFileInfos] = partition(\n            fileInfos,\n            (file) => isTypeAccepted(file, this.accept),\n        );\n\n        if (acceptedFileInfos.length > 0) {\n            this.filesSelected.emit(acceptedFileInfos);\n        }\n\n        if (rejectedFileInfos.length > 0) {\n            this.filesRejected.emit(rejectedFileInfos);\n        }\n    };\n\n    private handleDragOver = (event: DragEvent) => {\n        this.hasFileToDrop = true;\n        event.preventDefault();\n    };\n\n    private handleDragLeave = (event: DragEvent) => {\n        this.hasFileToDrop = false;\n        event.preventDefault();\n    };\n}\n","import {\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Component,\n    Element,\n    Prop,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo } from '../../util/files';\n\n/**\n * This component enables you to seamlessly transform any other clickable component that\n * generates a `click` event into a file input selector.\n *\n * To use it, just wrap any clickable component inside the `limel-file-input` component.\n * Upon reception of the `click` event this component will open the native file selection\n * dialog.\n *\n * After receiving the files, the component emits a `filesSelected` event.\n *\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-input\n * @exampleComponent limel-example-file-input-type-filtering\n * @private\n */\n@Component({\n    tag: 'limel-file-input',\n    shadow: true,\n})\nexport class FileInput {\n    /**\n     * Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n     *\n     * For media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\n     * Unique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\n     * A comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n     * `.png, .jpg, .jpeg`.\n     *\n     * @see [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\n     * details.\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable file input selection.\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to enable selection of multiple files\n     */\n    @Prop({ reflect: true })\n    public multiple: boolean = false;\n\n    /**\n     * Emitted when files are selected\n     */\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    @Element()\n    private element: HTMLLimelFileElement;\n\n    private fileInput: HTMLInputElement;\n    private fileInputId = createRandomString();\n\n    public componentDidLoad() {\n        this.fileInput = this.element.shadowRoot.getElementById(\n            this.fileInputId,\n        ) as HTMLInputElement;\n    }\n\n    public render() {\n        return (\n            <Host\n                onClick={this.handleClick}\n                onKeyUp={this.handleKeyUp}\n                onKeyDown={this.handleKeyDown}\n            >\n                <input\n                    hidden={true}\n                    id={this.fileInputId}\n                    onChange={this.handleFileChange}\n                    type=\"file\"\n                    accept={this.accept}\n                    disabled={this.disabled}\n                    multiple={this.multiple}\n                />\n                <slot />\n            </Host>\n        );\n    }\n\n    private handleClick = (event: Event) => {\n        if (this.disabled) {\n            event.stopPropagation();\n            event.preventDefault();\n\n            return;\n        }\n\n        this.triggerFileDialog();\n\n        event.stopPropagation();\n    };\n\n    private handleKeyUp = (event: KeyboardEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (event.code === 'Enter') {\n            this.triggerFileDialog();\n        }\n    };\n\n    private handleKeyDown(event: KeyboardEvent) {\n        if (\n            event.code === 'Tab' ||\n            event.code === 'Backspace' ||\n            event.code === 'Enter'\n        ) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    private triggerFileDialog() {\n        this.fileInput.click();\n    }\n\n    private handleFileChange = (event: Event) => {\n        const files = Array.from(this.fileInput.files);\n        if (files.length > 0) {\n            event.stopPropagation();\n            this.filesSelected.emit(files.map(createFileInfo));\n            this.fileInput.value = '';\n        }\n    };\n}\n"],"mappings":"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"}