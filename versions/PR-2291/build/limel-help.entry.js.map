{"version":3,"names":["helpCss","Help","this","renderReadMoreLink","readMoreLink","linkStyle","color","position","bottom","h","style","href","_a","target","_b","title","_c","tabindex","_d","text","openPopover","event","stopPropagation","isOpen","onPopoverClose","async","render","containerStyle","display","gap","padding","contentStyle","overflow","open","onClose","openDirection","slot","onClick","class","trigger","value"],"sources":["./src/components/help/help.scss?tag=limel-help&encapsulation=shadow","./src/components/help/help.tsx"],"sourcesContent":["@use '../../style/mixins';\n\nlimel-popover {\n    display: flex;\n    --popover-surface-width: min(calc(100vw - 4rem), 22rem);\n}\n\nbutton[slot='trigger'] {\n    all: unset;\n\n    @include mixins.is-flat-clickable(\n        $color--hovered: rgb(var(--color-sky-dark)),\n        $background-color: var(--lime-elevated-surface-background-color)\n    );\n    @include mixins.visualize-keyboard-focus;\n\n    cursor: help;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: rgb(var(--color-sky-default));\n    border-radius: 50%;\n    box-shadow: 0 0 0 1px rgb(var(--color-sky-lighter), 0.7);\n    width: 0.875rem;\n    height: 0.875rem;\n    font-size: 0.75rem;\n\n    &.is-open {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--color-sky-default));\n        box-shadow: var(--button-shadow-inset);\n    }\n}\n","import { Component, h, Prop, State } from '@stencil/core';\nimport { OpenDirection } from '../menu/menu.types';\nimport { Link } from '@limetech/lime-elements';\n\n/**\n * A good design is self-explanatory! However, sometimes concepts are\n * too complex to understand, no matter how well-designed a user interface is.\n * In such cases, contextual help can be a great way to provide users with\n * help precisely where and when users need it.\n *\n * In app interface design, providing contextual help emerges as a viable practice\n * for enhancing user experience and usability.\n * Contextual help serves as a quick-to-access guiding,\n * empowering users to more easily understand and navigate through\n * the intricacies of an application.\n *\n * Using this component designers empower users to grasp the functionality\n * of an app more effortlessly, minimizes the learning curve,\n * transforming complex features into accessible opportunities for exploration.\n * @exampleComponent limel-example-help\n * @exampleComponent limel-example-read-more\n * @exampleComponent limel-example-open-direction\n * @exampleComponent limel-example-placement\n */\n@Component({\n    tag: 'limel-help',\n    shadow: true,\n    styleUrl: 'help.scss',\n})\nexport class Help {\n    /**\n     * The markdown content that will be displayed in the popover.\n     */\n    @Prop()\n    public value: string;\n\n    /**\n     * Visualizes the trigger element. Defaults to: **?**\n     * :::important\n     * Be consistent across the product if you want to change it to a custom character.\n     * All instances of the help component should have the same trigger visualization.\n     * :::\n     */\n    @Prop()\n    public trigger: string = '?';\n\n    /**\n     * If supplied, it will render a \"Read more\" link at the bottom of the content.\n     * Even though you can add a link anywhere in the content, it is recommended to\n     * use the read more link. Because it will always be displayed at the bottom\n     * of the popover after the content, does not scroll away with the content,\n     * and it will be styled in a consistent way.\n     */\n    @Prop()\n    public readMoreLink?: Link;\n\n    /**\n     * Decides the popover's location in relation to the trigger.\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'top-start';\n\n    // TODO: We need to enable consumers to open the popover programmatically as well.\n    // Not just by clicking the trigger.\n    // /**\n    //  * Decides if the popover is open or not.\n    // */\n    // @Prop({reflect: true})\n    // public open: boolean = false;\n\n    @State()\n    private isOpen = false;\n\n    // private rootElement: HTMLDivElement;\n\n    // @Watch('text')\n    // public async textChanged() {\n    //     const html = await markdownToHTML(this.text, {\n    //         forceHardLineBreaks: true,\n    //     });\n    //     this.rootElement.innerHTML = html;\n    // }\n\n    public async componentDidLoad() {\n        // this.textChanged();\n    }\n\n    public render() {\n        const containerStyle = {\n            'box-sizing': 'border-box',\n            display: 'flex',\n            'flex-direction': 'column',\n            gap: '0.5rem',\n            padding: '0.5rem 1rem',\n        };\n\n        const contentStyle = {\n            'max-height': '30rem',\n            overflow: 'hidden auto',\n        };\n\n        return [\n            <limel-popover\n                open={this.isOpen}\n                onClose={this.onPopoverClose}\n                openDirection={this.openDirection}\n            >\n                <button\n                    slot=\"trigger\"\n                    onClick={this.openPopover}\n                    class={{\n                        'is-open': this.isOpen,\n                    }}\n                >\n                    {this.trigger}\n                </button>\n                <div style={containerStyle}>\n                    <limel-markdown style={contentStyle} value={this.value} />\n                    {this.renderReadMoreLink()}\n                </div>\n            </limel-popover>,\n        ];\n    }\n\n    private renderReadMoreLink = () => {\n        if (!this.readMoreLink) {\n            return;\n        }\n\n        const linkStyle = {\n            color: 'rgb(var(--color-sky-default))',\n            'text-decoration': 'none',\n            'font-size': '0.875rem',\n            position: 'sticky',\n            bottom: '0',\n        };\n\n        return (\n            <a\n                style={linkStyle}\n                href={this.readMoreLink?.href}\n                target={this.readMoreLink?.target}\n                title={this.readMoreLink?.title}\n                tabindex=\"0\"\n            >\n                {this.readMoreLink?.text}\n            </a>\n        );\n    };\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.isOpen = true;\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        this.isOpen = false;\n    };\n}\n"],"mappings":"+CAAA,MAAMA,EAAU,+lC,MC6BHC,EAAI,M,yBA+FLC,KAAAC,mBAAqB,K,YACzB,IAAKD,KAAKE,aAAc,CACpB,M,CAGJ,MAAMC,EAAY,CACdC,MAAO,gCACP,kBAAmB,OACnB,YAAa,WACbC,SAAU,SACVC,OAAQ,KAGZ,OACIC,EAAA,KACIC,MAAOL,EACPM,MAAMC,EAAAV,KAAKE,gBAAY,MAAAQ,SAAA,SAAAA,EAAED,KACzBE,QAAQC,EAAAZ,KAAKE,gBAAY,MAAAU,SAAA,SAAAA,EAAED,OAC3BE,OAAOC,EAAAd,KAAKE,gBAAY,MAAAY,SAAA,SAAAA,EAAED,MAC1BE,SAAS,MAERC,EAAAhB,KAAKE,gBAAY,MAAAc,SAAA,SAAAA,EAAEC,KACpB,EAIJjB,KAAAkB,YAAeC,IACnBA,EAAMC,kBACNpB,KAAKqB,OAAS,IAAI,EAGdrB,KAAAsB,eAAkBH,IACtBA,EAAMC,kBACNpB,KAAKqB,OAAS,KAAK,E,kCAjHE,I,+CAgBa,Y,YAWrB,K,CAYVE,yB,CAIAC,SACH,MAAMC,EAAiB,CACnB,aAAc,aACdC,QAAS,OACT,iBAAkB,SAClBC,IAAK,SACLC,QAAS,eAGb,MAAMC,EAAe,CACjB,aAAc,QACdC,SAAU,eAGd,MAAO,CACHvB,EAAA,iBACIwB,KAAM/B,KAAKqB,OACXW,QAAShC,KAAKsB,eACdW,cAAejC,KAAKiC,eAEpB1B,EAAA,UACI2B,KAAK,UACLC,QAASnC,KAAKkB,YACdkB,MAAO,CACH,UAAWpC,KAAKqB,SAGnBrB,KAAKqC,SAEV9B,EAAA,OAAKC,MAAOiB,GACRlB,EAAA,kBAAgBC,MAAOqB,EAAcS,MAAOtC,KAAKsC,QAChDtC,KAAKC,uB"}