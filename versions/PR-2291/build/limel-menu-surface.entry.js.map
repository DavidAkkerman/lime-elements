{"version":3,"names":["menuSurfaceCss","MenuSurface","this","setup","menuElement","host","shadowRoot","querySelector","menuSurface","MDCMenuSurface","setAnchorCorner","Corner","TOP_START","document","addEventListener","handleDocumentClick","capture","handleKeyDown","window","handleResize","passive","teardown","_a","destroy","removeEventListener","event","elementPath","composedPath","open","isDescendant","target","allowClicksElement","clickedInAllowedElement","includes","dismiss","emit","preventClickEventPropagation","stopEvent","once","stopPropagation","preventDefault","isEscape","key","ESCAPE","keyCode","ESCAPE_KEY_CODE","isTab","TAB","TAB_KEY_CODE","connectedCallback","disconnectedCallback","componentDidLoad","render","classList","h","class","tabindex"],"sources":["./src/components/menu-surface/menu-surface.scss?tag=limel-menu-surface&encapsulation=shadow","./src/components/menu-surface/menu-surface.tsx"],"sourcesContent":["@use '@material/menu-surface';\n@use '@material/elevation';\n@use '@material/menu';\n\n/**\n* @prop --limel-menu-surface-display: defines whether the surface is treated as a block, flex or grid. It affects layout used to display its children. Defaults to `block`.\n* @prop --limel-menu-surface-flex-direction: defines the direction of menu-surface layout.\n*/\n\n:host(limel-menu-surface) {\n    display: block;\n    max-height: inherit;\n}\n\n@include menu-surface.core-styles;\n@include menu.core-styles;\n\n.mdc-menu-surface {\n    display: var(--limel-menu-surface-display, block);\n    flex-direction: var(--limel-menu-surface-flex-direction, row);\n    max-height: inherit;\n    position: relative;\n    --mdc-menu-max-width: var(\n        --menu-surface-width,\n        min(calc(100vw - 2rem), 20rem)\n    );\n    background-color: var(--lime-elevated-surface-background-color);\n}\n\n:host(limel-menu-surface.has-grid-layout) {\n    .mdc-menu-surface {\n        width: var(--menu-surface-width, min(calc(100vw - 2rem), 40rem));\n        max-width: unset;\n    }\n}\n","import { Corner, MDCMenuSurface } from '@material/menu-surface';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { isDescendant } from '../../util/dom';\nimport {\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\n\n/**\n * @slot - Content to put inside the surface\n * @private\n */\n@Component({\n    tag: 'limel-menu-surface',\n    shadow: true,\n    styleUrl: 'menu-surface.scss',\n})\nexport class MenuSurface {\n    /**\n     * True if the menu surface is open, false otherwise\n     */\n    @Prop()\n    public open = false;\n\n    /**\n     * Clicks in this element should not be prevented when the menu surface is open\n     */\n    @Prop()\n    public allowClicksElement: HTMLElement;\n\n    /**\n     * Emitted when the menu surface is dismissed and should be closed\n     */\n    @Event()\n    public dismiss: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelMenuSurfaceElement;\n\n    private menuSurface: MDCMenuSurface;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public render() {\n        const classList = {\n            'mdc-menu': true,\n            'mdc-menu-surface': true,\n            'mdc-menu-surface--open': this.open,\n            'mdc-elevation-transition': true,\n            'mdc-elevation--z4': true,\n        };\n\n        return (\n            <div class={classList} tabindex=\"-1\">\n                <slot />\n            </div>\n        );\n    }\n\n    private setup = () => {\n        const menuElement: HTMLElement =\n            this.host.shadowRoot.querySelector('.mdc-menu-surface');\n        if (!menuElement) {\n            return;\n        }\n\n        this.menuSurface = new MDCMenuSurface(menuElement);\n        this.menuSurface.setAnchorCorner(Corner.TOP_START);\n\n        document.addEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('resize', this.handleResize, {\n            passive: true,\n        });\n    };\n\n    private teardown = () => {\n        this.menuSurface?.destroy();\n        document.removeEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('resize', this.handleResize);\n    };\n\n    private handleDocumentClick = (event) => {\n        const elementPath = event.composedPath ? event.composedPath() : [];\n\n        if (!this.open) {\n            return;\n        }\n\n        if (isDescendant(event.target, this.host)) {\n            return;\n        }\n\n        if (this.allowClicksElement) {\n            const clickedInAllowedElement = elementPath.includes(\n                this.allowClicksElement\n            );\n\n            if (clickedInAllowedElement) {\n                return;\n            }\n        }\n\n        this.dismiss.emit();\n        this.preventClickEventPropagation();\n    };\n\n    private handleResize = () => {\n        if (this.open) {\n            this.dismiss.emit();\n        }\n    };\n\n    private preventClickEventPropagation = () => {\n        // When the menu surface is open, we want to stop the `click` event from propagating\n        // when clicking outside the surface itself. This is to prevent any dialog that might\n        // be open from closing, etc. However, when dragging a scrollbar no `click` event is emitted,\n        // only mousedown and mouseup. So we listen for `mousedown` and attach a one-time listener\n        // for `click`, so we can capture and \"kill\" it.\n        document.addEventListener('click', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // We also capture and \"kill\" the next `mouseup` event.\n        document.addEventListener('mouseup', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // If the user dragged the scrollbar, no `click` event happens. So when we get the\n        // `mouseup` event, remove the handler for `click` if it's still there.\n        // Otherwise, we would catch the next click even though the menu is no longer open.\n        document.addEventListener(\n            'mouseup',\n            () => {\n                document.removeEventListener('click', this.stopEvent, {\n                    capture: true,\n                });\n            },\n            {\n                once: true,\n            }\n        );\n    };\n\n    private stopEvent = (event) => {\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        const isEscape =\n            event.key === ESCAPE || event.keyCode === ESCAPE_KEY_CODE;\n        const isTab = event.key === TAB || event.keyCode === TAB_KEY_CODE;\n\n        if (this.open && (isEscape || isTab)) {\n            event.stopPropagation();\n            this.dismiss.emit();\n        }\n    };\n}\n"],"mappings":"iRAAA,MAAMA,EAAiB,0nI,MC0BVC,EAAW,M,0DAoDZC,KAAAC,MAAQ,KACZ,MAAMC,EACFF,KAAKG,KAAKC,WAAWC,cAAc,qBACvC,IAAKH,EAAa,CACd,M,CAGJF,KAAKM,YAAc,IAAIC,EAAeL,GACtCF,KAAKM,YAAYE,gBAAgBC,EAAOC,WAExCC,SAASC,iBAAiB,YAAaZ,KAAKa,oBAAqB,CAC7DC,QAAS,OAEbd,KAAKG,KAAKS,iBAAiB,UAAWZ,KAAKe,eAC3CC,OAAOJ,iBAAiB,SAAUZ,KAAKiB,aAAc,CACjDC,QAAS,MACX,EAGElB,KAAAmB,SAAW,K,OACfC,EAAApB,KAAKM,eAAW,MAAAc,SAAA,SAAAA,EAAEC,UAClBV,SAASW,oBAAoB,YAAatB,KAAKa,oBAAqB,CAChEC,QAAS,OAEbd,KAAKG,KAAKmB,oBAAoB,UAAWtB,KAAKe,eAC9CC,OAAOM,oBAAoB,SAAUtB,KAAKiB,aAAa,EAGnDjB,KAAAa,oBAAuBU,IAC3B,MAAMC,EAAcD,EAAME,aAAeF,EAAME,eAAiB,GAEhE,IAAKzB,KAAK0B,KAAM,CACZ,M,CAGJ,GAAIC,EAAaJ,EAAMK,OAAQ5B,KAAKG,MAAO,CACvC,M,CAGJ,GAAIH,KAAK6B,mBAAoB,CACzB,MAAMC,EAA0BN,EAAYO,SACxC/B,KAAK6B,oBAGT,GAAIC,EAAyB,CACzB,M,EAIR9B,KAAKgC,QAAQC,OACbjC,KAAKkC,8BAA8B,EAG/BlC,KAAAiB,aAAe,KACnB,GAAIjB,KAAK0B,KAAM,CACX1B,KAAKgC,QAAQC,M,GAIbjC,KAAAkC,6BAA+B,KAMnCvB,SAASC,iBAAiB,QAASZ,KAAKmC,UAAW,CAC/CrB,QAAS,KACTsB,KAAM,OAGVzB,SAASC,iBAAiB,UAAWZ,KAAKmC,UAAW,CACjDrB,QAAS,KACTsB,KAAM,OAKVzB,SAASC,iBACL,WACA,KACID,SAASW,oBAAoB,QAAStB,KAAKmC,UAAW,CAClDrB,QAAS,MACX,GAEN,CACIsB,KAAM,MAEb,EAGGpC,KAAAmC,UAAaZ,IACjBA,EAAMc,kBACNd,EAAMe,gBAAgB,EAGlBtC,KAAAe,cAAiBQ,IACrB,MAAMgB,EACFhB,EAAMiB,MAAQC,GAAUlB,EAAMmB,UAAYC,EAC9C,MAAMC,EAAQrB,EAAMiB,MAAQK,GAAOtB,EAAMmB,UAAYI,EAErD,GAAI9C,KAAK0B,OAASa,GAAYK,GAAQ,CAClCrB,EAAMc,kBACNrC,KAAKgC,QAAQC,M,aArJP,M,kCAmBPc,oBACH/C,KAAKC,O,CAGF+C,uBACHhD,KAAKmB,U,CAGF8B,mBACHjD,KAAKC,O,CAGFiD,SACH,MAAMC,EAAY,CACd,WAAY,KACZ,mBAAoB,KACpB,yBAA0BnD,KAAK0B,KAC/B,2BAA4B,KAC5B,oBAAqB,MAGzB,OACI0B,EAAA,OAAKC,MAAOF,EAAWG,SAAS,MAC5BF,EAAA,a"}