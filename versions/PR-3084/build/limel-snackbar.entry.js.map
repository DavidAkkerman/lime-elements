{"version":3,"names":["SnackbarContainer","constructor","this","snackbarElements","add","snackbar","popover","getPopover","showPopover","emitOffsets","remove","hidePopover","filter","item","offset","forEach","dispatchEvent","CustomEvent","detail","getBoundingClientRect","height","shadowRoot","querySelector","snackbarCss","container","hideAnimationDuration","Snackbar","hostRef","close","open","closing","setTimeout","host","hide","emit","handleClickAction","action","snackbarId","createRandomString","onChangeIndex","event","stopPropagation","async","timeout","Math","max","render","h","style","class","id","role","undefined","message","renderActions","actionText","renderDismissButton","dismissible","renderActionButton","label","onClick","translate","get","language","renderTimeoutVisualization","icon","width","viewBox","r","cx","cy","fill","d","stroke"],"sources":["./src/components/snackbar/container.ts","./src/components/snackbar/snackbar.scss?tag=limel-snackbar&encapsulation=shadow","./src/components/snackbar/snackbar.tsx"],"sourcesContent":["/**\n * Container to keep track of all snackbar elements that gets added to the page.\n * When an element gets added or removed, the container will emit a\n * `changeOffset` event on all elements in the container, letting them know\n * the new offset to where they should position themselves.\n */\nexport class SnackbarContainer {\n    private snackbarElements: HTMLLimelSnackbarElement[] = [];\n\n    /**\n     * Add a new element to the container\n     *\n     * @param snackbar - element to add\n     */\n    public add(snackbar: HTMLLimelSnackbarElement) {\n        const popover = this.getPopover(snackbar);\n\n        // Stencil does not seem to recognise the existance of showPopover\n        // @ts-ignore\n        popover?.showPopover();\n\n        this.snackbarElements = [snackbar, ...this.snackbarElements];\n        this.emitOffsets();\n    }\n\n    /**\n     * Remove an element from the container\n     *\n     * @param snackbar - element to remove\n     */\n    public remove(snackbar: HTMLLimelSnackbarElement): void {\n        const popover = this.getPopover(snackbar);\n\n        // Stencil does not seem to recognise the existance of hidePopover\n        // @ts-ignore\n        popover?.hidePopover();\n\n        this.snackbarElements = this.snackbarElements.filter(\n            (item) => item !== snackbar,\n        );\n        this.emitOffsets();\n    }\n\n    private emitOffsets() {\n        let offset = 0;\n        this.snackbarElements.forEach((snackbar) => {\n            snackbar.dispatchEvent(\n                new CustomEvent('changeOffset', {\n                    detail: offset,\n                }),\n            );\n            offset += this.getPopover(snackbar).getBoundingClientRect().height;\n        });\n    }\n\n    private getPopover(snackbar: HTMLLimelSnackbarElement) {\n        return snackbar.shadowRoot.querySelector('[popover]');\n    }\n}\n","* {\n    box-sizing: border-box;\n}\n\naside {\n    background: none;\n    border: none;\n    inset: unset;\n    overflow: visible;\n    padding: 0.5rem 0.5rem 0 0.5rem;\n    right: 0;\n\n    width: var(--limel-snackbar-width, 21rem);\n    top: calc(\n        var(--snackbar-distance-to-top-edge) + env(safe-area-inset-top, 0)\n    );\n\n    transition:\n        opacity var(--limel-snackbar-opacity-transition-speed, 0.2s) ease,\n        top var(--limel-snackbar-top-transition-speed, 0.46s)\n            cubic-bezier(1, 0.09, 0, 0.89),\n        transform var(--limel-snackbar-top-transition-speed, 0.46s) ease;\n    transform: translate3d(0, 0, 0);\n    opacity: 1;\n\n    &.is-closing {\n        transform: translate3d(2rem, 0, 0);\n        opacity: 0;\n        --limel-snackbar-top-transition-speed: 0.2s;\n        --limel-snackbar-opacity-transition-speed: 0.2s;\n    }\n}\n\n.surface {\n    overflow: hidden;\n\n    padding: 0.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 0.25rem;\n\n    min-height: 3.25rem;\n    border-radius: 0.75rem;\n\n    background-color: rgb(var(--contrast-1400));\n    box-shadow: var(--shadow-depth-8), var(--shadow-depth-16);\n}\n\n.label {\n    color: rgb(var(--contrast-100));\n\n    -webkit-font-smoothing: antialiased;\n    font-size: 0.8125rem;\n    font-weight: 400;\n    padding: 0 0.25rem;\n\n    width: 100%;\n    flex-grow: 1;\n}\n\n.actions {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    box-sizing: border-box;\n    gap: 0.5rem;\n}\n\n.dismiss,\n.actions {\n    --lime-elevated-surface-background-color: rgb(\n        var(--contrast-1300)\n    ); // background color of the buttons\n}\n\n.dismiss {\n    --mdc-theme-on-surface: rgb(var(--contrast-100)); // color of the X icon\n    --icon-background-color: var(--lime-elevated-surface-background-color);\n    --fill-color: var(--mdc-theme-primary);\n    --track-color: rgb(var(--contrast-800), 0.2);\n    transition:\n        opacity 0.1s ease,\n        transform 0.1s ease;\n    position: absolute;\n    top: -0.375rem;\n    left: -0.375rem;\n    transform: scale(0.7);\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    svg {\n        position: absolute;\n        transform: rotate(90deg);\n        fill: transparent;\n        stroke-dasharray: 100;\n        stroke-linecap: round;\n\n        aside:popover-open & {\n            animation: timeout var(--snackbar-timeout) linear forwards;\n        }\n    }\n\n    .is-closing {\n        transform: scale(0.5);\n        opacity: 0;\n    }\n}\n\n.dismiss-button {\n    transform: scale(0.8);\n    margin: 0;\n    padding: 0;\n}\n\n@keyframes timeout {\n    0% {\n        stroke-width: 4;\n        stroke-dashoffset: 0;\n        opacity: 1;\n    }\n    100% {\n        stroke-width: 1;\n        stroke-dashoffset: -100;\n        opacity: 0.7;\n    }\n}\n","import { Languages } from '../date-picker/date.types';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Listen,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport translate from '../../global/translations';\nimport { SnackbarContainer } from './container';\nimport { createRandomString } from 'src/util/random-string';\n\nconst container = new SnackbarContainer();\nconst hideAnimationDuration = 300;\n\n/**\n * A Snackbar –also known as \"Toast\"– is used to inform the end user\n * about an action or a process in the system.\n * The information could vary from announcing that a process has just started,\n * is taking place now, has ended, or has been interrupted or canceled.\n *\n * The information that you provide using a snackbar should be:\n * - temporary\n * - contextual\n * - short\n * - and most importantly, ignorable.\n *\n * It means if the user misses the information, it shouldn't be a big deal.\n *\n * :::note\n * If the information you want to display has a higher importance or priority,\n * and you need to make sure that the user takes an action to dismiss it,\n * consider using the [Banner](/#/component/limel-banner/) component instead.\n * For more complex interactions and for delivering more detailed information,\n * [Dialog](/#/component/limel-dialog/) is a better choice.\n * :::\n *\n * @exampleComponent limel-example-snackbar\n * @exampleComponent limel-example-snackbar-dismissible\n * @exampleComponent limel-example-snackbar-with-action\n * @exampleComponent limel-example-snackbar-with-changing-messages\n */\n@Component({\n    tag: 'limel-snackbar',\n    shadow: true,\n    styleUrl: 'snackbar.scss',\n})\nexport class Snackbar {\n    /**\n     * The text message to display.\n     */\n    @Prop()\n    public message: string;\n\n    /**\n     * The amount of time in milliseconds to show the snackbar.\n     */\n    @Prop()\n    // eslint-disable-next-line no-magic-numbers\n    public timeout?: number = 5000;\n\n    /**\n     * The text to display for the action button.\n     */\n    @Prop()\n    public actionText: string;\n\n    /**\n     * When `true` displays a dismiss button on the snackbar,\n     * allowing users to close it.\n     */\n    @Prop()\n    public dismissible: boolean = true;\n\n    /**\n     * Whether to show the snackbar with space for multiple lines of text\n     */\n    @Prop()\n    public multiline: boolean;\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    @Element()\n    private host: HTMLLimelSnackbarElement;\n\n    /**\n     * Emitted when the action button is pressed\n     */\n    @Event()\n    private action: EventEmitter<void>;\n\n    /**\n     * Emitted when the snackbar hides itself\n     */\n    @Event()\n    private hide: EventEmitter<void>;\n\n    @State()\n    private offset: number = 0;\n\n    @State()\n    private open: boolean = false;\n\n    @State()\n    private closing: boolean = true;\n\n    private snackbarId: string;\n\n    public constructor() {\n        this.snackbarId = createRandomString();\n    }\n\n    @Listen('changeOffset')\n    protected onChangeIndex(event: CustomEvent<number>) {\n        event.stopPropagation();\n        this.offset = event.detail;\n    }\n\n    /**\n     * Show the snackbar\n     */\n    @Method()\n    public async show() {\n        if (this.open) {\n            return;\n        }\n\n        this.open = true;\n        this.closing = false;\n        container.add(this.host);\n\n        if (this.timeout) {\n            setTimeout(\n                this.close,\n                Math.max(this.timeout - hideAnimationDuration, 0),\n            );\n        }\n    }\n\n    private close = () => {\n        if (!this.open) {\n            return false;\n        }\n\n        this.closing = true;\n\n        setTimeout(() => {\n            this.open = false;\n            container.remove(this.host);\n            this.hide.emit();\n            this.offset = 0;\n        }, hideAnimationDuration);\n    };\n\n    public render() {\n        return (\n            <aside\n                popover=\"manual\"\n                style={{\n                    '--snackbar-timeout': `${this.timeout}ms`,\n                    '--snackbar-distance-to-top-edge': `${this.offset}px`,\n                }}\n                class={{\n                    open: this.open,\n                    'is-closing': this.closing,\n                }}\n                id={this.snackbarId}\n                role={this.open ? 'status' : undefined}\n                aria-relevant={this.open ? 'additions' : undefined}\n            >\n                <div class=\"surface\" aria-atomic=\"false\">\n                    <div class=\"label\">{this.message}</div>\n                    {this.renderActions(this.actionText)}\n                    {this.renderDismissButton(this.dismissible)}\n                </div>\n            </aside>\n        );\n    }\n\n    private handleClickAction = () => {\n        this.action.emit();\n    };\n\n    private renderActions(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <div class=\"actions\" aria-atomic=\"true\">\n                {this.renderActionButton(actionText)}\n            </div>\n        );\n    }\n\n    private renderActionButton(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <limel-button label={actionText} onClick={this.handleClickAction} />\n        );\n    }\n\n    private renderDismissButton(dismissible: boolean) {\n        if (!dismissible) {\n            return;\n        }\n\n        const label = translate.get('snackbar.dismiss', this.language);\n\n        return (\n            <div class=\"dismiss\">\n                {this.renderTimeoutVisualization()}\n                <limel-icon-button\n                    class=\"dismiss-button\"\n                    icon=\"multiply\"\n                    label={label}\n                    onClick={this.close}\n                    aria-controls={this.snackbarId}\n                />\n            </div>\n        );\n    }\n\n    private renderTimeoutVisualization() {\n        return (\n            <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\">\n                <circle r=\"18\" cx=\"18\" cy=\"18\" fill=\"var(--track-color)\" />\n                <path\n                    class=\"track\"\n                    d=\"M 18,18 m -16,0 a 16,16 0 1,0 32,0 a 16,16 0 1,0 -32,0\"\n                    stroke=\"var(--fill-color)\"\n                />\n            </svg>\n        );\n    }\n}\n"],"mappings":"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"}