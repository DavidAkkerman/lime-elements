{"version":3,"names":["SnackbarContainer","constructor","this","snackbarElements","add","snackbar","popover","getPopover","showPopover","emitOffsets","remove","hidePopover","filter","item","offset","forEach","dispatchEvent","CustomEvent","detail","getBoundingClientRect","height","shadowRoot","querySelector","snackbarCss","container","Snackbar","close","open","hideAnimationDuration","closing","setTimeout","host","hide","emit","handleClickAction","action","onChangeIndex","event","stopPropagation","async","timeout","render","h","style","top","class","role","message","renderActions","actionText","renderDismissButton","dismissible","renderActionButton","label","onClick","translate","get","language","renderTimeoutVisualization","icon","width","viewBox","r","cx","cy","fill","d","stroke"],"sources":["./src/components/snackbar/container.ts","./src/components/snackbar/snackbar.scss?tag=limel-snackbar&encapsulation=shadow","./src/components/snackbar/snackbar.tsx"],"sourcesContent":["/**\n * Container to keep track of all snackbar elements that gets added to the page.\n * When an element gets added or removed, the container will emit a\n * `changeOffset` event on all elements in the container, letting them know\n * the new offset to where they should position themselves.\n */\nexport class SnackbarContainer {\n    private snackbarElements: HTMLLimelSnackbarElement[] = [];\n\n    /**\n     * Add a new element to the container\n     *\n     * @param snackbar - element to add\n     */\n    public add(snackbar: HTMLLimelSnackbarElement) {\n        const popover = this.getPopover(snackbar);\n\n        // Stencil does not seem to recognise the existance of showPopover\n        // @ts-ignore\n        popover?.showPopover();\n\n        this.snackbarElements = [snackbar, ...this.snackbarElements];\n        this.emitOffsets();\n    }\n\n    /**\n     * Remove an element from the container\n     *\n     * @param snackbar - element to remove\n     */\n    public remove(snackbar: HTMLLimelSnackbarElement): void {\n        const popover = this.getPopover(snackbar);\n\n        // Stencil does not seem to recognise the existance of hidePopover\n        // @ts-ignore\n        popover?.hidePopover();\n\n        this.snackbarElements = this.snackbarElements.filter((item) => item !== snackbar);\n        this.emitOffsets();\n    }\n\n    private emitOffsets() {\n        let offset = 0;\n        this.snackbarElements.forEach((snackbar) => {\n            snackbar.dispatchEvent(\n                new CustomEvent('changeOffset', {\n                    detail: offset,\n                }),\n            );\n            offset += this.getPopover(snackbar)\n                .getBoundingClientRect().height;\n        });\n    }\n\n    private getPopover(snackbar: HTMLLimelSnackbarElement) {\n        return snackbar.shadowRoot.querySelector('[popover]');\n    }\n}\n","/**\n * @prop --snackbar-top: Snackbar has `position: fixed;` and uses `--snackbar-top`, which defaults to `auto` for its `top` property. See the examples in the documentations for further info.\n * @prop --snackbar-right: Snackbar has `position: fixed;` and uses `--snackbar-right`, which defaults to `0` for its `right` property. See the examples in the documentations for further info.\n * @prop --snackbar-bottom: Snackbar has `position: fixed;` and uses `--snackbar-bottom`, which defaults to `0` for its `bottom` property. See the examples in the documentations for further info.\n * @prop --snackbar-left: Snackbar has `position: fixed;` and uses `--snackbar-left`, which defaults to `0` for its `left` property. See the examples in the documentations for further info.\n */\n\n* {\n    box-sizing: border-box;\n}\n\naside {\n    background: none;\n    border: none;\n    inset: unset;\n    top: 0;\n    right: 0;\n    // margin: unset;\n    // top: var(--snackbar-top, auto);\n    // right: var(--snackbar-right, 0);\n    // bottom: var(--snackbar-bottom, 0);\n    // left: var(--snackbar-left, 0);\n\n    align-items: center;\n    justify-content: flex-start;\n\n    padding: 0.75rem;\n    min-height: 3.25rem;\n    min-width: unset;\n    max-width: 42rem;\n\n    transition:\n        opacity 0.25s cubic-bezier(0, 0, 0.2, 1),\n        transform 0.25s cubic-bezier(0, 0, 0.2, 1);\n\n    &:popover-open {\n        transform: scale(1);\n        opacity: 1;\n    }\n\n    &:backdrop {\n        background-color: transparent;\n    }\n\n    &.is-closing {\n        transform: scale(0.8);\n        opacity: 0;\n    }\n}\n\n.surface {\n    padding: 0.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 0.25rem;\n\n    min-height: 3.25rem;\n    min-width: unset;\n    max-width: 42rem;\n\n    border-radius: 0.75rem;\n\n    background-color: rgb(var(--contrast-1400));\n    box-shadow: var(--shadow-depth-8), var(--shadow-depth-16);\n}\n\n.label {\n    color: rgb(var(--contrast-100));\n\n    -webkit-font-smoothing: antialiased;\n    font-size: 0.8125rem;\n    font-weight: 400;\n    padding: 0 0.25rem;\n\n    width: 100%;\n    flex-grow: 1;\n}\n\n.actions {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    box-sizing: border-box;\n    gap: 0.5rem;\n}\n\n.dismiss,\n.actions {\n    --lime-elevated-surface-background-color: rgb(\n        var(--contrast-1300)\n    ); // background color of the buttons\n}\n\n.dismiss {\n    --mdc-theme-on-surface: rgb(var(--contrast-100)); // color of the X icon\n    --icon-background-color: var(--lime-elevated-surface-background-color);\n    --fill-color: var(--mdc-theme-primary);\n    --track-color: rgb(var(--contrast-800), 0.2);\n    position: absolute;\n    top: -0.3rem;\n    left: -0.3rem;\n    transform: scale(0.7);\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    limel-icon-button.dismiss-button {\n        transform: scale(0.8);\n        margin: 0;\n        padding: 0;\n    }\n\n    svg {\n        position: absolute;\n        transform: rotate(90deg);\n        fill: transparent;\n        stroke-dasharray: 100;\n        stroke-linecap: round;\n\n        aside:popover-open & {\n            animation: timeout var(--snackbar-timeout) linear forwards;\n        }\n    }\n}\n\n@keyframes timeout {\n    0% {\n        stroke-width: 4;\n        stroke-dashoffset: 0;\n        opacity: 1;\n    }\n    100% {\n        stroke-width: 1;\n        stroke-dashoffset: -100;\n        opacity: 0.7;\n    }\n}\n","import { Languages } from '../date-picker/date.types';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Listen,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport translate from '../../global/translations';\nimport { SnackbarContainer } from './container';\n\nconst container = new SnackbarContainer();\n\n/**\n * A Snackbar –also known as \"Toast\"– is used to inform the end user\n * about an action or a process in the system.\n * The information could vary from announcing that a process has just started,\n * is taking place now, has ended, or has been interrupted or canceled.\n *\n * The information that you provide using a snackbar should be:\n * - temporary\n * - contextual\n * - short\n * - and most importantly, ignorable.\n *\n * It means if the user misses the information, it shouldn't be a big deal.\n *\n * :::note\n * If the information you want to display has a higher importance or priority,\n * and you need to make sure that the user takes an action to dismiss it,\n * consider using the [Banner](/#/component/limel-banner/) component instead.\n * For more complex interactions and for delivering more detailed information,\n * [Dialog](/#/component/limel-dialog/) is a better choice.\n * :::\n *\n * @exampleComponent limel-example-snackbar\n * @exampleComponent limel-example-snackbar-dismissible\n * @exampleComponent limel-example-snackbar-with-action\n * @exampleComponent limel-example-snackbar-with-changing-messages\n * @exampleComponent limel-example-snackbar-positioning\n */\n@Component({\n    tag: 'limel-snackbar',\n    shadow: true,\n    styleUrl: 'snackbar.scss',\n})\nexport class Snackbar {\n    /**\n     * The text message to display.\n     */\n    @Prop()\n    public message: string;\n\n    /**\n     * The amount of time in milliseconds to show the snackbar.\n     */\n    @Prop()\n    // eslint-disable-next-line no-magic-numbers\n    public timeout?: number = 5000;\n\n    /**\n     * The text to display for the action button.\n     */\n    @Prop()\n    public actionText: string;\n\n    /**\n     * When `true` displays a dismiss button on the snackbar,\n     * allowing users to close it.\n     */\n    @Prop()\n    public dismissible: boolean = true;\n\n    /**\n     * Whether to show the snackbar with space for multiple lines of text\n     */\n    @Prop()\n    public multiline: boolean;\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    @Element()\n    private host: HTMLLimelSnackbarElement;\n\n    /**\n     * Emitted when the action button is pressed\n     */\n    @Event()\n    private action: EventEmitter<void>;\n\n    /**\n     * Emitted when the snackbar hides itself\n     */\n    @Event()\n    private hide: EventEmitter<void>;\n\n    @State()\n    private offset: number = 0;\n\n    @State()\n    private open: boolean = false;\n\n    @State()\n    private closing: boolean = false;\n\n    @Listen('changeOffset')\n    protected onChangeIndex(event: CustomEvent<number>) {\n        event.stopPropagation();\n        this.offset = event.detail;\n    }\n\n    /**\n     * Show the snackbar\n     */\n    @Method()\n    public async show() {\n        if (this.open) {\n            return;\n        }\n\n        this.open = true;\n        this.closing = false;\n        container.add(this.host);\n\n        if (this.timeout) {\n            setTimeout(this.close, this.timeout);\n        }\n    }\n\n    private close = () => {\n        if (!this.open) {\n            return false;\n        }\n\n        const hideAnimationDuration = 300;\n        this.closing = true;\n\n        setTimeout(() => {\n            this.open = false;\n            container.remove(this.host);\n        }, hideAnimationDuration);\n\n        this.hide.emit();\n    };\n\n    public render() {\n        return (\n            <aside\n                popover=\"manual\"\n                style={{\n                    '--snackbar-timeout': `${this.timeout}ms`,\n                    top: `${this.offset}px`,\n                }}\n                class={{\n                    'is-closing': this.closing,\n                }}\n            >\n                <div class=\"surface\" role=\"status\" aria-relevant=\"additions\">\n                    <div class=\"label\" aria-atomic=\"false\">\n                        {this.message}\n                    </div>\n                    {this.renderActions(this.actionText)}\n                    {this.renderDismissButton(this.dismissible)}\n                </div>\n            </aside>\n        );\n    }\n\n    private handleClickAction = () => {\n        this.action.emit();\n    };\n\n    private renderActions(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <div class=\"actions\" aria-atomic=\"true\">\n                {this.renderActionButton(actionText)}\n            </div>\n        );\n    }\n\n    private renderActionButton(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <limel-button label={actionText} onClick={this.handleClickAction} />\n        );\n    }\n\n    private renderDismissButton(dismissible: boolean) {\n        if (!dismissible) {\n            return;\n        }\n\n        const label = translate.get('snackbar.dismiss', this.language);\n\n        return (\n            <div class=\"dismiss\">\n                {this.renderTimeoutVisualization()}\n                <limel-icon-button\n                    class=\"dismiss-button\"\n                    icon=\"multiply\"\n                    label={label}\n                    onClick={this.close}\n                />\n            </div>\n        );\n    }\n\n    private renderTimeoutVisualization() {\n        return (\n            <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\">\n                <circle r=\"18\" cx=\"18\" cy=\"18\" fill=\"var(--track-color)\" />\n                <path\n                    class=\"track\"\n                    d=\"M 18,18 m -16,0 a 16,16 0 1,0 32,0 a 16,16 0 1,0 -32,0\"\n                    stroke=\"var(--fill-color)\"\n                />\n            </svg>\n        );\n    }\n}\n"],"mappings":"kHAMaA,EAAbC,cACYC,KAAAC,iBAA+C,E,CAOhDC,IAAIC,GACP,MAAMC,EAAUJ,KAAKK,WAAWF,GAIhCC,IAAO,MAAPA,SAAO,SAAPA,EAASE,cAETN,KAAKC,iBAAmB,CAACE,KAAaH,KAAKC,kBAC3CD,KAAKO,a,CAQFC,OAAOL,GACV,MAAMC,EAAUJ,KAAKK,WAAWF,GAIhCC,IAAO,MAAPA,SAAO,SAAPA,EAASK,cAETT,KAAKC,iBAAmBD,KAAKC,iBAAiBS,QAAQC,GAASA,IAASR,IACxEH,KAAKO,a,CAGDA,cACJ,IAAIK,EAAS,EACbZ,KAAKC,iBAAiBY,SAASV,IAC3BA,EAASW,cACL,IAAIC,YAAY,eAAgB,CAC5BC,OAAQJ,KAGhBA,GAAUZ,KAAKK,WAAWF,GACrBc,wBAAwBC,MAAM,G,CAInCb,WAAWF,GACf,OAAOA,EAASgB,WAAWC,cAAc,Y,ECvDjD,MAAMC,EAAc,gvDCepB,MAAMC,EAAY,IAAIxB,E,MAmCTyB,EAAQ,M,mFAuFTvB,KAAAwB,MAAQ,KACZ,IAAKxB,KAAKyB,KAAM,CACZ,OAAO,K,CAGX,MAAMC,EAAwB,IAC9B1B,KAAK2B,QAAU,KAEfC,YAAW,KACP5B,KAAKyB,KAAO,MACZH,EAAUd,OAAOR,KAAK6B,KAAK,GAC5BH,GAEH1B,KAAK8B,KAAKC,MAAM,EA0BZ/B,KAAAgC,kBAAoB,KACxBhC,KAAKiC,OAAOF,MAAM,E,oCAnHI,I,2CAaI,K,uCAYD,K,YAkBJ,E,UAGD,M,aAGG,K,CAGjBG,cAAcC,GACpBA,EAAMC,kBACNpC,KAAKY,OAASuB,EAAMnB,M,CAOjBqB,aACH,GAAIrC,KAAKyB,KAAM,CACX,M,CAGJzB,KAAKyB,KAAO,KACZzB,KAAK2B,QAAU,MACfL,EAAUpB,IAAIF,KAAK6B,MAEnB,GAAI7B,KAAKsC,QAAS,CACdV,WAAW5B,KAAKwB,MAAOxB,KAAKsC,Q,EAoB7BC,SACH,OACIC,EAAA,SACIpC,QAAQ,SACRqC,MAAO,CACH,qBAAsB,GAAGzC,KAAKsC,YAC9BI,IAAK,GAAG1C,KAAKY,YAEjB+B,MAAO,CACH,aAAc3C,KAAK2B,UAGvBa,EAAA,OAAKG,MAAM,UAAUC,KAAK,SAAQ,gBAAe,aAC7CJ,EAAA,OAAKG,MAAM,QAAO,cAAa,SAC1B3C,KAAK6C,SAET7C,KAAK8C,cAAc9C,KAAK+C,YACxB/C,KAAKgD,oBAAoBhD,KAAKiD,c,CAUvCH,cAAcC,GAClB,IAAKA,EAAY,CACb,M,CAGJ,OACIP,EAAA,OAAKG,MAAM,UAAS,cAAa,QAC5B3C,KAAKkD,mBAAmBH,G,CAK7BG,mBAAmBH,GACvB,IAAKA,EAAY,CACb,M,CAGJ,OACIP,EAAA,gBAAcW,MAAOJ,EAAYK,QAASpD,KAAKgC,mB,CAI/CgB,oBAAoBC,GACxB,IAAKA,EAAa,CACd,M,CAGJ,MAAME,EAAQE,EAAUC,IAAI,mBAAoBtD,KAAKuD,UAErD,OACIf,EAAA,OAAKG,MAAM,WACN3C,KAAKwD,6BACNhB,EAAA,qBACIG,MAAM,iBACNc,KAAK,WACLN,MAAOA,EACPC,QAASpD,KAAKwB,Q,CAMtBgC,6BACJ,OACIhB,EAAA,OAAKkB,MAAM,KAAKxC,OAAO,KAAKyC,QAAQ,aAChCnB,EAAA,UAAQoB,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAKC,KAAK,uBACpCvB,EAAA,QACIG,MAAM,QACNqB,EAAE,yDACFC,OAAO,sB"}