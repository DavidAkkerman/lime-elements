{"version":3,"names":["SnackbarContainer","constructor","this","elements","add","snackbar","element","shadowRoot","querySelector","showPopover","emitOffsets","remove","hidePopover","filter","item","offset","forEach","dispatchEvent","CustomEvent","detail","getBoundingClientRect","height","snackbarCss","container","Snackbar","close","open","host","hide","emit","handleClickAction","action","onChangeIndex","event","stopPropagation","async","timeout","setTimeout","render","h","popover","style","top","role","message","renderActions","actionText","renderDismissButton","dismissible","renderActionButton","label","onClick","translate","get","language","class","renderTimeoutVisualization","icon","width","viewBox","r","cx","cy","fill","d","stroke"],"sources":["./src/components/snackbar/container.ts","./src/components/snackbar/snackbar.scss?tag=limel-snackbar&encapsulation=shadow","./src/components/snackbar/snackbar.tsx"],"sourcesContent":["/**\n * Container to keep track of all snackbar elements that gets added to the page.\n * When an element gets added or removed, the container will emit a\n * `changeOffset` event on all elements in the container, letting them know\n * the new offset to where they should position themselves.\n */\nexport class SnackbarContainer {\n    private elements: HTMLLimelSnackbarElement[] = [];\n\n    /**\n     * Add a new element to the container\n     *\n     * @param snackbar - element to add\n     */\n    public add(snackbar: HTMLLimelSnackbarElement) {\n        const element = snackbar.shadowRoot.querySelector('aside');\n\n        // Stencil does not seem to recognise the existance of showPopover\n        // @ts-ignore\n        element?.showPopover();\n\n        this.elements = [snackbar, ...this.elements];\n        this.emitOffsets();\n    }\n\n    /**\n     * Remove an element from the container\n     *\n     * @param snackbar - element to remove\n     */\n    public remove(snackbar: HTMLLimelSnackbarElement): void {\n        const element = snackbar.shadowRoot.querySelector('aside');\n\n        // Stencil does not seem to recognise the existance of hidePopover\n        // @ts-ignore\n        element?.hidePopover();\n\n        this.elements = this.elements.filter((item) => item !== element);\n        this.emitOffsets();\n    }\n\n    private emitOffsets() {\n        let offset = 0;\n        this.elements.forEach((item) => {\n            item.dispatchEvent(\n                new CustomEvent('changeOffset', {\n                    detail: offset,\n                }),\n            );\n            offset += item.shadowRoot\n                .querySelector('aside')\n                .getBoundingClientRect().height;\n        });\n    }\n}\n","/**\n * @prop --snackbar-top: Snackbar has `position: fixed;` and uses `--snackbar-top`, which defaults to `auto` for its `top` property. See the examples in the documentations for further info.\n * @prop --snackbar-right: Snackbar has `position: fixed;` and uses `--snackbar-right`, which defaults to `0` for its `right` property. See the examples in the documentations for further info.\n * @prop --snackbar-bottom: Snackbar has `position: fixed;` and uses `--snackbar-bottom`, which defaults to `0` for its `bottom` property. See the examples in the documentations for further info.\n * @prop --snackbar-left: Snackbar has `position: fixed;` and uses `--snackbar-left`, which defaults to `0` for its `left` property. See the examples in the documentations for further info.\n */\n\n* {\n    box-sizing: border-box;\n}\n\naside {\n    border: none;\n    width: 30rem;\n    height: 5rem;\n\n    position: fixed;\n    inset: unset;\n    right: 0;\n    top: 0;\n}\n\n// .mdc-snackbar {\n//     top: var(--snackbar-top, auto);\n//     right: var(--snackbar-right, 0);\n//     bottom: var(--snackbar-bottom, 0);\n//     left: var(--snackbar-left, 0);\n\n//     display: none;\n//     position: fixed;\n//     z-index: 8;\n\n//     padding: 0.75rem;\n\n//     align-items: center;\n//     justify-content: center;\n// }\n\n// .mdc-snackbar--opening,\n// .mdc-snackbar--open,\n// .mdc-snackbar--closing {\n//     display: flex;\n// }\n\n// .mdc-snackbar--open {\n//     .mdc-snackbar__label,\n//     .mdc-snackbar__actions {\n//         visibility: visible;\n//     }\n\n//     .mdc-snackbar__surface {\n//         transform: scale(1);\n//         opacity: 1;\n//     }\n// }\n\n// .mdc-snackbar__surface {\n//     transition:\n//         opacity 0.2s cubic-bezier(0, 0, 0.2, 1),\n//         transform 0.2s cubic-bezier(0, 0, 0.2, 1);\n//     padding: 0.5rem;\n//     display: flex;\n//     align-items: center;\n//     justify-content: flex-start;\n//     gap: 0.25rem;\n\n//     min-height: 3.25rem;\n//     min-width: unset;\n//     max-width: 42rem;\n\n//     transform: scale(0.8);\n//     opacity: 0;\n//     border-radius: 0.75rem;\n\n//     background-color: rgb(var(--contrast-1400));\n//     box-shadow: var(--shadow-depth-8), var(--shadow-depth-16);\n// }\n\n// .mdc-snackbar__label {\n//     visibility: hidden;\n\n//     color: rgb(var(--contrast-100));\n\n//     -webkit-font-smoothing: antialiased;\n//     font-size: 0.8125rem;\n//     font-weight: 400;\n//     padding: 0 0.25rem;\n\n//     width: 100%;\n//     flex-grow: 1;\n// }\n\n// .mdc-snackbar__actions {\n//     visibility: hidden;\n\n//     display: flex;\n//     flex-shrink: 0;\n//     align-items: center;\n//     box-sizing: border-box;\n//     gap: 0.5rem;\n// }\n\n// .dismiss,\n// .mdc-snackbar__actions {\n//     --lime-elevated-surface-background-color: rgb(\n//         var(--contrast-1300)\n//     ); // background color of the buttons\n// }\n\n// .dismiss {\n//     --mdc-theme-on-surface: rgb(var(--contrast-100)); // color of the X icon\n//     --icon-background-color: var(--lime-elevated-surface-background-color);\n//     --fill-color: var(--mdc-theme-primary);\n//     --track-color: rgb(var(--contrast-800), 0.2);\n//     position: absolute;\n//     top: -0.9rem;\n//     left: -0.9rem;\n//     transform: scale(0.8);\n\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n\n//     limel-icon-button.mdc-snackbar__dismiss {\n//         transform: scale(0.8);\n//         margin: 0;\n//         padding: 0;\n//     }\n\n//     svg {\n//         position: absolute;\n//         transform: rotate(90deg);\n//         fill: transparent;\n//         stroke-dasharray: 100;\n//         stroke-linecap: round;\n\n//         .mdc-snackbar--open & {\n//             animation: timeout var(--snackbar-timeout) linear forwards;\n//         }\n//     }\n// }\n\n@keyframes timeout {\n    0% {\n        stroke-width: 4;\n        stroke-dashoffset: 0;\n        opacity: 1;\n    }\n    100% {\n        stroke-width: 1;\n        stroke-dashoffset: -100;\n        opacity: 0.7;\n    }\n}\n","import { Languages } from '../date-picker/date.types';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Listen,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport translate from '../../global/translations';\nimport { SnackbarContainer } from './container';\n\nconst container = new SnackbarContainer();\n\n/**\n * A Snackbar –also known as \"Toast\"– is used to inform the end user\n * about an action or a process in the system.\n * The information could vary from announcing that a process has just started,\n * is taking place now, has ended, or has been interrupted or canceled.\n *\n * The information that you provide using a snackbar should be:\n * - temporary\n * - contextual\n * - short\n * - and most importantly, ignorable.\n *\n * It means if the user misses the information, it shouldn't be a big deal.\n *\n * :::note\n * If the information you want to display has a higher importance or priority,\n * and you need to make sure that the user takes an action to dismiss it,\n * consider using the [Banner](/#/component/limel-banner/) component instead.\n * For more complex interactions and for delivering more detailed information,\n * [Dialog](/#/component/limel-dialog/) is a better choice.\n * :::\n *\n * @exampleComponent limel-example-snackbar\n * @exampleComponent limel-example-snackbar-dismissible\n * @exampleComponent limel-example-snackbar-with-action\n * @exampleComponent limel-example-snackbar-with-changing-messages\n * @exampleComponent limel-example-snackbar-positioning\n */\n@Component({\n    tag: 'limel-snackbar',\n    shadow: true,\n    styleUrl: 'snackbar.scss',\n})\nexport class Snackbar {\n    /**\n     * The text message to display.\n     */\n    @Prop()\n    public message: string;\n\n    /**\n     * The amount of time in milliseconds to show the snackbar.\n     */\n    @Prop()\n    // eslint-disable-next-line no-magic-numbers\n    public timeout?: number = 5000;\n\n    /**\n     * The text to display for the action button.\n     */\n    @Prop()\n    public actionText: string;\n\n    /**\n     * When `true` displays a dismiss button on the snackbar,\n     * allowing users to close it.\n     */\n    @Prop()\n    public dismissible: boolean = true;\n\n    /**\n     * Whether to show the snackbar with space for multiple lines of text\n     */\n    @Prop()\n    public multiline: boolean;\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    @Element()\n    private host: HTMLLimelSnackbarElement;\n\n    /**\n     * Emitted when the action button is pressed\n     */\n    @Event()\n    private action: EventEmitter<void>;\n\n    /**\n     * Emitted when the snackbar hides itself\n     */\n    @Event()\n    private hide: EventEmitter<void>;\n\n    @State()\n    private offset: number = 0;\n\n    @State()\n    private open: boolean = false;\n\n    @Listen('changeOffset')\n    protected onChangeIndex(event: CustomEvent<number>) {\n        event.stopPropagation();\n        this.offset = event.detail;\n    }\n\n    /**\n     * Show the snackbar\n     */\n    @Method()\n    public async show() {\n        if (this.open) {\n            return;\n        }\n\n        this.open = true;\n        container.add(this.host);\n\n        if (this.timeout) {\n            setTimeout(this.close, this.timeout);\n        }\n    }\n\n    private close = () => {\n        if (!this.open) {\n            return false;\n        }\n\n        this.open = false;\n        container.remove(this.host);\n\n        this.hide.emit();\n    };\n\n    public render() {\n        return (\n            <aside\n                popover=\"manual\"\n                style={{\n                    '--snackbar-timeout': `${this.timeout}ms`,\n                    top: `${this.offset}px`,\n                }}\n            >\n                <div role=\"status\" aria-relevant=\"additions\">\n                    <div aria-atomic=\"false\">{this.message}</div>\n                    {this.renderActions(this.actionText)}\n                    {this.renderDismissButton(this.dismissible)}\n                </div>\n            </aside>\n        );\n    }\n\n    private handleClickAction = () => {\n        this.action.emit();\n    };\n\n    private renderActions(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <div aria-atomic=\"true\">{this.renderActionButton(actionText)}</div>\n        );\n    }\n\n    private renderActionButton(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <limel-button label={actionText} onClick={this.handleClickAction} />\n        );\n    }\n\n    private renderDismissButton(dismissible: boolean) {\n        if (!dismissible) {\n            return;\n        }\n\n        const label = translate.get('snackbar.dismiss', this.language);\n\n        return (\n            <div class=\"dismiss\">\n                {this.renderTimeoutVisualization()}\n                <limel-icon-button\n                    icon=\"multiply\"\n                    label={label}\n                    onClick={this.close}\n                />\n            </div>\n        );\n    }\n\n    private renderTimeoutVisualization() {\n        return (\n            <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\">\n                <circle r=\"18\" cx=\"18\" cy=\"18\" fill=\"var(--track-color)\" />\n                <path\n                    class=\"track\"\n                    d=\"M 18,18 m -16,0 a 16,16 0 1,0 32,0 a 16,16 0 1,0 -32,0\"\n                    stroke=\"var(--fill-color)\"\n                />\n            </svg>\n        );\n    }\n}\n"],"mappings":"kHAMaA,EAAbC,cACYC,KAAAC,SAAuC,E,CAOxCC,IAAIC,GACP,MAAMC,EAAUD,EAASE,WAAWC,cAAc,SAIlDF,IAAO,MAAPA,SAAO,SAAPA,EAASG,cAETP,KAAKC,SAAW,CAACE,KAAaH,KAAKC,UACnCD,KAAKQ,a,CAQFC,OAAON,GACV,MAAMC,EAAUD,EAASE,WAAWC,cAAc,SAIlDF,IAAO,MAAPA,SAAO,SAAPA,EAASM,cAETV,KAAKC,SAAWD,KAAKC,SAASU,QAAQC,GAASA,IAASR,IACxDJ,KAAKQ,a,CAGDA,cACJ,IAAIK,EAAS,EACbb,KAAKC,SAASa,SAASF,IACnBA,EAAKG,cACD,IAAIC,YAAY,eAAgB,CAC5BC,OAAQJ,KAGhBA,GAAUD,EAAKP,WACVC,cAAc,SACdY,wBAAwBC,MAAM,G,ECnD/C,MAAMC,EAAc,yOCepB,MAAMC,EAAY,IAAIvB,E,MAmCTwB,EAAQ,M,mFAmFTtB,KAAAuB,MAAQ,KACZ,IAAKvB,KAAKwB,KAAM,CACZ,OAAO,K,CAGXxB,KAAKwB,KAAO,MACZH,EAAUZ,OAAOT,KAAKyB,MAEtBzB,KAAK0B,KAAKC,MAAM,EAqBZ3B,KAAA4B,kBAAoB,KACxB5B,KAAK6B,OAAOF,MAAM,E,oCArGI,I,2CAaI,K,uCAYD,K,YAkBJ,E,UAGD,K,CAGdG,cAAcC,GACpBA,EAAMC,kBACNhC,KAAKa,OAASkB,EAAMd,M,CAOjBgB,aACH,GAAIjC,KAAKwB,KAAM,CACX,M,CAGJxB,KAAKwB,KAAO,KACZH,EAAUnB,IAAIF,KAAKyB,MAEnB,GAAIzB,KAAKkC,QAAS,CACdC,WAAWnC,KAAKuB,MAAOvB,KAAKkC,Q,EAe7BE,SACH,OACIC,EAAA,SACIC,QAAQ,SACRC,MAAO,CACH,qBAAsB,GAAGvC,KAAKkC,YAC9BM,IAAK,GAAGxC,KAAKa,aAGjBwB,EAAA,OAAKI,KAAK,SAAQ,gBAAe,aAC7BJ,EAAA,qBAAiB,SAASrC,KAAK0C,SAC9B1C,KAAK2C,cAAc3C,KAAK4C,YACxB5C,KAAK6C,oBAAoB7C,KAAK8C,c,CAUvCH,cAAcC,GAClB,IAAKA,EAAY,CACb,M,CAGJ,OACIP,EAAA,qBAAiB,QAAQrC,KAAK+C,mBAAmBH,G,CAIjDG,mBAAmBH,GACvB,IAAKA,EAAY,CACb,M,CAGJ,OACIP,EAAA,gBAAcW,MAAOJ,EAAYK,QAASjD,KAAK4B,mB,CAI/CiB,oBAAoBC,GACxB,IAAKA,EAAa,CACd,M,CAGJ,MAAME,EAAQE,EAAUC,IAAI,mBAAoBnD,KAAKoD,UAErD,OACIf,EAAA,OAAKgB,MAAM,WACNrD,KAAKsD,6BACNjB,EAAA,qBACIkB,KAAK,WACLP,MAAOA,EACPC,QAASjD,KAAKuB,Q,CAMtB+B,6BACJ,OACIjB,EAAA,OAAKmB,MAAM,KAAKrC,OAAO,KAAKsC,QAAQ,aAChCpB,EAAA,UAAQqB,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAKC,KAAK,uBACpCxB,EAAA,QACIgB,MAAM,QACNS,EAAE,yDACFC,OAAO,sB"}