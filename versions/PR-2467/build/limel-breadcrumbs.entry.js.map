{"version":3,"names":["breadcrumbsCss","Breadcrumbs","this","renderSteps","items","allStepsWithoutLast","slice","areItemsLinks","map","renderAsLinks","renderAsButtons","h","class","onClick","handleClick","renderIcon","text","href","link","title","icon","name","renderLastStep","lastItem","some","item","interact","emit","render","role","style","divider","componentDidRender","button","host","shadowRoot","querySelector","anchor","makeEnterClickable","disconnectedCallback","removeEnterClickable"],"sources":["./src/components/breadcrumbs/breadcrumbs.scss?tag=limel-breadcrumbs&encapsulation=shadow","./src/components/breadcrumbs/breadcrumbs.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n* @prop --breadcrumbs-item-text-color: Text color of breadcrumbs items, defaults to `--contrast-1100`.\n* @prop --breadcrumbs-item-icon-color: Color of the icons displayed on each breadcrumbs item. Defaults to the text color.\n* @prop --breadcrumbs-item-max-width: Maximum width of a button in the breadcrumbs. Defaults to `10rem`. Keep in mind that the buttons should not appear too big.\n*/\n\n$padding: 0.5rem;\n$mask: linear-gradient(\n    to right,\n    transparent 0%,\n    black calc(0% + #{$padding}),\n    black calc(100% - #{$padding}),\n    transparent 100%\n);\n\n:host(limel-breadcrumbs) {\n    display: block;\n    -webkit-mask-image: $mask;\n    mask-image: linear-gradient($mask);\n\n    --limel-breadcrumbs-item-height: 1.5rem; // for internal use\n    --limel-breadcrumbs-gap: 0.75rem; // for internal use\n    --limel-breadcrumbs-gap: 0.75rem; // for internal use\n}\n\n* {\n    box-sizing: border-box;\n}\n\nol,\nli,\n.step {\n    all: unset;\n    display: flex;\n    align-items: center;\n}\n\nol {\n    max-width: 100%;\n    overflow-x: auto;\n    scrollbar-width: none; // This hides the scrollbars appearing under in Firefox\n    -ms-overflow-style: none; // Same as above for IE 11\n    &::-webkit-scrollbar {\n        display: none; // This hides the scrollbars appearing under in Chrome\n    }\n\n    padding: $padding; // needed for the focus and hover effects, since we are using overflow\n    gap: var(--limel-breadcrumbs-gap);\n}\n\n.step {\n    position: relative;\n\n    justify-content: center;\n    gap: 0.25rem;\n\n    width: 100%;\n    min-width: var(--limel-breadcrumbs-item-height);\n    max-width: var(--breadcrumbs-item-max-width, 10rem);\n    height: var(--limel-breadcrumbs-item-height);\n\n    border-radius: 100vw;\n    font-size: 0.875rem;\n    padding: 0 0.25rem;\n\n    &:has(.text) {\n        padding: 0 0.5rem;\n    }\n\n    &:not(.last) {\n        @include mixins.visualize-keyboard-focus;\n        @include mixins.is-flat-clickable();\n\n        &:after {\n            content: var(--limel-breadcrumbs-divider);\n            width: var(--limel-breadcrumbs-gap);\n\n            position: absolute;\n            top: 0;\n            right: calc(var(--limel-breadcrumbs-gap) * -1);\n            bottom: 0;\n            left: auto;\n\n            text-align: center;\n        }\n    }\n}\n\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-breadcrumbs-item-height) - 0.25rem);\n    height: calc(var(--limel-breadcrumbs-item-height) - 0.25rem);\n    color: var(\n        --limel-breadcrumbs-item-icon-color,\n        var(--limel-action-bar-item-text-color)\n    );\n}\n\n.text {\n    @include mixins.truncate-text;\n    padding: 0 0.25rem;\n}\n","import {\n    Component,\n    Element,\n    h,\n    Event,\n    EventEmitter,\n    Prop,\n} from '@stencil/core';\nimport { Items } from './breadcrumbs.types';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from 'src/util/make-enter-clickable';\n\n/**\n * A Breadcrumb consists of a list of distinct \"places\" that user has gone through,\n * before ending up where they are right now, in a website or an application.\n *\n * These \"places\" can be for example _pages_ of a website, which are hierarchically\n * before the current page that the user is looking at.\n * They could also be _steps_ which the user has gone through, which perhaps have no\n * hierarchal relation with each other, but has eventually led the user \"here\".\n *\n * :::note\n * - Where the user currently is, is always the last step of the breadcrumb.\n * - A breadcrumbs never shows where users can go after this place.\n * It only illustrates where user has been before ending up here.\n * If the path that a user can take is not changing and if next steps are clear,\n * you can use the [Progress flow component](#/component/limel-progress-flow) instead.\n * :::\n *\n * Breadcrumbs are often placed horizontally before the main content of the current screen.\n * @exampleComponent limel-example-breadcrumbs-links\n * @exampleComponent limel-example-breadcrumbs-buttons\n * @exampleComponent limel-example-breadcrumbs-divider\n */\n\n@Component({\n    tag: 'limel-breadcrumbs',\n    shadow: true,\n    styleUrl: 'breadcrumbs.scss',\n})\nexport class Breadcrumbs {\n    /**\n     * List of items in the breadcrumbs,\n     * each representing a step or a page.\n     */\n    @Prop()\n    public items: Items[];\n\n    /**\n     * The visual divider that separates items.\n     * It must be a single character such as `-` or `/`.\n     */\n    @Prop()\n    public divider: string = 'â€º';\n\n    /**\n     * Fired when clicking on buttons (not links!)\n     * inside the breadcrumbs.\n     */\n    @Event()\n    public interact: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelBreadcrumbsElement;\n\n    private button: HTMLButtonElement;\n    private anchor: HTMLAnchorElement;\n\n    public render() {\n        return (\n            <ol\n                role=\"navigation\"\n                aria-label=\"Breadcrumb\"\n                style={{ '--limel-breadcrumbs-divider': `'${this.divider}'` }}\n            >\n                {this.renderSteps(this.items)}\n                {this.renderLastStep(this.items)}\n            </ol>\n        );\n    }\n\n    public componentDidRender() {\n        this.button = this.host.shadowRoot.querySelector('button');\n        this.anchor = this.host.shadowRoot.querySelector('a');\n        if (this.button) {\n            makeEnterClickable(this.button);\n        }\n\n        if (this.anchor) {\n            makeEnterClickable(this.anchor);\n        }\n    }\n\n    public disconnectedCallback() {\n        if (this.button) {\n            removeEnterClickable(this.button);\n        }\n\n        if (this.anchor) {\n            removeEnterClickable(this.anchor);\n        }\n    }\n\n    private renderSteps = (items) => {\n        const allStepsWithoutLast = items.slice(0, -1);\n\n        if (this.areItemsLinks(items)) {\n            return allStepsWithoutLast.map(this.renderAsLinks);\n        }\n\n        return allStepsWithoutLast.map(this.renderAsButtons);\n    };\n\n    private renderAsButtons = (items) => {\n        return (\n            <li>\n                <button class=\"step\" onClick={this.handleClick}>\n                    {this.renderIcon(items)}\n                    <span class=\"text\">{items.text}</span>\n                </button>\n            </li>\n        );\n    };\n\n    private renderAsLinks = (items) => {\n        return (\n            <li>\n                <a class=\"step\" href={items.link.href} title={items.link.title}>\n                    {this.renderIcon(items)}\n                    <span class=\"text\">{items.text}</span>\n                </a>\n            </li>\n        );\n    };\n\n    private renderIcon = (items) => {\n        if (!items.icon) {\n            return;\n        }\n\n        return <limel-icon name={items.icon} />;\n    };\n\n    private renderLastStep = (items) => {\n        const lastItem = items.slice(-1);\n\n        return (\n            <li\n                class=\"last step\"\n                aria-current={this.areItemsLinks(items) ? 'page' : 'step'}\n            >\n                {this.renderIcon(lastItem[0])}\n                <span class=\"text\">{lastItem[0].text}</span>\n            </li>\n        );\n    };\n\n    private areItemsLinks = (items) => {\n        return items.some((item) => 'link' in item);\n    };\n\n    private handleClick = () => {\n        this.interact.emit();\n    };\n}\n"],"mappings":"2HAAA,MAAMA,EAAiB,0gE,MC0CVC,EAAW,M,4DA+DZC,KAAAC,YAAeC,IACnB,MAAMC,EAAsBD,EAAME,MAAM,GAAI,GAE5C,GAAIJ,KAAKK,cAAcH,GAAQ,CAC3B,OAAOC,EAAoBG,IAAIN,KAAKO,c,CAGxC,OAAOJ,EAAoBG,IAAIN,KAAKQ,gBAAgB,EAGhDR,KAAAQ,gBAAmBN,GAEnBO,EAAA,UACIA,EAAA,UAAQC,MAAM,OAAOC,QAASX,KAAKY,aAC9BZ,KAAKa,WAAWX,GACjBO,EAAA,QAAMC,MAAM,QAAQR,EAAMY,QAMlCd,KAAAO,cAAiBL,GAEjBO,EAAA,UACIA,EAAA,KAAGC,MAAM,OAAOK,KAAMb,EAAMc,KAAKD,KAAME,MAAOf,EAAMc,KAAKC,OACpDjB,KAAKa,WAAWX,GACjBO,EAAA,QAAMC,MAAM,QAAQR,EAAMY,QAMlCd,KAAAa,WAAcX,IAClB,IAAKA,EAAMgB,KAAM,CACb,M,CAGJ,OAAOT,EAAA,cAAYU,KAAMjB,EAAMgB,MAAQ,EAGnClB,KAAAoB,eAAkBlB,IACtB,MAAMmB,EAAWnB,EAAME,OAAO,GAE9B,OACIK,EAAA,MACIC,MAAM,YAAW,eACHV,KAAKK,cAAcH,GAAS,OAAS,QAElDF,KAAKa,WAAWQ,EAAS,IAC1BZ,EAAA,QAAMC,MAAM,QAAQW,EAAS,GAAGP,MAC/B,EAILd,KAAAK,cAAiBH,GACdA,EAAMoB,MAAMC,GAAS,SAAUA,IAGlCvB,KAAAY,YAAc,KAClBZ,KAAKwB,SAASC,MAAM,E,kCA7GC,G,CAelBC,SACH,OACIjB,EAAA,MACIkB,KAAK,aAAY,aACN,aACXC,MAAO,CAAE,8BAA+B,IAAI5B,KAAK6B,aAEhD7B,KAAKC,YAAYD,KAAKE,OACtBF,KAAKoB,eAAepB,KAAKE,O,CAK/B4B,qBACH9B,KAAK+B,OAAS/B,KAAKgC,KAAKC,WAAWC,cAAc,UACjDlC,KAAKmC,OAASnC,KAAKgC,KAAKC,WAAWC,cAAc,KACjD,GAAIlC,KAAK+B,OAAQ,CACbK,EAAmBpC,KAAK+B,O,CAG5B,GAAI/B,KAAKmC,OAAQ,CACbC,EAAmBpC,KAAKmC,O,EAIzBE,uBACH,GAAIrC,KAAK+B,OAAQ,CACbO,EAAqBtC,KAAK+B,O,CAG9B,GAAI/B,KAAKmC,OAAQ,CACbG,EAAqBtC,KAAKmC,O"}