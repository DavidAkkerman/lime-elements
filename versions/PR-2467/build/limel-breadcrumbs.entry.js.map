{"version":3,"names":["breadcrumbsCss","Breadcrumbs","this","renderSteps","items","allStepsWithoutLast","slice","areItemsLinks","map","renderAsLink","renderAsButton","item","h","role","id","createRandomString","class","onClick","handleClick","renderIcon","renderLabel","renderTooltip","href","link","title","renderLastStep","lastItem","tabindex","text","icon","style","color","iconColor","name","type","elementId","label","some","event","stopPropagation","select","emit","render","divider","componentWillRender","removeEnterClickable","componentDidRender","button","host","shadowRoot","querySelector","anchor","disconnectedCallback","element","_a"],"sources":["./src/components/breadcrumbs/breadcrumbs.scss?tag=limel-breadcrumbs&encapsulation=shadow","./src/components/breadcrumbs/breadcrumbs.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n* @prop --breadcrumbs-item-text-color: Text color of breadcrumbs items, defaults to `--contrast-1100`.\n* @prop --breadcrumbs-item-max-width: Maximum width of a button in the breadcrumbs. Defaults to `10rem`. Keep in mind that the buttons should not appear too big.\n*/\n\n$padding: 0.5rem;\n$mask: linear-gradient(\n    to right,\n    transparent 0%,\n    black calc(0% + #{$padding}),\n    black calc(100% - #{$padding}),\n    transparent 100%\n);\n\n:host(limel-breadcrumbs) {\n    --limel-breadcrumbs-item-height: 1.5rem; // for internal use\n    --limel-breadcrumbs-gap: 0.75rem; // for internal use\n    --limel-breadcrumbs-gap: 0.75rem; // for internal use\n    --limel-breadcrumbs-item-text-color: var(\n        --breadcrumbs-item-text-color,\n        rgb(var(--contrast-1500))\n    ); // for internal use\n    -webkit-mask-image: $mask;\n    mask-image: $mask;\n}\n\nol,\nli,\n.step {\n    all: unset;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nol {\n    padding: $padding; // needed for the focus and hover effects, since we are using overflow\n    gap: var(--limel-breadcrumbs-gap);\n}\n\n.step {\n    position: relative;\n\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    max-width: var(--breadcrumbs-item-max-width, 10rem);\n    height: var(--limel-breadcrumbs-item-height);\n\n    color: var(--limel-breadcrumbs-item-text-color);\n    border-radius: 100vw;\n    font-size: 0.875rem;\n    padding: 0 0.25rem;\n\n    &:not(:has(.text)) {\n        padding: 0 0.125rem;\n    }\n\n    &:not(.last) {\n        @include mixins.visualize-keyboard-focus;\n\n        &:after {\n            content: var(--limel-breadcrumbs-divider);\n            width: var(--limel-breadcrumbs-gap);\n\n            position: absolute;\n            top: 0;\n            right: calc(var(--limel-breadcrumbs-gap) * -1);\n            bottom: 0;\n            left: auto;\n\n            text-align: center;\n        }\n    }\n}\n\na.step {\n    cursor: pointer;\n    transition: color 0.2s ease;\n    &:before {\n        transition: opacity 0.2s ease, transform 0.3s ease-out;\n        content: '';\n        position: absolute;\n        inset: auto 0 0 0;\n        width: calc(100% - 0.5rem);\n        margin: auto;\n        height: 0.125rem;\n        border-radius: 1rem;\n\n        background-color: currentColor;\n        opacity: 0;\n        transform: scale(0.6);\n    }\n\n    &:hover {\n        --limel-breadcrumbs-item-text-color: rgb(var(--color-blue-default));\n        &:before {\n            opacity: 0.3;\n            transform: scale(1);\n        }\n    }\n}\n\nbutton.step {\n    &:not(.last) {\n        @include mixins.is-flat-clickable(\n            $color: var(--limel-breadcrumbs-item-text-color)\n        );\n    }\n}\n\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-breadcrumbs-item-height) - 0.25rem);\n    height: calc(var(--limel-breadcrumbs-item-height) - 0.25rem);\n}\n\n.text {\n    @include mixins.truncate-text;\n    padding: 0 0.25rem;\n}\n\n.last {\n    opacity: 0.7;\n}\n\n// LAYOUT:\n// The code below makes sure that the last item is always visible,\n// and previous items overflow out of the container\n// while keeping the container scrollable.\n// All without any additional scripts in the component code.\n\n:host(limel-breadcrumbs) {\n    box-sizing: border-box;\n\n    display: flex;\n    width: 100%;\n    overflow-x: auto;\n    scrollbar-width: none; // This hides the scrollbars appearing under in Firefox\n    -ms-overflow-style: none; // Same as above for IE 11\n    &::-webkit-scrollbar {\n        display: none; // This hides the scrollbars appearing under in Chrome\n    }\n\n    direction: rtl;\n}\n\nol {\n    display: flex;\n    flex-direction: row-reverse;\n    justify-content: flex-end;\n    margin-right: auto;\n}\n\n.step {\n    direction: ltr;\n}\n","import {\n    Component,\n    Element,\n    h,\n    Event,\n    EventEmitter,\n    Prop,\n} from '@stencil/core';\nimport { BreadcrumbsItem } from './breadcrumbs.types';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport { createRandomString } from '../../util/random-string';\n\n/**\n * A Breadcrumb consists of a list of distinct \"places\" that a user has gone through,\n * before ending up where they are right now, in a website or an application.\n *\n * These \"places\" can be for example _pages_ of a website, which are hierarchically\n * laid out before the current page that the user is looking at.\n * They could also be _steps_ which the user has gone through, which perhaps have no\n * hierarchical relation with each other, but has eventually led the user \"here\".\n *\n * :::note\n * - Where the user currently is, is always the last step of the breadcrumb.\n * - A breadcrumbs never shows where users can go after this place.\n * It only illustrates where user has been before ending up here.\n * If the path that a user can take is not changing and if next steps are clear,\n * you can use the [Progress flow component](#/component/limel-progress-flow) instead.\n * :::\n *\n * Breadcrumbs are often placed horizontally before the main content of the current screen.\n * @exampleComponent limel-example-breadcrumbs-links\n * @exampleComponent limel-example-breadcrumbs-buttons\n * @exampleComponent limel-example-breadcrumbs-icons\n * @exampleComponent limel-example-breadcrumbs-divider\n * @exampleComponent limel-example-breadcrumbs-icon-color\n * @exampleComponent limel-example-breadcrumbs-styling\n */\n\n@Component({\n    tag: 'limel-breadcrumbs',\n    shadow: true,\n    styleUrl: 'breadcrumbs.scss',\n})\nexport class Breadcrumbs {\n    /**\n     * List of items in the breadcrumbs,\n     * each representing a step or a page.\n     */\n    @Prop()\n    public items: BreadcrumbsItem[];\n\n    /**\n     * The visual divider that separates items.\n     * It must be a single character such as `-` or `,`.\n     */\n    @Prop()\n    public divider: string = 'â€º';\n\n    /**\n     * Fired when clicking on buttons (not links!)\n     * inside the breadcrumbs.\n     */\n    @Event()\n    public select: EventEmitter<BreadcrumbsItem>;\n\n    @Element()\n    private host: HTMLLimelBreadcrumbsElement;\n\n    private button: HTMLButtonElement;\n    private anchor: HTMLAnchorElement;\n\n    public render() {\n        return (\n            <ol\n                role=\"navigation\"\n                aria-label=\"Breadcrumb\"\n                style={{ '--limel-breadcrumbs-divider': `'${this.divider}'` }}\n            >\n                {this.renderSteps(this.items)}\n                {this.renderLastStep(this.items)}\n            </ol>\n        );\n    }\n\n    public componentWillRender() {\n        // Avoid polluting the \"clickable registry\" with unreferenced nodes\n        this.removeEnterClickable();\n    }\n\n    public componentDidRender() {\n        this.button = this.host.shadowRoot.querySelector('button');\n        this.anchor = this.host.shadowRoot.querySelector('a');\n     this.removeEnterClickable();\n    }\n\n    public disconnectedCallback() {\n        this.removeEnterClickable();\n    }\n\n    private renderSteps = (items: BreadcrumbsItem[]) => {\n        const allStepsWithoutLast = items.slice(0, -1);\n\n        if (this.areItemsLinks(items)) {\n            return allStepsWithoutLast.map(this.renderAsLink);\n        }\n\n        return allStepsWithoutLast.map(this.renderAsButton);\n    };\n\n    private renderAsButton = (item: BreadcrumbsItem) => {\n        return [\n            <button\n                role=\"listitem\"\n                id={createRandomString()}\n                class=\"step\"\n                onClick={this.handleClick(item)}\n            >\n                {this.renderIcon(item)}\n                {this.renderLabel(item)}\n            </button>,\n            this.renderTooltip(item),\n        ];\n    };\n\n    private renderAsLink = (item: BreadcrumbsItem) => {\n        return [\n            <a\n                role=\"listitem\"\n                id={createRandomString()}\n                class=\"step\"\n                href={item.link.href}\n                title={item.link.title}\n            >\n                {this.renderIcon(item)}\n                {this.renderLabel(item)}\n            </a>,\n            this.renderTooltip(item),\n        ];\n    };\n\n    private renderLastStep = (items: BreadcrumbsItem[]) => {\n        const lastItem = items.slice(-1);\n\n        return (\n            <li\n                class=\"last step\"\n                tabindex=\"-1\"\n                aria-current={this.areItemsLinks(items) ? 'page' : 'step'}\n            >\n                {this.renderIcon(lastItem[0])}\n                <span class=\"text\">{lastItem[0].text}</span>\n            </li>\n        );\n    };\n\n    private renderIcon = (item: BreadcrumbsItem) => {\n        if (!item.icon) {\n            return;\n        }\n\n        return (\n            <limel-icon\n                style={{\n                    color: `${item.iconColor}`,\n                }}\n                name={item.icon}\n            />\n        );\n    };\n\n    private renderLabel = (item: BreadcrumbsItem) => {\n        if (item.type === 'icon-only') {\n            return;\n        }\n\n        return <span class=\"text\">{item.text}</span>;\n    };\n\n    private renderTooltip = (item: BreadcrumbsItem) => {\n\n        if (item.type === 'icon-only') {\n            return (\n                <limel-tooltip\n                    elementId={createRandomString()}\n                    label={item.text}\n                />\n            );\n        }\n    };\n\n    private areItemsLinks = (items: BreadcrumbsItem[]) => {\n        return items.some((item) => 'link' in item);\n    };\n\n    private handleClick = (item: BreadcrumbsItem) => (event: MouseEvent) => {\n        event.stopPropagation();\n        this.select.emit(item);\n    };\n\n    private removeEnterClickable() {\n   const element = this.button ?? this.anchor;\n   removeEnterClickable(element);\n    }\n}\n"],"mappings":"oKAAA,MAAMA,EAAiB,+qF,MC8CVC,EAAW,M,wDAwDZC,KAAAC,YAAeC,IACnB,MAAMC,EAAsBD,EAAME,MAAM,GAAI,GAE5C,GAAIJ,KAAKK,cAAcH,GAAQ,CAC3B,OAAOC,EAAoBG,IAAIN,KAAKO,a,CAGxC,OAAOJ,EAAoBG,IAAIN,KAAKQ,eAAe,EAG/CR,KAAAQ,eAAkBC,GACf,CACHC,EAAA,UACIC,KAAK,WACLC,GAAIC,IACJC,MAAM,OACNC,QAASf,KAAKgB,YAAYP,IAEzBT,KAAKiB,WAAWR,GAChBT,KAAKkB,YAAYT,IAEtBT,KAAKmB,cAAcV,IAInBT,KAAAO,aAAgBE,GACb,CACHC,EAAA,KACIC,KAAK,WACLC,GAAIC,IACJC,MAAM,OACNM,KAAMX,EAAKY,KAAKD,KAChBE,MAAOb,EAAKY,KAAKC,OAEhBtB,KAAKiB,WAAWR,GAChBT,KAAKkB,YAAYT,IAEtBT,KAAKmB,cAAcV,IAInBT,KAAAuB,eAAkBrB,IACtB,MAAMsB,EAAWtB,EAAME,OAAO,GAE9B,OACIM,EAAA,MACII,MAAM,YACNW,SAAS,KAAI,eACCzB,KAAKK,cAAcH,GAAS,OAAS,QAElDF,KAAKiB,WAAWO,EAAS,IAC1Bd,EAAA,QAAMI,MAAM,QAAQU,EAAS,GAAGE,MAC/B,EAIL1B,KAAAiB,WAAcR,IAClB,IAAKA,EAAKkB,KAAM,CACZ,M,CAGJ,OACIjB,EAAA,cACIkB,MAAO,CACHC,MAAO,GAAGpB,EAAKqB,aAEnBC,KAAMtB,EAAKkB,MACb,EAIF3B,KAAAkB,YAAeT,IACnB,GAAIA,EAAKuB,OAAS,YAAa,CAC3B,M,CAGJ,OAAOtB,EAAA,QAAMI,MAAM,QAAQL,EAAKiB,KAAY,EAGxC1B,KAAAmB,cAAiBV,IAErB,GAAIA,EAAKuB,OAAS,YAAa,CAC3B,OACItB,EAAA,iBACIuB,UAAWpB,IACXqB,MAAOzB,EAAKiB,M,GAMpB1B,KAAAK,cAAiBH,GACdA,EAAMiC,MAAM1B,GAAS,SAAUA,IAGlCT,KAAAgB,YAAeP,GAA2B2B,IAC9CA,EAAMC,kBACNrC,KAAKsC,OAAOC,KAAK9B,EAAK,E,kCA5ID,G,CAelB+B,SACH,OACI9B,EAAA,MACIC,KAAK,aAAY,aACN,aACXiB,MAAO,CAAE,8BAA+B,IAAI5B,KAAKyC,aAEhDzC,KAAKC,YAAYD,KAAKE,OACtBF,KAAKuB,eAAevB,KAAKE,O,CAK/BwC,sBAEH1C,KAAK2C,sB,CAGFC,qBACH5C,KAAK6C,OAAS7C,KAAK8C,KAAKC,WAAWC,cAAc,UACjDhD,KAAKiD,OAASjD,KAAK8C,KAAKC,WAAWC,cAAc,KACpDhD,KAAK2C,sB,CAGCO,uBACHlD,KAAK2C,sB,CAuGDA,uB,MACT,MAAMQ,GAAUC,EAAApD,KAAK6C,UAAM,MAAAO,SAAA,EAAAA,EAAIpD,KAAKiD,OACpCN,EAAqBQ,E"}