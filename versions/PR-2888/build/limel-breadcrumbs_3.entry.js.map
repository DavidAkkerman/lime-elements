{"version":3,"names":["breadcrumbsCss","Breadcrumbs","this","renderSteps","allStepsWithoutLast","items","slice","areItemsLinks","map","renderAsLink","renderAsButton","item","tooltipId","createRandomString","h","role","id","class","onClick","handleClick","renderIcon","renderLabel","renderTooltip","href","link","title","renderLastStep","lastItem","tabindex","text","name","getIconName","icon","color","getIconColor","style","type","elementId","label","some","event","stopPropagation","select","emit","render","divider","componentWillLoad","makeEnterClickable","host","disconnectedCallback","removeEnterClickable","menuCss","DEFAULT_ROOT_BREADCRUMBS_ITEM","Menu","constructor","hostRef","renderLoader","loadingSubItems","loading","cssProperties","getCssProperties","width","display","padding","size","limeBranded","renderBreadcrumb","breadcrumbsItems","getBreadcrumbsItems","length","onSelect","handleBreadcrumbsSelect","detail","menuItem","currentSubMenu","clearSearch","navigateMenu","setFocus","handleSelect","renderSearchField","searcher","ref","setSearchElement","leadingIcon","value","searchValue","onChange","handleTextInput","onKeyDown","handleInputKeyDown","renderEmptyMessage","emptyResultMessage","Array","isArray","searchResults","_a","renderMenuList","visibleItems","gridLayout","badgeIcons","setListElement","handleMenuKeyDown","async","query","result","isForwardTab","key","TAB","keyCode","TAB_KEY_CODE","altKey","metaKey","shiftKey","isUp","ARROW_UP","ARROW_UP_KEY_CODE","isDown","ARROW_DOWN","ARROW_DOWN_KEY_CODE","list","preventDefault","listItems","shadowRoot","querySelectorAll","listElement","focus","isBackwardTab","isLeft","ARROW_LEFT","ARROW_LEFT_KEY_CODE","isRight","ARROW_RIGHT","ARROW_RIGHT_KEY_CODE","searchInput","currentItem","getCurrentItem","goForward","goBack","activeItem","_b","querySelector","attrIndex","_c","attributes","getNamedItem","dataIndex","parseInt","parent","parentItem","setTriggerAttributes","element","open","portalId","disabled","Object","entries","removeAttribute","setAttribute","String","onClose","cancel","onTriggerClick","selectOnEmptyChildren","selectedMenuItem","isFunction","menuLoader","subItems","setTimeout","observer","IntersectionObserver","unobserve","window","document","activeElement","observe","focusMenuItem","blur","menuItems","filter","isMenuItem","selectedIndex","Math","max","findIndex","selected","menuElements","from","renderNotificationBadge","hasNotificationBadge","badge","undefined","setTriggerRef","elm","triggerElement","componentDidRender","slotElement","assignedElements","forEach","dropdownZIndex","getComputedStyle","getPropertyValue","menuSurfaceWidth","getMenuSurfaceWidth","visible","containerId","openDirection","position","containerStyle","onDismiss","assign","itemsWatcher","openWatcher","newValue","breadCrumbItems","push","rootItem","reverse","propertyNames","values","property","zipObject","customWidth","surfaceWidth","assignedTriggers","clientWidth","_d","cssClasses","MENU_SELECTED_LIST_ITEM","MENU_SELECTION_GROUP","ROOT","strings","ARIA_CHECKED_ATTR","ARIA_DISABLED_ATTR","CHECKBOX_SELECTOR","LIST_SELECTOR","SELECTED_EVENT","SKIP_RESTORE_FOCUS","numbers","FOCUS_ROOT_INDEX","DefaultFocusState","MDCMenuFoundation","_super","__extends","adapter","_this","call","__assign","defaultAdapter","closeAnimationEndTimerId","defaultFocusState","LIST_ROOT","defineProperty","get","enumerable","configurable","addClassToElementAtIndex","removeClassFromElementAtIndex","addAttributeToElementAtIndex","removeAttributeFromElementAtIndex","getAttributeFromElementAtIndex","elementContainsClass","closeSurface","getElementIndex","notifySelected","getMenuItemCount","focusItemAtIndex","focusListRoot","getSelectedSiblingOfItemAtIndex","isSelectableItemAtIndex","prototype","destroy","clearTimeout","handleKeydown","evt","isTab","handleItemAction","listItem","index","skipRestoreFocus","recomputedIndex","setSelectedIndex","MDCMenuSurfaceFoundation","TRANSITION_CLOSE_DURATION","handleMenuSurfaceOpened","FIRST_ITEM","LAST_ITEM","NONE","setDefaultFocusState","focusState","getSelectedIndex","validatedIndex","Error","prevSelectedIndex","setEnabled","isEnabled","listCssClasses","LIST_ITEM_DISABLED_CLASS","menuSize","isIndexInRange","MDCFoundation","MDCMenu","apply","arguments","attachTo","root","initialize","menuSurfaceFactory","listFactory","el","MDCMenuSurface","MDCList","initialSyncWithDOM","menuSurface","wrapFocus","foundation","listen","OPENED_EVENT","MDCListFoundation","ACTION_EVENT","unlisten","isOpen","set","close","hasTypeahead","typeaheadInProgress","typeaheadMatchItem","nextChar","startingIndex","layout","listElements","singleSelection","listConstants","UNSET_INDEX","quickOpen","setAnchorCorner","corner","setAnchorMargin","margin","getOptionByIndex","getPrimaryTextAtIndex","getPrimaryText","setFixedPosition","isFixed","setIsHoisted","isHoisted","setAbsolutePosition","x","y","setAnchorElement","anchorElement","getDefaultFoundation","className","classList","add","remove","attr","getAttribute","contains","indexOf","evtData","closest","selectionGroupEl","selectedItemEl","MDCComponent","MenuListRenderer","defaultConfig","getIndexForWhichToApplyTabIndex","i","renderMenuItem","rendertext","classNames","applyTabIndexToItemAtIndex","config","renderText","renderSubMenuIcon","renderNotification","twoLines","avatarList","renderDivider","isSimpleItem","renderCommandText","secondaryText","hasSubItems","commandText","iconColor","iconSize","classes","commandKey","hasIcons","selectable","includes","menuListCss","menuStrings","MenuList","setup","setupMenu","setupListeners","mdcMenu","teardown","MDCRipple","handleMenuSelect","handleSingleSelect","MenuItems","selectedItem","find","connectedCallback","componentDidLoad","triggerIconColorWarning","html","handleType","itemsChanged","console","warn"],"sources":["./src/components/breadcrumbs/breadcrumbs.scss?tag=limel-breadcrumbs&encapsulation=shadow","./src/components/breadcrumbs/breadcrumbs.tsx","./src/components/menu/menu.scss?tag=limel-menu&encapsulation=shadow","./src/components/menu/menu.tsx","./node_modules/@material/menu/constants.js","./node_modules/@material/menu/foundation.js","./node_modules/@material/menu/component.js","./src/components/menu-list/menu-list-renderer.tsx","./src/components/menu-list/menu-list.scss?tag=limel-menu-list&encapsulation=shadow","./src/components/menu-list/menu-list.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n* @prop --breadcrumbs-item-text-color: Text color of breadcrumbs items, defaults to `--contrast-1100`.\n* @prop --breadcrumbs-item-max-width: Maximum width of a button in the breadcrumbs. Defaults to `10rem`. Keep in mind that the buttons should not appear too big.\n*/\n\n$padding: 0.5rem;\n\n:host(limel-breadcrumbs) {\n    --limel-breadcrumbs-item-height: 1.5rem;\n    --limel-breadcrumbs-gap: 0.75rem;\n    --limel-breadcrumbs-gap: 0.75rem;\n    --limel-breadcrumbs-item-text-color: var(\n        --breadcrumbs-item-text-color,\n        rgb(var(--contrast-1500))\n    );\n    @include mixins.fade-out-overflowed-content-on-edges(horizontally);\n    --limel-left-edge-fade-width: #{$padding};\n    --limel-right-edge-fade-width: #{$padding};\n}\n\nol,\nli,\n.step {\n    all: unset;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nol {\n    padding: $padding; // needed for the focus and hover effects, since we are using overflow\n    gap: var(--limel-breadcrumbs-gap);\n}\n\n.step {\n    position: relative;\n\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    max-width: var(--breadcrumbs-item-max-width, 10rem);\n    height: var(--limel-breadcrumbs-item-height);\n\n    color: var(--limel-breadcrumbs-item-text-color);\n    border-radius: 100vw;\n    font-size: 0.875rem;\n    padding: 0 0.25rem;\n\n    &:not(:has(.text)) {\n        padding: 0 0.125rem;\n    }\n\n    &:not(.last) {\n        @include mixins.visualize-keyboard-focus;\n\n        &:after {\n            content: var(--limel-breadcrumbs-divider);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n\n            width: var(--limel-breadcrumbs-gap);\n\n            position: absolute;\n            top: 0;\n            right: calc(var(--limel-breadcrumbs-gap) * -1);\n            bottom: 0;\n            left: auto;\n\n            text-align: center;\n        }\n    }\n}\n\na.step {\n    @include mixins.hyperlink($color: var(--limel-breadcrumbs-item-text-color));\n}\n\nbutton.step {\n    &:not(.last) {\n        @include mixins.is-flat-clickable(\n            $color: var(--limel-breadcrumbs-item-text-color)\n        );\n    }\n}\n\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-breadcrumbs-item-height) - 0.25rem);\n    height: calc(var(--limel-breadcrumbs-item-height) - 0.25rem);\n}\n\n.text {\n    @include mixins.truncate-text;\n    padding: 0 0.25rem;\n}\n\n.last {\n    opacity: 0.7;\n}\n\n// LAYOUT:\n// The code below makes sure that the last item is always visible,\n// and previous items overflow out of the container\n// while keeping the container scrollable.\n// All without any additional scripts in the component code.\n\n:host(limel-breadcrumbs) {\n    box-sizing: border-box;\n\n    display: flex;\n    width: 100%;\n    overflow-x: auto;\n    scrollbar-width: none; // This hides the scrollbars appearing under in Firefox\n    -ms-overflow-style: none; // Same as above for IE 11\n    &::-webkit-scrollbar {\n        display: none; // This hides the scrollbars appearing under in Chrome\n    }\n\n    direction: rtl;\n}\n\nol {\n    display: flex;\n    flex-direction: row-reverse;\n    justify-content: flex-end;\n    margin-right: auto;\n}\n\n.step {\n    direction: ltr;\n}\n","import {\n    Component,\n    Element,\n    h,\n    Event,\n    EventEmitter,\n    Prop,\n} from '@stencil/core';\nimport { BreadcrumbsItem } from './breadcrumbs.types';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport { createRandomString } from '../../util/random-string';\nimport { getIconColor, getIconName } from '../icon/get-icon-props';\n\n/**\n * A Breadcrumb consists of a list of distinct \"places\" that a user has gone through,\n * before ending up where they are right now, in a website or an application.\n *\n * These \"places\" can be for example _pages_ of a website, which are hierarchically\n * laid out before the current page that the user is looking at.\n * They could also be _steps_ which the user has gone through, which perhaps have no\n * hierarchical relation with each other, but has eventually led the user \"here\".\n *\n * :::note\n * - Where the user currently is, is always the last step of the breadcrumb.\n * - A breadcrumbs never shows where users can go after this place.\n * It only illustrates where user has been before ending up here.\n * If the path that a user can take is not changing and if next steps are clear,\n * you can use the [Progress flow component](#/component/limel-progress-flow) instead.\n * :::\n *\n * Breadcrumbs are often placed horizontally before the main content of the current screen.\n *\n * @exampleComponent limel-example-breadcrumbs-links\n * @exampleComponent limel-example-breadcrumbs-buttons\n * @exampleComponent limel-example-breadcrumbs-icons\n * @exampleComponent limel-example-breadcrumbs-divider\n * @exampleComponent limel-example-breadcrumbs-icon-color\n * @exampleComponent limel-example-breadcrumbs-styling\n */\n\n@Component({\n    tag: 'limel-breadcrumbs',\n    shadow: true,\n    styleUrl: 'breadcrumbs.scss',\n})\nexport class Breadcrumbs {\n    /**\n     * List of items in the breadcrumbs,\n     * each representing a step or a page.\n     */\n    @Prop()\n    public items: BreadcrumbsItem[];\n\n    /**\n     * The visual divider that separates items.\n     * It must be a single character such as `-` or `,`.\n     */\n    @Prop()\n    public divider: string = '›';\n\n    /**\n     * Fired when clicking on buttons (not links!)\n     * inside the breadcrumbs.\n     */\n    @Event()\n    public select: EventEmitter<BreadcrumbsItem>;\n\n    @Element()\n    private host: HTMLLimelBreadcrumbsElement;\n\n    public render() {\n        return (\n            <ol\n                role=\"navigation\"\n                aria-label=\"Breadcrumb\"\n                style={{ '--limel-breadcrumbs-divider': `'${this.divider}'` }}\n            >\n                {this.renderSteps()}\n                {this.renderLastStep()}\n            </ol>\n        );\n    }\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    private renderSteps = () => {\n        const allStepsWithoutLast = this.items.slice(0, -1);\n\n        if (this.areItemsLinks(this.items)) {\n            return allStepsWithoutLast.map(this.renderAsLink);\n        }\n\n        return allStepsWithoutLast.map(this.renderAsButton);\n    };\n\n    private renderAsButton = (item: BreadcrumbsItem) => {\n        const tooltipId = createRandomString();\n\n        return [\n            <button\n                role=\"listitem\"\n                id={tooltipId}\n                class=\"step\"\n                onClick={this.handleClick(item)}\n            >\n                {this.renderIcon(item)}\n                {this.renderLabel(item)}\n            </button>,\n            this.renderTooltip(item, tooltipId),\n        ];\n    };\n\n    private renderAsLink = (item: BreadcrumbsItem) => {\n        const tooltipId = createRandomString();\n\n        return [\n            <a\n                role=\"listitem\"\n                id={tooltipId}\n                class=\"step\"\n                href={item.link.href}\n                title={item.link.title}\n            >\n                {this.renderIcon(item)}\n                {this.renderLabel(item)}\n            </a>,\n            this.renderTooltip(item, tooltipId),\n        ];\n    };\n\n    private renderLastStep = () => {\n        const lastItem = this.items.slice(-1);\n\n        return (\n            <li\n                class=\"last step\"\n                tabindex=\"-1\"\n                aria-current={this.areItemsLinks(this.items) ? 'page' : 'step'}\n            >\n                {this.renderIcon(lastItem[0])}\n                <span class=\"text\">{lastItem[0].text}</span>\n            </li>\n        );\n    };\n\n    private renderIcon = (item: BreadcrumbsItem) => {\n        const name = getIconName(item.icon);\n        const color = getIconColor(item.icon);\n\n        if (!name) {\n            return;\n        }\n\n        return (\n            <limel-icon\n                style={{\n                    color: `${color}`,\n                }}\n                name={name}\n            />\n        );\n    };\n\n    private renderLabel = (item: BreadcrumbsItem) => {\n        if (item.type === 'icon-only') {\n            return;\n        }\n\n        return <span class=\"text\">{item.text}</span>;\n    };\n\n    private renderTooltip = (item: BreadcrumbsItem, tooltipId: string) => {\n        if (item.type === 'icon-only') {\n            return <limel-tooltip elementId={tooltipId} label={item.text} />;\n        }\n    };\n\n    private areItemsLinks = (items: BreadcrumbsItem[]) => {\n        return items.some((item) => 'link' in item);\n    };\n\n    private handleClick = (item: BreadcrumbsItem) => (event: MouseEvent) => {\n        event.stopPropagation();\n        this.select.emit(item);\n    };\n}\n","@use '../../style/functions';\n\n// Note! The `--dropdown-z-index` property is used from `menu.tsx`.\n\n/**\n * @prop --dropdown-z-index: `z-index` of the dropdown menu.\n * @prop --menu-surface-width: Width of the menu surface. Overrides the width defined by `surfaceWidth`.\n * @prop --list-grid-item-max-width: Maximum width of items in the menu list when `gridLayout={true}`. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in the menu list when `gridLayout={true}`. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between the items in the menu list when `gridLayout={true}`. Defaults to `0.75rem`.\n * @prop --notification-badge-text-color: Defines the text color of notification badges. Defaults to `--color-white`.\n * @prop --notification-badge-background-color: Defines the background color of notification badges. Defaults to `--color-red-default`.\n */\n\n:host(limel-menu) {\n    isolation: isolate;\n    position: relative;\n    display: inline-block;\n    --badge-background-color: var(\n        --notification-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    --badge-text-color: var(\n        --notification-badge-text-color,\n        rgb(var(--color-white))\n    );\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n.menu__trigger {\n    border-color: transparent;\n    border-width: 1px;\n    border-style: solid;\n    background: none;\n    color: rgb(var(--contrast-800));\n    height: functions.pxToRem(36);\n\n    &-enabled {\n        &:hover {\n            border-color: rgb(var(--contrast-800));\n            color: rgb(var(--contrast-1100));\n        }\n    }\n}\n\n.mdc-menu-surface--anchor {\n    position: relative;\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.25rem;\n    right: -0.25rem;\n}\n","/* eslint-disable sonarjs/no-duplicate-string */\nimport {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Element,\n    Watch,\n    State,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { zipObject, isFunction } from 'lodash-es';\nimport {\n    LimelBreadcrumbsCustomEvent,\n    LimelInputFieldCustomEvent,\n} from '../../components';\n\nimport { BreadcrumbsItem } from '../breadcrumbs/breadcrumbs.types';\nimport { ListSeparator } from '../list/list-item.types';\nimport {\n    OpenDirection,\n    MenuItem,\n    MenuLoader,\n    SurfaceWidth,\n    MenuSearcher,\n} from './menu.types';\n\nimport {\n    ARROW_DOWN,\n    ARROW_DOWN_KEY_CODE,\n    ARROW_LEFT,\n    ARROW_LEFT_KEY_CODE,\n    ARROW_RIGHT,\n    ARROW_RIGHT_KEY_CODE,\n    ARROW_UP,\n    ARROW_UP_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\n\ninterface MenuCrumbItem extends BreadcrumbsItem {\n    menuItem?: MenuItem;\n}\n\nconst DEFAULT_ROOT_BREADCRUMBS_ITEM: BreadcrumbsItem = {\n    text: '',\n    icon: {\n        name: 'home',\n    },\n    type: 'icon-only',\n};\n\n/**\n * @slot trigger - Element to use as a trigger for the menu.\n * @exampleComponent limel-example-menu-basic\n * @exampleComponent limel-example-menu-disabled\n * @exampleComponent limel-example-menu-open-direction\n * @exampleComponent limel-example-menu-surface-width\n * @exampleComponent limel-example-menu-separators\n * @exampleComponent limel-example-menu-icons\n * @exampleComponent limel-example-menu-badge-icons\n * @exampleComponent limel-example-menu-grid\n * @exampleComponent limel-example-menu-hotkeys\n * @exampleComponent limel-example-menu-secondary-text\n * @exampleComponent limel-example-menu-notification\n * @exampleComponent limel-example-menu-sub-menus\n * @exampleComponent limel-example-menu-sub-menu-lazy-loading\n * @exampleComponent limel-example-menu-sub-menu-lazy-loading-infinite\n * @exampleComponent limel-example-menu-searchable\n * @exampleComponent limel-example-menu-composite\n */\n@Component({\n    tag: 'limel-menu',\n    shadow: true,\n    styleUrl: 'menu.scss',\n})\nexport class Menu {\n    /**\n     * A list of items and separators to show in the menu.\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator> = [];\n\n    /**\n     * Sets the disabled state of the menu.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Decides the menu's location in relation to its trigger\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'bottom-start';\n\n    /**\n     * Decides the width of menu's dropdown\n     */\n    @Prop({ reflect: true })\n    public surfaceWidth: SurfaceWidth = 'inherit-from-items';\n\n    /**\n     * Sets the open state of the menu.\n     */\n    @Prop({ mutable: true, reflect: true })\n    public open = false;\n\n    /**\n     * Defines whether the menu should show badges.\n     */\n    @Prop({ reflect: true })\n    public badgeIcons = false;\n\n    /**\n     * Renders list items in a grid layout, rather than a vertical list\n     */\n    @Prop({ reflect: true })\n    public gridLayout = false;\n\n    /**\n     * :::warning Internal Use Only\n     * This property is for internal use only. We need it for now, but want to\n     * find a better implementation of the functionality it currently enables.\n     * If and when we do so, this property will be removed without prior\n     * notice. If you use it, your code _will_ break in the future.\n     * :::\n     *\n     * @internal\n     */\n    @Prop({ reflect: true })\n    public loading = false;\n\n    /**\n     * :::warning Internal Use Only\n     * This property is for internal use only. We need it for now, but want to\n     * find a better implementation of the functionality it currently enables.\n     * If and when we do so, this property will be removed without prior\n     * notice. If you use it, your code _will_ break in the future.\n     * :::\n     *\n     * @internal\n     */\n    @Prop({ mutable: true })\n    public currentSubMenu: MenuItem;\n\n    /**\n     * A root breadcrumb item to show above the menu items.\n     * Clicking it navigates back from a sub-menu to the root menu.\n     */\n    @Prop()\n    public rootItem: BreadcrumbsItem = DEFAULT_ROOT_BREADCRUMBS_ITEM;\n\n    /**\n     * Is emitted when the menu is cancelled.\n     */\n    @Event()\n    public cancel: EventEmitter<void>;\n\n    /**\n     * Is emitted when a menu item is selected.\n     */\n    @Event()\n    public select: EventEmitter<MenuItem>;\n\n    /**\n     * A search function that takes a search-string as an argument,\n     * and returns a promise that will eventually be resolved with\n     * an array of `MenuItem`:s.\n     *\n     * See the docs for the type `MenuSearcher` for type information on\n     * the searcher function itself.\n     */\n    @Prop()\n    public searcher: MenuSearcher;\n\n    /**\n     * Message to display when search returns 0 results.\n     */\n    @Prop()\n    public emptyResultMessage?: string;\n\n    /**\n     * Is emitted when a menu item with a sub-menu is selected.\n     */\n    @Event()\n    public navigateMenu: EventEmitter<MenuItem | null>;\n\n    @Element()\n    private host: HTMLLimelMenuElement;\n\n    @State()\n    private loadingSubItems: boolean;\n\n    @State()\n    private searchValue: string;\n\n    @State()\n    private searchResults: Array<MenuItem | ListSeparator> | null;\n\n    private list: HTMLLimelMenuListElement;\n    private searchInput: HTMLLimelInputFieldElement;\n    private portalId: string;\n    private triggerElement: HTMLSlotElement;\n    private selectedMenuItem?: MenuItem;\n\n    constructor() {\n        this.portalId = createRandomString();\n    }\n\n    public componentDidRender() {\n        const slotElement = this.host.shadowRoot.querySelector('slot');\n        slotElement.assignedElements().forEach(this.setTriggerAttributes);\n    }\n\n    public render() {\n        const cssProperties = this.getCssProperties();\n\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index',\n        );\n\n        const menuSurfaceWidth = this.getMenuSurfaceWidth(\n            cssProperties['--menu-surface-width'],\n        );\n\n        return (\n            <div class=\"mdc-menu-surface--anchor\" onClick={this.onTriggerClick}>\n                <slot ref={this.setTriggerRef} name=\"trigger\" />\n                {this.renderNotificationBadge()}\n                <limel-portal\n                    visible={this.open}\n                    containerId={this.portalId}\n                    openDirection={this.openDirection}\n                    position=\"absolute\"\n                    containerStyle={{ 'z-index': dropdownZIndex }}\n                >\n                    <limel-menu-surface\n                        open={this.open}\n                        onDismiss={this.onClose}\n                        style={{\n                            ...cssProperties,\n                            '--mdc-menu-min-width': menuSurfaceWidth,\n                            '--limel-menu-surface-display': 'flex',\n                            '--limel-menu-surface-flex-direction': 'column',\n                        }}\n                        class={{\n                            'has-grid-layout': this.gridLayout,\n                        }}\n                    >\n                        {this.renderSearchField()}\n                        {this.renderBreadcrumb()}\n                        {this.renderLoader()}\n                        {this.renderEmptyMessage()}\n                        {this.renderMenuList()}\n                    </limel-menu-surface>\n                </limel-portal>\n            </div>\n        );\n    }\n\n    @Watch('items')\n    protected itemsWatcher() {\n        this.clearSearch();\n        this.setFocus();\n    }\n\n    @Watch('open')\n    protected openWatcher(newValue: boolean) {\n        if (newValue) {\n            this.setFocus();\n        } else {\n            this.clearSearch();\n        }\n    }\n\n    private getBreadcrumbsItems() {\n        const breadCrumbItems: MenuCrumbItem[] = [];\n        let currentItem = this.currentSubMenu;\n        while (currentItem) {\n            breadCrumbItems.push({\n                text: currentItem.text,\n                icon: currentItem.icon,\n                menuItem: currentItem,\n            });\n            currentItem = currentItem.parentItem;\n        }\n\n        if (\n            breadCrumbItems.length ||\n            this.rootItem !== DEFAULT_ROOT_BREADCRUMBS_ITEM\n        ) {\n            breadCrumbItems.push(this.rootItem);\n        }\n\n        return breadCrumbItems.reverse();\n    }\n\n    private renderLoader = () => {\n        if (!this.loadingSubItems && !this.loading) {\n            return;\n        }\n\n        const cssProperties = this.getCssProperties();\n\n        return (\n            <div\n                style={{\n                    width: cssProperties['--menu-surface-width'],\n                    display: 'flex',\n                    'align-items': 'center',\n                    'justify-content': 'center',\n                    padding: '0.5rem 0',\n                }}\n            >\n                <limel-spinner size=\"mini\" limeBranded={false} />\n            </div>\n        );\n    };\n\n    private renderBreadcrumb = () => {\n        const breadcrumbsItems = this.getBreadcrumbsItems();\n        if (!breadcrumbsItems.length) {\n            return;\n        }\n\n        return (\n            <limel-breadcrumbs\n                style={{\n                    'border-bottom': 'solid 1px rgb(var(--contrast-500))',\n                    'flex-shrink': '0',\n                }}\n                onSelect={this.handleBreadcrumbsSelect}\n                items={breadcrumbsItems}\n            />\n        );\n    };\n\n    private handleBreadcrumbsSelect = (\n        event: LimelBreadcrumbsCustomEvent<MenuCrumbItem>,\n    ) => {\n        if (!event.detail.menuItem) {\n            this.currentSubMenu = null;\n            this.clearSearch();\n            this.navigateMenu.emit(null);\n\n            this.setFocus();\n\n            return;\n        }\n\n        this.handleSelect(event.detail.menuItem);\n    };\n\n    private renderSearchField = () => {\n        if (!this.searcher) {\n            return;\n        }\n\n        return (\n            <limel-input-field\n                tabindex=\"0\"\n                ref={this.setSearchElement}\n                type=\"search\"\n                leadingIcon=\"search\"\n                style={{\n                    padding: '0.25rem',\n                    'box-sizing': 'border-box',\n                }}\n                value={this.searchValue}\n                onChange={this.handleTextInput}\n                onKeyDown={this.handleInputKeyDown}\n            />\n        );\n    };\n\n    private renderEmptyMessage = () => {\n        if (\n            this.loading ||\n            this.loadingSubItems ||\n            !this.emptyResultMessage ||\n            !Array.isArray(this.searchResults) ||\n            this.searchResults?.length\n        ) {\n            return null;\n        }\n\n        return (\n            <p\n                style={{\n                    padding: '0 1rem',\n                    'text-align': 'center',\n                }}\n            >\n                {this.emptyResultMessage}\n            </p>\n        );\n    };\n\n    private renderMenuList = () => {\n        let items = this.visibleItems;\n\n        if (this.loadingSubItems || this.loading) {\n            items = [];\n        }\n\n        return (\n            <limel-menu-list\n                style={{\n                    'overflow-y': 'auto',\n                    'flex-grow': '1',\n                }}\n                class={{\n                    'has-grid-layout has-interactive-items': this.gridLayout,\n                }}\n                items={items}\n                type=\"menu\"\n                badgeIcons={this.badgeIcons}\n                onSelect={this.onSelect}\n                ref={this.setListElement}\n                onKeyDown={this.handleMenuKeyDown}\n            />\n        );\n    };\n\n    private handleTextInput = async (\n        event: LimelInputFieldCustomEvent<string>,\n    ) => {\n        event.stopPropagation();\n\n        const query = event.detail;\n        this.searchValue = query;\n        if (query === '') {\n            this.searchResults = null;\n            this.loadingSubItems = false;\n\n            return;\n        }\n\n        this.loadingSubItems = true;\n\n        const result = await this.searcher(query);\n\n        if (this.searchValue !== query) {\n            return;\n        }\n\n        this.searchResults = result;\n        this.loadingSubItems = false;\n    };\n\n    // Key handler for the input search field\n    // Will change focus to the first/last item in the dropdown\n    // list to enable selection with the keyboard\n    private handleInputKeyDown = (event: KeyboardEvent) => {\n        const isForwardTab =\n            (event.key === TAB || event.keyCode === TAB_KEY_CODE) &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp =\n            event.key === ARROW_UP || event.keyCode === ARROW_UP_KEY_CODE;\n        const isDown =\n            event.key === ARROW_DOWN || event.keyCode === ARROW_DOWN_KEY_CODE;\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        if (!this.list) {\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (isForwardTab || isDown) {\n            const listItems =\n                this.list.shadowRoot.querySelectorAll<HTMLElement>(\n                    '.mdc-deprecated-list-item',\n                );\n            const listElement = listItems[0];\n            listElement?.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listItems =\n                this.list.shadowRoot.querySelectorAll<HTMLElement>(\n                    '.mdc-deprecated-list-item',\n                );\n            const listElement = listItems[listItems.length - 1];\n            listElement?.focus();\n        }\n    };\n\n    // Key handler for the menu list\n    // Will change focus to the search field if using shift+tab\n    // And can go forward/back with righ/left arrow keys\n    private handleMenuKeyDown = (event: KeyboardEvent) => {\n        const isBackwardTab =\n            (event.key === TAB || event.keyCode === TAB_KEY_CODE) &&\n            !event.altKey &&\n            !event.metaKey &&\n            event.shiftKey;\n\n        const isLeft =\n            event.key === ARROW_LEFT || event.keyCode === ARROW_LEFT_KEY_CODE;\n\n        const isRight =\n            event.key === ARROW_RIGHT || event.keyCode === ARROW_RIGHT_KEY_CODE;\n\n        if (!isBackwardTab && !isLeft && !isRight) {\n            return;\n        }\n\n        if (isBackwardTab) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.searchInput?.focus();\n        } else if (!this.gridLayout) {\n            const currentItem = this.getCurrentItem();\n\n            event.stopPropagation();\n            event.preventDefault();\n            if (isRight) {\n                this.goForward(currentItem);\n            } else if (isLeft) {\n                this.goBack();\n            }\n        }\n    };\n\n    private clearSearch = () => {\n        this.searchValue = '';\n        this.searchResults = null;\n        this.loadingSubItems = false;\n    };\n\n    private getCurrentItem = (): MenuItem => {\n        const activeItem = this.list?.shadowRoot?.querySelector(\n            '[role=\"menuitem\"][tabindex=\"0\"]',\n        );\n        const attrIndex = activeItem?.attributes?.getNamedItem('data-index');\n        const dataIndex = parseInt(attrIndex?.value || '0', 10);\n\n        return this.visibleItems[dataIndex] as MenuItem;\n    };\n\n    private goForward = (currentItem: MenuItem) => {\n        this.handleSelect(currentItem, false);\n    };\n\n    private goBack = () => {\n        if (!this.currentSubMenu) {\n            // Already in the root of the menu\n            return;\n        }\n\n        const parent = this.currentSubMenu.parentItem;\n        if (!parent) {\n            // If only one step down, go to the root of the menu.\n            // No need to load a sub-menu.\n            this.currentSubMenu = null;\n            this.clearSearch();\n            this.navigateMenu.emit(null);\n\n            this.setFocus();\n\n            return;\n        }\n\n        this.handleSelect(parent);\n    };\n\n    private setTriggerAttributes = (element: HTMLElement) => {\n        const attributes = {\n            'aria-haspopup': true,\n            'aria-expanded': this.open,\n            'aria-controls': this.portalId,\n            disabled: this.disabled,\n            role: 'button',\n        };\n\n        for (const [key, value] of Object.entries(attributes)) {\n            if (!value) {\n                element.removeAttribute(key);\n            } else {\n                element.setAttribute(key, String(value));\n            }\n        }\n    };\n\n    private onClose = () => {\n        this.cancel.emit();\n        this.open = false;\n        this.currentSubMenu = null;\n    };\n\n    private onTriggerClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        if (this.disabled) {\n            return;\n        }\n\n        this.open = !this.open;\n    };\n\n    private handleSelect = async (\n        menuItem: MenuItem,\n        selectOnEmptyChildren: boolean = true,\n    ) => {\n        if (Array.isArray(menuItem?.items) && menuItem.items.length > 0) {\n            this.selectedMenuItem = menuItem;\n            this.clearSearch();\n            this.currentSubMenu = menuItem;\n            this.navigateMenu.emit(menuItem);\n\n            this.setFocus();\n\n            return;\n        } else if (isFunction(menuItem?.items)) {\n            const menuLoader = menuItem.items as MenuLoader;\n            this.selectedMenuItem = menuItem;\n            this.loadingSubItems = true;\n            const subItems = await menuLoader(menuItem);\n\n            if (this.selectedMenuItem !== menuItem) {\n                return;\n            }\n\n            menuItem.items = subItems;\n            this.loadingSubItems = false;\n\n            if (subItems?.length) {\n                this.currentSubMenu = menuItem;\n                this.clearSearch();\n                this.navigateMenu.emit(menuItem);\n\n                this.setFocus();\n\n                return;\n            }\n        }\n\n        if (!selectOnEmptyChildren) {\n            return;\n        }\n\n        this.selectedMenuItem = menuItem;\n        this.loadingSubItems = false;\n\n        this.select.emit(menuItem);\n        this.open = false;\n        this.currentSubMenu = null;\n        this.setFocus();\n    };\n\n    private onSelect = (event: CustomEvent<MenuItem>) => {\n        event.stopPropagation();\n        this.handleSelect(event.detail);\n    };\n\n    private getCssProperties() {\n        const propertyNames = [\n            '--menu-surface-width',\n            '--list-grid-item-max-width',\n            '--list-grid-item-min-width',\n            '--list-grid-gap',\n            '--notification-badge-background-color',\n            '--notification-badge-text-color',\n        ] as const;\n        const style = getComputedStyle(this.host);\n        const values = propertyNames.map((property) => {\n            return style.getPropertyValue(property);\n        });\n\n        type PropName = (typeof propertyNames)[number];\n\n        return zipObject(propertyNames, values) as Record<PropName, string>;\n    }\n\n    private setListElement = (element: HTMLLimelMenuListElement) => {\n        this.list = element;\n    };\n\n    private setFocus = () => {\n        setTimeout(() => {\n            if (this.searchInput && this.searcher) {\n                const observer = new IntersectionObserver(() => {\n                    observer.unobserve(this.searchInput);\n                    if (this.searchInput === window.document.activeElement) {\n                        return;\n                    }\n\n                    this.searchInput.focus();\n                });\n                observer.observe(this.searchInput);\n            } else if (this.list) {\n                const observer = new IntersectionObserver(() => {\n                    observer.unobserve(this.list);\n                    this.focusMenuItem();\n                });\n                observer.observe(this.list);\n            }\n        }, 0);\n    };\n\n    private setSearchElement = (element: HTMLLimelInputFieldElement) => {\n        this.searchInput = element;\n    };\n\n    private focusMenuItem = () => {\n        if (!this.list) {\n            return;\n        }\n\n        const activeElement = this.list.shadowRoot.activeElement as HTMLElement;\n        activeElement?.blur();\n\n        const menuItems = this.visibleItems.filter(this.isMenuItem);\n        const selectedIndex = Math.max(\n            menuItems.findIndex((item) => item.selected),\n            0,\n        );\n        const menuElements: HTMLElement[] = Array.from(\n            this.list.shadowRoot.querySelectorAll('[role=\"menuitem\"]'),\n        );\n        menuElements[selectedIndex]?.focus();\n    };\n\n    private isMenuItem(item: MenuItem | ListSeparator): item is MenuItem {\n        return !('separator' in item);\n    }\n\n    private renderNotificationBadge = () => {\n        if (this.items.some(this.hasNotificationBadge)) {\n            return <limel-badge />;\n        }\n    };\n\n    private hasNotificationBadge = (item: MenuItem | ListSeparator) =>\n        this.isMenuItem(item) && item.badge !== undefined;\n\n    private setTriggerRef = (elm?: HTMLSlotElement) => {\n        this.triggerElement = elm;\n    };\n\n    private getMenuSurfaceWidth(customWidth: string): string {\n        if (customWidth) {\n            return customWidth;\n        }\n\n        if (this.surfaceWidth === 'inherit-from-trigger') {\n            const assignedTriggers = this.triggerElement?.assignedElements();\n\n            if (\n                !assignedTriggers?.length ||\n                !assignedTriggers[0]?.clientWidth\n            ) {\n                return '';\n            }\n\n            return `${assignedTriggers[0].clientWidth}px`;\n        } else if (this.surfaceWidth === 'inherit-from-menu') {\n            if (!this.host?.clientWidth) {\n                return '';\n            }\n\n            return `${this.host?.clientWidth}px`;\n        }\n\n        return '';\n    }\n\n    private get visibleItems(): Array<MenuItem | ListSeparator> {\n        if (Array.isArray(this.searchResults) && this.searchValue) {\n            return this.searchResults;\n        } else if (Array.isArray(this.currentSubMenu?.items)) {\n            return this.currentSubMenu.items.map((item) => ({\n                ...item,\n                parentItem: this.currentSubMenu,\n            }));\n        }\n\n        return this.items;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar cssClasses = {\n    MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',\n    MENU_SELECTION_GROUP: 'mdc-menu__selection-group',\n    ROOT: 'mdc-menu',\n};\nvar strings = {\n    ARIA_CHECKED_ATTR: 'aria-checked',\n    ARIA_DISABLED_ATTR: 'aria-disabled',\n    CHECKBOX_SELECTOR: 'input[type=\"checkbox\"]',\n    LIST_SELECTOR: '.mdc-list,.mdc-deprecated-list',\n    SELECTED_EVENT: 'MDCMenu:selected',\n    SKIP_RESTORE_FOCUS: 'data-menu-item-skip-restore-focus',\n};\nvar numbers = {\n    FOCUS_ROOT_INDEX: -1,\n};\nvar DefaultFocusState;\n(function (DefaultFocusState) {\n    DefaultFocusState[DefaultFocusState[\"NONE\"] = 0] = \"NONE\";\n    DefaultFocusState[DefaultFocusState[\"LIST_ROOT\"] = 1] = \"LIST_ROOT\";\n    DefaultFocusState[DefaultFocusState[\"FIRST_ITEM\"] = 2] = \"FIRST_ITEM\";\n    DefaultFocusState[DefaultFocusState[\"LAST_ITEM\"] = 3] = \"LAST_ITEM\";\n})(DefaultFocusState || (DefaultFocusState = {}));\nexport { cssClasses, strings, numbers, DefaultFocusState };\n//# sourceMappingURL=constants.js.map","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses as listCssClasses } from '@material/list/constants';\nimport { MDCMenuSurfaceFoundation } from '@material/menu-surface/foundation';\nimport { cssClasses, DefaultFocusState, numbers, strings } from './constants';\nvar MDCMenuFoundation = /** @class */ (function (_super) {\n    __extends(MDCMenuFoundation, _super);\n    function MDCMenuFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCMenuFoundation.defaultAdapter), adapter)) || this;\n        _this.closeAnimationEndTimerId = 0;\n        _this.defaultFocusState = DefaultFocusState.LIST_ROOT;\n        _this.selectedIndex = -1;\n        return _this;\n    }\n    Object.defineProperty(MDCMenuFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuFoundation, \"defaultAdapter\", {\n        /**\n         * @see {@link MDCMenuAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClassToElementAtIndex: function () { return undefined; },\n                removeClassFromElementAtIndex: function () { return undefined; },\n                addAttributeToElementAtIndex: function () { return undefined; },\n                removeAttributeFromElementAtIndex: function () { return undefined; },\n                getAttributeFromElementAtIndex: function () { return null; },\n                elementContainsClass: function () { return false; },\n                closeSurface: function () { return undefined; },\n                getElementIndex: function () { return -1; },\n                notifySelected: function () { return undefined; },\n                getMenuItemCount: function () { return 0; },\n                focusItemAtIndex: function () { return undefined; },\n                focusListRoot: function () { return undefined; },\n                getSelectedSiblingOfItemAtIndex: function () { return -1; },\n                isSelectableItemAtIndex: function () { return false; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCMenuFoundation.prototype.destroy = function () {\n        if (this.closeAnimationEndTimerId) {\n            clearTimeout(this.closeAnimationEndTimerId);\n        }\n        this.adapter.closeSurface();\n    };\n    MDCMenuFoundation.prototype.handleKeydown = function (evt) {\n        var key = evt.key, keyCode = evt.keyCode;\n        var isTab = key === 'Tab' || keyCode === 9;\n        if (isTab) {\n            this.adapter.closeSurface(/** skipRestoreFocus */ true);\n        }\n    };\n    MDCMenuFoundation.prototype.handleItemAction = function (listItem) {\n        var _this = this;\n        var index = this.adapter.getElementIndex(listItem);\n        if (index < 0) {\n            return;\n        }\n        this.adapter.notifySelected({ index: index });\n        var skipRestoreFocus = this.adapter.getAttributeFromElementAtIndex(index, strings.SKIP_RESTORE_FOCUS) === 'true';\n        this.adapter.closeSurface(skipRestoreFocus);\n        // Wait for the menu to close before adding/removing classes that affect styles.\n        this.closeAnimationEndTimerId = setTimeout(function () {\n            // Recompute the index in case the menu contents have changed.\n            var recomputedIndex = _this.adapter.getElementIndex(listItem);\n            if (recomputedIndex >= 0 &&\n                _this.adapter.isSelectableItemAtIndex(recomputedIndex)) {\n                _this.setSelectedIndex(recomputedIndex);\n            }\n        }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);\n    };\n    MDCMenuFoundation.prototype.handleMenuSurfaceOpened = function () {\n        switch (this.defaultFocusState) {\n            case DefaultFocusState.FIRST_ITEM:\n                this.adapter.focusItemAtIndex(0);\n                break;\n            case DefaultFocusState.LAST_ITEM:\n                this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);\n                break;\n            case DefaultFocusState.NONE:\n                // Do nothing.\n                break;\n            default:\n                this.adapter.focusListRoot();\n                break;\n        }\n    };\n    /**\n     * Sets default focus state where the menu should focus every time when menu\n     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by\n     * default.\n     */\n    MDCMenuFoundation.prototype.setDefaultFocusState = function (focusState) {\n        this.defaultFocusState = focusState;\n    };\n    /** @return Index of the currently selected list item within the menu. */\n    MDCMenuFoundation.prototype.getSelectedIndex = function () {\n        return this.selectedIndex;\n    };\n    /**\n     * Selects the list item at `index` within the menu.\n     * @param index Index of list item within the menu.\n     */\n    MDCMenuFoundation.prototype.setSelectedIndex = function (index) {\n        this.validatedIndex(index);\n        if (!this.adapter.isSelectableItemAtIndex(index)) {\n            throw new Error('MDCMenuFoundation: No selection group at specified index.');\n        }\n        var prevSelectedIndex = this.adapter.getSelectedSiblingOfItemAtIndex(index);\n        if (prevSelectedIndex >= 0) {\n            this.adapter.removeAttributeFromElementAtIndex(prevSelectedIndex, strings.ARIA_CHECKED_ATTR);\n            this.adapter.removeClassFromElementAtIndex(prevSelectedIndex, cssClasses.MENU_SELECTED_LIST_ITEM);\n        }\n        this.adapter.addClassToElementAtIndex(index, cssClasses.MENU_SELECTED_LIST_ITEM);\n        this.adapter.addAttributeToElementAtIndex(index, strings.ARIA_CHECKED_ATTR, 'true');\n        this.selectedIndex = index;\n    };\n    /**\n     * Sets the enabled state to isEnabled for the menu item at the given index.\n     * @param index Index of the menu item\n     * @param isEnabled The desired enabled state of the menu item.\n     */\n    MDCMenuFoundation.prototype.setEnabled = function (index, isEnabled) {\n        this.validatedIndex(index);\n        if (isEnabled) {\n            this.adapter.removeClassFromElementAtIndex(index, listCssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter.addAttributeToElementAtIndex(index, strings.ARIA_DISABLED_ATTR, 'false');\n        }\n        else {\n            this.adapter.addClassToElementAtIndex(index, listCssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter.addAttributeToElementAtIndex(index, strings.ARIA_DISABLED_ATTR, 'true');\n        }\n    };\n    MDCMenuFoundation.prototype.validatedIndex = function (index) {\n        var menuSize = this.adapter.getMenuItemCount();\n        var isIndexInRange = index >= 0 && index < menuSize;\n        if (!isIndexInRange) {\n            throw new Error('MDCMenuFoundation: No list item at specified index.');\n        }\n    };\n    return MDCMenuFoundation;\n}(MDCFoundation));\nexport { MDCMenuFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCMenuFoundation;\n//# sourceMappingURL=foundation.js.map","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { MDCList } from '@material/list/component';\nimport { numbers as listConstants } from '@material/list/constants';\nimport { MDCListFoundation } from '@material/list/foundation';\nimport { MDCMenuSurface } from '@material/menu-surface/component';\nimport { MDCMenuSurfaceFoundation } from '@material/menu-surface/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCMenuFoundation } from './foundation';\nvar MDCMenu = /** @class */ (function (_super) {\n    __extends(MDCMenu, _super);\n    function MDCMenu() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCMenu.attachTo = function (root) {\n        return new MDCMenu(root);\n    };\n    MDCMenu.prototype.initialize = function (menuSurfaceFactory, listFactory) {\n        if (menuSurfaceFactory === void 0) { menuSurfaceFactory = function (el) { return new MDCMenuSurface(el); }; }\n        if (listFactory === void 0) { listFactory = function (el) { return new MDCList(el); }; }\n        this.menuSurfaceFactory = menuSurfaceFactory;\n        this.listFactory = listFactory;\n    };\n    MDCMenu.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.menuSurface = this.menuSurfaceFactory(this.root);\n        var list = this.root.querySelector(strings.LIST_SELECTOR);\n        if (list) {\n            this.list = this.listFactory(list);\n            this.list.wrapFocus = true;\n        }\n        else {\n            this.list = null;\n        }\n        this.handleKeydown = function (evt) {\n            _this.foundation.handleKeydown(evt);\n        };\n        this.handleItemAction = function (evt) {\n            _this.foundation.handleItemAction(_this.items[evt.detail.index]);\n        };\n        this.handleMenuSurfaceOpened = function () {\n            _this.foundation.handleMenuSurfaceOpened();\n        };\n        this.menuSurface.listen(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);\n        this.listen('keydown', this.handleKeydown);\n        this.listen(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);\n    };\n    MDCMenu.prototype.destroy = function () {\n        if (this.list) {\n            this.list.destroy();\n        }\n        this.menuSurface.destroy();\n        this.menuSurface.unlisten(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);\n        this.unlisten('keydown', this.handleKeydown);\n        this.unlisten(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);\n        _super.prototype.destroy.call(this);\n    };\n    Object.defineProperty(MDCMenu.prototype, \"open\", {\n        get: function () {\n            return this.menuSurface.isOpen();\n        },\n        set: function (value) {\n            if (value) {\n                this.menuSurface.open();\n            }\n            else {\n                this.menuSurface.close();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"wrapFocus\", {\n        get: function () {\n            return this.list ? this.list.wrapFocus : false;\n        },\n        set: function (value) {\n            if (this.list) {\n                this.list.wrapFocus = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"hasTypeahead\", {\n        /**\n         * Sets whether the menu has typeahead functionality.\n         * @param value Whether typeahead is enabled.\n         */\n        set: function (value) {\n            if (this.list) {\n                this.list.hasTypeahead = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"typeaheadInProgress\", {\n        /**\n         * @return Whether typeahead logic is currently matching some user prefix.\n         */\n        get: function () {\n            return this.list ? this.list.typeaheadInProgress : false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Given the next desired character from the user, adds it to the typeahead\n     * buffer. Then, attempts to find the next option matching the buffer. Wraps\n     * around if at the end of options.\n     *\n     * @param nextChar The next character to add to the prefix buffer.\n     * @param startingIndex The index from which to start matching. Only relevant\n     *     when starting a new match sequence. To start a new match sequence,\n     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer\n     *     to clear after a set interval defined in list foundation. Defaults to\n     *     the currently focused index.\n     * @return The index of the matched item, or -1 if no match.\n     */\n    MDCMenu.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {\n        if (this.list) {\n            return this.list.typeaheadMatchItem(nextChar, startingIndex);\n        }\n        return -1;\n    };\n    /**\n     * Layout the underlying list element in the case of any dynamic updates\n     * to its structure.\n     */\n    MDCMenu.prototype.layout = function () {\n        if (this.list) {\n            this.list.layout();\n        }\n    };\n    Object.defineProperty(MDCMenu.prototype, \"items\", {\n        /**\n         * Return the items within the menu. Note that this only contains the set of elements within\n         * the items container that are proper list items, and not supplemental / presentational DOM\n         * elements.\n         */\n        get: function () {\n            return this.list ? this.list.listElements : [];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"singleSelection\", {\n        /**\n         * Turns on/off the underlying list's single selection mode. Used mainly\n         * by select menu.\n         *\n         * @param singleSelection Whether to enable single selection mode.\n         */\n        set: function (singleSelection) {\n            if (this.list) {\n                this.list.singleSelection = singleSelection;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"selectedIndex\", {\n        /**\n         * Retrieves the selected index. Only applicable to select menus.\n         * @return The selected index, which is a number for single selection and\n         *     radio lists, and an array of numbers for checkbox lists.\n         */\n        get: function () {\n            return this.list ? this.list.selectedIndex : listConstants.UNSET_INDEX;\n        },\n        /**\n         * Sets the selected index of the list. Only applicable to select menus.\n         * @param index The selected index, which is a number for single selection and\n         *     radio lists, and an array of numbers for checkbox lists.\n         */\n        set: function (index) {\n            if (this.list) {\n                this.list.selectedIndex = index;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"quickOpen\", {\n        set: function (quickOpen) {\n            this.menuSurface.quickOpen = quickOpen;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets default focus state where the menu should focus every time when menu\n     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by\n     * default.\n     * @param focusState Default focus state.\n     */\n    MDCMenu.prototype.setDefaultFocusState = function (focusState) {\n        this.foundation.setDefaultFocusState(focusState);\n    };\n    /**\n     * @param corner Default anchor corner alignment of top-left menu corner.\n     */\n    MDCMenu.prototype.setAnchorCorner = function (corner) {\n        this.menuSurface.setAnchorCorner(corner);\n    };\n    MDCMenu.prototype.setAnchorMargin = function (margin) {\n        this.menuSurface.setAnchorMargin(margin);\n    };\n    /**\n     * Sets the list item as the selected row at the specified index.\n     * @param index Index of list item within menu.\n     */\n    MDCMenu.prototype.setSelectedIndex = function (index) {\n        this.foundation.setSelectedIndex(index);\n    };\n    /**\n     * Sets the enabled state to isEnabled for the menu item at the given index.\n     * @param index Index of the menu item\n     * @param isEnabled The desired enabled state of the menu item.\n     */\n    MDCMenu.prototype.setEnabled = function (index, isEnabled) {\n        this.foundation.setEnabled(index, isEnabled);\n    };\n    /**\n     * @return The item within the menu at the index specified.\n     */\n    MDCMenu.prototype.getOptionByIndex = function (index) {\n        var items = this.items;\n        if (index < items.length) {\n            return this.items[index];\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @param index A menu item's index.\n     * @return The primary text within the menu at the index specified.\n     */\n    MDCMenu.prototype.getPrimaryTextAtIndex = function (index) {\n        var item = this.getOptionByIndex(index);\n        if (item && this.list) {\n            return this.list.getPrimaryText(item) || '';\n        }\n        return '';\n    };\n    MDCMenu.prototype.setFixedPosition = function (isFixed) {\n        this.menuSurface.setFixedPosition(isFixed);\n    };\n    MDCMenu.prototype.setIsHoisted = function (isHoisted) {\n        this.menuSurface.setIsHoisted(isHoisted);\n    };\n    MDCMenu.prototype.setAbsolutePosition = function (x, y) {\n        this.menuSurface.setAbsolutePosition(x, y);\n    };\n    /**\n     * Sets the element that the menu-surface is anchored to.\n     */\n    MDCMenu.prototype.setAnchorElement = function (element) {\n        this.menuSurface.anchorElement = element;\n    };\n    MDCMenu.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            addClassToElementAtIndex: function (index, className) {\n                var list = _this.items;\n                list[index].classList.add(className);\n            },\n            removeClassFromElementAtIndex: function (index, className) {\n                var list = _this.items;\n                list[index].classList.remove(className);\n            },\n            addAttributeToElementAtIndex: function (index, attr, value) {\n                var list = _this.items;\n                list[index].setAttribute(attr, value);\n            },\n            removeAttributeFromElementAtIndex: function (index, attr) {\n                var list = _this.items;\n                list[index].removeAttribute(attr);\n            },\n            getAttributeFromElementAtIndex: function (index, attr) {\n                var list = _this.items;\n                return list[index].getAttribute(attr);\n            },\n            elementContainsClass: function (element, className) {\n                return element.classList.contains(className);\n            },\n            closeSurface: function (skipRestoreFocus) {\n                _this.menuSurface.close(skipRestoreFocus);\n            },\n            getElementIndex: function (element) { return _this.items.indexOf(element); },\n            notifySelected: function (evtData) {\n                _this.emit(strings.SELECTED_EVENT, {\n                    index: evtData.index,\n                    item: _this.items[evtData.index],\n                });\n            },\n            getMenuItemCount: function () { return _this.items.length; },\n            focusItemAtIndex: function (index) {\n                _this.items[index].focus();\n            },\n            focusListRoot: function () {\n                _this.root.querySelector(strings.LIST_SELECTOR).focus();\n            },\n            isSelectableItemAtIndex: function (index) {\n                return !!closest(_this.items[index], \".\" + cssClasses.MENU_SELECTION_GROUP);\n            },\n            getSelectedSiblingOfItemAtIndex: function (index) {\n                var selectionGroupEl = closest(_this.items[index], \".\" + cssClasses.MENU_SELECTION_GROUP);\n                var selectedItemEl = selectionGroupEl.querySelector(\".\" + cssClasses.MENU_SELECTED_LIST_ITEM);\n                return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;\n            },\n        };\n        // tslint:enable:object-literal-sort-keys\n        return new MDCMenuFoundation(adapter);\n    };\n    return MDCMenu;\n}(MDCComponent));\nexport { MDCMenu };\n//# sourceMappingURL=component.js.map","import { ListSeparator } from '../list/list-item.types';\nimport { MenuItem } from '../menu/menu.types';\nimport { h } from '@stencil/core';\nimport { MenuListRendererConfig } from './menu-list-renderer-config';\nimport { getIconColor, getIconName } from '../icon/get-icon-props';\nimport { isFunction } from 'lodash-es';\n\nexport class MenuListRenderer {\n    private defaultConfig: MenuListRendererConfig = {\n        isOpen: true,\n        badgeIcons: false,\n    };\n\n    private config: MenuListRendererConfig;\n\n    private hasIcons: boolean;\n    private twoLines: boolean;\n    private avatarList: boolean;\n    private commandKey: boolean;\n\n    private applyTabIndexToItemAtIndex: number;\n\n    public render(\n        items: Array<MenuItem | ListSeparator>,\n        config: MenuListRendererConfig = {},\n    ) {\n        items = items || [];\n        this.config = { ...this.defaultConfig, ...config };\n\n        this.twoLines = items.some((item) => {\n            return 'secondaryText' in item && !!item.secondaryText;\n        });\n\n        this.commandKey = items.some((item) => {\n            return 'commandText' in item && !!item.commandText;\n        });\n\n        this.hasIcons = items.some((item) => {\n            return 'icon' in item && !!item.icon;\n        });\n\n        this.avatarList = this.config.badgeIcons && this.hasIcons;\n\n        this.applyTabIndexToItemAtIndex =\n            this.getIndexForWhichToApplyTabIndex(items);\n\n        const classNames = {\n            'mdc-deprecated-list': true,\n            'mdc-deprecated-list--two-line': this.twoLines,\n            selectable: true,\n            'mdc-deprecated-list--avatar-list': this.avatarList,\n            'list--compact':\n                this.twoLines &&\n                this.commandKey &&\n                ['small', 'x-small'].includes(this.config.iconSize),\n        };\n\n        return (\n            <ul\n                class={classNames}\n                role=\"menu\"\n                aria-orientation=\"vertical\"\n                style={{ '--maxLinesSecondaryText': '2' }}\n            >\n                {items.map(this.renderMenuItem)}\n            </ul>\n        );\n    }\n\n    /**\n     * Determine which MenuItem should have the `tab-index` attribute set,\n     * and return the index at which that MenuItem is located in `items`.\n     * Returns `undefined` if no item should have the attribute set.\n     * See https://github.com/material-components/material-components-web/tree/e66a43a75fef4f9179e24856649518e15e279a04/packages/mdc-list#accessibility\n     *\n     * @param items - the items of the list, including any `ListSeparator`:s\n     * @returns the index as per the description\n     */\n    private getIndexForWhichToApplyTabIndex = (\n        items: Array<MenuItem | ListSeparator>,\n    ) => {\n        let result;\n        for (let i = 0, max = items.length; i < max; i += 1) {\n            if ('separator' in items[i]) {\n                // Ignore ListSeparator\n            } else {\n                const item = items[i] as MenuItem<any>;\n                if (item.selected) {\n                    result = i;\n                    break;\n                }\n\n                if (result === undefined && !item.disabled) {\n                    result = i;\n                    // Do NOT break, as any later item with\n                    // `selected=true` should get the tab-index instead!\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Render a single list item\n     *\n     * @param item - the item to render\n     * @param index - the index the item had in the `items` array\n     * @returns the list item\n     */\n    private renderMenuItem = (\n        item: MenuItem | ListSeparator,\n        index: number,\n    ) => {\n        if ('separator' in item) {\n            return (\n                <li class=\"mdc-deprecated-list-divider\" role=\"separator\">\n                    {this.rendertext(item)}\n                    <div class=\"limel-list-divider-line\" />\n                </li>\n            );\n        }\n\n        const classNames = {\n            'mdc-deprecated-list-item': true,\n            'mdc-deprecated-list-item--disabled': item.disabled,\n            'mdc-deprecated-list-item--selected': item.selected,\n        };\n\n        const attributes: { tabindex?: string } = {};\n        if (index === this.applyTabIndexToItemAtIndex) {\n            attributes.tabindex = '0';\n        }\n\n        return (\n            <li\n                class={classNames}\n                role=\"menuitem\"\n                aria-disabled={item.disabled ? 'true' : 'false'}\n                aria-selected={item.selected ? 'true' : 'false'}\n                data-index={index}\n                {...attributes}\n            >\n                {this.renderIcon(this.config, item)}\n                {this.renderText(item)}\n                {this.renderSubMenuIcon(item)}\n                {this.renderNotification(item)}\n                {this.twoLines && this.avatarList ? this.renderDivider() : null}\n            </li>\n        );\n    };\n\n    /**\n     * Render the text of the list item\n     *\n     * @param item - the list item\n     * @returns the text for the list item\n     */\n    private renderText = (item: MenuItem) => {\n        if (this.isSimpleItem(item)) {\n            return (\n                <span class=\"mdc-deprecated-list-item__text\">{item.text}</span>\n            );\n        }\n\n        return (\n            <div class=\"mdc-deprecated-list-item__text\">\n                <div class=\"mdc-deprecated-list-item__primary-command-text\">\n                    <div class=\"mdc-deprecated-list-item__primary-text\">\n                        {item.text}\n                    </div>\n                    {this.renderCommandText(item)}\n                </div>\n                <div class=\"mdc-deprecated-list-item__secondary-text\">\n                    {item.secondaryText}\n                </div>\n            </div>\n        );\n    };\n\n    private renderSubMenuIcon = (item: MenuItem) => {\n        if (!this.hasSubItems(item)) {\n            return;\n        }\n\n        return <limel-icon class=\"sub-menu-icon\" name=\"-lime-caret-right\" />;\n    };\n\n    private rendertext = (item: ListSeparator) => {\n        if ('text' in item) {\n            return <h2 class=\"limel-list-divider-title\">{item.text}</h2>;\n        }\n    };\n\n    private renderCommandText = (item: MenuItem) => {\n        if (!('commandText' in item)) {\n            return;\n        }\n\n        return (\n            <div class=\"mdc-deprecated-list-item__command-text\">\n                {item.commandText}\n            </div>\n        );\n    };\n\n    private isSimpleItem = (item: MenuItem): boolean => {\n        if ('commandText' in item) {\n            return false;\n        }\n\n        return !('secondaryText' in item);\n    };\n\n    /**\n     * Render an icon for a list item\n     *\n     * @param config - the config object, passed on from the `renderMenuItem` function\n     * @param item - the list item\n     * @returns the icon element\n     */\n    private renderIcon = (config: MenuListRendererConfig, item: MenuItem) => {\n        const style: any = {};\n        const name = getIconName(item.icon);\n        if (!name) {\n            return;\n        }\n\n        const color = getIconColor(item.icon, item.iconColor);\n\n        if (color) {\n            if (config.badgeIcons) {\n                style['--icon-background-color'] = color;\n            } else {\n                style.color = color;\n            }\n        }\n\n        return (\n            <limel-icon\n                badge={config.badgeIcons}\n                class=\"mdc-deprecated-list-item__graphic\"\n                name={name}\n                style={style}\n                size={config.iconSize}\n            />\n        );\n    };\n\n    private renderNotification = (item: MenuItem) => {\n        if (item.badge !== undefined) {\n            return <limel-badge label={item.badge} />;\n        }\n    };\n\n    private renderDivider = () => {\n        const classes = {\n            'mdc-deprecated-list-divider': true,\n            'mdc-deprecated-list-divider--inset': true,\n        };\n        if (this.config.iconSize) {\n            classes[this.config.iconSize] = true;\n        }\n\n        return <hr class={classes} />;\n    };\n\n    private hasSubItems = (item: MenuItem): boolean => {\n        return (\n            (Array.isArray(item.items) && item.items.length > 0) ||\n            isFunction(item.items)\n        );\n    };\n}\n","@use '../../style/functions';\n\n@import '../list/list';\n\n:host(limel-menu-list) {\n    display: block;\n    --badge-background-color: var(\n        --notification-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    --badge-text-color: var(\n        --notification-badge-text-color,\n        rgb(var(--color-white))\n    );\n}\n\n.mdc-menu {\n    max-height: 70vh; // force tall menus render inside the viewport when menu is at the bottom of the screen\n}\n\n.mdc-deprecated-list {\n    margin: functions.pxToRem(4);\n    // added space to visualize keyboard-focused items\n    .mdc-deprecated-list-item[role='menuitem'] {\n        font-size: functions.pxToRem(13);\n\n        .mdc-deprecated-list-item__graphic {\n            margin-right: functions.pxToRem(14);\n        }\n    }\n\n    hr.mdc-deprecated-list-divider {\n        &.mdc-deprecated-list-divider--inset {\n            display: none;\n        }\n    }\n}\n\nlimel-badge {\n    transform: translateX(0.75rem);\n}\n\n.sub-menu-icon {\n    width: 1rem;\n    transform: translateX(0.75rem);\n    flex-shrink: 0;\n}\n","import { IconSize } from '../icon/icon.types';\nimport { ListSeparator } from '../list/list-item.types';\nimport { MenuItem } from '../menu/menu.types';\nimport { MenuListType } from '../menu-list/menu-list.types';\nimport { MDCMenu, MDCMenuItemEvent } from '@material/menu';\nimport { MDCRipple } from '@material/ripple';\nimport { strings as menuStrings } from '@material/menu/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { MenuListRenderer } from './menu-list-renderer';\nimport { MenuListRendererConfig } from './menu-list-renderer-config';\n\nconst { SELECTED_EVENT } = menuStrings;\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-menu-list',\n    shadow: true,\n    styleUrl: 'menu-list.scss',\n})\nexport class MenuList {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * The type of the menu, omit to get a regular vertical menu.\n     * Available types are:\n     * `menu`: regular vertical menu.\n     */\n    @Prop()\n    public type: MenuListType;\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n    // eslint-disable-next-line no-magic-numbers\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelMenuListElement;\n\n    private config: MenuListRendererConfig;\n    private MenuListRenderer = new MenuListRenderer();\n    private mdcMenu: MDCMenu;\n\n    /**\n     * Fired when a new value has been selected from the list.\n     */\n    @Event()\n    private select: EventEmitter<MenuItem>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n        this.triggerIconColorWarning();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            type: this.type,\n            iconSize: this.iconSize,\n        };\n\n        const html = this.MenuListRenderer.render(this.items, this.config);\n\n        return <div class=\"mdc-menu mdc-menu-surface\">{html}</div>;\n    }\n\n    @Watch('type')\n    protected handleType() {\n        this.setupListeners();\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        setTimeout(() => {\n            this.setup();\n        }, 0);\n    }\n\n    private setup = () => {\n        this.setupMenu();\n        this.setupListeners();\n    };\n\n    private setupMenu = () => {\n        if (this.mdcMenu) {\n            this.teardown();\n            this.mdcMenu = null;\n        }\n\n        const element = this.element.shadowRoot.querySelector('.mdc-menu');\n        if (!element) {\n            return;\n        }\n\n        this.mdcMenu = new MDCMenu(element);\n        this.mdcMenu.hasTypeahead = true;\n        this.mdcMenu.wrapFocus = true;\n        this.mdcMenu.items.forEach((item) => new MDCRipple(item));\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcMenu) {\n            return;\n        }\n\n        this.mdcMenu.unlisten(SELECTED_EVENT, this.handleMenuSelect);\n        this.mdcMenu.listen(SELECTED_EVENT, this.handleMenuSelect);\n    };\n\n    private teardown = () => {\n        this.mdcMenu?.unlisten(SELECTED_EVENT, this.handleMenuSelect);\n        this.mdcMenu?.destroy();\n    };\n\n    private handleMenuSelect = (event: MDCMenuItemEvent) => {\n        this.handleSingleSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const MenuItems = this.items.filter(this.isMenuItem) as MenuItem[];\n        if (MenuItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: MenuItem = MenuItems.find((item: MenuItem) => {\n            return !!item.selected;\n        });\n\n        if (selectedItem) {\n            this.select.emit({ ...selectedItem, selected: false });\n        }\n\n        if (MenuItems[index] !== selectedItem) {\n            this.select.emit({ ...MenuItems[index], selected: false });\n        }\n    };\n\n    private isMenuItem = (item: MenuItem): boolean => {\n        return !('separator' in item);\n    };\n\n    private triggerIconColorWarning() {\n        if (this.items.some((item) => 'iconColor' in item)) {\n            /* eslint-disable-next-line no-console */\n            console.warn(\n                \"The `iconColor` prop is deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name'` write `icon {name: 'icon-name', color: 'color-name'}`.\",\n            );\n        }\n    }\n}\n"],"mappings":"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"}