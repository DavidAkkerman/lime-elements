{"version":3,"names":["arrayAggregator","array","setter","iteratee","accumulator","index","length","value","createBaseEach","eachFunc","fromRight","collection","isArrayLike","iterable","Object","baseEach","baseForOwn","baseAggregator","key","createAggregator","initializer","func","isArray","baseIteratee","partition","result","push","createFileInfo","file","limeFile","id","crypto","randomUUID","filename","name","contentType","type","size","fileContent","icon","getFileIcon","title","getFileExtensionTitle","color","getFileColor","backgroundColor","getFileBackgroundColor","isTypeAccepted","accept","undefined","acceptList","split","map","raw","trim","some","acceptedType","endsWith","baseType","startsWith","fileType","fileDropzoneCss","FileDropzone","this","renderOnDragLayout","hasFileToDrop","h","class","renderText","renderHelperText","text","helperText","handleDrop","event","stopPropagation","preventDefault","disabled","files","Array","from","dataTransfer","fileInfos","acceptedFileInfos","rejectedFileInfos","filesSelected","emit","filesRejected","handleDragOver","handleDragLeave","render","Host","onDrop","onDragOver","onDragLeave"],"sources":["./node_modules/lodash-es/_arrayAggregator.js","./node_modules/lodash-es/_createBaseEach.js","./node_modules/lodash-es/_baseEach.js","./node_modules/lodash-es/_baseAggregator.js","./node_modules/lodash-es/_createAggregator.js","./node_modules/lodash-es/partition.js","./src/util/files.ts","./src/components/file-dropzone/file-dropzone.scss?tag=limel-file-dropzone&encapsulation=shadow","./src/components/file-dropzone/file-dropzone.tsx"],"sourcesContent":["/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import isArrayLike from './isArrayLike.js';\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nexport default createBaseEach;\n","import baseForOwn from './_baseForOwn.js';\nimport createBaseEach from './_createBaseEach.js';\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nexport default baseEach;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import createAggregator from './_createAggregator.js';\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nexport default partition;\n","import { FileInfo } from '../global/shared-types/file.types';\nimport {\n    getFileBackgroundColor,\n    getFileColor,\n    getFileExtensionTitle,\n    getFileIcon,\n} from './file-metadata';\n\nexport function createFileInfo(file: File): FileInfo {\n    const limeFile: FileInfo = {\n        id: crypto.randomUUID(),\n        filename: file.name,\n        contentType: file.type,\n        size: file.size,\n        fileContent: file,\n    };\n    limeFile.icon = {\n        name: getFileIcon(limeFile),\n        title: getFileExtensionTitle(limeFile),\n        color: getFileColor(limeFile),\n        backgroundColor: getFileBackgroundColor(limeFile),\n    };\n\n    return limeFile;\n}\n\nexport function isTypeAccepted(file: FileInfo, accept?: string): boolean {\n    if (accept === undefined || accept === '*') {\n        return true;\n    }\n\n    const acceptList = accept.split(',').map((raw) => raw.trim());\n\n    return acceptList.some((acceptedType: string) => {\n        if (acceptedType === file.contentType) {\n            return true;\n        }\n\n        if (acceptedType.endsWith('/*')) {\n            const baseType = acceptedType.split('/')[0];\n\n            return file.contentType.startsWith(`${baseType}/`);\n        }\n\n        if (acceptedType.startsWith('.')) {\n            const fileType = acceptedType.split('.')[1];\n\n            return file.contentType.endsWith(`/${fileType}`);\n        }\n    });\n}\n",":host(limel-file-dropzone) {\n    position: relative;\n    display: grid;\n    position: relative;\n    height: 100%;\n    width: 100%;\n}\n\n.has-file-to-drop {\n    position: absolute;\n    top: 0;\n    left: 0;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n\n    border: 0.25rem dashed rgb(var(--color-gray-light));\n    border-radius: 1rem;\n    background-color: rgb(var(--color-gray-dark));\n\n    opacity: 0.9;\n    margin: 0.125rem;\n    isolation: isolate;\n    z-index: 1;\n\n    limel-icon.icon {\n        height: clamp(2rem, 4vh, 6rem);\n        width: clamp(2rem, 4vh, 6rem);\n        color: rgb(var(--contrast-800));\n    }\n\n    .text {\n        font-size: clamp(1rem, 2vh, 1.75rem);\n        padding-top: 0.5rem;\n        color: rgb(var(--contrast-800));\n    }\n\n    .helper-text{\n        font-size: clamp(0.75rem, 1.5vh, 1rem);\n        color: rgb(var(--contrast-800));\n    }\n}\n","import {\n    Component,\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo, isTypeAccepted } from '../../util/files';\nimport { partition } from 'lodash-es';\n\n/**\n * This component enables you to seamlessly convert any region of the user interface into\n * a file dropzone area, just by wrapping it inside the `limel-file-dropzone`.\n *\n * The file dropzone can then be used to allow end-users to upload files\n * by dragging and dropping them into the specified area, for example to trigger an upload process.\n *\n * After receiving the files, the component emits a `filesSelected` event. For unsupported\n * files (specified with the `accept` prop) a `filesRejected` event will be emitted.\n *\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-dropzone\n * @exampleComponent limel-example-file-dropzone-type-filtering\n * @private\n */\n@Component({\n    tag: 'limel-file-dropzone',\n    shadow: true,\n    styleUrl: 'file-dropzone.scss',\n})\nexport class FileDropzone {\n    /**\n     * Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n     *\n     * For media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\n     * Unique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\n     * A comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n     * `.png, .jpg, .jpeg`.\n     *\n     * @see [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\n     * details.\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable the file dropzone.\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Is displayed when the user is dragging a file over the dropzone.\n     * A suitable text could for instance be \"Drop your files here\".\n     */\n    @Prop()\n    public text?: string;\n\n    /**\n     * Is displayed to provide supplementary information to the end users,\n     * for instance, which filetypes or file sizes are accepted.\n     */\n    @Prop()\n    public helperText?: string = '';\n\n    /**\n     * Sets to true when there is a file to drop\n     */\n    @State()\n    private hasFileToDrop: boolean = false;\n\n    /**\n     * Emitted when files are selected\n     */\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    /**\n     * Emitted when files are selected but do not conform with the `accept` property specifications.\n     * This can happen when the file types or formats of the selected files are not among the ones allowed by the dropzone,\n     * as defined by the `accept` property.\n     *\n     * @see {@link accept} for details on how to specify acceptable file types.\n     */\n    @Event()\n    filesRejected: EventEmitter<FileInfo[]>;\n\n    public render() {\n        return (\n            <Host\n                onDrop={this.handleDrop}\n                onDragOver={this.handleDragOver}\n                onDragLeave={this.handleDragLeave}\n            >\n                <slot />\n                {this.renderOnDragLayout()}\n            </Host>\n        );\n    }\n\n    private renderOnDragLayout = () => {\n        if (this.hasFileToDrop) {\n            return (\n                <div class=\"has-file-to-drop\">\n                    <limel-icon class=\"icon\" name=\"upload_2\" />\n                    {this.renderText()}\n                    {this.renderHelperText()}\n                </div>\n            );\n        }\n    };\n\n    private renderText = () => {\n        if (!this.text) {\n            return;\n        }\n\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderHelperText = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return <span class=\"helper-text\">{this.helperText}</span>;\n    };\n\n    private handleDrop = (event: DragEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.hasFileToDrop = false;\n\n        if (this.disabled) {\n            return;\n        }\n\n        const files: File[] = Array.from(event.dataTransfer.files);\n        const fileInfos: FileInfo[] = files.map(createFileInfo);\n\n        const [acceptedFileInfos, rejectedFileInfos] = partition(\n            fileInfos,\n            (file) => isTypeAccepted(file, this.accept),\n        );\n\n        if (acceptedFileInfos.length > 0) {\n            this.filesSelected.emit(acceptedFileInfos);\n        }\n\n        if (rejectedFileInfos.length > 0) {\n            this.filesRejected.emit(rejectedFileInfos);\n        }\n    };\n\n    private handleDragOver = (event: DragEvent) => {\n        this.hasFileToDrop = true;\n        event.preventDefault();\n    };\n\n    private handleDragLeave = (event: DragEvent) => {\n        this.hasFileToDrop = false;\n        event.preventDefault();\n    };\n}\n"],"mappings":"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"}