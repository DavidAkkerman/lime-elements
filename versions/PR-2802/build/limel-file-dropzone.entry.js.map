{"version":3,"names":["createFileInfo","file","limeFile","id","crypto","randomUUID","filename","name","contentType","type","size","fileContent","icon","getFileIcon","title","getFileExtensionTitle","color","getFileColor","backgroundColor","getFileBackgroundColor","isTypeAccepted","accept","undefined","acceptList","split","map","raw","trim","some","acceptedType","endsWith","baseType","startsWith","fileType","fileDropzoneCss","FileDropzone","this","renderOnDragLayout","hasFileToDrop","h","class","onDropLayoutIcon","renderOnDragLayoutText","onDragLayoutText","length","handleDrop","event","stopPropagation","preventDefault","disabled","files","Array","from","dataTransfer","fileInfos","acceptedFileInfos","filter","rejectedFileInfos","filesSelected","emit","filesRejected","handleDragOver","handleDragLeave","render","Host","onDrop","onDragOver","onDragLeave"],"sources":["./src/util/files.ts","./src/components/file-dropzone/file-dropzone.scss?tag=limel-file-dropzone&encapsulation=shadow","./src/components/file-dropzone/file-dropzone.tsx"],"sourcesContent":["import { FileInfo } from '../global/shared-types/file.types';\nimport {\n    getFileBackgroundColor,\n    getFileColor,\n    getFileExtensionTitle,\n    getFileIcon,\n} from './file-metadata';\n\nexport function createFileInfo(file: File): FileInfo {\n    const limeFile: FileInfo = {\n        id: crypto.randomUUID(),\n        filename: file.name,\n        contentType: file.type,\n        size: file.size,\n        fileContent: file,\n    };\n    limeFile.icon = {\n        name: getFileIcon(limeFile),\n        title: getFileExtensionTitle(limeFile),\n        color: getFileColor(limeFile),\n        backgroundColor: getFileBackgroundColor(limeFile),\n    };\n\n    return limeFile;\n}\n\nexport function isTypeAccepted(file: FileInfo, accept?: string): boolean {\n    if (accept === undefined || accept === '*') {\n        return true;\n    }\n\n    const acceptList = accept.split(',').map((raw) => raw.trim());\n\n    return acceptList.some((acceptedType: string) => {\n        if (acceptedType === file.contentType) {\n            return true;\n        }\n\n        if (acceptedType.endsWith('/*')) {\n            const baseType = acceptedType.split('/')[0];\n\n            return file.contentType.startsWith(`${baseType}/`);\n        }\n\n        if (acceptedType.startsWith('.')) {\n            const fileType = acceptedType.split('.')[1];\n\n            return file.contentType.endsWith(`/${fileType}`);\n        }\n    });\n}\n",":host(limel-file-dropzone) {\n    position: relative;\n    display: grid;\n    position: relative;\n    height: 100%;\n    width: 100%;\n}\n\n.has-file-to-drop {\n    position: absolute;\n    top: 0;\n    left: 0;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n\n    border: 0.25rem dashed rgb(var(--color-gray-light));\n    border-radius: 1rem;\n    background-color: rgb(var(--color-gray-dark));\n\n    opacity: 0.9;\n    margin: 0.125rem;\n    isolation: isolate;\n    z-index: 1;\n\n    limel-icon.dropzone-icon {\n        height: clamp(2rem, 4vh, 6rem);\n        width: clamp(2rem, 4vh, 6rem);\n        color: rgb(var(--contrast-800));\n    }\n\n    .dropzone-text {\n        font-size: clamp(1rem, 2vh, 1.75rem);\n        padding-top: 1rem;\n        color: rgb(var(--contrast-800));\n    }\n}\n","import {\n    Component,\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo, isTypeAccepted } from '../../util/files';\n\n/**\n * This component enables you to seamlessly convert any region of the user interface into\n * a file dropzone area, just by wrapping it inside the `limel-file-dropzone`.\n *\n * The file dropzone can then be used to allow end-users to upload files\n * by dragging and dropping them into the specified area.\n *\n * After receiving the files, the component emits a `filesSelecgted` event. For unsupported\n * files (specified with the `accept` prop) a `filesRejected` event will be emitted.\n *\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-dropzone\n * @exampleComponent limel-example-file-dropzone-type-filtering\n * @private\n */\n@Component({\n    tag: 'limel-file-dropzone',\n    shadow: true,\n    styleUrl: 'file-dropzone.scss',\n})\nexport class FileDropzone {\n    /**\n     * Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n     *\n     * For media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\n     * Unique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\n     * A comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n     * `.png, .jpg, .jpeg`.\n     *\n     * @see [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\n     * details.\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable the file dropzone.\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Text to be displayed when the user is dragging a file over the dropzone.\n     */\n    @Prop()\n    public onDragLayoutText: string = '';\n\n    /**\n     * Icon to be displayed when the user is dragging a file over the dropzone.\n     */\n    @Prop()\n    public onDropLayoutIcon: string = 'upload_2';\n\n    /**\n     * Sets to true when there is a file to drop\n     */\n    @State()\n    private hasFileToDrop: boolean = false;\n\n    /**\n     * Emitted when files are selected\n     */\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    /**\n     * Emitted when files are selected but do not conform with the `accept` property specifications.\n     * This can happen when the file types or formats of the selected files are not among the ones allowed by the dropzone,\n     * as defined by the `accept` property.\n     *\n     * @see {@link accept} for details on how to specify acceptable file types.\n     */\n    @Event()\n    filesRejected: EventEmitter<FileInfo[]>;\n\n    public render() {\n        return (\n            <Host\n                onDrop={this.handleDrop}\n                onDragOver={this.handleDragOver}\n                onDragLeave={this.handleDragLeave}\n            >\n                <slot />\n                {this.renderOnDragLayout()}\n            </Host>\n        );\n    }\n\n    private renderOnDragLayout = () => {\n        if (this.hasFileToDrop) {\n            return (\n                <div class=\"has-file-to-drop\">\n                    <limel-icon\n                        class=\"dropzone-icon\"\n                        name={this.onDropLayoutIcon}\n                    ></limel-icon>\n                    {this.renderOnDragLayoutText()}\n                </div>\n            );\n        }\n    };\n\n    private renderOnDragLayoutText = () => {\n        if (this.onDragLayoutText.length === 0) {\n            return;\n        }\n\n        return <span class=\"dropzone-text\">{this.onDragLayoutText}</span>;\n    };\n\n    private handleDrop = (event: DragEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.hasFileToDrop = false;\n\n        if (this.disabled) {\n            return;\n        }\n\n        const files: File[] = Array.from(event.dataTransfer.files);\n        const fileInfos: FileInfo[] = files.map(createFileInfo);\n\n        const acceptedFileInfos: FileInfo[] = fileInfos.filter((file) =>\n            isTypeAccepted(file, this.accept),\n        );\n        const rejectedFileInfos: FileInfo[] = fileInfos.filter(\n            (file) => !isTypeAccepted(file, this.accept),\n        );\n\n        if (acceptedFileInfos.length > 0) {\n            this.filesSelected.emit(acceptedFileInfos);\n        }\n\n        if (rejectedFileInfos.length > 0) {\n            this.filesRejected.emit(rejectedFileInfos);\n        }\n    };\n\n    private handleDragOver = (event: DragEvent) => {\n        this.hasFileToDrop = true;\n        event.preventDefault();\n    };\n\n    private handleDragLeave = (event: DragEvent) => {\n        this.hasFileToDrop = false;\n        event.preventDefault();\n    };\n}\n"],"mappings":"gLAQgBA,EAAeC,GAC3B,MAAMC,EAAqB,CACvBC,GAAIC,OAAOC,aACXC,SAAUL,EAAKM,KACfC,YAAaP,EAAKQ,KAClBC,KAAMT,EAAKS,KACXC,YAAaV,GAEjBC,EAASU,KAAO,CACZL,KAAMM,EAAYX,GAClBY,MAAOC,EAAsBb,GAC7Bc,MAAOC,EAAaf,GACpBgB,gBAAiBC,EAAuBjB,IAG5C,OAAOA,CACX,C,SAEgBkB,EAAenB,EAAgBoB,GAC3C,GAAIA,IAAWC,WAAaD,IAAW,IAAK,CACxC,OAAO,I,CAGX,MAAME,EAAaF,EAAOG,MAAM,KAAKC,KAAKC,GAAQA,EAAIC,SAEtD,OAAOJ,EAAWK,MAAMC,IACpB,GAAIA,IAAiB5B,EAAKO,YAAa,CACnC,OAAO,I,CAGX,GAAIqB,EAAaC,SAAS,MAAO,CAC7B,MAAMC,EAAWF,EAAaL,MAAM,KAAK,GAEzC,OAAOvB,EAAKO,YAAYwB,WAAW,GAAGD,K,CAG1C,GAAIF,EAAaG,WAAW,KAAM,CAC9B,MAAMC,EAAWJ,EAAaL,MAAM,KAAK,GAEzC,OAAOvB,EAAKO,YAAYsB,SAAS,IAAIG,I,IAGjD,CClDA,MAAMC,EAAkB,ssB,MCkCXC,EAAY,M,mHAoEbC,KAAAC,mBAAqB,KACzB,GAAID,KAAKE,cAAe,CACpB,OACIC,EAAA,OAAKC,MAAM,oBACPD,EAAA,cACIC,MAAM,gBACNjC,KAAM6B,KAAKK,mBAEdL,KAAKM,yB,GAMdN,KAAAM,uBAAyB,KAC7B,GAAIN,KAAKO,iBAAiBC,SAAW,EAAG,CACpC,M,CAGJ,OAAOL,EAAA,QAAMC,MAAM,iBAAiBJ,KAAKO,iBAAwB,EAG7DP,KAAAS,WAAcC,IAClBA,EAAMC,kBACND,EAAME,iBACNZ,KAAKE,cAAgB,MAErB,GAAIF,KAAKa,SAAU,CACf,M,CAGJ,MAAMC,EAAgBC,MAAMC,KAAKN,EAAMO,aAAaH,OACpD,MAAMI,EAAwBJ,EAAMzB,IAAIzB,GAExC,MAAMuD,EAAgCD,EAAUE,QAAQvD,GACpDmB,EAAenB,EAAMmC,KAAKf,UAE9B,MAAMoC,EAAgCH,EAAUE,QAC3CvD,IAAUmB,EAAenB,EAAMmC,KAAKf,UAGzC,GAAIkC,EAAkBX,OAAS,EAAG,CAC9BR,KAAKsB,cAAcC,KAAKJ,E,CAG5B,GAAIE,EAAkBb,OAAS,EAAG,CAC9BR,KAAKwB,cAAcD,KAAKF,E,GAIxBrB,KAAAyB,eAAkBf,IACtBV,KAAKE,cAAgB,KACrBQ,EAAME,gBAAgB,EAGlBZ,KAAA0B,gBAAmBhB,IACvBV,KAAKE,cAAgB,MACrBQ,EAAME,gBAAgB,E,YAhHF,I,cAMG,M,sBAMO,G,sBAMA,W,mBAMD,K,CAkB1Be,SACH,OACIxB,EAACyB,EAAI,CACDC,OAAQ7B,KAAKS,WACbqB,WAAY9B,KAAKyB,eACjBM,YAAa/B,KAAK0B,iBAElBvB,EAAA,aACCH,KAAKC,qB"}