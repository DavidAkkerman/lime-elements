{"version":3,"names":["RadioButtonTemplate","props","h","class","disabled","type","id","checked","onChange","htmlFor","label","ListRenderer","constructor","this","defaultConfig","isOpen","badgeIcons","getIndexForWhichToApplyTabIndex","items","result","i","max","length","item","selected","undefined","renderListItem","index","role","renderSeparatorTitle","includes","config","renderVariantListItem","classNames","hasPrimaryComponent","attributes","applyTabIndexToItemAtIndex","tabindex","Object","assign","icon","renderIcon","getPrimaryComponent","renderText","twoLines","avatarList","renderDivider","renderActionMenu","actions","separatorTitle","_a","primaryComponent","name","isSimpleItem","text","secondaryText","style","iconColor","color","badge","size","iconSize","classes","openDirection","slot","itemTemplate","CheckboxTemplate","renderVariantListItemContent","hasIcons","render","some","selectableListTypes","selectable","commandKey","map","PrimaryComponent","listCss","ACTION_EVENT","listStrings","List","listRenderer","setup","setupList","setupListeners","element","shadowRoot","querySelector","mdcList","MDCList","hasTypeahead","unlisten","handleAction","multiple","listen","singleSelection","teardown","_b","destroy","event","handleSingleSelect","detail","handleMultiSelect","listItems","filter","isListItem","selectedItem","find","change","emit","selectedItems","listIndex","connectedCallback","disconnectedCallback","componentDidLoad","maxLinesSecondaryText","toFixed","html","Host","handleType","itemsChanged","selectedIndex","indexOf","findIndex","initializeListType","menuSurfaceCss","MenuSurface","menuElement","host","menuSurface","MDCMenuSurface","setAnchorCorner","Corner","TOP_START","document","addEventListener","handleDocumentClick","capture","handleKeyDown","window","handleResize","passive","removeEventListener","elementPath","path","open","isDescendant","target","allowClicksElement","clickedInAllowedElement","dismiss","preventClickEventPropagation","stopEvent","once","stopPropagation","preventDefault","isEscape","key","ESCAPE","keyCode","ESCAPE_KEY_CODE","isTab","TAB","TAB_KEY_CODE","classList"],"sources":["./src/components/list/radio-button/radio-button.template.tsx","./src/components/list/list-renderer.tsx","./src/components/list/list.scss?tag=limel-list&encapsulation=shadow","./src/components/list/list.tsx","./src/components/menu-surface/menu-surface.scss?tag=limel-menu-surface&encapsulation=shadow","./src/components/menu-surface/menu-surface.tsx"],"sourcesContent":["import { FunctionalComponent, h } from '@stencil/core';\n\ninterface RadioButtonTemplateProps {\n    disabled?: boolean;\n    id: string;\n    checked?: boolean;\n    onChange?: (event: Event) => void;\n    label?: string;\n}\n\nexport const RadioButtonTemplate: FunctionalComponent<\n    RadioButtonTemplateProps\n> = (props) => {\n    return (\n        <div class=\"mdc-form-field\">\n            <div\n                class={`\n                        mdc-radio\n                        ${props.disabled ? 'mdc-radio--disabled' : ''}\n                    `}\n            >\n                <input\n                    class=\"mdc-radio__native-control\"\n                    type=\"radio\"\n                    id={props.id}\n                    checked={props.checked}\n                    disabled={props.disabled}\n                    onChange={props.onChange}\n                />\n                <div class=\"mdc-radio__background\">\n                    <div class=\"mdc-radio__outer-circle\" />\n                    <div class=\"mdc-radio__inner-circle\" />\n                </div>\n            </div>\n            <label\n                class={`${props.disabled ? 'disabled' : ''}`}\n                htmlFor={props.id}\n            >\n                {props.label}\n            </label>\n        </div>\n    );\n};\n","import { ListItem, ListSeparator, MenuItem } from '@limetech/lime-elements';\nimport { h } from '@stencil/core';\nimport { CheckboxTemplate } from '../checkbox/checkbox.template';\nimport { ListRendererConfig } from './list-renderer-config';\nimport { RadioButtonTemplate } from './radio-button/radio-button.template';\n\nexport class ListRenderer {\n    private defaultConfig: ListRendererConfig = {\n        isOpen: true,\n        badgeIcons: false,\n    };\n\n    private config: ListRendererConfig;\n\n    private hasIcons: boolean;\n    private twoLines: boolean;\n    private avatarList: boolean;\n    private commandKey: boolean;\n\n    private applyTabIndexToItemAtIndex: number;\n\n    public render(\n        items: Array<ListItem | ListSeparator>,\n        config: ListRendererConfig = {}\n    ) {\n        items = items || [];\n        this.config = { ...this.defaultConfig, ...config };\n\n        this.twoLines = items.some((item) => {\n            return 'secondaryText' in item && !!item.secondaryText;\n        });\n\n        this.hasIcons = items.some((item) => {\n            return 'icon' in item && !!item.icon;\n        });\n\n        this.avatarList = this.config.badgeIcons && this.hasIcons;\n        const selectableListTypes = ['selectable', 'radio', 'checkbox'];\n\n        let role;\n        switch (this.config.type) {\n            case 'checkbox':\n                role = 'group';\n                break;\n            case 'radio':\n                role = 'radiogroup';\n                break;\n            default:\n                role = 'listbox';\n        }\n\n        this.applyTabIndexToItemAtIndex =\n            this.getIndexForWhichToApplyTabIndex(items);\n\n        const classNames = {\n            'mdc-deprecated-list': true,\n            'mdc-deprecated-list--two-line': this.twoLines,\n            selectable: selectableListTypes.includes(this.config.type),\n            'mdc-deprecated-list--avatar-list': this.avatarList,\n            'list--compact':\n                this.twoLines &&\n                this.commandKey &&\n                ['small', 'x-small'].includes(this.config.iconSize),\n        };\n\n        return (\n            <ul class={classNames} role={role} aria-orientation=\"vertical\">\n                {items.map(this.renderListItem)}\n            </ul>\n        );\n    }\n\n    /**\n     * Determine which ListItem should have the `tab-index` attribute set,\n     * and return the index at which that ListItem is located in `items`.\n     * Returns `undefined` if no item should have the attribute set.\n     * See https://github.com/material-components/material-components-web/tree/e66a43a75fef4f9179e24856649518e15e279a04/packages/mdc-list#accessibility\n     * @param {Array<ListItem | ListSeparator>} items the items of the list, including any `ListSeparator`:s\n     * @returns {number} the index as per the description\n     */\n    private getIndexForWhichToApplyTabIndex = (\n        items: Array<ListItem | ListSeparator>\n    ) => {\n        let result;\n        for (let i = 0, max = items.length; i < max; i += 1) {\n            if ('separator' in items[i]) {\n                // Ignore ListSeparator\n            } else {\n                const item = items[i] as ListItem<any>;\n                if (item.selected) {\n                    result = i;\n                    break;\n                }\n\n                if (result === undefined && !item.disabled) {\n                    result = i;\n                    // Do NOT break, as any later item with\n                    // `selected=true` should get the tab-index instead!\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Render a single list item\n     * @param {ListItem | ListSeparator} item the item to render\n     * @param {number} index the index the item had in the `items` array\n     * @returns {HTMLElement} the list item\n     */\n    private renderListItem = (\n        item: ListItem | ListSeparator,\n        index: number\n    ) => {\n        if ('separator' in item) {\n            return (\n                <li class=\"mdc-deprecated-list-divider\" role=\"separator\">\n                    {this.renderSeparatorTitle(item)}\n                    <div class=\"limel-list-divider-line\" />\n                </li>\n            );\n        }\n\n        if (['radio', 'checkbox'].includes(this.config.type)) {\n            return this.renderVariantListItem(this.config, item, index);\n        }\n\n        const classNames = {\n            'mdc-deprecated-list-item': true,\n            'mdc-deprecated-list-item--disabled': item.disabled,\n            'mdc-deprecated-list-item--selected': item.selected,\n            'has-primary-component': this.hasPrimaryComponent(item),\n        };\n\n        const attributes: { tabindex?: string } = {};\n        if (index === this.applyTabIndexToItemAtIndex) {\n            attributes.tabindex = '0';\n        }\n\n        return (\n            <li\n                class={classNames}\n                aria-disabled={item.disabled ? 'true' : 'false'}\n                aria-selected={item.selected ? 'true' : 'false'}\n                data-index={index}\n                {...attributes}\n            >\n                {item.icon ? this.renderIcon(this.config, item) : null}\n                {this.getPrimaryComponent(item)}\n                {this.renderText(item)}\n                {this.twoLines && this.avatarList ? this.renderDivider() : null}\n                {this.renderActionMenu(item.actions)}\n            </li>\n        );\n    };\n\n    private renderSeparatorTitle = (item: ListSeparator) => {\n        if ('separatorTitle' in item) {\n            return (\n                <h2 class=\"limel-list-divider-title\">{item.separatorTitle}</h2>\n            );\n        }\n    };\n\n    private getPrimaryComponent(item: ListItem): Element {\n        if (!this.hasPrimaryComponent(item)) {\n            return;\n        }\n\n        const PrimaryComponent = item.primaryComponent.name;\n        const props = item.primaryComponent.props;\n\n        return <PrimaryComponent {...props} />;\n    }\n\n    private hasPrimaryComponent = (item: ListItem) => {\n        return !!item?.primaryComponent?.name;\n    };\n\n    /**\n     * Render the text of the list item\n     * @param {ListItem} item the list item\n     * @returns {HTMLElement | string} the text for the list item\n     */\n    private renderText = (item: ListItem) => {\n        if (this.isSimpleItem(item)) {\n            return (\n                <span class=\"mdc-deprecated-list-item__text\">{item.text}</span>\n            );\n        }\n\n        return (\n            <div class=\"mdc-deprecated-list-item__text\">\n                <div class=\"mdc-deprecated-list-item__primary-command-text\">\n                    <div class=\"mdc-deprecated-list-item__primary-text\">\n                        {item.text}\n                    </div>\n                </div>\n                <div class=\"mdc-deprecated-list-item__secondary-text\">\n                    {item.secondaryText}\n                </div>\n            </div>\n        );\n    };\n\n    private isSimpleItem = (item: ListItem): boolean => {\n        return !('secondaryText' in item);\n    };\n\n    /**\n     * Render an icon for a list item\n     * @param {ListRendererConfig} config the config object, passed on from the `renderListItem` function\n     * @param {ListItem} item the list item\n     * @returns {HTMLElement} the icon element\n     */\n    private renderIcon = (config: ListRendererConfig, item: ListItem) => {\n        const style: any = {};\n        if (item.iconColor) {\n            if (config.badgeIcons) {\n                style['--icon-background-color'] = item.iconColor;\n            } else {\n                style.color = item.iconColor;\n            }\n        }\n\n        return (\n            <limel-icon\n                badge={config.badgeIcons}\n                class=\"mdc-deprecated-list-item__graphic\"\n                name={item.icon}\n                style={style}\n                size={config.iconSize}\n            />\n        );\n    };\n\n    private renderDivider = () => {\n        const classes = {\n            'mdc-deprecated-list-divider': true,\n            'mdc-deprecated-list-divider--inset': true,\n        };\n        if (this.config.iconSize) {\n            classes[this.config.iconSize] = true;\n        }\n\n        return <hr class={classes} />;\n    };\n\n    private renderActionMenu = (actions: Array<MenuItem | ListSeparator>) => {\n        if (!actions || actions.length === 0) {\n            return;\n        }\n\n        return (\n            <limel-menu\n                class=\"mdc-deprecated-list-item__meta\"\n                items={actions}\n                openDirection=\"left-start\"\n            >\n                <limel-icon-button\n                    class=\"action-menu-trigger\"\n                    slot=\"trigger\"\n                    icon=\"menu_2\"\n                />\n            </limel-menu>\n        );\n    };\n\n    private renderVariantListItem = (\n        config: ListRendererConfig,\n        item: ListItem,\n        index: number\n    ) => {\n        let itemTemplate;\n        if (config.type === 'radio') {\n            itemTemplate = (\n                <RadioButtonTemplate\n                    id={`c_${index}`}\n                    checked={item.selected}\n                    disabled={item.disabled}\n                />\n            );\n        } else if (config.type === 'checkbox') {\n            itemTemplate = (\n                <CheckboxTemplate\n                    id={`c_${index}`}\n                    checked={item.selected}\n                    disabled={item.disabled}\n                />\n            );\n        }\n\n        const classNames = {\n            'mdc-deprecated-list-item': true,\n            'mdc-deprecated-list-item--disabled': item.disabled,\n            'mdc-deprecated-list-item__text': !item.secondaryText,\n            'has-primary-component': this.hasPrimaryComponent(item),\n        };\n\n        const attributes: { tabindex?: string } = {};\n        if (index === this.applyTabIndexToItemAtIndex) {\n            attributes.tabindex = '0';\n        }\n\n        return (\n            <li\n                class={classNames}\n                role={config.type}\n                aria-checked={item.selected ? 'true' : 'false'}\n                aria-disabled={item.disabled ? 'true' : 'false'}\n                data-index={index}\n                {...attributes}\n            >\n                {this.renderVariantListItemContent(config, item, itemTemplate)}\n            </li>\n        );\n    };\n\n    private renderVariantListItemContent = (\n        config: ListRendererConfig,\n        item: ListItem,\n        itemTemplate: any\n    ) => {\n        if (this.hasIcons) {\n            return [\n                item.icon ? this.renderIcon(config, item) : null,\n                this.getPrimaryComponent(item),\n                this.renderText(item),\n                <div class=\"mdc-deprecated-list-item__meta\">\n                    {itemTemplate}\n                </div>,\n            ];\n        }\n\n        return [\n            <div class=\"mdc-deprecated-list-item__graphic\">{itemTemplate}</div>,\n            this.getPrimaryComponent(item),\n            this.renderText(item),\n        ];\n    };\n}\n","@use '../../style/functions';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n@use '../checkbox/checkbox.scss';\n\n@use '@material/list';\n\n$list-border-radius: 0.375rem; // 6px\n$list--has-interactive-items--mdc-list-item--hover: 1;\n$list-static-actions-list: 1;\n$list-mdc-list-item: 0;\n\n/**\n * @prop --icon-background-color: Color to use for icon background when `badgeIcons=true`.\n * @prop --icon-color: Color to use for icon. Defaults to grey when `badgeIcons=false`. Defaults to white when `badgeIcons=true`.\n * @prop --list-grid-max-width: Maximum width of a list that has `has-grid-layout` class. Defaults to `100%`.\n * @prop --list-grid-item-max-width: Maximum width of items in a list that has `has-grid-layout` class. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in a list that has `has-grid-layout` class. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between items in a list that has `has-grid-layout` class. Defaults to `0.75rem`.\n * @prop --list-background-color-of-odd-interactive-items: Background color of odd list items, when `has-striped-rows` class is applied to the component. Defaults to `--contrast-200`.\n * @prop --list-background-color-of-even-interactive-items:  Background color of even list items, when `has-striped-rows` class is applied to the component. Defaults to `transparent`.\n * @prop --list-margin: Space around the list. Defaults to `0.25rem`, which visualizes keyboard-focused items in a better way, as it adds some space for the outline effect;\n */\n\n:host(limel-list) {\n    display: block;\n    isolation: isolate;\n    @include checkbox.custom-checkbox-styles;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n@include list.deprecated-core-styles;\n\n.mdc-deprecated-list {\n    --mdc-theme-text-icon-on-background: var(\n        --icon-color,\n        rgb(var(--contrast-900))\n    );\n    margin: var(\n        --list-margin,\n        0.25rem\n    ); // added space to visualize keyboard-focused items\n    padding: 0;\n    border-radius: $list-border-radius;\n\n    .mdc-deprecated-list-divider {\n        border-bottom-color: transparent;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n        height: auto;\n        padding: 0 0.5rem;\n    }\n\n    .limel-list-divider-line {\n        background-color: rgb(var(--contrast-400));\n        height: 0.125rem;\n        border-radius: 1rem;\n        min-width: 1rem;\n        flex-grow: 1;\n    }\n\n    .limel-list-divider-title {\n        all: unset;\n        @include mixins.truncate-text;\n        color: rgb(var(--contrast-900));\n        font-size: 0.8125rem; // 13px\n    }\n\n    .mdc-deprecated-list-item {\n        transition: background-color 0.2s ease;\n        box-sizing: border-box;\n        z-index: $list-mdc-list-item; // in Chrome on Windows, menus flicker when they have a scroll bar and user hovers on them. We may be able to remove this in future versions of Chrome. Kia 2021-May-12\n\n        &:not(.mdc-deprecated-list-item--disabled) {\n            &:hover {\n                background-color: rgb(var(--contrast-300));\n                z-index: 1;\n            }\n        }\n\n        &.mdc-deprecated-list-item--disabled {\n            cursor: not-allowed;\n\n            limel-icon {\n                opacity: 0.38; // similar to `mdc-deprecated-list-item__text` when disabled\n            }\n        }\n\n        &:first-child {\n            border-top-left-radius: $list-border-radius;\n            border-top-right-radius: $list-border-radius;\n        }\n        &:last-child {\n            border-bottom-right-radius: $list-border-radius;\n            border-bottom-left-radius: $list-border-radius;\n        }\n    }\n\n    &.selectable\n        .mdc-deprecated-list-item:not(.mdc-deprecated-list-item--disabled) {\n        cursor: pointer;\n    }\n\n    .mdc-deprecated-list-item__meta {\n        // the action menu on the right side a list item\n        line-height: 100%;\n        margin-right: -0.5rem;\n    }\n\n    .mdc-deprecated-list-item__graphic {\n        margin-right: functions.pxToRem(8);\n    }\n\n    &.mdc-deprecated-list--avatar-list {\n        position: relative;\n\n        limel-icon.mdc-deprecated-list-item__graphic {\n            background-color: var(\n                --icon-background-color,\n                rgb(var(--contrast-900))\n            );\n            color: var(--icon-color, rgba(var(--color-white), 0.88));\n            margin-right: functions.pxToRem(12);\n            margin-left: functions.pxToRem(-4);\n        }\n\n        hr.mdc-deprecated-list-divider {\n            position: absolute;\n            bottom: 0;\n\n            &.mdc-deprecated-list-divider--inset {\n                --icon-width: #{functions.pxToRem(40)};\n                --icon-right-padding: #{functions.pxToRem(12)};\n                --list-right-padding: #{functions.pxToRem(12)};\n                right: 0;\n                width: calc(\n                    100% - var(--icon-width) - var(--icon-right-padding) -\n                        var(--list-right-padding)\n                );\n\n                &.x-small {\n                    --icon-width: #{functions.pxToRem(24)};\n                }\n\n                &.small {\n                    --icon-width: #{functions.pxToRem(32)};\n                }\n\n                &.medium {\n                    --icon-width: #{functions.pxToRem(40)};\n                }\n\n                &.large {\n                    --icon-width: #{functions.pxToRem(48)};\n                }\n            }\n        }\n\n        .mdc-deprecated-list-item:last-child hr.mdc-deprecated-list-divider {\n            display: none;\n        }\n    }\n\n    &.mdc-deprecated-list--two-line {\n        .mdc-deprecated-list-item__text {\n            padding-top: functions.pxToRem(8);\n            padding-bottom: functions.pxToRem(8);\n        }\n        .mdc-deprecated-list-item__primary-text {\n            margin-bottom: functions.pxToRem(4);\n        }\n    }\n\n    .mdc-deprecated-list-item__secondary-text,\n    .mdc-deprecated-list-item__primary-text,\n    .mdc-deprecated-list-item__command-text {\n        margin: 0;\n        &:before,\n        &:after {\n            display: none;\n        }\n    }\n\n    .mdc-deprecated-list-item__command-text {\n        color: rgb(var(--contrast-800));\n        margin-left: 0.7rem;\n    }\n\n    .mdc-deprecated-list-item__text {\n        align-self: center;\n        width: 100%;\n    }\n\n    .has-primary-component {\n        .mdc-deprecated-list-item__text {\n            margin-left: 0.5rem;\n        }\n    }\n    .mdc-deprecated-list-item__primary-command-text {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: baseline;\n    }\n\n    // Tweaks to display the icon correctly in Edge\n    limel-icon.mdc-deprecated-list-item__graphic {\n        display: block;\n    }\n}\n\n.mdc-deprecated-list:not(.mdc-deprecated-list--avatar-list) {\n    limel-icon.mdc-deprecated-list-item__graphic {\n        // Tweaks to make icon lists align nicely with badge-icon lists.\n        &[size='x-small'] {\n            margin-right: functions.pxToRem(4);\n        }\n        &[size='small'] {\n            margin-right: functions.pxToRem(8);\n        }\n        &[size='medium'] {\n            margin-right: functions.pxToRem(8);\n        }\n        &[size='large'] {\n            margin-right: functions.pxToRem(12);\n        }\n    }\n}\n\n.mdc-deprecated-list-item.mdc-deprecated-list-item--selected {\n    &:before {\n        background-color: var(--mdc-theme-primary);\n        opacity: 0.15;\n    }\n}\n\n:not(.mdc-deprecated-list--non-interactive) {\n    > {\n        :not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item {\n            @include mixins.visualize-keyboard-focus;\n\n            &:focus-visible {\n                border-radius: $list-border-radius;\n                z-index: $list--has-interactive-items--mdc-list-item--hover;\n            }\n        }\n    }\n}\n\n@import '../checkbox/checkbox.scss';\n\n@import './radio-button/radio-button.scss';\n\n@import './partial-styles/custom-styles.scss';\n@import './partial-styles/enable-multiline-text.scss';\n@import './partial-styles/_has-grid-layout.scss';\n@import './partial-styles/_static-actions.scss';\n","import {\n    IconSize,\n    ListItem,\n    ListSeparator,\n    ListType,\n} from '@limetech/lime-elements';\nimport { MDCList, MDCListActionEvent } from '@material/list';\nimport { strings as listStrings } from '@material/list/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { ListRenderer } from './list-renderer';\nimport { ListRendererConfig } from './list-renderer-config';\n\nconst { ACTION_EVENT } = listStrings;\n\n/**\n * @exampleComponent limel-example-list\n * @exampleComponent limel-example-list-secondary\n * @exampleComponent limel-example-list-separator\n * @exampleComponent limel-example-list-selectable\n * @exampleComponent limel-example-list-icons\n * @exampleComponent limel-example-list-badge-icons\n * @exampleComponent limel-example-list-checkbox\n * @exampleComponent limel-example-list-checkbox-icons\n * @exampleComponent limel-example-list-radio-button\n * @exampleComponent limel-example-list-radio-button-icons\n * @exampleComponent limel-example-list-action\n * @exampleComponent limel-example-list-striped\n * @exampleComponent limel-example-list-badge-icons-with-multiple-lines\n * @exampleComponent limel-example-list-grid\n * @exampleComponent limel-example-list-primary-component\n */\n@Component({\n    tag: 'limel-list',\n    shadow: true,\n    styleUrl: 'list.scss',\n})\nexport class List {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<ListItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * The type of the list, omit to get a regular list. Available types are:\n     * `selectable`: regular list with single selection.\n     * `radio`: radio button list with single selection.\n     * `checkbox`: checkbox list with multiple selection.\n     */\n    @Prop()\n    public type: ListType;\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n    // eslint-disable-next-line no-magic-numbers\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelListElement;\n\n    private config: ListRendererConfig;\n    private listRenderer = new ListRenderer();\n    private mdcList: MDCList;\n    private multiple: boolean;\n    private selectable: boolean;\n\n    /**\n     * Fired when a new value has been selected from the list.\n     * Only fired if `type` is set to `selectable`, `radio` or `checkbox`.\n     */\n    @Event()\n    private change: EventEmitter<ListItem | ListItem[]>;\n\n    /**\n     * Fired when an action has been selected from the action menu of a list item\n     */\n    @Event()\n    protected select: EventEmitter<ListItem | ListItem[]>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            type: this.type,\n            iconSize: this.iconSize,\n        };\n        let maxLinesSecondaryText = +this.maxLinesSecondaryText?.toFixed();\n        if (this.maxLinesSecondaryText < 1) {\n            maxLinesSecondaryText = 1;\n        }\n\n        const html = this.listRenderer.render(this.items, this.config);\n\n        return (\n            <Host\n                style={{\n                    '--maxLinesSecondaryText': `${maxLinesSecondaryText}`,\n                }}\n            >\n                {html}\n            </Host>\n        );\n    }\n\n    @Watch('type')\n    protected handleType() {\n        this.setupListeners();\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        if (!this.mdcList) {\n            return;\n        }\n\n        const listItems = this.items.filter(this.isListItem);\n\n        if (this.multiple) {\n            this.mdcList.selectedIndex = listItems\n                .filter((item: ListItem) => item.selected)\n                .map((item: ListItem) => listItems.indexOf(item));\n        } else {\n            const selectedIndex = listItems.findIndex(\n                (item: ListItem) => item.selected\n            );\n\n            if (selectedIndex === -1) {\n                this.mdcList.initializeListType();\n            } else {\n                this.mdcList.selectedIndex = selectedIndex;\n            }\n        }\n    }\n\n    private setup = () => {\n        this.setupList();\n\n        this.setupListeners();\n    };\n\n    private setupList = () => {\n        const element = this.element.shadowRoot.querySelector(\n            '.mdc-deprecated-list'\n        );\n        if (!element) {\n            return;\n        }\n\n        this.mdcList = new MDCList(element);\n        this.mdcList.hasTypeahead = true;\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcList) {\n            return;\n        }\n\n        this.mdcList.unlisten(ACTION_EVENT, this.handleAction);\n\n        this.selectable = ['selectable', 'radio', 'checkbox'].includes(\n            this.type\n        );\n        this.multiple = this.type === 'checkbox';\n\n        if (!this.selectable) {\n            return;\n        }\n\n        this.mdcList.listen(ACTION_EVENT, this.handleAction);\n        this.mdcList.singleSelection = !this.multiple;\n    };\n\n    private teardown = () => {\n        this.mdcList?.unlisten(ACTION_EVENT, this.handleAction);\n        this.mdcList?.destroy();\n    };\n\n    private handleAction = (event: MDCListActionEvent) => {\n        if (!this.multiple) {\n            this.handleSingleSelect(event.detail.index);\n\n            return;\n        }\n\n        this.handleMultiSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: ListItem = listItems.find((item: ListItem) => {\n            return !!item.selected;\n        });\n\n        if (selectedItem) {\n            this.change.emit({ ...selectedItem, selected: false });\n        }\n\n        if (listItems[index] !== selectedItem) {\n            this.change.emit({ ...listItems[index], selected: true });\n        }\n    };\n\n    private handleMultiSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItems: ListItem[] = listItems\n            .filter((item: ListItem, listIndex: number) => {\n                if (listIndex === index) {\n                    // This is the item that was selected or deselected,\n                    // so we negate its previous selection status.\n                    return !item.selected;\n                }\n\n                // This is an item that didn't change, so we keep its selection status.\n                return item.selected;\n            })\n            .map((item: ListItem) => {\n                return { ...item, selected: true };\n            });\n\n        this.change.emit(selectedItems);\n    };\n\n    private isListItem = (item: ListItem): boolean => {\n        return !('separator' in item);\n    };\n}\n","@use '@material/menu-surface';\n@use '@material/elevation';\n@use '@material/menu';\n\n:host(limel-menu-surface) {\n    display: block;\n    max-height: inherit;\n}\n\n@include menu-surface.core-styles;\n@include menu.core-styles;\n\n.mdc-menu-surface {\n    max-height: inherit;\n    position: relative;\n    --mdc-menu-max-width: var(\n        --menu-surface-width,\n        min(calc(100vw - 2rem), 20rem)\n    );\n    background-color: var(--lime-elevated-surface-background-color);\n}\n\n:host(limel-menu-surface.has-grid-layout) {\n    .mdc-menu-surface {\n        width: var(--menu-surface-width, min(calc(100vw - 2rem), 40rem));\n        max-width: unset;\n    }\n}\n","import { Corner, MDCMenuSurface } from '@material/menu-surface';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { isDescendant } from '../../util/dom';\nimport {\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\n\n/**\n * @slot - Content to put inside the surface\n * @private\n */\n@Component({\n    tag: 'limel-menu-surface',\n    shadow: true,\n    styleUrl: 'menu-surface.scss',\n})\nexport class MenuSurface {\n    /**\n     * True if the menu surface is open, false otherwise\n     */\n    @Prop()\n    public open = false;\n\n    /**\n     * Clicks in this element should not be prevented when the menu surface is open\n     */\n    @Prop()\n    public allowClicksElement: HTMLElement;\n\n    /**\n     * Emitted when the menu surface is dismissed and should be closed\n     */\n    @Event()\n    public dismiss: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelMenuSurfaceElement;\n\n    private menuSurface: MDCMenuSurface;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public render() {\n        const classList = {\n            'mdc-menu': true,\n            'mdc-menu-surface': true,\n            'mdc-menu-surface--open': this.open,\n            'mdc-elevation-transition': true,\n            'mdc-elevation--z4': true,\n        };\n\n        return (\n            <div class={classList} tabindex=\"-1\">\n                <slot />\n            </div>\n        );\n    }\n\n    private setup = () => {\n        const menuElement: HTMLElement =\n            this.host.shadowRoot.querySelector('.mdc-menu-surface');\n        if (!menuElement) {\n            return;\n        }\n\n        this.menuSurface = new MDCMenuSurface(menuElement);\n        this.menuSurface.setAnchorCorner(Corner.TOP_START);\n\n        document.addEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('resize', this.handleResize, {\n            passive: true,\n        });\n    };\n\n    private teardown = () => {\n        this.menuSurface?.destroy();\n        document.removeEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('resize', this.handleResize);\n    };\n\n    private handleDocumentClick = (event) => {\n        const elementPath = event.path || [];\n\n        if (!this.open) {\n            return;\n        }\n\n        if (isDescendant(event.target, this.host)) {\n            return;\n        }\n\n        if (this.allowClicksElement) {\n            const clickedInAllowedElement = elementPath.includes(\n                this.allowClicksElement\n            );\n\n            if (clickedInAllowedElement) {\n                return;\n            }\n        }\n\n        this.dismiss.emit();\n        this.preventClickEventPropagation();\n    };\n\n    private handleResize = () => {\n        if (this.open) {\n            this.dismiss.emit();\n        }\n    };\n\n    private preventClickEventPropagation = () => {\n        // When the menu surface is open, we want to stop the `click` event from propagating\n        // when clicking outside the surface itself. This is to prevent any dialog that might\n        // be open from closing, etc. However, when dragging a scrollbar no `click` event is emitted,\n        // only mousedown and mouseup. So we listen for `mousedown` and attach a one-time listener\n        // for `click`, so we can capture and \"kill\" it.\n        document.addEventListener('click', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // We also capture and \"kill\" the next `mouseup` event.\n        document.addEventListener('mouseup', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // If the user dragged the scrollbar, no `click` event happens. So when we get the\n        // `mouseup` event, remove the handler for `click` if it's still there.\n        // Otherwise, we would catch the next click even though the menu is no longer open.\n        document.addEventListener(\n            'mouseup',\n            () => {\n                document.removeEventListener('click', this.stopEvent, {\n                    capture: true,\n                });\n            },\n            {\n                once: true,\n            }\n        );\n    };\n\n    private stopEvent = (event) => {\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        const isEscape =\n            event.key === ESCAPE || event.keyCode === ESCAPE_KEY_CODE;\n        const isTab = event.key === TAB || event.keyCode === TAB_KEY_CODE;\n\n        if (this.open && (isEscape || isTab)) {\n            event.stopPropagation();\n            this.dismiss.emit();\n        }\n    };\n}\n"],"mappings":"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"}