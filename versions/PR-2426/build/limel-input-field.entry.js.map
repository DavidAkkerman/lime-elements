{"version":3,"names":["inputFieldCss","InputField","constructor","hostRef","this","completionsList","initialize","element","limelInputField","shadowRoot","querySelector","mdcTextField","MDCTextField","completions","map","item","text","window","addEventListener","layout","passive","setFocus","focus","getContainerClassList","classList","label","isInvalid","disabled","readonly","required","value","hasPrefix","hasSuffix","type","helperText","maxlength","leadingIcon","getTrailingIcon","renderInput","properties","h","Object","assign","pattern","onWheel","handleWheel","onKeyDown","placeholder","renderTextarea","class","_a","getAdditionalProps","props","step","Number","isInteger","min","max","minlength","onFocus","isFocused","showCompletions","onBlur","isModified","renderHelperLine","length","hasHelperText","helperTextId","maxLength","invalid","renderEmptyValueForReadonly","undefined","renderSuffix","suffix","renderPrefix","prefix","getInputElement","checkValidity","elementName","renderLabel","labelClassList","id","labelId","renderLeadingIcon","name","renderTrailingLinkOrButton","html","trailingIcon","hasLink","push","renderLinkIcon","getLink","renderTrailingIcon","showLink","includes","href","getHref","target","getTarget","linkProps","icon","tabindex","role","tabIndex","onKeyPress","handleIconKeyPress","onClick","handleIconClick","renderFormattedNumber","renderValue","formatNumber","Intl","NumberFormat","navigator","language","format","event","isForwardTab","key","TAB","keyCode","TAB_KEY_CODE","altKey","metaKey","shiftKey","isUp","ARROW_UP","ARROW_UP_KEY_CODE","isDown","ARROW_DOWN","ARROW_DOWN_KEY_CODE","list","document","portalId","preventDefault","listElement","handleCompletionChange","stopPropagation","detail","changeEmitter","renderAutocompleteList","renderDropdown","renderPortal","content","dropdownZIndex","getComputedStyle","getPropertyValue","visible","containerId","inheritParentWidth","containerStyle","open","allowClicksElement","style","display","onDismiss","handleCloseMenu","renderListResult","filteredCompletions","filterCompletions","onChange","handleKeyDownInDropdown","items","keyFound","ESCAPE","ENTER","keyCodeFound","ESCAPE_KEY_CODE","ENTER_KEY_CODE","filter","completion","toLowerCase","indexOf","handleChange","data","change","emit","action","isEnter","isSpace","SPACE","SPACE_KEY_CODE","debounceTimeout","debounce","createRandomString","connectedCallback","componentDidLoad","disconnectedCallback","destroy","removeEventListener","componentDidUpdate","valid","render","onInput","valueWatcher","newValue"],"sources":["./src/components/input-field/input-field.scss?tag=limel-input-field&encapsulation=shadow","./src/components/input-field/input-field.tsx"],"sourcesContent":["@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/textfield';\n@use '@material/textfield/icon';\n@use '@material/notched-outline/mdc-notched-outline';\n@use '@material/floating-label';\n@use '@material/floating-label/mdc-floating-label';\n@use '@material/ripple';\n@use '@material/list';\n@use '@material/elevation';\n@use '@material/menu-surface';\n\n/**\n * @prop --textarea-height: Height of the field when type is set to `textarea`\n */\n\n:host {\n    position: relative;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([type='textarea']) {\n    height: var(--textarea-height, 100%);\n\n    .mdc-text-field.mdc-text-field--textarea {\n        height: var(--textarea-height, 100%);\n\n        .mdc-text-field__input {\n            margin-top: functions.pxToRem(8);\n            margin-bottom: 0;\n        }\n\n        &.has-helper-line {\n            // TODO: remove this when helper-line is displayed in portal\n            --heightOfHelperText: 0.9375rem;\n            height: calc(\n                var(--textarea-height, 100%) - var(--heightOfHelperText)\n            );\n        }\n    }\n}\n\n@include textfield.core-styles;\n@include icon.icon-core-styles;\n\n@include shared_input-select-picker.outlined-style-overrides;\n@include shared_input-select-picker.readonly-overrides;\n@include shared_input-select-picker.cropped-label-hack;\n@include shared_input-select-picker.disabled-overrides;\n@include shared_input-select-picker.leading-icon;\n@include shared_input-select-picker.trailing-icon;\n@include shared_input-select-picker.floating-label-overrides;\n@include shared_input-select-picker.helper-text-color;\n@include shared_input-select-picker.lime-empty-value-for-readonly;\n@include shared_input-select-picker.lime-looks-like-input-value;\n\n.mdc-text-field--with-trailing-icon {\n    .mdc-text-field__icon--trailing {\n        margin-right: functions.pxToRem(8);\n    }\n}\n\n.lime-text-field--empty {\n    .mdc-text-field__icon--trailing {\n        @include shared_input-select-picker.looks-disabled;\n        box-shadow: none !important;\n    }\n}\n\n.mdc-text-field {\n    width: 100%;\n\n    &:not(.mdc-text-field--disabled) {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-900));\n        }\n    }\n    &.mdc-text-field--disabled {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-700));\n        }\n    }\n}\n\n.lime-formatted-input {\n    display: none;\n    width: calc(100% - #{functions.pxToRem(20)});\n    z-index: z-index.$input-field--formatted-value;\n\n    pointer-events: none;\n\n    :not(.mdc-text-field--focused):not(.mdc-text-field--invalid) & {\n        display: block;\n    }\n\n    + .mdc-text-field__input {\n        z-index: z-index.$input-field--input-with-formatted-value;\n    }\n}\n\n:not(.mdc-text-field--focused):not(.mdc-text-field--invalid) {\n    + limel-helper-line {\n        // TODO: remove when helper-line is displayed in portal\n        opacity: 0;\n    }\n\n    .mdc-text-field__input[type='number'] {\n        color: transparent;\n        -webkit-text-fill-color: transparent;\n    }\n\n    &.lime-text-field--readonly {\n        .mdc-text-field__input[type='number'] {\n            visibility: hidden;\n            // Not having `visibility: hidden;` makes the unformatted\n            // value selectable; which is not so nice when users\n            // click drag to select content on the screen.\n            // The reason to have it only on `readonly` mode is\n            // 1. This is the use case where it makes most sense\n            // 2. We don't want to repeat the same thing in the\n            // accessibility tree, and make it readable for assistive\n            // technologies.\n            // 3. When not readonly, clicking on the `<input />`\n            // element sets the focus and activates the edit mode.\n            // So we cannot always have it `hidden` on.\n            // which is why we have instead\n            // `color: transparent` a few lines before this.\n        }\n    }\n}\n\n.autocomplete-list-container {\n    position: relative;\n}\n\n.autocomplete-list {\n    background-color: var(--lime-elevated-surface-background-color);\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    max-height: functions.pxToRem(200);\n    overflow-y: auto;\n}\n\n.mdc-deprecated-list-item {\n    cursor: pointer;\n}\n\ninput.mdc-text-field__input {\n    @include shared_input-select-picker.input-field-placeholder;\n\n    &::-webkit-search-cancel-button {\n        @include mixins.clear-all-button;\n\n        -webkit-appearance: none;\n\n        position: absolute;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        margin: auto;\n\n        &:active {\n            transform: none; //Makes the \"clear-all button\" work\n        }\n        .mdc-text-field--label-floating & {\n            opacity: 1;\n        }\n    }\n}\n\n@import './partial-styles/trailing-icon.scss';\n@import './partial-styles/readonly';\n","import { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { debounce } from 'lodash-es';\nimport {\n    ARROW_DOWN,\n    ARROW_DOWN_KEY_CODE,\n    ARROW_UP,\n    ARROW_UP_KEY_CODE,\n    ENTER,\n    ENTER_KEY_CODE,\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    SPACE,\n    SPACE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\nimport { InputType } from './input-field.types';\nimport { LimelListCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { getHref, getTarget } from '../../util/link-helper';\nimport { JSXBase } from '@stencil/core/internal';\nimport { createRandomString } from '../../util/random-string';\n\ninterface LinkProperties {\n    href: string;\n    target?: string;\n}\n\n/**\n * @exampleComponent limel-example-input-field-text\n * @exampleComponent limel-example-input-field-placeholder\n * @exampleComponent limel-example-input-field-text-multiple\n * @exampleComponent limel-example-input-field-number\n * @exampleComponent limel-example-input-field-autocomplete\n * @exampleComponent limel-example-input-field-icon-leading\n * @exampleComponent limel-example-input-field-icon-trailing\n * @exampleComponent limel-example-input-field-icon-both\n * @exampleComponent limel-example-input-field-showlink\n * @exampleComponent limel-example-input-field-error-icon\n * @exampleComponent limel-example-input-field-textarea\n * @exampleComponent limel-example-input-field-suffix\n * @exampleComponent limel-example-input-field-prefix\n * @exampleComponent limel-example-input-field-search\n * @exampleComponent limel-example-input-field-pattern\n * @exampleComponent limel-example-input-field-focus\n */\n@Component({\n    tag: 'limel-input-field',\n    shadow: true,\n    styleUrl: 'input-field.scss',\n})\nexport class InputField {\n    /**\n     * Set to `true` to disable the field.\n     * Use `disabled` to indicate that the field can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to make the field read-only.\n     * Use `readonly` when the field is only there to present the data it holds,\n     * and will not become possible for the current user to edit.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * The input label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The placeholder text shown inside the input field, when the field is focused and empty.\n     */\n    @Prop({ reflect: true })\n    public placeholder: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * A short piece of text to display before the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public prefix: string;\n\n    /**\n     * A short piece of text to display after the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public suffix: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * The value of the field.\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * Trailing icon to show to the far right in the field.\n     */\n    @Prop({ reflect: true })\n    public trailingIcon: string;\n\n    /**\n     * Leading icon to show to the far left in the field.\n     */\n    @Prop({ reflect: true })\n    public leadingIcon: string;\n\n    /**\n     * Regular expression that the current value of the input field must match.\n     * No forward slashes should be specified around the pattern.\n     * Only used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n     * `password`, or `search`.\n     */\n    @Prop({ reflect: true })\n    public pattern: string;\n\n    /**\n     * Type of input.\n     *\n     * Note** regarding type `url`: `limel-input` uses the native validation\n     * built into the browser for many types of input fields. The native\n     * validation for `url` is very strict, and does not allow relative urls,\n     * nor any other formats that are not a \"fully qualified\" url. To allow\n     * such urls, use the type `urlAsText` instead. `urlAsText` works exactly\n     * like `text` in all regards, except that it enables use of the `showLink`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public type: InputType = 'text';\n\n    /**\n     * Set to `true` to format the current value of the input field only\n     * if the field is of type number.\n     * The number format is determined by the current language of the browser.\n     */\n    @Prop({ reflect: true })\n    public formatNumber = true;\n\n    /**\n     * Incremental values that are valid if the field type is `number`.\n     */\n    @Prop({ reflect: true })\n    public step: number | 'any' = 'any';\n\n    /**\n     * Maximum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public max: number;\n\n    /**\n     * Minimum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public min: number;\n\n    /**\n     * Maximum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public maxlength: number;\n\n    /**\n     * Minimum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public minlength: number;\n\n    /**\n     * list of suggestions `value` can autocomplete to.\n     */\n    @Prop()\n    public completions: string[] = [];\n\n    /**\n     * For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n     * `true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\n     * respectively. The default icon can be overridden using the `trailingIcon`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public showLink = false;\n\n    /**\n     * Emitted when the input value is changed.\n     */\n    @Event()\n    private change: EventEmitter<string>;\n\n    /**\n     * Emitted when `trailingIcon` or `leadingIcon` is set\n     * and the icon is interacted with.\n     */\n    @Event()\n    private action: EventEmitter<void>;\n\n    @Element()\n    private limelInputField: HTMLLimelInputFieldElement;\n\n    @State()\n    private isFocused: boolean = false;\n\n    @State()\n    private isModified: boolean = false;\n\n    @State()\n    public showCompletions: boolean = false;\n\n    private mdcTextField: MDCTextField;\n    private completionsList: ListItem[] = [];\n    private portalId: string;\n    private helperTextId: string;\n    private labelId: string;\n\n    constructor() {\n        const debounceTimeout = 300;\n        this.changeEmitter = debounce(this.changeEmitter, debounceTimeout);\n\n        this.portalId = createRandomString();\n        this.helperTextId = createRandomString();\n        this.labelId = createRandomString();\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n\n        window.removeEventListener('resize', this.layout);\n        this.limelInputField.removeEventListener('focus', this.setFocus);\n    }\n\n    public componentDidUpdate() {\n        if (this.invalid) {\n            this.mdcTextField.valid = false;\n        }\n    }\n\n    public render() {\n        const properties = this.getAdditionalProps();\n        properties['aria-labelledby'] = this.labelId;\n        properties.class = 'mdc-text-field__input';\n        properties.onInput = this.handleChange;\n        properties.onFocus = this.onFocus;\n        properties.onBlur = this.onBlur;\n        properties.required = this.required;\n        properties.readonly = this.readonly;\n        properties.disabled = this.disabled || this.readonly;\n\n        if (this.hasHelperText()) {\n            properties['aria-controls'] = this.helperTextId;\n            properties['aria-describedby'] = this.helperTextId;\n        }\n\n        return [\n            <label class={this.getContainerClassList()}>\n                <span class=\"mdc-notched-outline\" tabindex=\"-1\">\n                    <span class=\"mdc-notched-outline__leading\"></span>\n                    {this.renderLabel()}\n                    <span class=\"mdc-notched-outline__trailing\"></span>\n                </span>\n                {this.renderLeadingIcon()}\n                {this.renderEmptyValueForReadonly()}\n                {this.renderPrefix()}\n                {this.renderFormattedNumber()}\n                {this.renderInput(properties)}\n                {this.renderSuffix()}\n                {this.renderTextarea(properties)}\n                {this.renderTrailingLinkOrButton()}\n            </label>,\n            this.renderHelperLine(),\n            this.renderAutocompleteList(),\n        ];\n    }\n\n    @Watch('value')\n    protected valueWatcher(newValue: string) {\n        if (!this.mdcTextField) {\n            return;\n        }\n\n        if (newValue !== this.mdcTextField.value) {\n            this.mdcTextField.value = newValue || '';\n        }\n    }\n\n    private initialize = () => {\n        const element =\n            this.limelInputField.shadowRoot.querySelector('.mdc-text-field');\n        if (!element) {\n            return;\n        }\n\n        this.mdcTextField = new MDCTextField(element);\n\n        this.completionsList = [...this.completions].map((item) => {\n            return { text: item };\n        });\n\n        window.addEventListener('resize', this.layout, { passive: true });\n        this.limelInputField.addEventListener('focus', this.setFocus);\n    };\n\n    private setFocus = () => {\n        this.mdcTextField.focus();\n    };\n\n    private getContainerClassList = () => {\n        const classList = {\n            'mdc-text-field': true,\n            'mdc-text-field--no-label': !this.label,\n            'mdc-text-field--outlined': true,\n            'mdc-text-field--invalid': this.isInvalid(),\n            'mdc-text-field--disabled': this.disabled || this.readonly,\n            'lime-text-field--readonly': this.readonly,\n            'mdc-text-field--required': this.required,\n            'lime-text-field--empty': !this.value,\n            'lime-has-prefix': this.hasPrefix(),\n            'lime-has-suffix': this.hasSuffix(),\n        };\n\n        if (this.type === 'textarea') {\n            classList['mdc-text-field--textarea'] = true;\n            classList['has-helper-line'] =\n                !!this.helperText || !!this.maxlength;\n        } else {\n            classList['mdc-text-field--with-leading-icon'] = !!this.leadingIcon;\n            classList['mdc-text-field--with-trailing-icon'] =\n                !!this.getTrailingIcon();\n        }\n\n        return classList;\n    };\n\n    private renderInput = (\n        properties: JSXBase.InputHTMLAttributes<HTMLInputElement>\n    ) => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const type = this.type === 'urlAsText' ? 'text' : this.type;\n\n        return (\n            <input\n                {...properties}\n                type={type}\n                pattern={this.pattern}\n                onWheel={this.handleWheel}\n                onKeyDown={this.onKeyDown}\n                value={this.value}\n                placeholder={this.placeholder}\n            />\n        );\n    };\n\n    private renderTextarea = (\n        properties: JSXBase.TextareaHTMLAttributes<HTMLTextAreaElement>\n    ) => {\n        if (this.type !== 'textarea') {\n            return;\n        }\n\n        return (\n            <span class=\"mdc-text-field__resizer\">\n                <textarea {...properties} placeholder={this.placeholder}>\n                    {this.value}\n                </textarea>\n            </span>\n        );\n    };\n\n    private layout = () => {\n        this.mdcTextField?.layout();\n    };\n\n    private getAdditionalProps = () => {\n        const props: any = {};\n\n        if (this.type === 'number') {\n            props.step = this.step;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.min)) {\n            props.min = this.min;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.max)) {\n            props.max = this.max;\n        }\n\n        if (this.minlength) {\n            props.minlength = this.minlength;\n        }\n\n        if (this.maxlength) {\n            props.maxlength = this.maxlength;\n        }\n\n        return props;\n    };\n\n    private onFocus = () => {\n        this.isFocused = true;\n        this.showCompletions = true;\n    };\n\n    private onBlur = () => {\n        this.isFocused = false;\n        this.isModified = true;\n    };\n\n    private renderHelperLine = () => {\n        const text: string = this.value || '';\n        const length = text.length;\n\n        if (!this.maxlength && !this.hasHelperText()) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                helperTextId={this.helperTextId}\n                helperText={this.helperText}\n                length={length}\n                maxLength={this.maxlength}\n                invalid={this.isInvalid()}\n            />\n        );\n    };\n\n    private renderEmptyValueForReadonly = () => {\n        if (this.readonly && !this.value) {\n            return (\n                <span class=\"lime-empty-value-for-readonly lime-looks-like-input-value\">\n                    –\n                </span>\n            );\n        }\n    };\n\n    private hasHelperText = () => {\n        return this.helperText !== null && this.helperText !== undefined;\n    };\n\n    private renderSuffix = () => {\n        if (!this.hasSuffix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--suffix': true,\n        };\n\n        return <span class={classList}>{this.suffix}</span>;\n    };\n\n    private hasSuffix = () => {\n        return this.suffix !== null && this.suffix !== undefined;\n    };\n\n    private renderPrefix = () => {\n        if (!this.hasPrefix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--prefix': true,\n        };\n\n        return <span class={classList}>{this.prefix}</span>;\n    };\n\n    private hasPrefix = () => {\n        return this.prefix !== null && this.prefix !== undefined;\n    };\n\n    private isInvalid = () => {\n        if (this.readonly) {\n            // A readonly field can never be invalid.\n            return false;\n        }\n\n        if (this.invalid) {\n            // `this.invalid` is set by the consumer. If the consumer explicitly\n            // told us to consider the field invalid, we consider it invalid\n            // regardless of what our internal validation thinks, and regardless\n            // of whether the field has been modified.\n            return true;\n        }\n\n        if (!this.isModified) {\n            return false;\n        }\n\n        const element = this.getInputElement();\n\n        return !(element && element.checkValidity());\n    };\n\n    private getInputElement = (): HTMLInputElement | HTMLTextAreaElement => {\n        let elementName = 'input';\n        if (this.type === 'textarea') {\n            elementName = 'textarea';\n        }\n\n        return this.limelInputField.shadowRoot.querySelector(elementName);\n    };\n\n    private renderLabel = () => {\n        const labelClassList = {\n            'mdc-floating-label': true,\n            'mdc-floating-label--float-above':\n                !!this.value || this.isFocused || this.readonly,\n        };\n\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <span class=\"mdc-notched-outline__notch\">\n                <span class={labelClassList} id={this.labelId}>\n                    {this.label}\n                </span>\n            </span>\n        );\n    };\n\n    private renderLeadingIcon = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        if (this.leadingIcon) {\n            return (\n                <i class=\"material-icons mdc-text-field__icon mdc-text-field__icon--leading\">\n                    <limel-icon name={this.leadingIcon} />\n                </i>\n            );\n        }\n    };\n\n    private renderTrailingLinkOrButton = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const html = [];\n\n        const trailingIcon = this.getTrailingIcon();\n\n        if (!this.isInvalid() && this.hasLink()) {\n            html.push(this.renderLinkIcon(this.getLink(), trailingIcon));\n        } else if (trailingIcon) {\n            html.push(this.renderTrailingIcon(trailingIcon));\n        }\n\n        return html;\n    };\n\n    private hasLink = () => {\n        return (\n            this.showLink &&\n            ['email', 'tel', 'url', 'urlAsText'].includes(this.type)\n        );\n    };\n\n    private getLink = () => {\n        const props: LinkProperties = { href: '' };\n        switch (this.type) {\n            case 'email':\n                props.href = `mailto:${this.value}`;\n                break;\n            case 'tel':\n                props.href = `tel:${this.value}`;\n                break;\n            default:\n                props.href = getHref(this.value);\n                props.target = getTarget(this.value);\n        }\n\n        return props;\n    };\n\n    private renderLinkIcon = (linkProps: LinkProperties, icon: string) => {\n        // If the trailing icon uses the class `mdc-text-field__icon--trailing`,\n        // MDC attaches a click handler to it, which apparently runs\n        // `preventDefault()` on the event. For links, we don't want that,\n        // so instead of `mdc-text-field__icon--trailing`, we use our own class\n        // `lime-trailing-icon-for-link`, which uses all the same styling. /Ads\n        return (\n            <a\n                {...linkProps}\n                class=\"material-icons mdc-text-field__icon lime-trailing-icon-for-link\"\n                tabindex={this.disabled || !this.value ? '-1' : '0'}\n                role=\"button\"\n            >\n                <limel-icon name={icon} />\n            </a>\n        );\n    };\n\n    private renderTrailingIcon = (icon: string) => {\n        const props: any = {\n            tabIndex: this.isInvalid() ? '-1' : '0',\n        };\n        if (!this.isInvalid()) {\n            props.onKeyPress = this.handleIconKeyPress;\n            props.onClick = this.handleIconClick;\n            props.role = 'button';\n        }\n\n        return (\n            <i\n                class=\"material-icons mdc-text-field__icon mdc-text-field__icon--trailing\"\n                {...props}\n            >\n                <limel-icon name={icon} />\n            </i>\n        );\n    };\n\n    private getTrailingIcon = () => {\n        if (this.isInvalid()) {\n            return 'high_importance';\n        }\n\n        if (this.trailingIcon) {\n            return this.trailingIcon;\n        }\n\n        if (this.showLink && this.type === 'email') {\n            return 'filled_message';\n        }\n\n        if (this.showLink && this.type === 'tel') {\n            return 'phone';\n        }\n\n        if (\n            this.showLink &&\n            (this.type === 'url' || this.type === 'urlAsText')\n        ) {\n            return 'external_link';\n        }\n    };\n\n    private renderFormattedNumber = () => {\n        if (this.type !== 'number') {\n            return;\n        }\n\n        let renderValue = this.value;\n        if (this.formatNumber && this.value) {\n            renderValue = new Intl.NumberFormat(navigator.language).format(\n                Number(this.value)\n            );\n        }\n\n        return (\n            <span class=\"lime-formatted-input lime-looks-like-input-value\">\n                {renderValue}\n            </span>\n        );\n    };\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     * @param {KeyboardEvent} event event\n     * @returns {void}\n     */\n\n    private onKeyDown = (event: KeyboardEvent): void => {\n        this.showCompletions = true;\n        const isForwardTab =\n            (event.key === TAB || event.keyCode === TAB_KEY_CODE) &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp =\n            event.key === ARROW_UP || event.keyCode === ARROW_UP_KEY_CODE;\n        const isDown =\n            event.key === ARROW_DOWN || event.keyCode === ARROW_DOWN_KEY_CODE;\n\n        if (event.keyCode === TAB_KEY_CODE && event.shiftKey) {\n            this.showCompletions = false;\n        }\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child'\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child'\n            );\n            listElement.focus();\n        }\n    };\n\n    private handleCompletionChange = (\n        event: LimelListCustomEvent<ListItem>\n    ) => {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.showCompletions = false;\n\n        /*\n         This change event doesn't need to be debounced in itself, but we want\n         to make absolutely sure that an earlier change event that *has* been\n         debounced doesn't emit after this one. Therefore, we run this through\n         the same debounced emitter function. /Ads\n         */\n        this.changeEmitter(event.detail.text);\n    };\n\n    private renderAutocompleteList = () => {\n        if (this.type === 'textarea' || !this.completions.length) {\n            return;\n        }\n\n        return this.renderDropdown();\n    };\n\n    private renderPortal = (content = null) => {\n        const dropdownZIndex = getComputedStyle(\n            this.limelInputField\n        ).getPropertyValue('--dropdown-z-index');\n\n        return (\n            <limel-portal\n                visible={this.showCompletions}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={this.showCompletions}\n                    allowClicksElement={this.limelInputField}\n                    style={{\n                        '--mdc-menu-min-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {content}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    };\n\n    private renderDropdown = () => {\n        const content = this.renderListResult();\n\n        return this.renderPortal(content);\n    };\n\n    private renderListResult = () => {\n        const filteredCompletions: ListItem[] = this.filterCompletions(\n            this.value\n        );\n        if (!filteredCompletions || filteredCompletions.length === 0) {\n            return null;\n        }\n\n        return (\n            <limel-list\n                onChange={this.handleCompletionChange}\n                onKeyDown={this.handleKeyDownInDropdown}\n                type=\"selectable\"\n                items={filteredCompletions}\n            />\n        );\n    };\n\n    private handleKeyDownInDropdown = (event: KeyboardEvent) => {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        const keyCodeFound = [\n            TAB_KEY_CODE,\n            ESCAPE_KEY_CODE,\n            ENTER_KEY_CODE,\n        ].includes(event.keyCode);\n        if (keyFound || keyCodeFound) {\n            this.setFocus();\n        }\n    };\n\n    private handleCloseMenu = () => {\n        this.showCompletions = false;\n    };\n\n    private filterCompletions = (filter: string) => {\n        if (!filter) {\n            return this.completionsList;\n        }\n\n        return this.completionsList.filter(\n            (completion) =>\n                completion.text.toLowerCase().indexOf(filter.toLowerCase()) > -1\n        );\n    };\n\n    private handleChange = (event) => {\n        event.stopPropagation();\n        let value = event.target.value;\n\n        if (this.type === 'number') {\n            if (!value && event.data) {\n                event.stopPropagation();\n\n                return;\n            }\n\n            if (value) {\n                value = Number(value);\n            }\n        }\n\n        this.changeEmitter(value);\n    };\n\n    private changeEmitter = (value: string) => {\n        this.change.emit(value);\n    };\n\n    private handleIconClick = () => {\n        if (!this.isInvalid()) {\n            this.action.emit();\n        }\n    };\n\n    private handleIconKeyPress = (event: KeyboardEvent) => {\n        const isEnter = event.key === ENTER || event.keyCode === ENTER_KEY_CODE;\n        const isSpace = event.key === SPACE || event.keyCode === SPACE_KEY_CODE;\n\n        if ((isSpace || isEnter) && !this.isInvalid()) {\n            this.action.emit();\n        }\n    };\n\n    private handleWheel = () => {\n        // This empty event handler is here to circumvent a bug.\n        // In some browsers (Chrome for example), hovering the input with\n        // the input focused, and scrolling, will both change the value\n        // AND scroll the page. We would prefer to never change the value\n        // on scroll, instead always scrolling the page, but since we\n        // haven't found a way to do that, this is the next best thing, as\n        // it prevents the page from being scrolled, but only in the\n        // circumstances when the value is changed by the scrolling.\n        // Please test THOROUGHLY if you remove this event handler 😄\n    };\n}\n"],"mappings":"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"}