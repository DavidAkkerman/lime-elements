{"version":3,"names":["eventHandlers","WeakMap","makeEnterClickable","element","has","isActive","hasJustReleasedEnter","keydownHandler","event","key","shadowRoot","forceUpdate","keyupHandler","clickHandler","stopImmediatePropagation","set","addEventListener","removeEnterClickable","callBacks","get","removeEventListener","delete"],"sources":["./src/util/makeEnterClickable.ts"],"sourcesContent":["import { forceUpdate } from '@stencil/core';\n\nconst eventHandlers: WeakMap<HTMLElement, CallBacks> = new WeakMap();\n\n/**\n * Overrides the default browser behavior for clickable elements\n * When focused and pressing down enter, avoids calling onClick repeatedly\n * @param {HTMLElement} element the clickable element\n */\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function makeEnterClickable(element: HTMLElement) {\n    if (eventHandlers.has(element)) {\n        return;\n    }\n\n    let isActive = false;\n    let hasJustReleasedEnter = true;\n\n    const keydownHandler = (event: KeyboardEvent) => {\n        if (event.key === 'Enter' && !isActive) {\n            isActive = true;\n\n            if (element?.shadowRoot) {\n                forceUpdate(element);\n            }\n        }\n    };\n\n    const keyupHandler = (event: KeyboardEvent) => {\n        if (event.key === 'Enter' && isActive) {\n            isActive = false;\n            hasJustReleasedEnter = true;\n\n            if (element?.shadowRoot) {\n                forceUpdate(element);\n            }\n        }\n    };\n\n    const clickHandler = (event: MouseEvent) => {\n        if (!isActive) {\n            return;\n        }\n\n        if (hasJustReleasedEnter) {\n            hasJustReleasedEnter = false;\n\n            return;\n        }\n\n        event.stopImmediatePropagation();\n    };\n\n    eventHandlers.set(element, {\n        keydownHandler: keydownHandler,\n        keyupHandler: keyupHandler,\n        clickHandler: clickHandler,\n    });\n\n    element.addEventListener('keydown', keydownHandler);\n    element.addEventListener('keyup', keyupHandler);\n    element.addEventListener('click', clickHandler, true);\n}\n\nexport function removeEnterClickable(element: HTMLElement) {\n    const callBacks: CallBacks = eventHandlers.get(element);\n\n    if (!callBacks || !eventHandlers.has(element)) {\n        return;\n    }\n\n    element.removeEventListener('keydown', callBacks.keydownHandler);\n    element.removeEventListener('keyup', callBacks.keyupHandler);\n    element.removeEventListener('click', callBacks.clickHandler, true);\n\n    eventHandlers.delete(element);\n}\n\ninterface CallBacks {\n    keydownHandler: (arg: KeyboardEvent) => void;\n    keyupHandler: (arg: KeyboardEvent) => void;\n    clickHandler: (arg: MouseEvent) => void;\n}\n"],"mappings":"wCAEA,MAAMA,EAAiD,IAAIC,Q,SAQ3CC,EAAmBC,GAC/B,GAAIH,EAAcI,IAAID,GAAU,CAC5B,M,CAGJ,IAAIE,EAAW,MACf,IAAIC,EAAuB,KAE3B,MAAMC,EAAkBC,IACpB,GAAIA,EAAMC,MAAQ,UAAYJ,EAAU,CACpCA,EAAW,KAEX,GAAIF,IAAO,MAAPA,SAAO,SAAPA,EAASO,WAAY,CACrBC,EAAYR,E,IAKxB,MAAMS,EAAgBJ,IAClB,GAAIA,EAAMC,MAAQ,SAAWJ,EAAU,CACnCA,EAAW,MACXC,EAAuB,KAEvB,GAAIH,IAAO,MAAPA,SAAO,SAAPA,EAASO,WAAY,CACrBC,EAAYR,E,IAKxB,MAAMU,EAAgBL,IAClB,IAAKH,EAAU,CACX,M,CAGJ,GAAIC,EAAsB,CACtBA,EAAuB,MAEvB,M,CAGJE,EAAMM,0BAA0B,EAGpCd,EAAce,IAAIZ,EAAS,CACvBI,eAAgBA,EAChBK,aAAcA,EACdC,aAAcA,IAGlBV,EAAQa,iBAAiB,UAAWT,GACpCJ,EAAQa,iBAAiB,QAASJ,GAClCT,EAAQa,iBAAiB,QAASH,EAAc,KACpD,C,SAEgBI,EAAqBd,GACjC,MAAMe,EAAuBlB,EAAcmB,IAAIhB,GAE/C,IAAKe,IAAclB,EAAcI,IAAID,GAAU,CAC3C,M,CAGJA,EAAQiB,oBAAoB,UAAWF,EAAUX,gBACjDJ,EAAQiB,oBAAoB,QAASF,EAAUN,cAC/CT,EAAQiB,oBAAoB,QAASF,EAAUL,aAAc,MAE7Db,EAAcqB,OAAOlB,EACzB,Q"}