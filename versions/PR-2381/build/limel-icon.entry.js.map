{"version":3,"names":["CACHE_NAME","IconCache","constructor","this","promises","cache","caches","open","async","name","path","url","getUrl","response","match","fetchData","getIcon","requestPromise","undefined","add","svgData","text","replace","validSvg","Error","data","parser","DOMParser","svgDoc","parseFromString","documentElement","tagName","toLowerCase","iconPath","endsWith","iconCache","iconCache$1","iconCss","Icon","componentDidLoad","loadIcon","render","h","class","loadSvg","renderSvg","get","config","container","host","shadowRoot","querySelector","innerHTML"],"sources":["./src/global/icon-cache.ts","./src/components/icon/icon.scss?tag=limel-icon&encapsulation=shadow","./src/components/icon/icon.tsx"],"sourcesContent":["const CACHE_NAME = '@limetech/lime-elements/icons';\n\nexport class IconCache {\n    /*\n     * Cache of all loaded SVGs\n     */\n    private cache: Promise<Cache>;\n\n    private promises: Record<string, Promise<void>> = {};\n\n    constructor() {\n        this.cache = caches.open(CACHE_NAME);\n    }\n\n    /**\n     * Get icon data from the cache\n     * @param {string} name name of the icon\n     * @param {string} path path on the server where the assets are located\n     * @returns {Promise<string>} svg markup\n     */\n    public async get(name: string, path: string = ''): Promise<string> {\n        const cache = await this.cache;\n        const url = this.getUrl(name, path);\n\n        let response = await cache.match(url);\n        if (!response) {\n            response = await this.fetchData(url, cache);\n        }\n\n        return this.getIcon(response);\n    }\n\n    private async fetchData(url: string, cache: Cache): Promise<Response> {\n        let requestPromise = this.promises[url];\n        if (requestPromise === undefined) {\n            requestPromise = cache.add(url);\n            this.promises[url] = requestPromise;\n        }\n\n        await requestPromise;\n\n        return cache.match(url);\n    }\n\n    /*\n     * Get icon data from a response\n     */\n    private async getIcon(response: Response): Promise<string> {\n        let svgData = await response.text();\n\n        // Some of the icons in the Icons8 library have hard coded black color on some of the paths.\n        // In order to apply coloring with CSS, these have to be set to 'currentColor'\n        svgData = svgData.replace(/#000000/g, 'currentColor');\n\n        if (!this.validSvg(svgData)) {\n            throw new Error('Invalid SVG');\n        }\n\n        return svgData;\n    }\n\n    /*\n     * Check if the given data is a valid SVG document\n     */\n    private validSvg(data) {\n        const parser = new DOMParser();\n        const svgDoc = parser.parseFromString(data, 'image/svg+xml');\n\n        return svgDoc.documentElement.tagName.toLowerCase() === 'svg';\n    }\n\n    private getUrl(name: string, path: string): string {\n        let iconPath = path || '';\n        if (path && !path.endsWith('/')) {\n            iconPath = `${path}/`;\n        }\n\n        return `${iconPath}assets/icons/${name}.svg`;\n    }\n}\n\nconst iconCache = new IconCache();\nexport default (() => {\n    return iconCache;\n})();\n","@use '../../style/functions';\n\n/**\n * @prop --icon-background-color: Background color when attribute `badge` is set to `true`. Defaults to `transparent`.\n */\n\n:host {\n    background-color: var(--icon-background-color, transparent);\n    border-radius: 50%;\n    display: inline-block;\n    line-height: 0;\n    box-sizing: border-box;\n\n    svg {\n        fill: currentColor;\n        height: 100%;\n        pointer-events: none;\n        width: 100%;\n    }\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([size='x-small']) {\n    height: functions.pxToRem(15) !important;\n    width: functions.pxToRem(15) !important;\n}\n:host([size='small']) {\n    height: functions.pxToRem(20) !important;\n    width: functions.pxToRem(20) !important;\n}\n:host([size='medium']) {\n    height: functions.pxToRem(25) !important;\n    width: functions.pxToRem(25) !important;\n}\n:host([size='large']) {\n    height: functions.pxToRem(30) !important;\n    width: functions.pxToRem(30) !important;\n}\n\n:host([badge][size='x-small']) {\n    height: functions.pxToRem(23) !important;\n    width: functions.pxToRem(23) !important;\n\n    > div {\n        margin: functions.pxToRem(4);\n    }\n}\n:host([badge][size='small']) {\n    height: functions.pxToRem(30) !important;\n    width: functions.pxToRem(30) !important;\n\n    > div {\n        margin: functions.pxToRem(5);\n    }\n}\n:host([badge][size='medium']) {\n    height: functions.pxToRem(40) !important;\n    width: functions.pxToRem(40) !important;\n\n    > div {\n        margin: functions.pxToRem(8);\n    }\n}\n:host([badge][size='large']) {\n    height: functions.pxToRem(46) !important;\n    width: functions.pxToRem(46) !important;\n\n    > div {\n        margin: functions.pxToRem(8);\n    }\n}\n","import { Component, Element, h, Prop, Watch } from '@stencil/core';\nimport config from '../../global/config';\nimport iconCache from '../../global/icon-cache';\nimport { IconSize } from './icon.types';\n\n/**\n * The recommended icon library for use with Lime Elements is the Windows 10 set\n * from Icons8 (https://icons8.com/icons/windows). This set is included in the\n * relevant Lime products. If you are using Lime Elements in a non-Lime product,\n * you will have to supply your own icons.\n *\n * The size and color of the icon is set in CSS, however there are a few\n * standard sizes defined that can be used with the `size` property.\n *\n * ### Setup\n * To use **@lundalogik/lime-icons8**, the `/assets` folder from\n * __@lundalogik/lime-icons8__ must be made available on the webserver.\n * To use a different icon set, the icons must be placed in a folder structure\n * that looks like this: `assets/icons/<name-of-icon>.svg`\n *\n * If `assets` is placed in the root, no other setup is needed. The icons will\n * be fetched with a relative URL from `/assets/icons/<name-of-icon>.svg`.\n *\n * If `assets` is placed in a sub-folder somewhere, the easiest way to make the\n * icons available is to use the HTML `base` element:\n *\n * ```\n * <base href=\"/my/parent/path/\">\n * ```\n *\n * If this is not enough, or if the `base` element is already in use for\n * something else, a global icon path can be configured with the `limel-config`\n * element:\n * ```\n * <limel-config config={{iconPath: '/my/parent/path/'}} />\n * ```\n *\n * ### Lime icons\n * There are icons included in the **@lundalogik/lime-icons8** package which are\n * designed by our designers at Lime.\n * The names of these icons start with `-lime-`, which makes them easy to\n * find using the Icon Finder tool below.\n * :::note\n * Some of the `-lime-` icons have multiple colors and use our own CSS variables\n * instead of HEX or RGB values to visualize their colors. Thus, you must import\n * our color palette css files into your project to render the icons properly.\n * Read more about our [Color System](#/DesignGuidelines/color-system.md/)\n * and how to do this.\n * :::\n *\n * ### Icon Finder\n *\n * Search for an icon and **click on it to copy its name to clipboard**.\n *\n * <limel-example-icon-finder />\n * @exampleComponent limel-example-icon\n * @exampleComponent limel-example-icon-background\n */\n@Component({\n    tag: 'limel-icon',\n    shadow: true,\n    styleUrl: 'icon.scss',\n})\nexport class Icon {\n    /**\n     * Size of the icon\n     */\n    @Prop({ reflect: true })\n    public size: IconSize;\n\n    /**\n     * Name of the icon\n     */\n    @Prop({ reflect: true })\n    public name: string;\n\n    /**\n     * Set to `true` to give the icon a round background with some padding.\n     * Only works when the `size` attribute is also set.\n     */\n    @Prop({ reflect: true })\n    public badge: boolean;\n\n    @Element()\n    private host: HTMLLimelIconElement;\n\n    public componentDidLoad() {\n        this.loadIcon(this.name);\n    }\n\n    public render() {\n        return <div class=\"container\" />;\n    }\n\n    @Watch('name')\n    protected async loadIcon(name: string) {\n        if (name === undefined || name === '') {\n            return;\n        }\n\n        const svgData = await this.loadSvg(name);\n        this.renderSvg(svgData);\n    }\n\n    /**\n     * Load the SVG data for the icon from the icon cache\n     * @param {string} name name of the icon\n     * @returns {string} the icon SVG data\n     */\n    private loadSvg(name: string) {\n        return iconCache.get(name, config.iconPath);\n    }\n\n    /*\n     * There is no way to style external SVG files with CSS, i.e. SVGs loaded\n     * with <img src=\"file.svg\" /> or <object data=\"file.svg\" type=\"image/svg+xml\" />\n     * will remain the way they look in the file.\n     * Therefore we inject the svg as inline markup instead.\n     */\n    private renderSvg(svgData: string) {\n        const container = this.host.shadowRoot.querySelector('div.container');\n        if (container) {\n            container.innerHTML = svgData;\n        }\n    }\n}\n"],"mappings":"+FAAA,MAAMA,EAAa,gC,MAENC,EAQTC,cAFQC,KAAAC,SAA0C,GAG9CD,KAAKE,MAAQC,OAAOC,KAAKP,E,CAStBQ,UAAUC,EAAcC,EAAe,IAC1C,MAAML,QAAcF,KAAKE,MACzB,MAAMM,EAAMR,KAAKS,OAAOH,EAAMC,GAE9B,IAAIG,QAAiBR,EAAMS,MAAMH,GACjC,IAAKE,EAAU,CACXA,QAAiBV,KAAKY,UAAUJ,EAAKN,E,CAGzC,OAAOF,KAAKa,QAAQH,E,CAGhBL,gBAAgBG,EAAaN,GACjC,IAAIY,EAAiBd,KAAKC,SAASO,GACnC,GAAIM,IAAmBC,UAAW,CAC9BD,EAAiBZ,EAAMc,IAAIR,GAC3BR,KAAKC,SAASO,GAAOM,C,OAGnBA,EAEN,OAAOZ,EAAMS,MAAMH,E,CAMfH,cAAcK,GAClB,IAAIO,QAAgBP,EAASQ,OAI7BD,EAAUA,EAAQE,QAAQ,WAAY,gBAEtC,IAAKnB,KAAKoB,SAASH,GAAU,CACzB,MAAM,IAAII,MAAM,c,CAGpB,OAAOJ,C,CAMHG,SAASE,GACb,MAAMC,EAAS,IAAIC,UACnB,MAAMC,EAASF,EAAOG,gBAAgBJ,EAAM,iBAE5C,OAAOG,EAAOE,gBAAgBC,QAAQC,gBAAkB,K,CAGpDpB,OAAOH,EAAcC,GACzB,IAAIuB,EAAWvB,GAAQ,GACvB,GAAIA,IAASA,EAAKwB,SAAS,KAAM,CAC7BD,EAAW,GAAGvB,I,CAGlB,MAAO,GAAGuB,iBAAwBxB,O,EAI1C,MAAM0B,EAAY,IAAIlC,EACtB,MAAAmC,EAAe,KACJD,EADI,GClFf,MAAME,EAAU,whC,MC+DHC,EAAI,M,sFAuBNC,mBACHpC,KAAKqC,SAASrC,KAAKM,K,CAGhBgC,SACH,OAAOC,EAAA,OAAKC,MAAM,a,CAIZnC,eAAeC,GACrB,GAAIA,IAASS,WAAaT,IAAS,GAAI,CACnC,M,CAGJ,MAAMW,QAAgBjB,KAAKyC,QAAQnC,GACnCN,KAAK0C,UAAUzB,E,CAQXwB,QAAQnC,GACZ,OAAO0B,EAAUW,IAAIrC,EAAMsC,EAAOd,S,CAS9BY,UAAUzB,GACd,MAAM4B,EAAY7C,KAAK8C,KAAKC,WAAWC,cAAc,iBACrD,GAAIH,EAAW,CACXA,EAAUI,UAAYhC,C"}