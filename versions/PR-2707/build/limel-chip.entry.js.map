{"version":3,"names":["chipCss","Chip","this","renderAsButton","h","class","role","disabled","readonly","onKeyDown","handleDeleteKeyDown","renderIcon","renderLabel","renderBadge","renderRemoveButton","renderAsLink","href","link","title","tabindex","onClick","e","preventDefault","text","handleRemoveClick","event","stopPropagation","remove","emit","removable","keys","DELETE","BACKSPACE","keycodes","DELETE_KEY_CODE","BACKSPACE_KEY_CODE","includes","key","keyCode","removeChipLabel","translate","get","language","componentWillLoad","makeEnterClickable","host","disconnectedCallback","removeEnterClickable","render","icon","getIconName","badge","name","style","color","_a","_b","backgroundColor","label","svgData","tabIndex","innerHTML","element","button","anchor"],"sources":["./src/components/chip/chip.scss?tag=limel-chip&encapsulation=shadow","./src/components/chip/chip.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n* @prop --chip-max-width: Maximum width of the chip. Defaults to `10rem`. Keep in mind that the chips should not appear too big.\n*/\n\n:host(limel-chip) {\n    --limel-chip-item-height: 1.75rem;\n    --limel-chip-gap: 0.5rem;\n    isolation: isolate;\n    display: inline-flex;\n    align-items: center;\n}\n\n:host(limel-chip[disabled]) {\n    pointer-events: none;\n}\n\n* {\n    box-sizing: border-box;\n}\n\n.chip {\n    all: unset;\n    position: relative;\n\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    max-width: var(--chip-max-width, 10rem);\n    height: var(--limel-chip-item-height);\n\n    border-radius: var(--limel-chip-item-height);\n    font-size: 0.875rem;\n    padding: 0 0.125rem;\n\n    &:has(limel-icon) {\n        .text {\n            padding-left: 0.25rem;\n        }\n    }\n\n    &:not([disabled]) {\n        @include mixins.visualize-keyboard-focus;\n        @include mixins.is-elevated-inset-clickable;\n    }\n\n    &:has(limel-badge) {\n        padding-right: 0.375rem;\n\n        .text {\n            padding-right: 0;\n        }\n    }\n\n    &:has(+ .remove-button:hover) {\n        box-shadow: var(--shadow-depth-8-error);\n    }\n}\n\n:host(limel-chip[disabled]) {\n    .chip {\n        // Similar to `limel-button[disabled]`\n        color: rgba(var(--contrast-1600), 0.37);\n        background-color: rgba(var(--contrast-1600), 0.1);\n        box-shadow: none;\n    }\n}\n\n:host(limel-chip[readonly]) {\n    .chip {\n        box-shadow: 0 0 0 1px rgba(var(--contrast-800), 0.5);\n    }\n}\n\n:host(limel-chip[selected]) {\n    .chip {\n        box-shadow: var(--button-shadow-inset);\n\n        &:focus-visible {\n            box-shadow: var(--button-shadow-inset),\n                var(--shadow-depth-8-focused);\n        }\n\n        &:active {\n            box-shadow: var(--button-shadow-inset-pressed);\n        }\n    }\n    .text {\n        color: var(--mdc-theme-primary);\n    }\n}\n\n:host(limel-chip[removable]) {\n    .chip:not([disabled]) {\n        padding-right: calc(var(--limel-chip-item-height) + 0.125rem);\n\n        .text {\n            padding-right: 0;\n        }\n    }\n}\n\n:host(limel-chip[type='filter']) {\n    .chip {\n        border-top-left-radius: 0.5rem;\n        border-bottom-left-radius: 0.5rem;\n\n        &:after {\n            content: '';\n            transition:\n                background-color 0.4s ease 0.2s,\n                box-shadow 0.6s ease 0.2s;\n            box-sizing: border-box;\n            position: absolute;\n            bottom: 0.125rem;\n            left: 0.125rem;\n            width: 0.5rem;\n            height: 0.5rem;\n            border-radius: 50%;\n            background-color: rgb(var(--contrast-800), 0.8);\n            box-shadow: 0 0 0 1px rgb(var(--color-white)) inset;\n        }\n    }\n}\n\n:host(limel-chip[type='filter'][selected]) {\n    .chip {\n        &:after {\n            background-color: var(--mdc-theme-primary);\n            box-shadow:\n                0 0 0.375rem 0 var(--mdc-theme-primary),\n                0 0 0 1px rgb(var(--color-white)) inset;\n        }\n    }\n}\n\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-chip-item-height) - 0.25rem);\n    height: calc(var(--limel-chip-item-height) - 0.25rem);\n    padding: 0.0625rem;\n}\n\nlimel-badge {\n    pointer-events: none;\n}\n\n.text {\n    @include mixins.truncate-text;\n    line-height: 1.2;\n    padding: 0 0.5rem;\n}\n\n.trailing-button {\n    all: unset;\n    @include mixins.is-flat-clickable(\n        $color--hovered: rgb(var(--color-red-dark))\n    );\n\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    margin-left: calc(var(--limel-chip-item-height) * -1 + 0.125rem);\n    margin-right: 0.125rem;\n    width: calc(var(--limel-chip-item-height) - 0.25rem);\n    height: calc(var(--limel-chip-item-height) - 0.25rem);\n\n    border-radius: 50%;\n\n    svg {\n        transition:\n            color 0.2s ease,\n            transform 0.2s ease;\n        width: 1.25rem;\n    }\n\n    &:hover {\n        svg {\n            transform: scale(0.8);\n        }\n    }\n}\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { Icon, Languages, Link } from '../../interface';\nimport { getIconName } from '../icon/get-icon-props';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport translate from '../../global/translations';\nimport {\n    BACKSPACE,\n    BACKSPACE_KEY_CODE,\n    DELETE,\n    DELETE_KEY_CODE,\n} from '../../util/keycodes';\n\n/**\n * Chips and buttons are both interactive elements in UI design,\n * but they serve different purposes and are used in different contexts.\n *\n * :::warning\n * Do not use the chip component, carelessly as an alternative for\n * [`limel-button`](#/component/limel-button/) in the UI design!\n * In short, buttons are used to trigger actions,\n * while chips are used to represent entities or choices.\n *\n * **Buttons:**\n * Buttons are used to trigger actions. They are typically used to\n * submit forms, open dialogs, initiate a process, or perform any action\n * that changes the state of the application.\n * Buttons' labels usually contain action words, in other words, the labels is\n * a _verb in imperative mood_ such as \"Submit\" or \"Delete\".\n * Buttons are placed in areas where it's clear they will initiate\n * an action when clicked.\n *\n * **Chips:**\n * Chips are compact elements that represent an input, attribute, or action;\n * often representing choices, filters, or tags, in a small block\n * or clearly bundled into a group.\n * :::\n *\n * @private\n * @exampleComponent limel-example-chip-button\n * @exampleComponent limel-example-chip-link\n * @exampleComponent limel-example-chip-icon-colors\n * @exampleComponent limel-example-chip-badge\n * @exampleComponent limel-example-chip-filter\n * @exampleComponent limel-example-chip-removable\n * @exampleComponent limel-example-chip-aria-role\n */\n@Component({\n    tag: 'limel-chip',\n    shadow: true,\n    styleUrl: 'chip.scss',\n})\nexport class Chip {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * ID of the chip. Must be unique.\n     */\n    @Prop()\n    id: number | string;\n\n    /**\n     * Label displayed on the chip\n     */\n    @Prop()\n    public text: string;\n\n    /**\n     * Icon of the chip.\n     */\n    @Prop()\n    public icon: string | Icon;\n\n    /**\n     * If supplied, the chip will become a clickable links.\n     */\n    @Prop()\n    link?: Omit<Link, 'text'>;\n\n    /**\n     * The value of the badge, displayed on the chip.\n     */\n    @Prop()\n    badge?: string | number;\n\n    /**\n     * Set to `true` to disable the chip.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to render the chip as a static UI element.\n     * Useful when the parent component has a `readonly` state.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to visualize the chip in a \"selected\" state.\n     * This is typically used when the chip is used in a chip-set\n     * along with other chips.\n     */\n    @Prop({ reflect: true })\n    public selected = false;\n\n    /**\n     * Set to `true` to render a remove button on the chip.\n     */\n    @Prop({ reflect: true })\n    public removable = false;\n\n    /**\n     * Set to `filter` to render the chip with a distinct style\n     * suitable for visualizing filters.\n     */\n    @Prop({ reflect: true })\n    public type: 'filter';\n\n    /**\n     * Fired when clicking on buttons (not links!)\n     * inside the breadcrumbs.\n     */\n    @Event()\n    public remove: EventEmitter<Chip>;\n\n    @Element()\n    private host: HTMLLimelChipElement;\n\n    private button: HTMLButtonElement;\n    private anchor: HTMLAnchorElement;\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host as HTMLElement);\n    }\n\n    public disconnectedCallback() {\n        this.removeEnterClickable();\n    }\n\n    public render() {\n        if (this.link) {\n            return this.renderAsLink();\n        }\n\n        return this.renderAsButton();\n    }\n\n    private renderAsButton = () => {\n        return [\n            <button\n                class=\"chip\"\n                role=\"button\"\n                disabled={this.disabled || this.readonly}\n                onKeyDown={this.handleDeleteKeyDown}\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n            </button>,\n            this.renderRemoveButton(),\n        ];\n    };\n\n    private renderAsLink = () => {\n        return [\n            <a\n                class=\"chip\"\n                href={this.link.href}\n                title={this.link.title}\n                aria-disabled={this.disabled || this.readonly}\n                tabindex={this.disabled ? -1 : 0}\n                onClick={(e) => {\n                    if (this.disabled) {\n                        e.preventDefault();\n                    }\n                }}\n                onKeyDown={this.handleDeleteKeyDown}\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n            </a>,\n            this.renderRemoveButton(),\n        ];\n    };\n\n    private renderLabel = () => {\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderIcon() {\n        const icon = getIconName(this.icon);\n\n        if (!icon) {\n            return;\n        }\n\n        return (\n            <limel-icon\n                badge={true}\n                name={icon}\n                style={{\n                    color: `${(this.icon as Icon)?.color}`,\n                    'background-color': `${(this.icon as Icon)\n                        ?.backgroundColor}`,\n                }}\n            />\n        );\n    }\n\n    private renderBadge() {\n        if (!this.badge) {\n            return;\n        }\n\n        return <limel-badge label={this.badge} />;\n    }\n\n    private renderRemoveButton() {\n        if (!this.removable || this.readonly || this.disabled) {\n            return;\n        }\n\n        const svgData =\n            '<svg viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" d=\"m8 8 16 16M24 8 8 24\"/></svg>';\n\n        return (\n            <button\n                class=\"trailing-button remove-button\"\n                tabIndex={-1}\n                aria-label={this.removeChipLabel}\n                innerHTML={svgData}\n                onClick={this.handleRemoveClick}\n            />\n        );\n    }\n\n    private handleRemoveClick = (event: MouseEvent | KeyboardEvent) => {\n        event.stopPropagation();\n        this.remove.emit(this);\n    };\n\n    private handleDeleteKeyDown = (event: KeyboardEvent) => {\n        if (!this.removable) {\n            return;\n        }\n\n        const keys = [DELETE, BACKSPACE];\n        const keycodes = [DELETE_KEY_CODE, BACKSPACE_KEY_CODE];\n\n        if (keys.includes(event.key) || keycodes.includes(event.keyCode)) {\n            this.handleRemoveClick(event);\n        }\n    };\n\n    private removeEnterClickable() {\n        const element = this.button ?? this.anchor;\n        removeEnterClickable(element);\n    }\n\n    private removeChipLabel = (): string => {\n        return translate.get('chip-set.remove-chip', this.language);\n    };\n}\n"],"mappings":"2RAAA,MAAMA,EAAU,82H,MC6DHC,EAAI,M,wDAqGLC,KAAAC,eAAiB,IACd,CACHC,EAAA,UACIC,MAAM,OACNC,KAAK,SACLC,SAAUL,KAAKK,UAAYL,KAAKM,SAChCC,UAAWP,KAAKQ,qBAEfR,KAAKS,aACLT,KAAKU,cACLV,KAAKW,eAEVX,KAAKY,sBAILZ,KAAAa,aAAe,IACZ,CACHX,EAAA,KACIC,MAAM,OACNW,KAAMd,KAAKe,KAAKD,KAChBE,MAAOhB,KAAKe,KAAKC,MAAK,gBACPhB,KAAKK,UAAYL,KAAKM,SACrCW,SAAUjB,KAAKK,UAAY,EAAI,EAC/Ba,QAAUC,IACN,GAAInB,KAAKK,SAAU,CACfc,EAAEC,gB,GAGVb,UAAWP,KAAKQ,qBAEfR,KAAKS,aACLT,KAAKU,cACLV,KAAKW,eAEVX,KAAKY,sBAILZ,KAAAU,YAAc,IACXR,EAAA,QAAMC,MAAM,QAAQH,KAAKqB,MAkD5BrB,KAAAsB,kBAAqBC,IACzBA,EAAMC,kBACNxB,KAAKyB,OAAOC,KAAK1B,KAAK,EAGlBA,KAAAQ,oBAAuBe,IAC3B,IAAKvB,KAAK2B,UAAW,CACjB,M,CAGJ,MAAMC,EAAO,CAACC,EAAQC,GACtB,MAAMC,EAAW,CAACC,EAAiBC,GAEnC,GAAIL,EAAKM,SAASX,EAAMY,MAAQJ,EAASG,SAASX,EAAMa,SAAU,CAC9DpC,KAAKsB,kBAAkBC,E,GASvBvB,KAAAqC,gBAAkB,IACfC,EAAUC,IAAI,uBAAwBvC,KAAKwC,U,cAjNzB,K,iHAoCX,M,cAOA,M,cAQA,M,eAMC,M,oBAsBZC,oBACHC,EAAmB1C,KAAK2C,K,CAGrBC,uBACH5C,KAAK6C,sB,CAGFC,SACH,GAAI9C,KAAKe,KAAM,CACX,OAAOf,KAAKa,c,CAGhB,OAAOb,KAAKC,gB,CA8CRQ,a,QACJ,MAAMsC,EAAOC,EAAYhD,KAAK+C,MAE9B,IAAKA,EAAM,CACP,M,CAGJ,OACI7C,EAAA,cACI+C,MAAO,KACPC,KAAMH,EACNI,MAAO,CACHC,MAAO,IAAGC,EAACrD,KAAK+C,QAAa,MAAAM,SAAA,SAAAA,EAAED,QAC/B,mBAAoB,IAAGE,EAACtD,KAAK+C,QAAa,MAAAO,SAAA,SAAAA,EACpCC,oB,CAMd5C,cACJ,IAAKX,KAAKiD,MAAO,CACb,M,CAGJ,OAAO/C,EAAA,eAAasD,MAAOxD,KAAKiD,O,CAG5BrC,qBACJ,IAAKZ,KAAK2B,WAAa3B,KAAKM,UAAYN,KAAKK,SAAU,CACnD,M,CAGJ,MAAMoD,EACF,wJAEJ,OACIvD,EAAA,UACIC,MAAM,gCACNuD,UAAW,EAAC,aACA1D,KAAKqC,gBACjBsB,UAAWF,EACXvC,QAASlB,KAAKsB,mB,CAuBlBuB,uB,MACJ,MAAMe,GAAUP,EAAArD,KAAK6D,UAAM,MAAAR,SAAA,EAAAA,EAAIrD,KAAK8D,OACpCjB,EAAqBe,E"}