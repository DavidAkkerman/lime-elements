{"version":3,"names":["chipCss","Chip","this","renderAsButton","h","class","role","disabled","readonly","renderIcon","renderLabel","renderBadge","renderAsLink","href","link","title","tabindex","onClick","e","preventDefault","text","componentWillLoad","makeEnterClickable","host","disconnectedCallback","removeEnterClickable","render","icon","getIconName","badge","name","style","color","_a","_b","backgroundColor","label","element","button","anchor"],"sources":["./src/components/chip/chip.scss?tag=limel-chip&encapsulation=shadow","./src/components/chip/chip.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n* @prop --chip-max-width: Maximum width of the chip. Defaults to `10rem`. Keep in mind that the chips should not appear too big.\n*/\n\n:host(limel-chip) {\n    --limel-chip-item-height: 1.75rem;\n    --limel-chip-gap: 0.5rem;\n    display: inline-block;\n}\n\n:host(limel-chip[disabled]) {\n    pointer-events: none;\n}\n\n* {\n    box-sizing: border-box;\n}\n\n.chip {\n    all: unset;\n    position: relative;\n\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    max-width: var(--chip-max-width, 10rem);\n    height: var(--limel-chip-item-height);\n\n    border-radius: 100vw;\n    font-size: 0.875rem;\n    padding: 0 0.125rem;\n\n    &:not([disabled]) {\n        @include mixins.visualize-keyboard-focus;\n        @include mixins.is-elevated-clickable();\n    }\n\n    &:has(limel-badge) {\n        padding-right: 0.375rem;\n\n        .text {\n            padding-right: 0;\n        }\n    }\n}\n\n:host(limel-chip[disabled]) {\n    .chip {\n        // Similar to `limel-button[disabled]`\n        color: rgba(var(--contrast-1600), 0.37);\n        background-color: rgba(var(--contrast-1600), 0.1);\n        box-shadow: none;\n    }\n}\n\n:host(limel-chip[readonly]) {\n    .chip {\n        box-shadow: 0 0 0 1px rgba(var(--contrast-800), 0.5);\n    }\n}\n\n:host(limel-chip[selected]) {\n    .chip {\n        box-shadow: var(--button-shadow-inset);\n\n        &:focus-visible {\n            box-shadow: var(--button-shadow-inset),\n                var(--shadow-depth-8-focused);\n        }\n    }\n    .text {\n        color: var(--mdc-theme-primary);\n    }\n}\n\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-chip-item-height) - 0.25rem);\n    height: calc(var(--limel-chip-item-height) - 0.25rem);\n    padding: 0.0625rem;\n}\n\n.text {\n    @include mixins.truncate-text;\n    line-height: 1;\n    padding: 0 0.5rem 0 0.25rem;\n}\n","import { Component, Element, h, Prop } from '@stencil/core';\nimport { Icon, Link } from '../../interface';\nimport { getIconName } from '../icon/get-icon-props';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\n\n/**\n * Chips and buttons are both interactive elements in UI design,\n * but they serve different purposes and are used in different contexts.\n *\n * :::warning\n * Do not use the chip component, carelessly as an alternative for\n * [`limel-button`](#/component/limel-button/) in the UI design!\n * In short, buttons are used to trigger actions,\n * while chips are used to represent entities or choices. Read more belowâ€¦\n * :::\n *\n * **Buttons:**\n * Buttons are used to trigger actions. They are typically used to\n * submit forms, open dialogs, initiate a process, or perform any action\n * that changes the state of the application.\n * Buttons' labels usually contain action words, in other words, the labels is\n * a _verb in imperative mood_ such as \"Submit\" or \"Delete\".\n * Buttons are placed in areas where it's clear they will initiate\n * an action when clicked.\n *\n * **Chips:**\n * Chips are compact elements that represent an input, attribute, or action;\n * often representing choices, filters, or tags, in a small block\n * or clearly bundled into a group. Which is why you as a consumer need to\n * ensure the proper usage of [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles).\n * in the chip and its container, to provide an accessible experience.\n * @private\n * @exampleComponent limel-example-chip-button\n * @exampleComponent limel-example-chip-link\n * @exampleComponent limel-example-chip-icon-colors\n * @exampleComponent limel-example-chip-badge\n */\n@Component({\n    tag: 'limel-chip',\n    shadow: true,\n    styleUrl: 'chip.scss',\n})\nexport class Chip {\n    /**\n     * ID of the chip. Must be unique.\n     */\n    @Prop()\n    id: number | string;\n\n    /**\n     * Label displayed on the chip\n     */\n    @Prop()\n    public text: string;\n\n    /**\n     * Icon of the chip.\n     */\n    @Prop()\n    public icon: string | Icon;\n\n    /**\n     * If supplied, the chip will become a clickable links.\n     */\n    @Prop()\n    link?: Omit<Link, 'text'>;\n\n    /**\n     * The value of the badge, displayed on the chip.\n     */\n    @Prop()\n    badge?: string | number;\n\n    /**\n     * Set to `true` to disable the chip.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to render the chip as a static UI element.\n     * Useful when the parent component has a `readonly` state.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to visualize the chip in a \"selected\" state.\n     * This is typically used when the chip is used in a chip-set\n     * along with other chips.\n     */\n    @Prop({ reflect: true })\n    public selected = false;\n\n    @Element()\n    private host: HTMLLimelChipElement;\n\n    private button: HTMLButtonElement;\n    private anchor: HTMLAnchorElement;\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host as HTMLElement);\n    }\n\n    public disconnectedCallback() {\n        this.removeEnterClickable();\n    }\n\n    public render() {\n        if (this.link) {\n            return this.renderAsLink();\n        }\n\n        return this.renderAsButton();\n    }\n\n    private renderAsButton = () => {\n        return [\n            <button\n                class=\"chip\"\n                role=\"button\"\n                disabled={this.disabled || this.readonly}\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n            </button>,\n        ];\n    };\n\n    private renderAsLink = () => {\n        return [\n            <a\n                class=\"chip\"\n                href={this.link.href}\n                title={this.link.title}\n                aria-disabled={this.disabled || this.readonly}\n                tabindex={this.disabled ? -1 : 0}\n                onClick={(e) => {\n                    if (this.disabled) {\n                        e.preventDefault();\n                    }\n                }}\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n            </a>,\n        ];\n    };\n\n    private renderLabel = () => {\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderIcon() {\n        const icon = getIconName(this.icon);\n\n        if (!icon) {\n            return;\n        }\n\n        return (\n            <limel-icon\n                badge={true}\n                name={icon}\n                style={{\n                    color: `${(this.icon as Icon)?.color}`,\n                    'background-color': `${(this.icon as Icon)\n                        ?.backgroundColor}`,\n                }}\n            />\n        );\n    }\n\n    private renderBadge() {\n        if (!this.badge) {\n            return;\n        }\n\n        return <limel-badge label={this.badge} />;\n    }\n\n    private removeEnterClickable() {\n        const element = this.button ?? this.anchor;\n        removeEnterClickable(element);\n    }\n}\n"],"mappings":"gKAAA,MAAMA,EAAU,y4D,MC6CHC,EAAI,M,yBA0ELC,KAAAC,eAAiB,IACd,CACHC,EAAA,UACIC,MAAM,OACNC,KAAK,SACLC,SAAUL,KAAKK,UAAYL,KAAKM,UAE/BN,KAAKO,aACLP,KAAKQ,cACLR,KAAKS,gBAKVT,KAAAU,aAAe,IACZ,CACHR,EAAA,KACIC,MAAM,OACNQ,KAAMX,KAAKY,KAAKD,KAChBE,MAAOb,KAAKY,KAAKC,MAAK,gBACPb,KAAKK,UAAYL,KAAKM,SACrCQ,SAAUd,KAAKK,UAAY,EAAI,EAC/BU,QAAUC,IACN,GAAIhB,KAAKK,SAAU,CACfW,EAAEC,gB,IAITjB,KAAKO,aACLP,KAAKQ,cACLR,KAAKS,gBAKVT,KAAAQ,YAAc,IACXN,EAAA,QAAMC,MAAM,QAAQH,KAAKkB,M,iHA3ElB,M,cAOA,M,cAQA,K,CAQXC,oBACHC,EAAmBpB,KAAKqB,K,CAGrBC,uBACHtB,KAAKuB,sB,CAGFC,SACH,GAAIxB,KAAKY,KAAM,CACX,OAAOZ,KAAKU,c,CAGhB,OAAOV,KAAKC,gB,CA0CRM,a,QACJ,MAAMkB,EAAOC,EAAY1B,KAAKyB,MAE9B,IAAKA,EAAM,CACP,M,CAGJ,OACIvB,EAAA,cACIyB,MAAO,KACPC,KAAMH,EACNI,MAAO,CACHC,MAAO,IAAGC,EAAC/B,KAAKyB,QAAa,MAAAM,SAAA,SAAAA,EAAED,QAC/B,mBAAoB,IAAGE,EAAChC,KAAKyB,QAAa,MAAAO,SAAA,SAAAA,EACpCC,oB,CAMdxB,cACJ,IAAKT,KAAK2B,MAAO,CACb,M,CAGJ,OAAOzB,EAAA,eAAagC,MAAOlC,KAAK2B,O,CAG5BJ,uB,MACJ,MAAMY,GAAUJ,EAAA/B,KAAKoC,UAAM,MAAAL,SAAA,EAAAA,EAAI/B,KAAKqC,OACpCd,EAAqBY,E"}