{"version":3,"names":["menuGridCss","MenuGridExample","constructor","hostRef","this","items","text","icon","iconColor","separator","render","h","badgeIcons","gridLayout","label","slot"],"sources":["./src/components/menu/examples/menu-grid.scss?tag=limel-example-menu-grid&encapsulation=shadow","./src/components/menu/examples/menu-grid.tsx"],"sourcesContent":[":host {\n    --menu-surface-width: min(\n        calc(100vw - 4rem),\n        40rem\n    ); // The `min()` function selects the smallest value from a list of comma-separated expressions.\n}\n","import { MenuItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * With grid layout\n * To render items of a menu in a grid layout instead of a vertical list,\n * simply setting the `gridLayout` property to `true`.\n *\n * :::note\n * Menus with the grid layout has a responsive width by default,\n * which will not grow wider than a certain size. However, if the default size is not\n * wide enough for your use case, you can try setting another responsive width, using\n * the `--menu-surface-width` variable.\n *\n * To achieve a responsive width, try using the `min()` function.\n * This function selects the smallest value from a list of comma-separated expressions\n * which are placed within the parentheses.\n *\n * For example, `--menu-surface-width: min(100vw, 40rem);` will output\n * `width: min(100wv, 40rem);` which will tell the browser to render the menu\n * content in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\n * is larger than `40rem`.\n * :::\n *\n *\n * To tweak the grid layout, a few other variables are available:\n * - `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n * - `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n * - `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.\n *\n */\n@Component({\n    tag: 'limel-example-menu-grid',\n    shadow: true,\n    styleUrl: 'menu-grid.scss',\n})\nexport class MenuGridExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Companies',\n            icon: 'organization',\n            iconColor: 'rgb(var(--color-blue-default)',\n        },\n        {\n            text: 'Deals',\n            icon: 'money',\n            iconColor: 'rgb(var(--color-green-default))',\n        },\n        {\n            text: 'Agreements',\n            icon: 'handshake',\n            iconColor: 'rgb(var(--color-pink-default))',\n        },\n        {\n            text: 'Todos',\n            icon: 'today',\n            iconColor: 'rgb(var(--color-teal-default))',\n        },\n        {\n            text: 'History',\n            icon: 'comments',\n            iconColor: 'rgb(var(--color-grey-light))',\n        },\n        { separator: true },\n        {\n            text: 'Coworkers',\n            icon: 'gender_neutral_user',\n            iconColor: 'rgb(var(--color-orange-light))',\n        },\n        {\n            text: 'Persons',\n            icon: 'user_group_man_man',\n            iconColor: 'rgb(var(--color-yellow-dark)',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-menu items={this.items} badgeIcons={true} gridLayout={true}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>\n        );\n    }\n}\n"],"mappings":"+CAAA,MAAMA,EAAc,gF,MCoCPC,EAAe,MAL5BC,YAAAC,G,UAMYC,KAAAC,MAAyC,CAC7C,CACIC,KAAM,YACNC,KAAM,eACNC,UAAW,iCAEf,CACIF,KAAM,QACNC,KAAM,QACNC,UAAW,mCAEf,CACIF,KAAM,aACNC,KAAM,YACNC,UAAW,kCAEf,CACIF,KAAM,QACNC,KAAM,QACNC,UAAW,kCAEf,CACIF,KAAM,UACNC,KAAM,WACNC,UAAW,gCAEf,CAAEC,UAAW,MACb,CACIH,KAAM,YACNC,KAAM,sBACNC,UAAW,kCAEf,CACIF,KAAM,UACNC,KAAM,qBACNC,UAAW,gC,CAIZE,SACH,OACIC,EAAA,cAAYN,MAAOD,KAAKC,MAAOO,WAAY,KAAMC,WAAY,MACzDF,EAAA,gBAAcG,MAAM,OAAOC,KAAK,Y"}