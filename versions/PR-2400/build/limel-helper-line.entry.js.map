{"version":3,"names":["helperLineCss","HelperLine","this","hasContent","maxLength","helperText","length","undefined","renderHelperText","h","class","id","helperTextId","renderCharacterCounter","counter","render","Host","tabIndex","invalid","show"],"sources":["./src/components/helper-line/helper-line.scss?tag=limel-helper-line&encapsulation=shadow","./src/components/helper-line/helper-line.tsx"],"sourcesContent":[":host(limel-helper-line) {\n    transition: opacity 0.2s ease;\n\n    box-sizing: border-box;\n\n    display: none;\n    justify-content: space-between;\n    gap: 0.75rem;\n\n    padding: 0 0.25rem;\n    min-width: 0; // prevents overflowing, if component is placed in flex containers\n\n    font-family: Roboto, sans-serif;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    font-size: 0.6875rem;\n    font-weight: 400;\n    letter-spacing: 0.0333333333em; // keeping this for now for consistency, until we get rid of all of them\n    line-height: normal;\n\n    color: rgb(var(--contrast-1200));\n}\n\n:host(limel-helper-line.show) {\n    display: flex;\n}\n\n:host(limel-helper-line.invalid) {\n    .helper-text {\n        color: var(--mdc-theme-error);\n    }\n}\n\n.helper-text {\n    padding-right: 0.25rem;\n    padding-left: 0.75rem;\n}\n\n.counter {\n    flex-shrink: 0;\n    margin-left: auto;\n\n    padding-right: 0.75rem;\n    padding-left: 0.25rem;\n}\n\n.helper-text,\n.counter {\n    padding-top: 0.125rem;\n    padding-bottom: 0.125rem;\n    backdrop-filter: blur(0.25rem);\n    -webkit-backdrop-filter: blur(0.25rem);\n}\n","import { Component, Host, Prop, h } from '@stencil/core';\n\n/**\n * This is an internal and private component that many input fields\n * use to display a helper text, along with a character counter below the\n * input field.\n *\n * We created this to keep the visual styles the same everywhere\n * and to avoid importing styles separately.\n *\n * Also this enables us to open the helper line in limel-portal,\n * more easily without having to send the styles to the portal.\n *\n * :::note\n * When the component has no content, it will get a `display: none`\n * as styles to avoid creating empty holes in the UI of the parent component.\n * For example, in a `flex` or `grid` component that has a `gap`,\n * we don't want the empty `limel-helper-line` to render and cause unnecessary\n * gaps in the UI.\n * However, to be more resourceful, the parent component can choose not\n * to render the helper-line as well.\n * :::\n * @exampleComponent limel-example-helper-line\n * @exampleComponent limel-example-helper-line-invalid\n * @exampleComponent limel-example-helper-line-long-text\n * @exampleComponent limel-example-helper-line-long-text-no-counter\n * @exampleComponent limel-example-helper-line-character-counter\n * @private\n */\n@Component({\n    tag: 'limel-helper-line',\n    shadow: true,\n    styleUrl: 'helper-line.scss',\n})\nexport class HelperLine {\n    /**\n     * The helper text that is displayed on the left side.\n     */\n    @Prop({ reflect: true })\n    public helperText?: string;\n\n    /**\n     * Length of the current input value, coming from the parent component.\n     * Used in the character counter section on the right side.\n     */\n    @Prop({ reflect: true })\n    public length?: number;\n\n    /**\n     * Maximum length of the characters, defined on the parent component.\n     * Used in the character counter section on the right side.\n     */\n    @Prop({ reflect: true })\n    public maxLength?: number;\n\n    /**\n     * Turns `true`, when the parent component is invalid.\n     * For example, when the parent component is `required` but is left empty.\n     * Or when the input format is invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid?: boolean = false;\n\n    /**\n     * Used by `aria-controls` and `aria-describedby` in the parent component.\n     */\n    @Prop({ reflect: true })\n    public helperTextId?: string;\n\n    public render() {\n        return (\n            <Host\n                tabIndex={-1}\n                class={{\n                    invalid: this.invalid,\n                    show: this.hasContent(),\n                }}\n                aria-hidden={!this.hasContent()}\n            >\n                {this.renderHelperText()}\n                {this.renderCharacterCounter()}\n            </Host>\n        );\n    }\n\n    private hasContent = () => {\n        if (\n            this.maxLength ||\n            this.helperText.length > 0 ||\n            this.helperText !== null ||\n            this.helperText !== undefined\n        ) {\n            return true;\n        }\n    };\n\n    private renderHelperText = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return (\n            <span class=\"helper-text\" id={this.helperTextId}>\n                {this.helperText}\n            </span>\n        );\n    };\n\n    private renderCharacterCounter = () => {\n        const counter = `${this.length} / ${this.maxLength}`;\n\n        if (!this.maxLength) {\n            return;\n        }\n\n        return <span class=\"counter\">{counter}</span>;\n    };\n}\n"],"mappings":"sDAAA,MAAMA,EAAgB,qwB,MCkCTC,EAAU,M,yBAmDXC,KAAAC,WAAa,KACjB,GACID,KAAKE,WACLF,KAAKG,WAAWC,OAAS,GACzBJ,KAAKG,aAAe,MACpBH,KAAKG,aAAeE,UACtB,CACE,OAAO,I,GAIPL,KAAAM,iBAAmB,KACvB,IAAKN,KAAKG,WAAY,CAClB,M,CAGJ,OACII,EAAA,QAAMC,MAAM,cAAcC,GAAIT,KAAKU,cAC9BV,KAAKG,WACH,EAIPH,KAAAW,uBAAyB,KAC7B,MAAMC,EAAU,GAAGZ,KAAKI,YAAYJ,KAAKE,YAEzC,IAAKF,KAAKE,UAAW,CACjB,M,CAGJ,OAAOK,EAAA,QAAMC,MAAM,WAAWI,EAAe,E,sFAtDtB,M,4BAQpBC,SACH,OACIN,EAACO,EAAI,CACDC,UAAW,EACXP,MAAO,CACHQ,QAAShB,KAAKgB,QACdC,KAAMjB,KAAKC,cACd,eACaD,KAAKC,cAElBD,KAAKM,mBACLN,KAAKW,yB"}