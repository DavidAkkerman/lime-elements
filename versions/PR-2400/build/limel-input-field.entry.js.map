{"version":3,"names":["now","root","Date","FUNC_ERROR_TEXT","nativeMax","Math","max","nativeMin","min","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","toNumber","isObject","invokeFunc","time","args","thisArg","undefined","apply","leadingEdge","setTimeout","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","timeWaiting","shouldInvoke","trailingEdge","cancel","clearTimeout","flush","debounced","isInvoking","arguments","this","inputFieldCss","InputField","constructor","hostRef","completionsList","initialize","element","limelInputField","shadowRoot","querySelector","mdcTextField","MDCTextField","mapCompletions","window","addEventListener","layout","passive","setFocus","completions","map","item","text","focus","getContainerClassList","classList","label","isInvalid","disabled","readonly","required","value","hasPrefix","hasSuffix","type","leadingIcon","getTrailingIcon","renderInput","properties","h","Object","assign","pattern","onWheel","handleWheel","onKeyDown","placeholder","renderTextarea","class","_a","getAdditionalProps","props","step","Number","isInteger","minlength","maxlength","onFocus","isFocused","showCompletions","onBlur","isModified","renderHelperLine","length","hasHelperText","helperTextId","helperText","maxLength","invalid","renderEmptyValueForReadonly","renderSuffix","suffix","renderPrefix","prefix","getInputElement","checkValidity","elementName","renderLabel","labelClassList","id","labelId","renderLeadingIcon","name","renderTrailingLinkOrButton","html","trailingIcon","hasLink","push","renderLinkIcon","getLink","renderTrailingIcon","showLink","includes","href","getHref","target","getTarget","linkProps","icon","tabindex","role","tabIndex","onKeyPress","handleIconKeyPress","onClick","handleIconClick","renderFormattedNumber","renderValue","formatNumber","Intl","NumberFormat","locale","format","event","isForwardTab","key","TAB","keyCode","TAB_KEY_CODE","altKey","metaKey","shiftKey","isUp","ARROW_UP","ARROW_UP_KEY_CODE","isDown","ARROW_DOWN","ARROW_DOWN_KEY_CODE","list","document","portalId","preventDefault","listElement","handleCompletionChange","stopPropagation","detail","changeEmitter","renderPortal","dropdownZIndex","getComputedStyle","getPropertyValue","visible","containerId","inheritParentWidth","containerStyle","open","allowClicksElement","style","display","onDismiss","handleCloseMenu","renderListResult","filteredCompletions","filterCompletions","onChange","handleKeyDownInDropdown","items","keyFound","ESCAPE","ENTER","keyCodeFound","ESCAPE_KEY_CODE","ENTER_KEY_CODE","filter","completion","toLowerCase","indexOf","handleChange","data","change","emit","action","isEnter","isSpace","SPACE","SPACE_KEY_CODE","config","defaultLocale","debounceTimeout","createRandomString","connectedCallback","componentDidLoad","disconnectedCallback","destroy","removeEventListener","componentDidUpdate","valid","render","onInput","valueWatcher","newValue","completionsWatcher"],"sources":["./node_modules/lodash-es/now.js","./node_modules/lodash-es/debounce.js","./src/components/input-field/input-field.scss?tag=limel-input-field&encapsulation=shadow","./src/components/input-field/input-field.tsx"],"sourcesContent":["import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/textfield';\n@use '@material/textfield/icon';\n@use '@material/notched-outline/mdc-notched-outline';\n@use '@material/floating-label';\n@use '@material/floating-label/mdc-floating-label';\n@use '@material/ripple';\n@use '@material/list';\n@use '@material/elevation';\n@use '@material/menu-surface';\n\n/**\n * @prop --textarea-height: Height of the field when type is set to `textarea`\n */\n\n:host {\n    position: relative;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([type='textarea']) {\n    height: var(--textarea-height, 100%);\n\n    .mdc-text-field.mdc-text-field--textarea {\n        height: var(--textarea-height, 100%);\n\n        .mdc-text-field__input {\n            margin-top: functions.pxToRem(8);\n            margin-bottom: 0;\n        }\n    }\n}\n\n@include textfield.core-styles;\n@include icon.icon-core-styles;\n\n@include shared_input-select-picker.outlined-style-overrides;\n@include shared_input-select-picker.readonly-overrides;\n@include shared_input-select-picker.cropped-label-hack;\n@include shared_input-select-picker.disabled-overrides;\n@include shared_input-select-picker.leading-icon;\n@include shared_input-select-picker.trailing-icon;\n@include shared_input-select-picker.floating-label-overrides;\n@include shared_input-select-picker.helper-text-color;\n@include shared_input-select-picker.lime-empty-value-for-readonly;\n@include shared_input-select-picker.lime-looks-like-input-value;\n\n.mdc-text-field--with-trailing-icon {\n    .mdc-text-field__icon--trailing {\n        margin-right: functions.pxToRem(8);\n    }\n}\n\n.lime-text-field--empty {\n    .mdc-text-field__icon--trailing {\n        @include shared_input-select-picker.looks-disabled;\n        box-shadow: none !important;\n    }\n}\n\n.mdc-text-field {\n    width: 100%;\n\n    &:not(.mdc-text-field--disabled) {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-900));\n        }\n    }\n    &.mdc-text-field--disabled {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-700));\n        }\n    }\n}\n\n.lime-formatted-input {\n    display: none;\n    width: calc(100% - #{functions.pxToRem(20)});\n    z-index: z-index.$input-field--formatted-value;\n\n    pointer-events: none;\n\n    :not(.mdc-text-field--focused):not(.mdc-text-field--invalid) & {\n        display: block;\n    }\n\n    + .mdc-text-field__input {\n        z-index: z-index.$input-field--input-with-formatted-value;\n    }\n}\n\n:not(.mdc-text-field--focused):not(.mdc-text-field--invalid) {\n    .mdc-text-field__input[type='number'] {\n        color: transparent;\n        -webkit-text-fill-color: transparent;\n    }\n\n    &.lime-text-field--readonly {\n        .mdc-text-field__input[type='number'] {\n            visibility: hidden;\n            // Not having `visibility: hidden;` makes the unformatted\n            // value selectable; which is not so nice when users\n            // click drag to select content on the screen.\n            // The reason to have it only on `readonly` mode is\n            // 1. This is the use case where it makes most sense\n            // 2. We don't want to repeat the same thing in the\n            // accessibility tree, and make it readable for assistive\n            // technologies.\n            // 3. When not readonly, clicking on the `<input />`\n            // element sets the focus and activates the edit mode.\n            // So we cannot always have it `hidden` on.\n            // which is why we have instead\n            // `color: transparent` a few lines before this.\n        }\n    }\n}\n\n.autocomplete-list-container {\n    position: relative;\n}\n\n.autocomplete-list {\n    background-color: var(--lime-elevated-surface-background-color);\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    max-height: functions.pxToRem(200);\n    overflow-y: auto;\n}\n\n.mdc-deprecated-list-item {\n    cursor: pointer;\n}\n\ninput.mdc-text-field__input {\n    @include shared_input-select-picker.input-field-placeholder;\n\n    &::-webkit-search-cancel-button {\n        @include mixins.clear-all-button;\n\n        -webkit-appearance: none;\n\n        position: absolute;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        margin: auto;\n\n        &:active {\n            transform: none; //Makes the \"clear-all button\" work\n        }\n        .mdc-text-field--label-floating & {\n            opacity: 1;\n        }\n    }\n}\n\n@import './partial-styles/trailing-icon.scss';\n@import './partial-styles/readonly';\n","import { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { debounce } from 'lodash-es';\nimport {\n    ARROW_DOWN,\n    ARROW_DOWN_KEY_CODE,\n    ARROW_UP,\n    ARROW_UP_KEY_CODE,\n    ENTER,\n    ENTER_KEY_CODE,\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    SPACE,\n    SPACE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\nimport { InputType, ListItem } from '../../interface';\nimport { getHref, getTarget } from '../../util/link-helper';\nimport { JSXBase } from '@stencil/core/internal';\nimport { createRandomString } from '../../util/random-string';\nimport { LimelListCustomEvent } from 'src/components';\nimport config from '../../global/config';\n\ninterface LinkProperties {\n    href: string;\n    target?: string;\n}\n\n/**\n * @exampleComponent limel-example-input-field-text\n * @exampleComponent limel-example-input-field-placeholder\n * @exampleComponent limel-example-input-field-text-multiple\n * @exampleComponent limel-example-input-field-number\n * @exampleComponent limel-example-input-field-autocomplete\n * @exampleComponent limel-example-input-field-icon-leading\n * @exampleComponent limel-example-input-field-icon-trailing\n * @exampleComponent limel-example-input-field-icon-both\n * @exampleComponent limel-example-input-field-showlink\n * @exampleComponent limel-example-input-field-error-icon\n * @exampleComponent limel-example-input-field-textarea\n * @exampleComponent limel-example-input-field-suffix\n * @exampleComponent limel-example-input-field-prefix\n * @exampleComponent limel-example-input-field-search\n * @exampleComponent limel-example-input-field-pattern\n * @exampleComponent limel-example-input-field-focus\n */\n@Component({\n    tag: 'limel-input-field',\n    shadow: true,\n    styleUrl: 'input-field.scss',\n})\nexport class InputField {\n    /**\n     * Set to `true` to disable the field.\n     * Use `disabled` to indicate that the field can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to make the field read-only.\n     * Use `readonly` when the field is only there to present the data it holds,\n     * and will not become possible for the current user to edit.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * The input label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The placeholder text shown inside the input field, when the field is focused and empty.\n     */\n    @Prop({ reflect: true })\n    public placeholder: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * A short piece of text to display before the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public prefix: string;\n\n    /**\n     * A short piece of text to display after the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public suffix: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * The value of the field.\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * Trailing icon to show to the far right in the field.\n     */\n    @Prop({ reflect: true })\n    public trailingIcon: string;\n\n    /**\n     * Leading icon to show to the far left in the field.\n     */\n    @Prop({ reflect: true })\n    public leadingIcon: string;\n\n    /**\n     * Regular expression that the current value of the input field must match.\n     * No forward slashes should be specified around the pattern.\n     * Only used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n     * `password`, or `search`.\n     */\n    @Prop({ reflect: true })\n    public pattern: string;\n\n    /**\n     * Type of input.\n     *\n     * Note** regarding type `url`: `limel-input` uses the native validation\n     * built into the browser for many types of input fields. The native\n     * validation for `url` is very strict, and does not allow relative urls,\n     * nor any other formats that are not a \"fully qualified\" url. To allow\n     * such urls, use the type `urlAsText` instead. `urlAsText` works exactly\n     * like `text` in all regards, except that it enables use of the `showLink`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public type: InputType = 'text';\n\n    /**\n     * Set to `true` to format the current value of the input field only\n     * if the field is of type number.\n     * The number format is determined by the current language of the browser.\n     */\n    @Prop({ reflect: true })\n    public formatNumber = true;\n\n    /**\n     * Incremental values that are valid if the field type is `number`.\n     */\n    @Prop({ reflect: true })\n    public step: number | 'any' = 'any';\n\n    /**\n     * Maximum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public max: number;\n\n    /**\n     * Minimum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public min: number;\n\n    /**\n     * Maximum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public maxlength: number;\n\n    /**\n     * Minimum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public minlength: number;\n\n    /**\n     * list of suggestions `value` can autocomplete to.\n     */\n    @Prop()\n    public completions: string[] = [];\n\n    /**\n     * For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n     * `true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\n     * respectively. The default icon can be overridden using the `trailingIcon`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public showLink = false;\n\n    /**\n     * The locale to use for formatting numbers.\n     */\n    @Prop({ reflect: true })\n    public locale: string = config.defaultLocale;\n\n    /**\n     * Emitted when the input value is changed.\n     */\n    @Event()\n    private change: EventEmitter<string>;\n\n    /**\n     * Emitted when `trailingIcon` or `leadingIcon` is set\n     * and the icon is interacted with.\n     */\n    @Event()\n    private action: EventEmitter<void>;\n\n    @Element()\n    private limelInputField: HTMLLimelInputFieldElement;\n\n    @State()\n    private isFocused: boolean = false;\n\n    @State()\n    private isModified: boolean = false;\n\n    @State()\n    public showCompletions: boolean = false;\n\n    private mdcTextField: MDCTextField;\n    private completionsList: ListItem[] = [];\n    private portalId: string;\n    private helperTextId: string;\n    private labelId: string;\n\n    constructor() {\n        const debounceTimeout = 300;\n        this.changeEmitter = debounce(this.changeEmitter, debounceTimeout);\n\n        this.portalId = createRandomString();\n        this.helperTextId = createRandomString();\n        this.labelId = createRandomString();\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n\n        window.removeEventListener('resize', this.layout);\n        this.limelInputField.removeEventListener('focus', this.setFocus);\n    }\n\n    public componentDidUpdate() {\n        if (this.invalid) {\n            this.mdcTextField.valid = false;\n        }\n    }\n\n    public render() {\n        const properties = this.getAdditionalProps();\n        properties['aria-labelledby'] = this.labelId;\n        properties.class = 'mdc-text-field__input';\n        properties.onInput = this.handleChange;\n        properties.onFocus = this.onFocus;\n        properties.onBlur = this.onBlur;\n        properties.required = this.required;\n        properties.readonly = this.readonly;\n        properties.disabled = this.disabled || this.readonly;\n\n        if (this.hasHelperText()) {\n            properties['aria-controls'] = this.helperTextId;\n            properties['aria-describedby'] = this.helperTextId;\n        }\n\n        return [\n            <label class={this.getContainerClassList()}>\n                <span class=\"mdc-notched-outline\" tabindex=\"-1\">\n                    <span class=\"mdc-notched-outline__leading\"></span>\n                    {this.renderLabel()}\n                    <span class=\"mdc-notched-outline__trailing\"></span>\n                </span>\n                {this.renderLeadingIcon()}\n                {this.renderEmptyValueForReadonly()}\n                {this.renderPrefix()}\n                {this.renderFormattedNumber()}\n                {this.renderInput(properties)}\n                {this.renderSuffix()}\n                {this.renderTextarea(properties)}\n                {this.renderTrailingLinkOrButton()}\n            </label>,\n            this.renderHelperLine(),\n            this.renderPortal(),\n        ];\n    }\n\n    @Watch('value')\n    protected valueWatcher(newValue: string) {\n        if (!this.mdcTextField) {\n            return;\n        }\n\n        if (newValue !== this.mdcTextField.value) {\n            this.mdcTextField.value = newValue || '';\n        }\n    }\n\n    @Watch('completions')\n    protected completionsWatcher() {\n        this.mapCompletions();\n    }\n\n    private initialize = () => {\n        const element =\n            this.limelInputField.shadowRoot.querySelector('.mdc-text-field');\n        if (!element) {\n            return;\n        }\n\n        this.mdcTextField = new MDCTextField(element);\n\n        this.mapCompletions();\n\n        window.addEventListener('resize', this.layout, { passive: true });\n        this.limelInputField.addEventListener('focus', this.setFocus);\n    };\n\n    private mapCompletions = () => {\n        this.completionsList = [...this.completions].map((item) => {\n            return { text: item };\n        });\n    };\n\n    private setFocus = () => {\n        this.mdcTextField.focus();\n    };\n\n    private getContainerClassList = () => {\n        const classList = {\n            'mdc-text-field': true,\n            'mdc-text-field--no-label': !this.label,\n            'mdc-text-field--outlined': true,\n            'mdc-text-field--invalid': this.isInvalid(),\n            'mdc-text-field--disabled': this.disabled || this.readonly,\n            'lime-text-field--readonly': this.readonly,\n            'mdc-text-field--required': this.required,\n            'lime-text-field--empty': !this.value,\n            'lime-has-prefix': this.hasPrefix(),\n            'lime-has-suffix': this.hasSuffix(),\n        };\n\n        if (this.type === 'textarea') {\n            classList['mdc-text-field--textarea'] = true;\n        } else {\n            classList['mdc-text-field--with-leading-icon'] = !!this.leadingIcon;\n            classList['mdc-text-field--with-trailing-icon'] =\n                !!this.getTrailingIcon();\n        }\n\n        return classList;\n    };\n\n    private renderInput = (\n        properties: JSXBase.InputHTMLAttributes<HTMLInputElement>\n    ) => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const type = this.type === 'urlAsText' ? 'text' : this.type;\n\n        return (\n            <input\n                {...properties}\n                type={type}\n                pattern={this.pattern}\n                onWheel={this.handleWheel}\n                onKeyDown={this.onKeyDown}\n                value={this.value}\n                placeholder={this.placeholder}\n            />\n        );\n    };\n\n    private renderTextarea = (\n        properties: JSXBase.TextareaHTMLAttributes<HTMLTextAreaElement>\n    ) => {\n        if (this.type !== 'textarea') {\n            return;\n        }\n\n        return (\n            <span class=\"mdc-text-field__resizer\">\n                <textarea {...properties} placeholder={this.placeholder}>\n                    {this.value}\n                </textarea>\n            </span>\n        );\n    };\n\n    private layout = () => {\n        this.mdcTextField?.layout();\n    };\n\n    private getAdditionalProps = () => {\n        const props: any = {};\n\n        if (this.type === 'number') {\n            props.step = this.step;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.min)) {\n            props.min = this.min;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.max)) {\n            props.max = this.max;\n        }\n\n        if (this.minlength) {\n            props.minlength = this.minlength;\n        }\n\n        if (this.maxlength) {\n            props.maxlength = this.maxlength;\n        }\n\n        return props;\n    };\n\n    private onFocus = () => {\n        this.isFocused = true;\n        this.showCompletions = true;\n    };\n\n    private onBlur = () => {\n        this.isFocused = false;\n        this.isModified = true;\n    };\n\n    private renderHelperLine = () => {\n        const text: string = this.value || '';\n        const length = text.length;\n\n        if (!this.maxlength && !this.hasHelperText()) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                helperTextId={this.helperTextId}\n                helperText={this.helperText}\n                length={length}\n                maxLength={this.maxlength}\n                invalid={this.isInvalid()}\n            />\n        );\n    };\n\n    private renderEmptyValueForReadonly = () => {\n        if (this.readonly && !this.value) {\n            return (\n                <span class=\"lime-empty-value-for-readonly lime-looks-like-input-value\">\n                    –\n                </span>\n            );\n        }\n    };\n\n    private hasHelperText = () => {\n        return this.helperText !== null && this.helperText !== undefined;\n    };\n\n    private renderSuffix = () => {\n        if (!this.hasSuffix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--suffix': true,\n        };\n\n        return <span class={classList}>{this.suffix}</span>;\n    };\n\n    private hasSuffix = () => {\n        return this.suffix !== null && this.suffix !== undefined;\n    };\n\n    private renderPrefix = () => {\n        if (!this.hasPrefix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--prefix': true,\n        };\n\n        return <span class={classList}>{this.prefix}</span>;\n    };\n\n    private hasPrefix = () => {\n        return this.prefix !== null && this.prefix !== undefined;\n    };\n\n    private isInvalid = () => {\n        if (this.readonly) {\n            // A readonly field can never be invalid.\n            return false;\n        }\n\n        if (this.invalid) {\n            // `this.invalid` is set by the consumer. If the consumer explicitly\n            // told us to consider the field invalid, we consider it invalid\n            // regardless of what our internal validation thinks, and regardless\n            // of whether the field has been modified.\n            return true;\n        }\n\n        if (!this.isModified) {\n            return false;\n        }\n\n        const element = this.getInputElement();\n\n        return !(element && element.checkValidity());\n    };\n\n    private getInputElement = (): HTMLInputElement | HTMLTextAreaElement => {\n        let elementName = 'input';\n        if (this.type === 'textarea') {\n            elementName = 'textarea';\n        }\n\n        return this.limelInputField.shadowRoot.querySelector(elementName);\n    };\n\n    private renderLabel = () => {\n        const labelClassList = {\n            'mdc-floating-label': true,\n            'mdc-floating-label--float-above':\n                !!this.value || this.isFocused || this.readonly,\n        };\n\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <span class=\"mdc-notched-outline__notch\">\n                <span class={labelClassList} id={this.labelId}>\n                    {this.label}\n                </span>\n            </span>\n        );\n    };\n\n    private renderLeadingIcon = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        if (this.leadingIcon) {\n            return (\n                <i class=\"material-icons mdc-text-field__icon mdc-text-field__icon--leading\">\n                    <limel-icon name={this.leadingIcon} />\n                </i>\n            );\n        }\n    };\n\n    private renderTrailingLinkOrButton = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const html = [];\n\n        const trailingIcon = this.getTrailingIcon();\n\n        if (!this.isInvalid() && this.hasLink()) {\n            html.push(this.renderLinkIcon(this.getLink(), trailingIcon));\n        } else if (trailingIcon) {\n            html.push(this.renderTrailingIcon(trailingIcon));\n        }\n\n        return html;\n    };\n\n    private hasLink = () => {\n        return (\n            this.showLink &&\n            ['email', 'tel', 'url', 'urlAsText'].includes(this.type)\n        );\n    };\n\n    private getLink = () => {\n        const props: LinkProperties = { href: '' };\n        switch (this.type) {\n            case 'email':\n                props.href = `mailto:${this.value}`;\n                break;\n            case 'tel':\n                props.href = `tel:${this.value}`;\n                break;\n            default:\n                props.href = getHref(this.value);\n                props.target = getTarget(this.value);\n        }\n\n        return props;\n    };\n\n    private renderLinkIcon = (linkProps: LinkProperties, icon: string) => {\n        // If the trailing icon uses the class `mdc-text-field__icon--trailing`,\n        // MDC attaches a click handler to it, which apparently runs\n        // `preventDefault()` on the event. For links, we don't want that,\n        // so instead of `mdc-text-field__icon--trailing`, we use our own class\n        // `lime-trailing-icon-for-link`, which uses all the same styling. /Ads\n        return (\n            <a\n                {...linkProps}\n                class=\"material-icons mdc-text-field__icon lime-trailing-icon-for-link\"\n                tabindex={this.disabled || !this.value ? '-1' : '0'}\n                role=\"button\"\n            >\n                <limel-icon name={icon} />\n            </a>\n        );\n    };\n\n    private renderTrailingIcon = (icon: string) => {\n        const props: any = {\n            tabIndex: this.isInvalid() ? '-1' : '0',\n        };\n        if (!this.isInvalid()) {\n            props.onKeyPress = this.handleIconKeyPress;\n            props.onClick = this.handleIconClick;\n            props.role = 'button';\n        }\n\n        return (\n            <i\n                class=\"material-icons mdc-text-field__icon mdc-text-field__icon--trailing\"\n                {...props}\n            >\n                <limel-icon name={icon} />\n            </i>\n        );\n    };\n\n    private getTrailingIcon = () => {\n        if (this.isInvalid()) {\n            return 'high_importance';\n        }\n\n        if (this.trailingIcon) {\n            return this.trailingIcon;\n        }\n\n        if (this.showLink && this.type === 'email') {\n            return 'filled_message';\n        }\n\n        if (this.showLink && this.type === 'tel') {\n            return 'phone';\n        }\n\n        if (\n            this.showLink &&\n            (this.type === 'url' || this.type === 'urlAsText')\n        ) {\n            return 'external_link';\n        }\n    };\n\n    private renderFormattedNumber = () => {\n        if (this.type !== 'number') {\n            return;\n        }\n\n        let renderValue = this.value;\n        if (this.formatNumber && this.value) {\n            renderValue = new Intl.NumberFormat(this.locale).format(\n                Number(this.value)\n            );\n        }\n\n        return (\n            <span class=\"lime-formatted-input lime-looks-like-input-value\">\n                {renderValue}\n            </span>\n        );\n    };\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     * @param {KeyboardEvent} event event\n     * @returns {void}\n     */\n\n    private onKeyDown = (event: KeyboardEvent): void => {\n        this.showCompletions = true;\n        const isForwardTab =\n            (event.key === TAB || event.keyCode === TAB_KEY_CODE) &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp =\n            event.key === ARROW_UP || event.keyCode === ARROW_UP_KEY_CODE;\n        const isDown =\n            event.key === ARROW_DOWN || event.keyCode === ARROW_DOWN_KEY_CODE;\n\n        if (event.keyCode === TAB_KEY_CODE && event.shiftKey) {\n            this.showCompletions = false;\n        }\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child'\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child'\n            );\n            listElement.focus();\n        }\n    };\n\n    private handleCompletionChange = (\n        event: LimelListCustomEvent<ListItem>\n    ) => {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.showCompletions = false;\n\n        /*\n         This change event doesn't need to be debounced in itself, but we want\n         to make absolutely sure that an earlier change event that *has* been\n         debounced doesn't emit after this one. Therefore, we run this through\n         the same debounced emitter function. /Ads\n         */\n        this.changeEmitter(event.detail.text);\n    };\n\n    private renderPortal = () => {\n        if (this.type === 'textarea' || !this.completions.length) {\n            return;\n        }\n\n        const dropdownZIndex = getComputedStyle(\n            this.limelInputField\n        ).getPropertyValue('--dropdown-z-index');\n\n        if (\n            !this.completions.length ||\n            (!this.maxlength && !this.hasHelperText())\n        ) {\n            return;\n        }\n\n        return (\n            <limel-portal\n                visible={this.isFocused || this.isInvalid()}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={this.showCompletions}\n                    allowClicksElement={this.limelInputField}\n                    style={{\n                        '--mdc-menu-min-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {this.renderListResult()}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    };\n\n    private renderListResult = () => {\n        const filteredCompletions: ListItem[] = this.filterCompletions(\n            this.value\n        );\n        if (!filteredCompletions || filteredCompletions.length === 0) {\n            return null;\n        }\n\n        return (\n            <limel-list\n                onChange={this.handleCompletionChange}\n                onKeyDown={this.handleKeyDownInDropdown}\n                type=\"selectable\"\n                items={filteredCompletions}\n            />\n        );\n    };\n\n    private handleKeyDownInDropdown = (event: KeyboardEvent) => {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        const keyCodeFound = [\n            TAB_KEY_CODE,\n            ESCAPE_KEY_CODE,\n            ENTER_KEY_CODE,\n        ].includes(event.keyCode);\n        if (keyFound || keyCodeFound) {\n            this.setFocus();\n        }\n    };\n\n    private handleCloseMenu = () => {\n        this.showCompletions = false;\n    };\n\n    private filterCompletions = (filter: string) => {\n        if (!filter) {\n            return this.completionsList;\n        }\n\n        return this.completionsList.filter(\n            (completion) =>\n                completion.text.toLowerCase().indexOf(filter.toLowerCase()) > -1\n        );\n    };\n\n    private handleChange = (event) => {\n        event.stopPropagation();\n        let value = event.target.value;\n\n        if (this.type === 'number') {\n            if (!value && event.data) {\n                event.stopPropagation();\n\n                return;\n            }\n\n            if (value) {\n                value = Number(value);\n            }\n        }\n\n        this.changeEmitter(value);\n    };\n\n    private changeEmitter = (value: string) => {\n        this.change.emit(value);\n    };\n\n    private handleIconClick = () => {\n        if (!this.isInvalid()) {\n            this.action.emit();\n        }\n    };\n\n    private handleIconKeyPress = (event: KeyboardEvent) => {\n        const isEnter = event.key === ENTER || event.keyCode === ENTER_KEY_CODE;\n        const isSpace = event.key === SPACE || event.keyCode === SPACE_KEY_CODE;\n\n        if ((isSpace || isEnter) && !this.isInvalid()) {\n            this.action.emit();\n        }\n    };\n\n    private handleWheel = () => {\n        // This empty event handler is here to circumvent a bug.\n        // In some browsers (Chrome for example), hovering the input with\n        // the input focused, and scrolling, will both change the value\n        // AND scroll the page. We would prefer to never change the value\n        // on scroll, instead always scrolling the page, but since we\n        // haven't found a way to do that, this is the next best thing, as\n        // it prevents the page from being scrolled, but only in the\n        // circumstances when the value is changed by the scrolling.\n        // Please test THOROUGHLY if you remove this event handler 😄\n    };\n}\n"],"mappings":"+qBAkBA,IAAIA,EAAM,WACR,OAAOC,EAAKC,KAAKF,KACnB,ECfA,IAAIG,EAAkB,sBAGtB,IAAIC,EAAYC,KAAKC,IACjBC,EAAYF,KAAKG,IAwDrB,SAASC,EAASC,EAAMC,EAAMC,GAC5B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAiB,EACjBC,EAAU,MACVC,EAAS,MACTC,EAAW,KAEf,UAAWZ,GAAQ,WAAY,CAC7B,MAAM,IAAIa,UAAUpB,EACxB,CACEQ,EAAOa,EAASb,IAAS,EACzB,GAAIc,EAASb,GAAU,CACrBQ,IAAYR,EAAQQ,QACpBC,EAAS,YAAaT,EACtBG,EAAUM,EAASjB,EAAUoB,EAASZ,EAAQG,UAAY,EAAGJ,GAAQI,EACrEO,EAAW,aAAcV,IAAYA,EAAQU,SAAWA,CAC5D,CAEE,SAASI,EAAWC,GAClB,IAAIC,EAAOf,EACPgB,EAAUf,EAEdD,EAAWC,EAAWgB,UACtBX,EAAiBQ,EACjBX,EAASN,EAAKqB,MAAMF,EAASD,GAC7B,OAAOZ,CACX,CAEE,SAASgB,EAAYL,GAEnBR,EAAiBQ,EAEjBV,EAAUgB,WAAWC,EAAcvB,GAEnC,OAAOS,EAAUM,EAAWC,GAAQX,CACxC,CAEE,SAASmB,EAAcR,GACrB,IAAIS,EAAoBT,EAAOT,EAC3BmB,EAAsBV,EAAOR,EAC7BmB,EAAc3B,EAAOyB,EAEzB,OAAOf,EACHd,EAAU+B,EAAavB,EAAUsB,GACjCC,CACR,CAEE,SAASC,EAAaZ,GACpB,IAAIS,EAAoBT,EAAOT,EAC3BmB,EAAsBV,EAAOR,EAKjC,OAAQD,IAAiBY,WAAcM,GAAqBzB,GACzDyB,EAAoB,GAAOf,GAAUgB,GAAuBtB,CACnE,CAEE,SAASmB,IACP,IAAIP,EAAO3B,IACX,GAAIuC,EAAaZ,GAAO,CACtB,OAAOa,EAAab,EAC1B,CAEIV,EAAUgB,WAAWC,EAAcC,EAAcR,GACrD,CAEE,SAASa,EAAab,GACpBV,EAAUa,UAIV,GAAIR,GAAYT,EAAU,CACxB,OAAOa,EAAWC,EACxB,CACId,EAAWC,EAAWgB,UACtB,OAAOd,CACX,CAEE,SAASyB,IACP,GAAIxB,IAAYa,UAAW,CACzBY,aAAazB,EACnB,CACIE,EAAiB,EACjBN,EAAWK,EAAeJ,EAAWG,EAAUa,SACnD,CAEE,SAASa,IACP,OAAO1B,IAAYa,UAAYd,EAASwB,EAAaxC,IACzD,CAEE,SAAS4C,IACP,IAAIjB,EAAO3B,IACP6C,EAAaN,EAAaZ,GAE9Bd,EAAWiC,UACXhC,EAAWiC,KACX7B,EAAeS,EAEf,GAAIkB,EAAY,CACd,GAAI5B,IAAYa,UAAW,CACzB,OAAOE,EAAYd,EAC3B,CACM,GAAIG,EAAQ,CAEVqB,aAAazB,GACbA,EAAUgB,WAAWC,EAAcvB,GACnC,OAAOe,EAAWR,EAC1B,CACA,CACI,GAAID,IAAYa,UAAW,CACzBb,EAAUgB,WAAWC,EAAcvB,EACzC,CACI,OAAOK,CACX,CACE4B,EAAUH,OAASA,EACnBG,EAAUD,MAAQA,EAClB,OAAOC,CACT,CC5LA,MAAMI,EAAgB,gu6D,MC6DTC,EAAU,MAoMnBC,YAAAC,G,wEALQJ,KAAAK,gBAA8B,GA0F9BL,KAAAM,WAAa,KACjB,MAAMC,EACFP,KAAKQ,gBAAgBC,WAAWC,cAAc,mBAClD,IAAKH,EAAS,CACV,M,CAGJP,KAAKW,aAAe,IAAIC,EAAaL,GAErCP,KAAKa,iBAELC,OAAOC,iBAAiB,SAAUf,KAAKgB,OAAQ,CAAEC,QAAS,OAC1DjB,KAAKQ,gBAAgBO,iBAAiB,QAASf,KAAKkB,SAAS,EAGzDlB,KAAAa,eAAiB,KACrBb,KAAKK,gBAAkB,IAAIL,KAAKmB,aAAaC,KAAKC,IACvC,CAAEC,KAAMD,KACjB,EAGErB,KAAAkB,SAAW,KACflB,KAAKW,aAAaY,OAAO,EAGrBvB,KAAAwB,sBAAwB,KAC5B,MAAMC,EAAY,CACd,iBAAkB,KAClB,4BAA6BzB,KAAK0B,MAClC,2BAA4B,KAC5B,0BAA2B1B,KAAK2B,YAChC,2BAA4B3B,KAAK4B,UAAY5B,KAAK6B,SAClD,4BAA6B7B,KAAK6B,SAClC,2BAA4B7B,KAAK8B,SACjC,0BAA2B9B,KAAK+B,MAChC,kBAAmB/B,KAAKgC,YACxB,kBAAmBhC,KAAKiC,aAG5B,GAAIjC,KAAKkC,OAAS,WAAY,CAC1BT,EAAU,4BAA8B,I,KACrC,CACHA,EAAU,uCAAyCzB,KAAKmC,YACxDV,EAAU,wCACJzB,KAAKoC,iB,CAGf,OAAOX,CAAS,EAGZzB,KAAAqC,YACJC,IAEA,GAAItC,KAAKkC,OAAS,WAAY,CAC1B,M,CAGJ,MAAMA,EAAOlC,KAAKkC,OAAS,YAAc,OAASlC,KAAKkC,KAEvD,OACIK,EAAA,QAAAC,OAAAC,OAAA,GACQH,EAAU,CACdJ,KAAMA,EACNQ,QAAS1C,KAAK0C,QACdC,QAAS3C,KAAK4C,YACdC,UAAW7C,KAAK6C,UAChBd,MAAO/B,KAAK+B,MACZe,YAAa9C,KAAK8C,cACpB,EAIF9C,KAAA+C,eACJT,IAEA,GAAItC,KAAKkC,OAAS,WAAY,CAC1B,M,CAGJ,OACIK,EAAA,QAAMS,MAAM,2BACRT,EAAA,WAAAC,OAAAC,OAAA,GAAcH,EAAU,CAAEQ,YAAa9C,KAAK8C,cACvC9C,KAAK+B,OAEP,EAIP/B,KAAAgB,OAAS,K,OACbiC,EAAAjD,KAAKW,gBAAY,MAAAsC,SAAA,SAAAA,EAAEjC,QAAQ,EAGvBhB,KAAAkD,mBAAqB,KACzB,MAAMC,EAAa,GAEnB,GAAInD,KAAKkC,OAAS,SAAU,CACxBiB,EAAMC,KAAOpD,KAAKoD,I,CAGtB,GAAIpD,KAAKkC,OAAS,UAAYmB,OAAOC,UAAUtD,KAAKvC,KAAM,CACtD0F,EAAM1F,IAAMuC,KAAKvC,G,CAGrB,GAAIuC,KAAKkC,OAAS,UAAYmB,OAAOC,UAAUtD,KAAKzC,KAAM,CACtD4F,EAAM5F,IAAMyC,KAAKzC,G,CAGrB,GAAIyC,KAAKuD,UAAW,CAChBJ,EAAMI,UAAYvD,KAAKuD,S,CAG3B,GAAIvD,KAAKwD,UAAW,CAChBL,EAAMK,UAAYxD,KAAKwD,S,CAG3B,OAAOL,CAAK,EAGRnD,KAAAyD,QAAU,KACdzD,KAAK0D,UAAY,KACjB1D,KAAK2D,gBAAkB,IAAI,EAGvB3D,KAAA4D,OAAS,KACb5D,KAAK0D,UAAY,MACjB1D,KAAK6D,WAAa,IAAI,EAGlB7D,KAAA8D,iBAAmB,KACvB,MAAMxC,EAAetB,KAAK+B,OAAS,GACnC,MAAMgC,EAASzC,EAAKyC,OAEpB,IAAK/D,KAAKwD,YAAcxD,KAAKgE,gBAAiB,CAC1C,M,CAGJ,OACIzB,EAAA,qBACI0B,aAAcjE,KAAKiE,aACnBC,WAAYlE,KAAKkE,WACjBH,OAAQA,EACRI,UAAWnE,KAAKwD,UAChBY,QAASpE,KAAK2B,aAChB,EAIF3B,KAAAqE,4BAA8B,KAClC,GAAIrE,KAAK6B,WAAa7B,KAAK+B,MAAO,CAC9B,OACIQ,EAAA,QAAMS,MAAM,6DAA2D,I,GAO3EhD,KAAAgE,cAAgB,IACbhE,KAAKkE,aAAe,MAAQlE,KAAKkE,aAAenF,UAGnDiB,KAAAsE,aAAe,KACnB,IAAKtE,KAAKiC,aAAejC,KAAKkC,OAAS,WAAY,CAC/C,M,CAGJ,MAAMT,EAAY,CACd,wBAAyB,KACzB,gCAAiC,MAGrC,OAAOc,EAAA,QAAMS,MAAOvB,GAAYzB,KAAKuE,OAAc,EAG/CvE,KAAAiC,UAAY,IACTjC,KAAKuE,SAAW,MAAQvE,KAAKuE,SAAWxF,UAG3CiB,KAAAwE,aAAe,KACnB,IAAKxE,KAAKgC,aAAehC,KAAKkC,OAAS,WAAY,CAC/C,M,CAGJ,MAAMT,EAAY,CACd,wBAAyB,KACzB,gCAAiC,MAGrC,OAAOc,EAAA,QAAMS,MAAOvB,GAAYzB,KAAKyE,OAAc,EAG/CzE,KAAAgC,UAAY,IACThC,KAAKyE,SAAW,MAAQzE,KAAKyE,SAAW1F,UAG3CiB,KAAA2B,UAAY,KAChB,GAAI3B,KAAK6B,SAAU,CAEf,OAAO,K,CAGX,GAAI7B,KAAKoE,QAAS,CAKd,OAAO,I,CAGX,IAAKpE,KAAK6D,WAAY,CAClB,OAAO,K,CAGX,MAAMtD,EAAUP,KAAK0E,kBAErB,QAASnE,GAAWA,EAAQoE,gBAAgB,EAGxC3E,KAAA0E,gBAAkB,KACtB,IAAIE,EAAc,QAClB,GAAI5E,KAAKkC,OAAS,WAAY,CAC1B0C,EAAc,U,CAGlB,OAAO5E,KAAKQ,gBAAgBC,WAAWC,cAAckE,EAAY,EAG7D5E,KAAA6E,YAAc,KAClB,MAAMC,EAAiB,CACnB,qBAAsB,KACtB,oCACM9E,KAAK+B,OAAS/B,KAAK0D,WAAa1D,KAAK6B,UAG/C,IAAK7B,KAAK0B,MAAO,CACb,M,CAGJ,OACIa,EAAA,QAAMS,MAAM,8BACRT,EAAA,QAAMS,MAAO8B,EAAgBC,GAAI/E,KAAKgF,SACjChF,KAAK0B,OAEP,EAIP1B,KAAAiF,kBAAoB,KACxB,GAAIjF,KAAKkC,OAAS,WAAY,CAC1B,M,CAGJ,GAAIlC,KAAKmC,YAAa,CAClB,OACII,EAAA,KAAGS,MAAM,qEACLT,EAAA,cAAY2C,KAAMlF,KAAKmC,c,GAM/BnC,KAAAmF,2BAA6B,KACjC,GAAInF,KAAKkC,OAAS,WAAY,CAC1B,M,CAGJ,MAAMkD,EAAO,GAEb,MAAMC,EAAerF,KAAKoC,kBAE1B,IAAKpC,KAAK2B,aAAe3B,KAAKsF,UAAW,CACrCF,EAAKG,KAAKvF,KAAKwF,eAAexF,KAAKyF,UAAWJ,G,MAC3C,GAAIA,EAAc,CACrBD,EAAKG,KAAKvF,KAAK0F,mBAAmBL,G,CAGtC,OAAOD,CAAI,EAGPpF,KAAAsF,QAAU,IAEVtF,KAAK2F,UACL,CAAC,QAAS,MAAO,MAAO,aAAaC,SAAS5F,KAAKkC,MAInDlC,KAAAyF,QAAU,KACd,MAAMtC,EAAwB,CAAE0C,KAAM,IACtC,OAAQ7F,KAAKkC,MACT,IAAK,QACDiB,EAAM0C,KAAO,UAAU7F,KAAK+B,QAC5B,MACJ,IAAK,MACDoB,EAAM0C,KAAO,OAAO7F,KAAK+B,QACzB,MACJ,QACIoB,EAAM0C,KAAOC,EAAQ9F,KAAK+B,OAC1BoB,EAAM4C,OAASC,EAAUhG,KAAK+B,OAGtC,OAAOoB,CAAK,EAGRnD,KAAAwF,eAAiB,CAACS,EAA2BC,IAO7C3D,EAAA,IAAAC,OAAAC,OAAA,GACQwD,EAAS,CACbjD,MAAM,kEACNmD,SAAUnG,KAAK4B,WAAa5B,KAAK+B,MAAQ,KAAO,IAChDqE,KAAK,WAEL7D,EAAA,cAAY2C,KAAMgB,KAKtBlG,KAAA0F,mBAAsBQ,IAC1B,MAAM/C,EAAa,CACfkD,SAAUrG,KAAK2B,YAAc,KAAO,KAExC,IAAK3B,KAAK2B,YAAa,CACnBwB,EAAMmD,WAAatG,KAAKuG,mBACxBpD,EAAMqD,QAAUxG,KAAKyG,gBACrBtD,EAAMiD,KAAO,Q,CAGjB,OACI7D,EAAA,IAAAC,OAAAC,OAAA,CACIO,MAAM,sEACFG,GAEJZ,EAAA,cAAY2C,KAAMgB,IAClB,EAIJlG,KAAAoC,gBAAkB,KACtB,GAAIpC,KAAK2B,YAAa,CAClB,MAAO,iB,CAGX,GAAI3B,KAAKqF,aAAc,CACnB,OAAOrF,KAAKqF,Y,CAGhB,GAAIrF,KAAK2F,UAAY3F,KAAKkC,OAAS,QAAS,CACxC,MAAO,gB,CAGX,GAAIlC,KAAK2F,UAAY3F,KAAKkC,OAAS,MAAO,CACtC,MAAO,O,CAGX,GACIlC,KAAK2F,WACJ3F,KAAKkC,OAAS,OAASlC,KAAKkC,OAAS,aACxC,CACE,MAAO,e,GAIPlC,KAAA0G,sBAAwB,KAC5B,GAAI1G,KAAKkC,OAAS,SAAU,CACxB,M,CAGJ,IAAIyE,EAAc3G,KAAK+B,MACvB,GAAI/B,KAAK4G,cAAgB5G,KAAK+B,MAAO,CACjC4E,EAAc,IAAIE,KAAKC,aAAa9G,KAAK+G,QAAQC,OAC7C3D,OAAOrD,KAAK+B,O,CAIpB,OACIQ,EAAA,QAAMS,MAAM,oDACP2D,EACE,EAWP3G,KAAA6C,UAAaoE,IACjBjH,KAAK2D,gBAAkB,KACvB,MAAMuD,GACDD,EAAME,MAAQC,GAAOH,EAAMI,UAAYC,KACvCL,EAAMM,SACNN,EAAMO,UACNP,EAAMQ,SACX,MAAMC,EACFT,EAAME,MAAQQ,GAAYV,EAAMI,UAAYO,EAChD,MAAMC,EACFZ,EAAME,MAAQW,GAAcb,EAAMI,UAAYU,EAElD,GAAId,EAAMI,UAAYC,GAAgBL,EAAMQ,SAAU,CAClDzH,KAAK2D,gBAAkB,K,CAG3B,IAAKuD,IAAiBQ,IAASG,EAAQ,CACnC,M,CAGJ,MAAMG,EAAOC,SAASvH,cAAc,KAAKV,KAAKkI,uBAE9C,IAAKF,EAAM,CACP,M,CAGJf,EAAMkB,iBACN,GAAIjB,GAAgBW,EAAQ,CACxB,MAAMO,EAA2BJ,EAAKvH,WAAWC,cAC7C,yCAEJ0H,EAAY7G,QAEZ,M,CAGJ,GAAImG,EAAM,CACN,MAAMU,EAA2BJ,EAAKvH,WAAWC,cAC7C,wCAEJ0H,EAAY7G,O,GAIZvB,KAAAqI,uBACJpB,IAEAA,EAAMqB,kBACN,IAAKrB,EAAMsB,OAAQ,CACf,M,CAGJvI,KAAK2D,gBAAkB,MAQvB3D,KAAKwI,cAAcvB,EAAMsB,OAAOjH,KAAK,EAGjCtB,KAAAyI,aAAe,KACnB,GAAIzI,KAAKkC,OAAS,aAAelC,KAAKmB,YAAY4C,OAAQ,CACtD,M,CAGJ,MAAM2E,EAAiBC,iBACnB3I,KAAKQ,iBACPoI,iBAAiB,sBAEnB,IACK5I,KAAKmB,YAAY4C,SAChB/D,KAAKwD,YAAcxD,KAAKgE,gBAC5B,CACE,M,CAGJ,OACIzB,EAAA,gBACIsG,QAAS7I,KAAK0D,WAAa1D,KAAK2B,YAChCmH,YAAa9I,KAAKkI,SAClBa,mBAAoB,KACpBC,eAAgB,CAAE,UAAWN,IAE7BnG,EAAA,sBACI0G,KAAMjJ,KAAK2D,gBACXuF,mBAAoBlJ,KAAKQ,gBACzB2I,MAAO,CACH,uBAAwB,OACxB,aAAc,UACdC,QAAS,QAEbC,UAAWrJ,KAAKsJ,iBAEftJ,KAAKuJ,oBAEC,EAIfvJ,KAAAuJ,iBAAmB,KACvB,MAAMC,EAAkCxJ,KAAKyJ,kBACzCzJ,KAAK+B,OAET,IAAKyH,GAAuBA,EAAoBzF,SAAW,EAAG,CAC1D,OAAO,I,CAGX,OACIxB,EAAA,cACImH,SAAU1J,KAAKqI,uBACfxF,UAAW7C,KAAK2J,wBAChBzH,KAAK,aACL0H,MAAOJ,GACT,EAIFxJ,KAAA2J,wBAA2B1C,IAC/B,MAAM4C,EAAW,CAACzC,EAAK0C,EAAQC,GAAOnE,SAASqB,EAAME,KACrD,MAAM6C,EAAe,CACjB1C,EACA2C,EACAC,GACFtE,SAASqB,EAAMI,SACjB,GAAIwC,GAAYG,EAAc,CAC1BhK,KAAKkB,U,GAILlB,KAAAsJ,gBAAkB,KACtBtJ,KAAK2D,gBAAkB,KAAK,EAGxB3D,KAAAyJ,kBAAqBU,IACzB,IAAKA,EAAQ,CACT,OAAOnK,KAAKK,e,CAGhB,OAAOL,KAAKK,gBAAgB8J,QACvBC,GACGA,EAAW9I,KAAK+I,cAAcC,QAAQH,EAAOE,gBAAkB,GACtE,EAGGrK,KAAAuK,aAAgBtD,IACpBA,EAAMqB,kBACN,IAAIvG,EAAQkF,EAAMlB,OAAOhE,MAEzB,GAAI/B,KAAKkC,OAAS,SAAU,CACxB,IAAKH,GAASkF,EAAMuD,KAAM,CACtBvD,EAAMqB,kBAEN,M,CAGJ,GAAIvG,EAAO,CACPA,EAAQsB,OAAOtB,E,EAIvB/B,KAAKwI,cAAczG,EAAM,EAGrB/B,KAAAwI,cAAiBzG,IACrB/B,KAAKyK,OAAOC,KAAK3I,EAAM,EAGnB/B,KAAAyG,gBAAkB,KACtB,IAAKzG,KAAK2B,YAAa,CACnB3B,KAAK2K,OAAOD,M,GAIZ1K,KAAAuG,mBAAsBU,IAC1B,MAAM2D,EAAU3D,EAAME,MAAQ4C,GAAS9C,EAAMI,UAAY6C,EACzD,MAAMW,EAAU5D,EAAME,MAAQ2D,GAAS7D,EAAMI,UAAY0D,EAEzD,IAAKF,GAAWD,KAAa5K,KAAK2B,YAAa,CAC3C3B,KAAK2K,OAAOD,M,GAIZ1K,KAAA4C,YAAc,O,cAl1BJ,M,cAQA,M,aAOD,M,oIAsCC,M,6GAyCO,O,kBAQH,K,UAMQ,M,yGAgCC,G,cASb,M,YAMMoI,EAAOC,c,eAmBF,M,gBAGC,M,qBAGI,MAS9B,MAAMC,EAAkB,IACxBlL,KAAKwI,cAAgB9K,EAASsC,KAAKwI,cAAe0C,GAElDlL,KAAKkI,SAAWiD,IAChBnL,KAAKiE,aAAekH,IACpBnL,KAAKgF,QAAUmG,G,CAGZC,oBACHpL,KAAKM,Y,CAGF+K,mBACHrL,KAAKM,Y,CAGFgL,uBACH,GAAItL,KAAKW,aAAc,CACnBX,KAAKW,aAAa4K,S,CAGtBzK,OAAO0K,oBAAoB,SAAUxL,KAAKgB,QAC1ChB,KAAKQ,gBAAgBgL,oBAAoB,QAASxL,KAAKkB,S,CAGpDuK,qBACH,GAAIzL,KAAKoE,QAAS,CACdpE,KAAKW,aAAa+K,MAAQ,K,EAI3BC,SACH,MAAMrJ,EAAatC,KAAKkD,qBACxBZ,EAAW,mBAAqBtC,KAAKgF,QACrC1C,EAAWU,MAAQ,wBACnBV,EAAWsJ,QAAU5L,KAAKuK,aAC1BjI,EAAWmB,QAAUzD,KAAKyD,QAC1BnB,EAAWsB,OAAS5D,KAAK4D,OACzBtB,EAAWR,SAAW9B,KAAK8B,SAC3BQ,EAAWT,SAAW7B,KAAK6B,SAC3BS,EAAWV,SAAW5B,KAAK4B,UAAY5B,KAAK6B,SAE5C,GAAI7B,KAAKgE,gBAAiB,CACtB1B,EAAW,iBAAmBtC,KAAKiE,aACnC3B,EAAW,oBAAsBtC,KAAKiE,Y,CAG1C,MAAO,CACH1B,EAAA,SAAOS,MAAOhD,KAAKwB,yBACfe,EAAA,QAAMS,MAAM,sBAAsBmD,SAAS,MACvC5D,EAAA,QAAMS,MAAM,iCACXhD,KAAK6E,cACNtC,EAAA,QAAMS,MAAM,mCAEfhD,KAAKiF,oBACLjF,KAAKqE,8BACLrE,KAAKwE,eACLxE,KAAK0G,wBACL1G,KAAKqC,YAAYC,GACjBtC,KAAKsE,eACLtE,KAAK+C,eAAeT,GACpBtC,KAAKmF,8BAEVnF,KAAK8D,mBACL9D,KAAKyI,e,CAKHoD,aAAaC,GACnB,IAAK9L,KAAKW,aAAc,CACpB,M,CAGJ,GAAImL,IAAa9L,KAAKW,aAAaoB,MAAO,CACtC/B,KAAKW,aAAaoB,MAAQ+J,GAAY,E,EAKpCC,qBACN/L,KAAKa,gB"}