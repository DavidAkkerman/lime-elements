{"version":3,"names":["ColumnAggregatorType"],"sources":["./src/components/table/table.types.ts"],"sourcesContent":["/**\n * Defines the data for a table\n * @public\n */\nexport interface Column<T extends object = any> {\n    /**\n     * Column title to be displayed\n     */\n    title: string;\n\n    /**\n     * Name of the field in the data\n     */\n    field: keyof T;\n\n    /**\n     * Function to format the value before rendering\n     */\n    formatter?: TableFormatter;\n\n    /**\n     * Component used to render the field value\n     */\n    component?: TableComponentDefinition;\n\n    /**\n     * Type of aggregator to use for the column\n     */\n    aggregator?: ColumnAggregatorType | ColumnAggregatorFunction<T>;\n\n    /**\n     * A component used to render inside the column header\n     */\n    headerComponent?: TableComponentDefinition;\n\n    /**\n     * Sets the horizontal text alignment for the column\n     */\n    horizontalAlign?: 'left' | 'center' | 'right';\n\n    /**\n     * Defines whether end-user can sort a column\n     */\n    headerSort?: boolean;\n}\n\n/**\n * Definition for a formatter function\n * @param value - The value to be formatted\n * @param data - The data for the current row\n * @returns The formatted value\n * @public\n */\nexport type TableFormatter = (value: any, data?: object) => string;\n\n/**\n * The `component` key in the schema uses this interface to define a\n * component to be rendered inside a cell in the table.\n *\n * @note The table will display the component as `inline-block` in order\n * to give the column the correct size. If the component should have the\n * full width of the column, this might have to be overridden by setting\n * the display mode to `block`, e.g.\n *\n * ```css\n * :host(*) {\n *     display: block !important;\n * }\n * ```\n * @public\n */\nexport interface TableComponentDefinition {\n    /**\n     * Name of the component\n     */\n    name: string;\n\n    /**\n     * Properties to send to the component\n     */\n    props?: Record<string, any>;\n\n    /**\n     * Factory for creating properties dynamically for a custom component.\n     *\n     * The properties returned from this function will be merged with the\n     * `props` properties when the component is created.\n     *\n     * When the propsFactory is used for header components there will be no data available.\n     *\n     * @param data - The data for the current row\n     * @returns Properties for the component\n     */\n    propsFactory?: (data: object) => Record<string, any>;\n}\n\n/**\n * Interface for custom components rendered inside a `limel-table`.\n * @public\n */\nexport interface TableComponent<T extends object = any> {\n    /**\n     * Name of the field being rendered\n     */\n    field?: string;\n\n    /**\n     * Value being rendered\n     */\n    value?: any;\n\n    /**\n     * Data for the current row of the table\n     */\n    data?: T;\n}\n\n/**\n * Indicates whether the specified column is sorted ascending or descending.\n * @public\n */\nexport interface ColumnSorter {\n    /**\n     * The column being sorted\n     */\n    column: Column;\n\n    /**\n     * The direction to sort on\n     */\n    direction: 'ASC' | 'DESC';\n}\n\n/**\n * Specifies the current page, and which columns the table is currently sorted on.\n * @public\n */\nexport interface TableParams {\n    /**\n     * The current page being set\n     */\n    page: number;\n\n    /**\n     * Sorters applied to the current page\n     */\n    sorters?: ColumnSorter[];\n}\n\n/**\n * The built-in aggregators available for columns\n * @public\n */\nexport enum ColumnAggregatorType {\n    /**\n     * Calculates the average value of all numerical cells in the column\n     */\n    Average = 'avg',\n\n    /**\n     * Displays the maximum value from all numerical cells in the column\n     */\n    Maximum = 'max',\n\n    /**\n     * Displays the minimum value from all numerical cells in the column\n     */\n    Minimum = 'min',\n\n    /**\n     * Displays the sum of all numerical cells in the column\n     */\n    Sum = 'sum',\n\n    /**\n     * Counts the number of non empty cells in the column\n     */\n    Count = 'count',\n}\n\n/**\n * Instead of using one of the built-in aggregators, it is possible to\n * define a custom aggregator function.\n *\n * @param column - the configuration for the column\n * @param values - list of all values to be aggregated\n * @param data - list of all objects to be aggregated\n * @returns the aggregated data\n *\n * @public\n */\nexport type ColumnAggregatorFunction<T = object> = (\n    column?: Column,\n    values?: any[],\n    data?: T[],\n) => any;\n\n/**\n * Defines aggregate values for columns\n * @public\n */\nexport interface ColumnAggregate {\n    /**\n     * The name of the `Column` field\n     */\n    field: string;\n    /**\n     * The aggregate value\n     */\n    value: any;\n}\n"],"mappings":"IAyJYA,GAAZ,SAAYA,GAIRA,EAAA,iBAKAA,EAAA,iBAKAA,EAAA,iBAKAA,EAAA,aAKAA,EAAA,gBACH,EAzBD,CAAYA,MAAoB,Y"}