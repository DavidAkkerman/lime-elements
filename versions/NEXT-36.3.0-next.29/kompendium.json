{"docs":{"timestamp":"2023-03-29T08:15:01","compiler":{"name":"@stencil/core","version":"2.19.2","typescriptVersion":"4.7.4"},"components":[{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/badge","filePath":"./src/components/badge/badge.tsx","fileName":"badge.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/badge/usage","tag":"limel-badge","overview":"The Badge component can be used to display a notification badge,\noptionally with a number or a text label.","usage":{},"docs":"The Badge component can be used to display a notification badge,\noptionally with a number or a text label.","docsTags":[{"name":"exampleComponent","text":"limel-example-badge"},{"name":"exampleComponent","text":"limel-example-badge-number"},{"name":"exampleComponent","text":"limel-example-badge-string"}],"encapsulation":"shadow","dependents":["limel-button-group","limel-chip-set","limel-dock-button","limel-example-badge","limel-example-badge-number","limel-example-badge-string","limel-info-tile","limel-menu","limel-shortcut","limel-tab-bar"],"dependencies":[],"dependencyGraph":{"limel-button-group":["limel-badge"],"limel-chip-set":["limel-badge"],"limel-dock-button":["limel-badge"],"limel-example-badge":["limel-badge"],"limel-example-badge-number":["limel-badge"],"limel-example-badge-string":["limel-badge"],"limel-info-tile":["limel-badge"],"limel-menu":["limel-badge"],"limel-shortcut":["limel-badge"],"limel-tab-bar":["limel-badge"]},"props":[{"name":"label","type":"number | string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label to display in the badge.\nNumeric labels larger than 999 will be rounded and abbreviated.\nString labels get truncated if their length is longer than\nsix characters.","docsTags":[],"values":[{"type":"number"},{"type":"string"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[{"name":"--badge-background-color","annotation":"prop","docs":"badge background color"},{"name":"--badge-text-color","annotation":"prop","docs":"badge text color"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"badge.tsx","type":"tsx","source":"import { Component, Prop, h, Host } from '@stencil/core';\nimport { abbreviate } from './format';\n\n/**\n * The Badge component can be used to display a notification badge,\n * optionally with a number or a text label.\n *\n * @exampleComponent limel-example-badge\n * @exampleComponent limel-example-badge-number\n * @exampleComponent limel-example-badge-string\n */\n@Component({\n    tag: 'limel-badge',\n    styleUrl: 'badge.scss',\n    shadow: true,\n})\nexport class Badge {\n    /**\n     * Label to display in the badge.\n     * Numeric labels larger than 999 will be rounded and abbreviated.\n     * String labels get truncated if their length is longer than\n     * six characters.\n     */\n    @Prop({ reflect: true })\n    public label?: number | string;\n\n    public render() {\n        return (\n            <Host\n                title={this.labelIsLarge() ? this.label : ''}\n                class={{\n                    'has-large-label': this.labelIsLarge(),\n                }}\n            >\n                <span>{this.renderLabel()}</span>\n            </Host>\n        );\n    }\n\n    private renderLabel() {\n        if (typeof this.label === 'number') {\n            return abbreviate(this.label);\n        }\n\n        return this.label;\n    }\n\n    private labelIsLarge() {\n        const largeNumericLabel = 999;\n        const largeStringLabel = 6;\n        if (\n            (typeof this.label === 'number' &&\n                this.label > largeNumericLabel) ||\n            (typeof this.label === 'string' &&\n                this.label.length > largeStringLabel)\n        ) {\n            return true;\n        }\n    }\n}\n"},{"filename":"badge.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/internal/lime-theme';\n@use '../../style/internal/lime-typography';\n@use '../../style/mixins';\n\n/**\n * @prop --badge-background-color: badge background color\n * @prop --badge-text-color: badge text color\n */\n\n:host([hidden]) {\n    display: none;\n}\n\n:host(limel-badge) {\n    --limel-min-badge-size: 1rem;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n    min-height: var(--limel-min-badge-size);\n    min-width: var(--limel-min-badge-size);\n}\n\nspan {\n    @include lime-typography.base;\n    cursor: default;\n    box-sizing: border-box;\n\n    @include mixins.truncate-text;\n    text-align: center;\n    font-size: functions.pxToRem(11);\n    line-height: var(--limel-min-badge-size);\n\n    color: var(--badge-text-color, rgb(var(--contrast-1200)));\n\n    border-radius: var(--limel-min-badge-size);\n    max-height: var(--limel-min-badge-size);\n    min-width: 0.5rem;\n    min-height: 0.5rem;\n\n    background-color: var(--badge-background-color, rgb(var(--contrast-500)));\n\n    &:not(:empty) {\n        min-width: var(\n            --limel-min-badge-size\n        ); // ensures that a badge with only one character rendered as perfect circle\n        max-width: 2.75rem;\n        padding: 0 functions.pxToRem(4.5);\n    }\n}\n\n:host(.has-large-label) {\n    span {\n        cursor: help;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/banner","filePath":"./src/components/banner/banner.tsx","fileName":"banner.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/banner/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/banner/usage","tag":"limel-banner","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-banner"},{"name":"slot","text":"buttons - Buttons to show in the banner"}],"encapsulation":"shadow","dependents":["limel-example-banner"],"dependencies":["limel-icon"],"dependencyGraph":{"limel-banner":["limel-icon"],"limel-example-banner":["limel-banner"]},"props":[{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"Set icon for the banner","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"message","type":"string","mutable":false,"attr":"message","reflectToAttr":true,"docs":"The text to show on the banner.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[{"name":"close","returns":{"type":"Promise<void>","docs":""},"signature":"close() => Promise<void>","parameters":[],"docs":"Close the banner","docsTags":[]},{"name":"open","returns":{"type":"Promise<void>","docs":""},"signature":"open() => Promise<void>","parameters":[],"docs":"Open the banner","docsTags":[]}],"events":[],"styles":[{"name":"--banner-icon-background-color","annotation":"prop","docs":"Background color of the banner icon."},{"name":"--banner-icon-fill-color","annotation":"prop","docs":"Color of the banner icon."}],"slots":[{"name":"buttons","docs":"Buttons to show in the banner"}],"parts":[],"listeners":[],"sources":[{"filename":"banner.tsx","type":"tsx","source":"import { Component, h, Method, Prop, State } from '@stencil/core';\n\n/**\n * @exampleComponent limel-example-banner\n * @slot buttons - Buttons to show in the banner\n */\n@Component({\n    tag: 'limel-banner',\n    shadow: true,\n    styleUrl: 'banner.scss',\n})\nexport class Banner {\n    /**\n     * The text to show on the banner.\n     */\n    @Prop({ reflect: true })\n    public message: string;\n\n    /**\n     * Set icon for the banner\n     */\n    @Prop({ reflect: true })\n    public icon: string;\n\n    @State()\n    private isOpen = false;\n\n    /**\n     * Open the banner\n     */\n    @Method()\n    public async open() {\n        this.isOpen = true;\n    }\n\n    /**\n     * Close the banner\n     */\n    @Method()\n    public async close() {\n        this.isOpen = false;\n    }\n\n    public render() {\n        return (\n            <div\n                class={`lime-banner ${this.isOpen ? 'lime-banner--open' : ''}`}\n            >\n                <div class=\"lime-banner__surface\">\n                    <div class=\"lime-banner__content\">\n                        {this.renderIcon()}\n                        <div class=\"mdc-typography--body2\">{this.message}</div>\n                        <div class=\"lime-banner__actions\">\n                            <slot name=\"buttons\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private renderIcon(): HTMLElement {\n        if (!this.icon) {\n            return;\n        }\n\n        return (\n            <div class=\"lime-banner__icon\">\n                <limel-icon name={this.icon} badge={true} size=\"large\" />\n            </div>\n        );\n    }\n}\n"},{"filename":"banner.scss","type":"scss","source":"@use '../../style/internal/lime-theme';\n@use '../../style/internal/lime-typography';\n@use '../../style/internal/variables';\n@use '../../style/functions';\n\n/**\n * @prop --banner-icon-fill-color: Color of the banner icon.\n * @prop --banner-icon-background-color: Background color of the banner icon.\n */\n\n.lime-banner {\n    @include lime-typography.typography(body2);\n    min-height: variables.$lime-banner-height;\n    display: none;\n    background-color: rgba(var(--contrast-100), 0.7);\n    backdrop-filter: blur(functions.pxToRem(5));\n    box-shadow: var(--shadow-depth-16);\n\n    &.lime-banner--open {\n        display: block;\n        .lime-banner__surface {\n            opacity: 1;\n        }\n    }\n    .lime-banner__surface {\n        display: flex;\n        justify-content: center;\n        box-sizing: border-box;\n        opacity: 0;\n    }\n\n    .lime-banner__content {\n        display: flex;\n        align-items: center;\n        align-content: stretch;\n        padding: functions.pxToRem(16);\n        flex-wrap: wrap;\n    }\n\n    div[class^='mdc-typography'] {\n        color: rgb(var(--contrast-1200));\n    }\n\n    .lime-banner__icon {\n        margin: 0 functions.pxToRem(10);\n        align-self: flex-start;\n    }\n\n    .lime-banner__actions {\n        margin-left: functions.pxToRem(50);\n        display: flex;\n        justify-content: flex-end;\n    }\n\n    limel-icon {\n        color: var(--banner-icon-fill-color, rgb(var(--contrast-100)));\n        background-color: var(\n            --banner-icon-background-color,\n            rgb(var(--contrast-800))\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button","filePath":"./src/components/button/button.tsx","fileName":"button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/usage","tag":"limel-button","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-button-basic"},{"name":"exampleComponent","text":"limel-example-button-primary"},{"name":"exampleComponent","text":"limel-example-button-outlined"},{"name":"exampleComponent","text":"limel-example-button-disabled"},{"name":"exampleComponent","text":"limel-example-button-icon"},{"name":"exampleComponent","text":"limel-example-button-loading"},{"name":"exampleComponent","text":"limel-example-button-click-success"},{"name":"exampleComponent","text":"limel-example-button-click-fail"},{"name":"exampleComponent","text":"limel-example-button-reduce-presence"},{"name":"exampleComponent","text":"limel-example-button-colors"},{"name":"exampleComponent","text":"limel-example-button-composite"}],"encapsulation":"shadow","dependents":["limel-example-action-buttons-choosing-explicit-labels","limel-example-action-buttons-choosing-labels","limel-example-action-buttons-colors-do-dont","limel-example-action-buttons-icon-color","limel-example-action-buttons-placement","limel-example-action-buttons-primary-secondary","limel-example-action-buttons-primary-secondary-reversed","limel-example-action-buttons-primary-secondary-reversed-colors","limel-example-action-buttons-third-alternative","limel-example-banner","limel-example-button-basic","limel-example-button-click-fail","limel-example-button-click-success","limel-example-button-colors","limel-example-button-composite","limel-example-button-disabled","limel-example-button-icon","limel-example-button-loading","limel-example-button-outlined","limel-example-button-primary","limel-example-button-reduce-presence","limel-example-collapsible-section-external-control","limel-example-colors-in-components","limel-example-custom-error-message","limel-example-date-picker-programmatic-change","limel-example-dialog","limel-example-dialog-action-buttons","limel-example-dialog-closing-actions","limel-example-dialog-form","limel-example-dialog-fullscreen","limel-example-dialog-heading","limel-example-dialog-nested-close-events","limel-example-dialog-size","limel-example-form","limel-example-form-layout","limel-example-form-span-fields","limel-example-input-field-focus","limel-example-menu-badge-icons","limel-example-menu-basic","limel-example-menu-composite","limel-example-menu-disabled","limel-example-menu-grid","limel-example-menu-hotkeys","limel-example-menu-icons","limel-example-menu-open-direction","limel-example-menu-secondary-text","limel-example-popover","limel-example-portal","limel-example-select-change-options","limel-example-select-dialog","limel-example-snackbar","limel-example-tab-panel-content","limel-example-table-selectable-rows","limel-example-tooltip","limel-example-tooltip-composite","limel-example-tooltip-declutter","limel-snackbar","limel-split-button"],"dependencies":["limel-spinner","limel-icon"],"dependencyGraph":{"limel-button":["limel-spinner","limel-icon"],"limel-example-action-buttons-choosing-explicit-labels":["limel-button"],"limel-example-action-buttons-choosing-labels":["limel-button"],"limel-example-action-buttons-colors-do-dont":["limel-button"],"limel-example-action-buttons-icon-color":["limel-button"],"limel-example-action-buttons-placement":["limel-button"],"limel-example-action-buttons-primary-secondary":["limel-button"],"limel-example-action-buttons-primary-secondary-reversed":["limel-button"],"limel-example-action-buttons-primary-secondary-reversed-colors":["limel-button"],"limel-example-action-buttons-third-alternative":["limel-button"],"limel-example-banner":["limel-button"],"limel-example-button-basic":["limel-button"],"limel-example-button-click-fail":["limel-button"],"limel-example-button-click-success":["limel-button"],"limel-example-button-colors":["limel-button"],"limel-example-button-composite":["limel-button"],"limel-example-button-disabled":["limel-button"],"limel-example-button-icon":["limel-button"],"limel-example-button-loading":["limel-button"],"limel-example-button-outlined":["limel-button"],"limel-example-button-primary":["limel-button"],"limel-example-button-reduce-presence":["limel-button"],"limel-example-collapsible-section-external-control":["limel-button"],"limel-example-colors-in-components":["limel-button"],"limel-example-custom-error-message":["limel-button"],"limel-example-date-picker-programmatic-change":["limel-button"],"limel-example-dialog":["limel-button"],"limel-example-dialog-action-buttons":["limel-button"],"limel-example-dialog-closing-actions":["limel-button"],"limel-example-dialog-form":["limel-button"],"limel-example-dialog-fullscreen":["limel-button"],"limel-example-dialog-heading":["limel-button"],"limel-example-dialog-nested-close-events":["limel-button"],"limel-example-dialog-size":["limel-button"],"limel-example-form":["limel-button"],"limel-example-form-layout":["limel-button"],"limel-example-form-span-fields":["limel-button"],"limel-example-input-field-focus":["limel-button"],"limel-example-menu-badge-icons":["limel-button"],"limel-example-menu-basic":["limel-button"],"limel-example-menu-composite":["limel-button"],"limel-example-menu-disabled":["limel-button"],"limel-example-menu-grid":["limel-button"],"limel-example-menu-hotkeys":["limel-button"],"limel-example-menu-icons":["limel-button"],"limel-example-menu-open-direction":["limel-button"],"limel-example-menu-secondary-text":["limel-button"],"limel-example-popover":["limel-button"],"limel-example-portal":["limel-button"],"limel-example-select-change-options":["limel-button"],"limel-example-select-dialog":["limel-button"],"limel-example-snackbar":["limel-button"],"limel-example-tab-panel-content":["limel-button"],"limel-example-table-selectable-rows":["limel-button"],"limel-example-tooltip":["limel-button"],"limel-example-tooltip-composite":["limel-button"],"limel-example-tooltip-declutter":["limel-button"],"limel-snackbar":["limel-button"],"limel-split-button":["limel-button"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the button.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"Set icon for the button","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The text to show on the button.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"loading","type":"boolean","mutable":false,"attr":"loading","reflectToAttr":true,"docs":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"loadingFailed","type":"boolean","mutable":false,"attr":"loading-failed","reflectToAttr":true,"docs":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"outlined","type":"boolean","mutable":false,"attr":"outlined","reflectToAttr":true,"docs":"Set to `true` to make the button outlined.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"primary","type":"boolean","mutable":false,"attr":"primary","reflectToAttr":true,"docs":"Set to `true` to make the button primary.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button.tsx","type":"tsx","source":"import { Component, h, Prop, State, Watch } from '@stencil/core';\n\n/**\n * @exampleComponent limel-example-button-basic\n * @exampleComponent limel-example-button-primary\n * @exampleComponent limel-example-button-outlined\n * @exampleComponent limel-example-button-disabled\n * @exampleComponent limel-example-button-icon\n * @exampleComponent limel-example-button-loading\n * @exampleComponent limel-example-button-click-success\n * @exampleComponent limel-example-button-click-fail\n * @exampleComponent limel-example-button-reduce-presence\n * @exampleComponent limel-example-button-colors\n * @exampleComponent limel-example-button-composite\n */\n@Component({\n    tag: 'limel-button',\n    shadow: true,\n    styleUrl: 'button.scss',\n})\nexport class Button {\n    /**\n     * The text to show on the button.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Set to `true` to make the button primary.\n     */\n    @Prop({ reflect: true })\n    public primary = false;\n\n    /**\n     * Set to `true` to make the button outlined.\n     */\n    @Prop({ reflect: true })\n    public outlined = false;\n\n    /**\n     * Set icon for the button\n     */\n    @Prop({ reflect: true })\n    public icon: string;\n\n    /**\n     * Set to `true` to disable the button.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to put the button in the `loading` state.\n     * This also disables the button.\n     */\n    @Prop({ reflect: true })\n    public loading = false;\n\n    /**\n     * Set to `true` to indicate failure instead of success when the button is\n     * no longer in the `loading` state.\n     */\n    @Prop({ reflect: true })\n    public loadingFailed = false;\n\n    @State()\n    private justLoaded = false;\n\n    private justLoadedTimeout?: number;\n\n    public render() {\n        return (\n            <button\n                class={{\n                    'mdc-button': true,\n                    loading: this.loading,\n                    'just-loaded': this.justLoaded && !this.loadingFailed,\n                    'just-failed': this.justLoaded && this.loadingFailed,\n                    'mdc-button--outlined': this.outlined,\n                }}\n                disabled={this.disabled || this.loading}\n            >\n                {this.renderIcon()}\n                <span class=\"label mdc-button__label\">{this.label}</span>\n                <limel-spinner limeBranded={false} />\n                <svg viewBox=\"0 0 30 30\">{this.renderLoadingIcons()}</svg>\n            </button>\n        );\n    }\n\n    @Watch('loading')\n    protected loadingWatcher(newValue: boolean, oldValue: boolean) {\n        if (oldValue && !newValue) {\n            this.justLoaded = true;\n            const TIMEOUT = 2000;\n            this.justLoadedTimeout = window.setTimeout(() => {\n                this.justLoaded = false;\n            }, TIMEOUT);\n        } else if (newValue) {\n            this.justLoaded = false;\n            window.clearTimeout(this.justLoadedTimeout);\n        }\n    }\n\n    private renderLoadingIcons() {\n        if (this.loadingFailed) {\n            return [\n                <line x1=\"9\" y1=\"9\" x2=\"21\" y2=\"21\"></line>,\n                <line x1=\"21\" y1=\"9\" x2=\"9\" y2=\"21\"></line>,\n            ];\n        }\n\n        return [\n            <line x1=\"8\" y1=\"14\" x2=\"15\" y2=\"20\"></line>,\n            <line x1=\"23\" y1=\"9\" x2=\"14\" y2=\"20\"></line>,\n        ];\n    }\n\n    private renderIcon(): HTMLElement {\n        if (!this.icon) {\n            return;\n        }\n\n        let withoutLabelClass = '';\n        if (!this.label) {\n            withoutLabelClass = 'no-label';\n        }\n\n        return (\n            <i class={`mdc-button__icon ${withoutLabelClass}`}>\n                <limel-icon name={this.icon} />\n            </i>\n        );\n    }\n}\n"},{"filename":"button.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/button/styles';\n@use '@material/button';\n\n:host {\n    display: inline-block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([disabled]) {\n    pointer-events: none;\n}\n\nbutton {\n    &.mdc-button {\n        min-width: functions.pxToRem(36);\n        padding: {\n            top: 0;\n            right: var(--button-padding-right, #{functions.pxToRem(12)});\n            bottom: 0;\n            left: var(--button-padding-left, #{functions.pxToRem(12)});\n        }\n        height: 100%;\n        min-height: functions.pxToRem(36);\n        width: 100%;\n\n        &:not(:disabled) {\n            @include mixins.visualize-keyboard-focus;\n            @include mixins.is-elevated-clickable();\n        }\n\n        :host(limel-button[primary]) & {\n            &:not(:disabled) {\n                color: var(--mdc-theme-on-primary, rgb(var(--color-white)));\n                background-color: var(\n                    --mdc-theme-primary,\n                    rgb(var(--color-teal-default))\n                );\n            }\n            &:disabled {\n                background-color: rgba(var(--contrast-1700), 0.15);\n            }\n        }\n\n        :host(limel-button:not([primary])) & {\n            &:not(:disabled) {\n                color: var(--mdc-theme-primary, rgb(var(--color-teal-default)));\n            }\n            &:disabled {\n                color: rgba(var(--contrast-1600), 0.37);\n                background-color: rgba(var(--contrast-1600), 0.1);\n            }\n        }\n\n        &:disabled {\n            &.mdc-button--outlined {\n                border-color: rgba(var(--contrast-1700), 0.2);\n            }\n        }\n\n        .mdc-button__icon {\n            flex-shrink: 0;\n            margin-left: functions.pxToRem(-4);\n\n            &.no-label {\n                margin-right: functions.pxToRem(-4);\n            }\n        }\n    }\n\n    .label {\n        opacity: 1;\n    }\n\n    limel-spinner {\n        opacity: 0;\n        display: none;\n        position: absolute;\n    }\n\n    limel-icon {\n        vertical-align: top;\n    }\n\n    svg {\n        height: functions.pxToRem(30);\n        opacity: 0;\n        pointer-events: none;\n        position: absolute;\n        width: functions.pxToRem(30);\n\n        line {\n            stroke: rgb(var(--color-white));\n            stroke-width: 2;\n        }\n    }\n\n    limel-icon,\n    .label,\n    limel-spinner,\n    svg {\n        transition: opacity 300ms ease-in-out;\n    }\n\n    &.loading {\n        limel-icon,\n        .label {\n            opacity: 0;\n        }\n        limel-spinner {\n            opacity: 1;\n            display: block;\n        }\n    }\n\n    &.just-loaded,\n    &.just-failed {\n        limel-icon,\n        .label {\n            opacity: 0;\n        }\n        svg {\n            opacity: 1;\n        }\n        limel-spinner {\n            display: block;\n            animation: fade-out-spinner 0.3s ease;\n        }\n    }\n\n    &.just-failed {\n        background-color: var(--lime-error-text-color) !important;\n        animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\n    }\n}\n\n.mdc-button--outlined {\n    @include button.outline-color(primary);\n}\n\n@keyframes fade-out-spinner {\n    0% {\n        opacity: 1;\n        transform: scale(1);\n    }\n    100% {\n        opacity: 0;\n        transform: scale(1.5);\n    }\n}\n\n@keyframes shake {\n    10%,\n    90% {\n        transform: translate3d(#{functions.pxToRem(-1)}, 0, 0);\n    }\n\n    20%,\n    80% {\n        transform: translate3d(#{functions.pxToRem(2)}, 0, 0);\n    }\n\n    30%,\n    50%,\n    70% {\n        transform: translate3d(#{functions.pxToRem(-3)}, 0, 0);\n    }\n\n    40%,\n    60% {\n        transform: translate3d(#{functions.pxToRem(3)}, 0, 0);\n    }\n}\n\n@import './partial-styles/_has-reduced-presence';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group","filePath":"./src/components/button-group/button-group.tsx","fileName":"button-group.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/usage","tag":"limel-button-group","overview":"A button group control is a linear set of two or more buttons.\n\n## Usage\n\nButton groups are often used to display different views of the same thing. A\ncommon example of this component is when you switch between [ Map | Transit\n| Satellite ] views to look at an area on the map.\n\nIn some cases, button groups may serve as quick filters as well. For example\na list of contacts, in which the user can switch to [ All | Favorites\n| Frequently contacted ] can incorporate a button group to quickly filter out\nitems and display subsets of them.\n\n## Layout\n\nThe button groups are usually placed in top headers and action bars,\nsometimes with other elements. Since the group items will always be rendered\nin a row, you must make sure not to have too many buttons in the group.\nBecause if the container of your button group does not get enough space to\nfit in all its buttons, they will have to truncate their text and may appear\nvery cramped together. Always think about how your button group will appear\non a small screen such as phones.\n:::note\nButton can contain text or icons, but not both simultaneously!\n:::\n\nWithin the group, icon buttons will all have the same width, while each text button\ninherits its width from its content.","usage":{},"docs":"A button group control is a linear set of two or more buttons.\n\n## Usage\n\nButton groups are often used to display different views of the same thing. A\ncommon example of this component is when you switch between [ Map | Transit\n| Satellite ] views to look at an area on the map.\n\nIn some cases, button groups may serve as quick filters as well. For example\na list of contacts, in which the user can switch to [ All | Favorites\n| Frequently contacted ] can incorporate a button group to quickly filter out\nitems and display subsets of them.\n\n## Layout\n\nThe button groups are usually placed in top headers and action bars,\nsometimes with other elements. Since the group items will always be rendered\nin a row, you must make sure not to have too many buttons in the group.\nBecause if the container of your button group does not get enough space to\nfit in all its buttons, they will have to truncate their text and may appear\nvery cramped together. Always think about how your button group will appear\non a small screen such as phones.\n:::note\nButton can contain text or icons, but not both simultaneously!\n:::\n\nWithin the group, icon buttons will all have the same width, while each text button\ninherits its width from its content.","docsTags":[{"name":"exampleComponent","text":"limel-example-button-group-icons"},{"name":"exampleComponent","text":"limel-example-button-group"},{"name":"exampleComponent","text":"limel-example-button-group-mix"},{"name":"exampleComponent","text":"limel-example-button-group-badges"},{"name":"exampleComponent","text":"limel-example-button-group-composite"}],"encapsulation":"shadow","dependents":["limel-example-button-group","limel-example-button-group-badges","limel-example-button-group-composite","limel-example-button-group-icons","limel-example-button-group-mix"],"dependencies":["limel-icon","limel-tooltip","limel-badge"],"dependencyGraph":{"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-example-button-group":["limel-button-group"],"limel-example-button-group-badges":["limel-button-group"],"limel-example-button-group-composite":["limel-button-group"],"limel-example-button-group-icons":["limel-button-group"],"limel-example-button-group-mix":["limel-button-group"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"True if the button-group should be disabled","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"Button[]","mutable":false,"reflectToAttr":false,"docs":"List of buttons for the group","docsTags":[],"default":"[]","values":[{"type":"Button[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"Button","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a button is selected/deselected","docsTags":[]}],"styles":[{"name":"--button-group-background-color","annotation":"prop","docs":"Background color of the component. Defaults to `--contrast-400`"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group.tsx","type":"tsx","source":"import { Component, Event, EventEmitter, h, Prop, State } from '@stencil/core';\nimport { Button } from '../button/button.types';\nimport { createRandomString } from '../../util/random-string';\n\n/**\n * A button group control is a linear set of two or more buttons.\n *\n * ## Usage\n *\n * Button groups are often used to display different views of the same thing. A\n * common example of this component is when you switch between [ Map | Transit\n * | Satellite ] views to look at an area on the map.\n *\n * In some cases, button groups may serve as quick filters as well. For example\n * a list of contacts, in which the user can switch to [ All | Favorites\n * | Frequently contacted ] can incorporate a button group to quickly filter out\n * items and display subsets of them.\n *\n * ## Layout\n *\n * The button groups are usually placed in top headers and action bars,\n * sometimes with other elements. Since the group items will always be rendered\n * in a row, you must make sure not to have too many buttons in the group.\n * Because if the container of your button group does not get enough space to\n * fit in all its buttons, they will have to truncate their text and may appear\n * very cramped together. Always think about how your button group will appear\n * on a small screen such as phones.\n * :::note\n * Button can contain text or icons, but not both simultaneously!\n * :::\n *\n * Within the group, icon buttons will all have the same width, while each text button\n * inherits its width from its content.\n *\n * @exampleComponent limel-example-button-group-icons\n * @exampleComponent limel-example-button-group\n * @exampleComponent limel-example-button-group-mix\n * @exampleComponent limel-example-button-group-badges\n * @exampleComponent limel-example-button-group-composite\n */\n@Component({\n    tag: 'limel-button-group',\n    shadow: true,\n    styleUrl: 'button-group.scss',\n})\nexport class ButtonGroup {\n    /**\n     * List of buttons for the group\n     */\n    @Prop()\n    public value: Button[] = [];\n\n    /**\n     * True if the button-group should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Dispatched when a button is selected/deselected\n     */\n    @Event()\n    private change: EventEmitter<Button>;\n\n    @State()\n    private selectedButtonId: string;\n\n    private radioGroupName = createRandomString();\n\n    constructor() {\n        this.renderButton = this.renderButton.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.renderContent = this.renderContent.bind(this);\n    }\n\n    public componentWillLoad() {\n        this.selectedButtonId = this.value.find((button) => {\n            return button.selected;\n        })?.id;\n    }\n\n    public render() {\n        const classes = {\n            'mdc-chip-set': true,\n            disabled: this.disabled,\n            'mdc-chip-set--choice': true,\n        };\n\n        return (\n            <div class={classes} role=\"grid\">\n                {this.value.map(this.renderButton)}\n            </div>\n        );\n    }\n\n    private renderButton(button: Button) {\n        // Prefix with 'b' because html IDs cannot start with a digit,\n        // and we need to differentiate from the ID on the limel-icon. /Ads\n        const buttonId = `b${button.id}`;\n\n        const classes = {\n            'mdc-chip': true,\n            'mdc-chip--selected': this.isButtonChecked(button),\n        };\n\n        return (\n            <div class={classes} role=\"row\">\n                <span role=\"gridcell\">\n                    <input\n                        type=\"radio\"\n                        name={this.radioGroupName}\n                        checked={this.isButtonChecked(button)}\n                        id={buttonId}\n                        onChange={this.onChange}\n                    />\n                    <label htmlFor={buttonId}>\n                        {this.renderContent(button)}\n                        {this.renderBadge(button)}\n                    </label>\n                </span>\n            </div>\n        );\n    }\n\n    private renderContent(button: Button) {\n        if (button.icon) {\n            return this.renderIcon(button);\n        }\n\n        return this.renderLabel(button);\n    }\n\n    private isButtonChecked(button: Button) {\n        return button.id === this.selectedButtonId;\n    }\n\n    private renderLabel(button: Button) {\n        return <span class=\"mdc-chip__text\">{button.title}</span>;\n    }\n\n    private renderIcon(button: Button) {\n        // Prefix with 'i' because html IDs cannot start with a digit,\n        // and we need to differentiate from the \"buttonId\". /Ads\n        const iconId = `i${button.id}`;\n\n        return [\n            <limel-icon\n                id={iconId}\n                class=\"mdc-chip__icon\"\n                aria-label={button.title}\n                name={button.icon}\n                size=\"small\"\n                badge={true}\n            />,\n            <limel-tooltip elementId={iconId} label={button.title} />,\n        ];\n    }\n\n    private renderBadge(button: Button) {\n        if (!button.badge) {\n            return;\n        }\n\n        return <limel-badge label={button.badge} />;\n    }\n\n    private onChange(event: Event) {\n        event.stopPropagation();\n        const target = event.target as HTMLInputElement;\n        // The ID is prefixed with `b` in the HTML, remember? /Ads\n        this.selectedButtonId = target.id.substr(1);\n        const button = this.value.find((item) => {\n            return item.id === this.selectedButtonId;\n        });\n        this.change.emit(button);\n    }\n}\n"},{"filename":"button-group.scss","type":"scss","source":"@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '@material/chips/deprecated/mdc-chips';\n/**\n* @prop --button-group-background-color: Background color of the component. Defaults to `--contrast-400`\n*/\n\n.mdc-chip {\n    @include mixins.is-flat-inset-clickable($background-color: transparent);\n    max-width: 100%;\n    min-width: functions.pxToRem(32);\n    padding: 0 functions.pxToRem(1);\n    display: inline-grid;\n    grid-auto-flow: column;\n    margin: functions.pxToRem(2) !important;\n    font-size: functions.pxToRem(14);\n\n    &:not(:last-child) {\n        &:after {\n            content: '';\n            display: block;\n\n            height: functions.pxToRem(16);\n            width: functions.pxToRem(2);\n            border-radius: functions.pxToRem(4);\n            background-color: var(\n                --button-group-text-color,\n                rgb(var(--contrast-1200))\n            );\n            opacity: 0.1;\n\n            position: absolute;\n            right: functions.pxToRem(-3);\n            top: 0;\n            bottom: 0;\n            margin: auto;\n        }\n    }\n\n    label {\n        cursor: pointer;\n        transition: color 0.2s ease;\n        display: flex;\n        align-items: center;\n        &:has(> limel-badge) {\n            .mdc-chip__text {\n                padding-right: 0.25rem;\n            }\n        }\n    }\n\n    input[type='radio'] {\n        width: 0;\n        position: absolute;\n        opacity: 0; // This removes some visual defects on iOS and Firefox, created by \"user agent styles\"\n\n        &:focus-visible {\n            + label {\n                &:after {\n                    // visualizes keyboard navigation on Chrome & Firefox\n                    // only when non-pointer input is being used,\n                    // e.g. tabbed into using keyboard\n                    content: '';\n                    display: block;\n                    position: absolute;\n                    top: 0;\n                    right: 0;\n                    bottom: 0;\n                    left: 0;\n                    border-radius: functions.pxToRem(60);\n                    box-shadow: var(--shadow-depth-8-focused);\n                    z-index: z-index.$button-group-radio-button-keyboard-focused;\n                }\n            }\n        }\n    }\n\n    span[role='gridcell'] {\n        min-width: 0; // This is needed to force mdc-chip__text (which is inside this span) to truncate\n\n        &:focus-within {\n            // Cannot use `:focus-visible` here, since it is the radio button\n            // which gets focused, which is inside this element…\n            // and we are removing or hiding the visual appearance of the button\n            outline: none;\n            color: var(--mdc-theme-primary);\n        }\n\n        &:only-child {\n            .mdc-chip__text {\n                padding-left: functions.pxToRem(12);\n            }\n        }\n\n        &:first-child {\n            .mdc-chip__text {\n                padding-left: functions.pxToRem(12);\n            }\n        }\n    }\n\n    &.mdc-chip--selected {\n        background-color: var(--mdc-theme-surface);\n        box-shadow: var(--button-shadow-inset);\n\n        &:active {\n            box-shadow: var(--button-shadow-inset-pressed);\n        }\n    }\n}\n\n.mdc-chip__text {\n    font-size: functions.pxToRem(13);\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: block;\n    padding: 0 functions.pxToRem(12) 0 functions.pxToRem(4);\n}\n\n.mdc-chip-set {\n    align-items: center;\n    border-radius: functions.pxToRem(60);\n    background-color: var(\n        --button-group-background-color,\n        rgb(var(--contrast-400))\n    );\n    padding: 0;\n\n    width: max-content;\n    max-width: 100%;\n\n    flex-wrap: nowrap; // Not sure about this. It'll put items on one row, but also can look bad on action bars. Kia\n\n    &.disabled {\n        @include shared_input-select-picker.looks-disabled;\n    }\n}\n\nlimel-badge {\n    margin-right: 0.25rem;\n    pointer-events: none;\n}\n\n.mdc-chip:not(.mdc-chip--selected) {\n    --badge-background-color: rgb(var(--contrast-200));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox","filePath":"./src/components/checkbox/checkbox.tsx","fileName":"checkbox.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/usage","tag":"limel-checkbox","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-checkbox"},{"name":"exampleComponent","text":"limel-example-checkbox-helper-text"}],"encapsulation":"shadow","dependents":["limel-example-brand-color-palette","limel-example-button-group","limel-example-button-group-icons","limel-example-button-group-mix","limel-example-checkbox","limel-example-checkbox-helper-text","limel-example-chip-set","limel-example-chip-set-choice","limel-example-chip-set-filter","limel-example-chip-set-filter-badge","limel-example-chip-set-input","limel-example-dialog-action-buttons","limel-example-extended-color-palette","limel-example-file","limel-example-info-tile-loading","limel-example-input-field-autocomplete","limel-example-input-field-number","limel-example-input-field-showlink","limel-example-input-field-text","limel-example-input-field-text-decluttering-guidelines","limel-example-input-field-text-multiple","limel-example-input-field-textarea","limel-example-primary-color-palette","limel-example-progress-flow-basic","limel-example-select","limel-example-select-multiple","limel-example-select-with-empty-option","limel-example-size","limel-example-size-edge-case","limel-example-slider","limel-example-slider-multiplier-percentage-colors","limel-example-snackbar","limel-example-spinner","limel-example-spinner-color","limel-example-switch","limel-table"],"dependencies":[],"dependencyGraph":{"limel-example-brand-color-palette":["limel-checkbox"],"limel-example-button-group":["limel-checkbox"],"limel-example-button-group-icons":["limel-checkbox"],"limel-example-button-group-mix":["limel-checkbox"],"limel-example-checkbox":["limel-checkbox"],"limel-example-checkbox-helper-text":["limel-checkbox"],"limel-example-chip-set":["limel-checkbox"],"limel-example-chip-set-choice":["limel-checkbox"],"limel-example-chip-set-filter":["limel-checkbox"],"limel-example-chip-set-filter-badge":["limel-checkbox"],"limel-example-chip-set-input":["limel-checkbox"],"limel-example-dialog-action-buttons":["limel-checkbox"],"limel-example-extended-color-palette":["limel-checkbox"],"limel-example-file":["limel-checkbox"],"limel-example-info-tile-loading":["limel-checkbox"],"limel-example-input-field-autocomplete":["limel-checkbox"],"limel-example-input-field-number":["limel-checkbox"],"limel-example-input-field-showlink":["limel-checkbox"],"limel-example-input-field-text":["limel-checkbox"],"limel-example-input-field-text-decluttering-guidelines":["limel-checkbox"],"limel-example-input-field-text-multiple":["limel-checkbox"],"limel-example-input-field-textarea":["limel-checkbox"],"limel-example-primary-color-palette":["limel-checkbox"],"limel-example-progress-flow-basic":["limel-checkbox"],"limel-example-select":["limel-checkbox"],"limel-example-select-multiple":["limel-checkbox"],"limel-example-select-with-empty-option":["limel-checkbox"],"limel-example-size":["limel-checkbox"],"limel-example-size-edge-case":["limel-checkbox"],"limel-example-slider":["limel-checkbox"],"limel-example-slider-multiplier-percentage-colors":["limel-checkbox"],"limel-example-snackbar":["limel-checkbox"],"limel-example-spinner":["limel-checkbox"],"limel-example-spinner-color":["limel-checkbox"],"limel-example-switch":["limel-checkbox"],"limel-table":["limel-checkbox"]},"props":[{"name":"checked","type":"boolean","mutable":false,"attr":"checked","reflectToAttr":true,"docs":"The value of the checkbox. Set to `true` to make the checkbox checked.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Disables the checkbox when `true`. Works exactly the same as `readonly`.\nIf either property is `true`, the checkbox will be disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the checkbox","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"indeterminate","type":"boolean","mutable":false,"attr":"indeterminate","reflectToAttr":true,"docs":"Enables indeterminate state. Set to `true` to signal indeterminate check.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The checkbox label.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\nBut shows no visual sign indicating that the checkbox is disabled\nor can ever become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` to indicate that the checkbox must be checked.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"boolean","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the input value is changed.","docsTags":[]}],"styles":[{"name":"--checkbox-unchecked-border-color","annotation":"prop","docs":"Affects the border color of the default state of the checkbox (when it is not checked). Defaults to `--contrast-900`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"checkbox.tsx","type":"tsx","source":"import { MDCCheckbox, cssClasses } from '@material/checkbox';\nimport { MDCFormField } from '@material/form-field';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { CheckboxTemplate } from './checkbox.template';\n\n/**\n * @exampleComponent limel-example-checkbox\n * @exampleComponent limel-example-checkbox-helper-text\n */\n@Component({\n    tag: 'limel-checkbox',\n    shadow: true,\n    styleUrl: 'checkbox.scss',\n})\nexport class Checkbox {\n    /**\n     * Disables the checkbox when `true`. Works exactly the same as `readonly`.\n     * If either property is `true`, the checkbox will be disabled.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\n     * But shows no visual sign indicating that the checkbox is disabled\n     * or can ever become interactable.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * The checkbox label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the checkbox\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * The value of the checkbox. Set to `true` to make the checkbox checked.\n     */\n    @Prop({ reflect: true })\n    public checked = false;\n\n    /**\n     * Enables indeterminate state. Set to `true` to signal indeterminate check.\n     */\n    @Prop({ reflect: true })\n    public indeterminate = false;\n\n    /**\n     * Set to `true` to indicate that the checkbox must be checked.\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    @State()\n    private modified = false;\n\n    /**\n     * Emitted when the input value is changed.\n     */\n    @Event()\n    private change: EventEmitter<boolean>;\n\n    @Element()\n    private limelCheckbox: HTMLLimelCheckboxElement;\n\n    private formField: MDCFormField;\n    private mdcCheckbox: MDCCheckbox;\n    private id: string = createRandomString();\n\n    @Watch('checked')\n    protected handleCheckedChange(newValue: boolean) {\n        this.mdcCheckbox.checked = newValue;\n    }\n\n    @Watch('indeterminate')\n    protected handleIndeterminateChange(newValue: boolean) {\n        this.mdcCheckbox.checked = this.checked;\n        this.mdcCheckbox.indeterminate = newValue;\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    public disconnectedCallback() {\n        this.mdcCheckbox?.destroy();\n        this.formField?.destroy();\n\n        const checkboxElement = this.getCheckboxElement();\n        if (checkboxElement) {\n            checkboxElement.classList.remove(\n                cssClasses.ANIM_CHECKED_INDETERMINATE,\n                cssClasses.ANIM_CHECKED_UNCHECKED,\n                cssClasses.ANIM_INDETERMINATE_CHECKED,\n                cssClasses.ANIM_INDETERMINATE_UNCHECKED,\n                cssClasses.ANIM_UNCHECKED_CHECKED,\n                cssClasses.ANIM_UNCHECKED_INDETERMINATE\n            );\n        }\n    }\n\n    public render() {\n        return (\n            <CheckboxTemplate\n                disabled={this.disabled || this.readonly}\n                label={this.label}\n                helperText={this.helperText}\n                checked={this.checked || this.indeterminate}\n                indeterminate={this.indeterminate}\n                required={this.required}\n                readonly={this.readonly}\n                invalid={this.required && this.modified && !this.checked}\n                onChange={this.onChange}\n                id={this.id}\n            />\n        );\n    }\n\n    private initialize = () => {\n        const element =\n            this.limelCheckbox.shadowRoot.querySelector('.mdc-form-field');\n        if (!element) {\n            return;\n        }\n\n        this.formField = new MDCFormField(element);\n        this.mdcCheckbox = new MDCCheckbox(this.getCheckboxElement());\n        this.formField.input = this.mdcCheckbox;\n    };\n\n    private getCheckboxElement = () => {\n        return this.limelCheckbox.shadowRoot.querySelector('.mdc-checkbox');\n    };\n\n    private onChange = (event: Event) => {\n        event.stopPropagation();\n        this.change.emit(this.mdcCheckbox.checked);\n        this.modified = true;\n    };\n}\n"},{"filename":"checkbox.scss","type":"scss","source":"@use '../../style/internal/lime-theme';\n@use '@material/checkbox';\n@use '@material/form-field';\n\n/**\n* @prop --checkbox-unchecked-border-color: Affects the border color of the default state of the checkbox (when it is not checked). Defaults to `--contrast-900`.\n*/\n\n@mixin custom-checkbox-styles {\n    // This is used in other components too, such as `limel-list`\n    --mdc-checkbox-checked-color: var(--mdc-theme-primary);\n    --mdc-checkbox-unchecked-color: var(\n        --checkbox-unchecked-border-color,\n        rgb(var(--contrast-900))\n    );\n    --lime-checkbox-unchecked-color: rgb(var(--contrast-300));\n}\n\n:host(limel-checkbox) {\n    @include custom-checkbox-styles;\n}\n\n@include checkbox.core-styles;\n@include form-field.core-styles;\n\n.mdc-form-field {\n    display: flex;\n\n    .mdc-checkbox {\n        .mdc-checkbox__native-control {\n            &[disabled],\n            &:enabled {\n                &:not(:checked):not(:indeterminate) {\n                    ~ .mdc-checkbox__background {\n                        background-color: var(--lime-checkbox-unchecked-color);\n                    }\n                }\n            }\n        }\n\n        &.mdc-checkbox--invalid {\n            .mdc-checkbox__native-control:enabled:not(:checked):not(\n                    :indeterminate\n                )\n                ~ .mdc-checkbox__background {\n                border-color: var(--lime-error-text-color);\n            }\n        }\n        .mdc-checkbox__native-control {\n            &:focus-visible {\n                + .mdc-checkbox__background {\n                    &:after {\n                        content: '';\n                        display: block;\n                        position: absolute;\n                        inset: -0.25rem;\n                        border-radius: 0.25rem;\n                        box-shadow: var(--shadow-depth-8-focused);\n                    }\n                }\n            }\n        }\n    }\n    .mdc-checkbox--disabled {\n        opacity: 0.5;\n    }\n\n    label {\n        cursor: pointer;\n        line-height: normal;\n        padding-left: 0;\n\n        &.mdc-checkbox--required::after {\n            margin-left: 0.0625rem;\n            content: '*';\n        }\n\n        &.mdc-checkbox--invalid {\n            color: var(--lime-error-text-color);\n        }\n    }\n}\n\n@import './partial-styles/_helper-text.scss';\n@import './partial-styles/_readonly.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set","filePath":"./src/components/chip-set/chip-set.tsx","fileName":"chip-set.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/usage","tag":"limel-chip-set","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-chip-set"},{"name":"exampleComponent","text":"limel-example-chip-set-choice"},{"name":"exampleComponent","text":"limel-example-chip-set-filter"},{"name":"exampleComponent","text":"limel-example-chip-set-filter-badge"},{"name":"exampleComponent","text":"limel-example-chip-set-input"},{"name":"exampleComponent","text":"limel-example-chip-set-input-type-text"},{"name":"exampleComponent","text":"limel-example-chip-set-input-type-search"},{"name":"exampleComponent","text":"limel-example-chip-icon-color"},{"name":"exampleComponent","text":"limel-example-chip-set-composite"}],"encapsulation":"shadow","dependents":["limel-example-chip-icon-color","limel-example-chip-set","limel-example-chip-set-choice","limel-example-chip-set-composite","limel-example-chip-set-filter","limel-example-chip-set-filter-badge","limel-example-chip-set-input","limel-example-chip-set-input-type-search","limel-example-chip-set-input-type-text","limel-example-icon-finder","limel-file","limel-picker"],"dependencies":["limel-icon","limel-badge"],"dependencyGraph":{"limel-chip-set":["limel-icon","limel-badge"],"limel-example-chip-icon-color":["limel-chip-set"],"limel-example-chip-set":["limel-chip-set"],"limel-example-chip-set-choice":["limel-chip-set"],"limel-example-chip-set-composite":["limel-chip-set"],"limel-example-chip-set-filter":["limel-chip-set"],"limel-example-chip-set-filter-badge":["limel-chip-set"],"limel-example-chip-set-input":["limel-chip-set"],"limel-example-chip-set-input-type-search":["limel-chip-set"],"limel-example-chip-set-input-type-text":["limel-chip-set"],"limel-example-icon-finder":["limel-chip-set"],"limel-file":["limel-chip-set"],"limel-picker":["limel-chip-set"]},"props":[{"name":"clearAllButton","type":"boolean","mutable":false,"attr":"clear-all-button","reflectToAttr":false,"docs":"Whether the \"Clear all\" buttons should be shown","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"delimiter","type":"string","mutable":false,"attr":"delimiter","reflectToAttr":true,"docs":"For chip-set of type `input`. Sets delimiters between chips.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"True if the chip set should be disabled","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"emptyInputOnBlur","type":"boolean","mutable":false,"attr":"empty-input-on-blur","reflectToAttr":true,"docs":"Whether the input field should be emptied when the chip-set loses focus.","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the chipset.\nWhen type is `input`, the helper text is displayed below the\ninput field when it has focus.\nWhen type is not `input`, the helper text is always displayed\nif the device is touch screen; otherwise it is shown when chip-set\nis hovered or focused using keyboard navigation.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"inputType","type":"\"search\" | \"text\"","mutable":false,"attr":"input-type","reflectToAttr":true,"docs":"For chip-sets of type `input`. Value to use for the `type` attribute on the\ninput field inside the chip-set.","docsTags":[],"default":"'text'","values":[{"value":"search","type":"string"},{"value":"text","type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label for the chip-set","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"Defines the language for translations.\nWill translate the translatable strings on the components. For example, the clear all chips label.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"leadingIcon","type":"string","mutable":false,"attr":"leading-icon","reflectToAttr":true,"docs":"For chip-sets of type `input`. When the value is null, no leading icon is used.\nLeading icon to show to the far left in the text field","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false},{"name":"maxItems","type":"number","mutable":false,"attr":"max-items","reflectToAttr":true,"docs":"For chip-sets of type `input`. Limits the maximum number of chips.\nWhen the value is `0` or not set, no limit is applied.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"For chip-sets of type `input`, set to `true` to disable adding and\nremoving chips, but allow interaction with existing chips in the set.\nFor any other types, setting either `readonly` or `disabled` disables\nthe chip-set.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"True if the control requires a value","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"searchLabel","type":"string","mutable":false,"attr":"search-label","reflectToAttr":true,"docs":"Search label to display when type is `input` and component is in search mode","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"type","type":"\"choice\" | \"filter\" | \"input\"","mutable":false,"attr":"type","reflectToAttr":true,"docs":"Type of chip set\n\n- `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n- `filter` renders a set of selectable chips where all are selectable. The `icon` property is ignored\n- `input` renders a set of chips that can be used in conjunction with an input field\n\nIf no type is set, a basic set of chips without additional functionality will be rendered","docsTags":[],"values":[{"value":"choice","type":"string"},{"value":"filter","type":"string"},{"value":"input","type":"string"}],"optional":true,"required":false},{"name":"value","type":"Chip<any>[]","mutable":false,"reflectToAttr":false,"docs":"List of chips for the set","docsTags":[],"default":"[]","values":[{"type":"Chip<any>[]"}],"optional":false,"required":false}],"methods":[{"name":"emptyInput","returns":{"type":"Promise<void>","docs":"does not return anything, but methods have to be async"},"signature":"emptyInput() => Promise<void>","parameters":[],"docs":"Used to empty the input field. Used in conjunction with `emptyInputOnBlur` to let the\nconsumer control when the input is emptied.","docsTags":[{"name":"returns","text":"does not return anything, but methods have to be async"}]},{"name":"getEditMode","returns":{"type":"Promise<boolean>","docs":"`true` if the chip-set is in edit mode, `false` otherwise."},"signature":"getEditMode() => Promise<boolean>","parameters":[],"docs":"Used to find out whether the chip-set is in edit mode.","docsTags":[{"name":"returns","text":"`true` if the chip-set is in edit mode, `false` otherwise."}]},{"name":"setFocus","returns":{"type":"Promise<void>","docs":"does not return anything, but methods have to be async"},"signature":"setFocus(emptyInput?: boolean) => Promise<void>","parameters":[],"docs":"Used to set focus to the chip-set input field.","docsTags":[{"name":"param","text":"emptyInput if `true`, any text in the input is discarded"},{"name":"returns","text":"does not return anything, but methods have to be async"}]}],"events":[{"event":"change","detail":"Chip<any> | Chip<any>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a chip is selected/deselected","docsTags":[]},{"event":"input","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when the input is changed for type `input`","docsTags":[]},{"event":"interact","detail":"Chip<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a chip is interacted with","docsTags":[]},{"event":"startEdit","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when an input chip set has received focus and editing in the text field has started","docsTags":[]},{"event":"stopEdit","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when an input chip set has lost focus and editing in the text field has ended","docsTags":[]}],"styles":[{"name":"--background-color","annotation":"prop","docs":"Background color of the field when type is set to input."},{"name":"--background-color-disabled","annotation":"prop","docs":"Background color of the field when type is set to input and the component is disabled or readonly."},{"name":"--icon-background-color","annotation":"prop","docs":"Background color of the icon. Defaults to transparent."},{"name":"--icon-color","annotation":"prop","docs":"Color of the icon. Defaults to `rgb(var(--contrast-1100))`."},{"name":"--input-chip-set-selected-chip-color","annotation":"prop","docs":"Color of the highlight around selected chips in input chip-sets."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set.tsx","type":"tsx","source":"import { Chip, Languages } from '@limetech/lime-elements';\nimport {\n    MDCChipInteractionEvent,\n    MDCChipSelectionEvent,\n    MDCChipSet,\n} from '@material/chips/deprecated';\nimport { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Method,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { handleKeyboardEvent } from './chip-set-input-helpers';\nimport translate from '../../global/translations';\nimport { getHref, getTarget } from '../../util/link-helper';\n\nconst SELECTED_CHIP_CLASS = 'mdc-chip--selected';\nconst INPUT_FIELD_TABINDEX = 1;\n\n/**\n * @exampleComponent limel-example-chip-set\n * @exampleComponent limel-example-chip-set-choice\n * @exampleComponent limel-example-chip-set-filter\n * @exampleComponent limel-example-chip-set-filter-badge\n * @exampleComponent limel-example-chip-set-input\n * @exampleComponent limel-example-chip-set-input-type-text\n * @exampleComponent limel-example-chip-set-input-type-search\n * @exampleComponent limel-example-chip-icon-color\n * @exampleComponent limel-example-chip-set-composite\n */\n@Component({\n    tag: 'limel-chip-set',\n    shadow: true,\n    styleUrl: 'chip-set.scss',\n})\nexport class ChipSet {\n    /**\n     * List of chips for the set\n     */\n    @Prop()\n    public value: Chip[] = [];\n\n    /**\n     * Type of chip set\n     *\n     * - `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n     * - `filter` renders a set of selectable chips where all are selectable. The `icon` property is ignored\n     * - `input` renders a set of chips that can be used in conjunction with an input field\n     *\n     * If no type is set, a basic set of chips without additional functionality will be rendered\n     */\n    @Prop({ reflect: true })\n    public type?: 'choice' | 'filter' | 'input';\n\n    /**\n     * Label for the chip-set\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the chipset.\n     * When type is `input`, the helper text is displayed below the\n     * input field when it has focus.\n     * When type is not `input`, the helper text is always displayed\n     * if the device is touch screen; otherwise it is shown when chip-set\n     * is hovered or focused using keyboard navigation.\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * True if the chip set should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * For chip-sets of type `input`, set to `true` to disable adding and\n     * removing chips, but allow interaction with existing chips in the set.\n     * For any other types, setting either `readonly` or `disabled` disables\n     * the chip-set.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * For chip-sets of type `input`. Value to use for the `type` attribute on the\n     * input field inside the chip-set.\n     */\n    @Prop({ reflect: true })\n    public inputType: 'search' | 'text' = 'text';\n\n    /**\n     * For chip-sets of type `input`. Limits the maximum number of chips.\n     * When the value is `0` or not set, no limit is applied.\n     */\n    @Prop({ reflect: true })\n    public maxItems: number;\n\n    /**\n     * True if the control requires a value\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    /**\n     * Search label to display when type is `input` and component is in search mode\n     */\n    @Prop({ reflect: true })\n    public searchLabel: string;\n\n    /**\n     * Whether the input field should be emptied when the chip-set loses focus.\n     */\n    @Prop({ reflect: true })\n    public emptyInputOnBlur: boolean = true;\n\n    /**\n     * Whether the \"Clear all\" buttons should be shown\n     */\n    @Prop()\n    public clearAllButton: boolean = true;\n\n    /**\n     * For chip-sets of type `input`. When the value is null, no leading icon is used.\n     * Leading icon to show to the far left in the text field\n     */\n    @Prop({ reflect: true })\n    public leadingIcon: string = null;\n\n    /**\n     * For chip-set of type `input`. Sets delimiters between chips.\n     */\n    @Prop({ reflect: true })\n    public delimiter: string = null;\n\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components. For example, the clear all chips label.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Dispatched when a chip is interacted with\n     */\n    @Event()\n    private interact: EventEmitter<Chip>;\n\n    /**\n     * Dispatched when a chip is selected/deselected\n     */\n    @Event()\n    private change: EventEmitter<Chip | Chip[]>;\n\n    /**\n     * Emitted when an input chip set has received focus and editing in the text field has started\n     */\n    @Event()\n    private startEdit: EventEmitter<void>;\n\n    /**\n     * Emitted when an input chip set has lost focus and editing in the text field has ended\n     */\n    @Event()\n    private stopEdit: EventEmitter<void>;\n\n    /**\n     * Dispatched when the input is changed for type `input`\n     */\n    @Event()\n    private input: EventEmitter<string>;\n\n    @Element()\n    private host: HTMLLimelChipSetElement;\n\n    @State()\n    private editMode: boolean = false;\n\n    @State()\n    private textValue: string = '';\n\n    @State()\n    private blurred: boolean = false;\n\n    @State()\n    private inputChipIndexSelected: number = null;\n\n    private mdcChipSet: MDCChipSet;\n    private mdcTextField: MDCTextField;\n    private handleKeyDown = handleKeyboardEvent;\n\n    constructor() {\n        this.renderChip = this.renderChip.bind(this);\n        this.renderInputChip = this.renderInputChip.bind(this);\n        this.isFull = this.isFull.bind(this);\n        this.handleInteractionEvent = this.handleInteractionEvent.bind(this);\n        this.handleSelection = this.handleSelection.bind(this);\n        this.handleTextFieldFocus = this.handleTextFieldFocus.bind(this);\n        this.handleInputBlur = this.handleInputBlur.bind(this);\n        this.handleTextInput = this.handleTextInput.bind(this);\n        this.inputFieldOnChange = this.inputFieldOnChange.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.inputHidden = this.inputHidden.bind(this);\n        this.handleDeleteAllIconClick =\n            this.handleDeleteAllIconClick.bind(this);\n        this.renderDelimiter = this.renderDelimiter.bind(this);\n    }\n\n    /**\n     * Used to find out whether the chip-set is in edit mode.\n     *\n     * @returns {Promise<boolean>} `true` if the chip-set is in edit mode, `false` otherwise.\n     */\n    @Method()\n    public async getEditMode(): Promise<boolean> {\n        return this.editMode;\n    }\n\n    /**\n     * Used to set focus to the chip-set input field.\n     *\n     * @param {boolean} emptyInput if `true`, any text in the input is discarded\n     * @returns {Promise<void>} does not return anything, but methods have to be async\n     */\n    @Method()\n    public async setFocus(emptyInput: boolean = false) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.editMode = true;\n        if (emptyInput) {\n            this.textValue = '';\n        }\n\n        this.host.shadowRoot.querySelector('input').focus();\n        this.startEdit.emit();\n    }\n\n    /**\n     * Used to empty the input field. Used in conjunction with `emptyInputOnBlur` to let the\n     * consumer control when the input is emptied.\n     *\n     * @returns {Promise<void>} does not return anything, but methods have to be async\n     */\n    @Method()\n    public async emptyInput() {\n        this.syncEmptyInput();\n    }\n\n    public componentDidLoad() {\n        if (this.type === 'input') {\n            this.mdcTextField = new MDCTextField(\n                this.host.shadowRoot.querySelector('.mdc-text-field')\n            );\n        }\n\n        this.createMDCChipSet();\n    }\n\n    public componentWillUpdate() {\n        this.destroyMDCChipSet();\n    }\n\n    public componentDidUpdate() {\n        this.createMDCChipSet();\n        const input = this.host.shadowRoot.querySelector('input');\n        if (input && this.editMode) {\n            input.focus();\n        }\n    }\n\n    public disconnectedCallback() {\n        this.destroyMDCChipSet();\n\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n    }\n\n    public render() {\n        if (this.type === 'input') {\n            return this.renderInputChips();\n        }\n\n        const classes = {\n            'mdc-chip-set': true,\n            disabled: this.disabled || this.readonly,\n            'mdc-text-field--with-trailing-icon': true,\n        };\n        if (this.type) {\n            classes[`mdc-chip-set--${this.type}`] = true;\n        }\n\n        const chipSetLabel = this.renderChipSetLabel();\n        if (chipSetLabel) {\n            classes['chip-set--with-label'] = true;\n        }\n\n        return (\n            <div class={classes} role=\"grid\">\n                {chipSetLabel}\n                {this.value.map(this.renderChip)}\n                {this.renderHelperLine()}\n            </div>\n        );\n    }\n\n    @Watch('value')\n    protected handleChangeChips() {\n        this.syncEmptyInput();\n    }\n\n    private createMDCChipSet() {\n        this.mdcChipSet = new MDCChipSet(\n            this.host.shadowRoot.querySelector('.mdc-chip-set')\n        );\n\n        if (!this.type || this.type === 'input') {\n            this.mdcChipSet.listen(\n                'MDCChip:interaction',\n                this.handleInteractionEvent\n            );\n        }\n\n        if (this.type === 'choice' || this.type === 'filter') {\n            this.mdcChipSet.listen('MDCChip:selection', this.handleSelection);\n        }\n    }\n\n    private destroyMDCChipSet() {\n        if (this.mdcChipSet) {\n            this.mdcChipSet.unlisten(\n                'MDCChip:interaction',\n                this.handleInteractionEvent\n            );\n            this.mdcChipSet.unlisten('MDCChip:selection', this.handleSelection);\n\n            this.mdcChipSet.destroy();\n        }\n    }\n\n    private renderChipSetLabel() {\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <label class=\"chip-set__label mdc-floating-label mdc-floating-label--float-above\">\n                {this.label}\n            </label>\n        );\n    }\n\n    private renderInputChips() {\n        return [\n            <div\n                class={{\n                    'mdc-text-field mdc-text-field--outlined': true,\n                    'mdc-chip-set mdc-chip-set--input': true,\n                    'force-invalid': this.isInvalid(),\n                    'mdc-text-field--disabled': this.readonly || this.disabled,\n                    'lime-text-field--readonly': this.readonly,\n                    'has-chips mdc-text-field--label-floating':\n                        this.value.length !== 0,\n                    'has-leading-icon': this.leadingIcon !== null,\n                    'has-clear-all-button': this.clearAllButton,\n                }}\n                onClick={this.handleTextFieldFocus}\n            >\n                {this.value.map(this.renderInputChip)}\n                <input\n                    tabIndex={INPUT_FIELD_TABINDEX}\n                    type={this.inputType}\n                    id=\"input-element\"\n                    disabled={this.readonly || this.disabled}\n                    class={{\n                        'mdc-text-field__input': true,\n                        hidden: this.inputHidden(),\n                    }}\n                    value={this.textValue}\n                    onBlur={this.handleInputBlur}\n                    onFocus={this.handleTextFieldFocus}\n                    onKeyDown={this.handleKeyDown}\n                    onInput={this.handleTextInput}\n                    // Some browsers emit a change event on input elements, we need to stop\n                    // that event from propagating since we are emitting our own change event\n                    onChange={this.inputFieldOnChange}\n                    placeholder={this.isFull() ? '' : this.searchLabel}\n                    readonly={this.isFull()}\n                />\n                <div\n                    class={{\n                        'mdc-notched-outline': true,\n                        'mdc-notched-outline--upgraded': true,\n                        'mdc-text-field--required': this.required,\n                        'lime-notched-outline--notched': !!(\n                            this.value.length || this.editMode\n                        ),\n                    }}\n                    dropzone-tip={this.dropZoneTip()}\n                >\n                    <div class=\"mdc-notched-outline__leading\" />\n                    {this.renderLabel()}\n                    <div class=\"mdc-notched-outline__trailing\" />\n                </div>\n                {this.renderLeadingIcon()}\n                {this.renderClearAllChipsButton()}\n            </div>,\n            this.renderHelperLine(),\n        ];\n    }\n\n    private renderLabel() {\n        const labelClassList = {\n            'mdc-floating-label': true,\n            'mdc-text-field--no-label': !this.label,\n            'mdc-text-field--disabled': this.readonly || this.disabled,\n            'mdc-floating-label--required': this.required,\n            'lime-floating-label--float-above': !!(\n                this.value.length || this.editMode\n            ),\n        };\n\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <div class=\"mdc-notched-outline__notch\">\n                <label class={labelClassList} htmlFor=\"input-element\">\n                    {this.label}\n                </label>\n            </div>\n        );\n    }\n\n    private dropZoneTip = (): string => {\n        return translate.get('file.drag-and-drop-tips', this.language);\n    };\n\n    private isFull(): boolean {\n        return !!this.maxItems && this.value.length >= this.maxItems;\n    }\n\n    private isInvalid() {\n        if (!this.required) {\n            return false;\n        }\n\n        if (!this.blurred) {\n            return false;\n        }\n\n        return !this.value || !this.value.length;\n    }\n\n    private inputFieldOnChange(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Enter edit mode when the text field receives focus. When editMode is true, the input element will be visible\n     *\n     * @returns {void}\n     */\n    private handleTextFieldFocus() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        if (this.editMode) {\n            return;\n        }\n\n        this.editMode = true;\n        this.startEdit.emit();\n    }\n\n    /**\n     * Exit edit mode when the input element loses focus. This makes sure the input element does not take up any\n     * additional space when the user it not typing anything\n     *\n     * @returns {void}\n     */\n    private handleInputBlur() {\n        if (this.emptyInputOnBlur) {\n            this.syncEmptyInput();\n        }\n\n        this.editMode = false;\n        this.blurred = true;\n        this.inputChipIndexSelected = null;\n\n        // This timeout is needed in order to let a new element receive focus\n        setTimeout(() => {\n            this.stopEdit.emit();\n        }, 0);\n    }\n\n    private syncEmptyInput() {\n        this.textValue = '';\n    }\n\n    private inputHidden() {\n        if (this.editMode) {\n            return this.isFull();\n        }\n\n        // If there are chips in the picker, hide the input to avoid the input\n        // being placed on a new line and adding ugly space beneath the chips.\n        // If there are no chips, show the input, or the picker will look weird.\n        return !!(this.value && this.value.length);\n    }\n\n    private handleTextInput(event) {\n        event.stopPropagation();\n        this.inputChipIndexSelected = null;\n        this.textValue = event.target.value;\n        this.input.emit(event.target.value && event.target.value.trim());\n    }\n\n    private handleInteractionEvent(event: MDCChipInteractionEvent) {\n        const chip = this.value.find((item) => {\n            return `${item.id}` === event.detail.chipId;\n        });\n        this.emitInteraction(chip);\n    }\n\n    private emitInteraction(chip: Chip) {\n        this.interact.emit(chip);\n    }\n\n    private handleSelection(event: MDCChipSelectionEvent) {\n        let chip = this.value.find((item) => {\n            return `${item.id}` === event.detail.chipId;\n        });\n        chip = { ...chip, selected: event.detail.selected };\n        this.change.emit(chip);\n    }\n\n    private removeChip(id: string | number) {\n        const newValue = this.value.filter((chip) => {\n            return `${chip.id}` !== `${id}`;\n        });\n        this.change.emit(newValue);\n    }\n\n    private renderChip(chip: Chip) {\n        if (this.type === 'filter') {\n            return this.renderFilterChip(chip);\n        }\n\n        return this.renderDefaultChip(chip);\n    }\n\n    private renderDefaultChip(chip: Chip) {\n        return (\n            <div\n                class={`mdc-chip ${chip.selected ? SELECTED_CHIP_CLASS : ''}`}\n                role=\"row\"\n                id={`${chip.id}`}\n            >\n                {chip.icon ? this.renderChipIcon(chip) : null}\n                {chip.text ? this.renderChipLabel(chip) : null}\n            </div>\n        );\n    }\n\n    private renderChipLabel(chip: Chip<any>) {\n        const attributes: any = {};\n        if (chip.href) {\n            attributes.href = getHref(chip.href);\n            attributes.target = getTarget(chip.href);\n        }\n\n        return (\n            <span role=\"gridcell\">\n                <a\n                    role=\"button\"\n                    tabindex={this.disabled ? '-1' : '0'}\n                    class=\"mdc-chip__text\"\n                    {...attributes}\n                >\n                    {chip.text}\n                </a>\n            </span>\n        );\n    }\n\n    private renderHelperLine = () => {\n        if (!this.hasHelperText()) {\n            return;\n        }\n\n        return (\n            <div tabIndex={-1} class=\"mdc-text-field-helper-line\">\n                {this.renderHelperText()}\n            </div>\n        );\n    };\n\n    private renderHelperText = () => {\n        if (!this.hasHelperText()) {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field-helper-text': true,\n            'mdc-text-field-helper-text--validation-msg': this.isInvalid(),\n        };\n\n        return <p class={classList}>{this.helperText}</p>;\n    };\n\n    private hasHelperText = () => {\n        return this.helperText !== null && this.helperText !== undefined;\n    };\n\n    private renderFilterChip(chip: Chip) {\n        return (\n            <div\n                class={`mdc-chip ${chip.selected ? SELECTED_CHIP_CLASS : ''}`}\n                role=\"row\"\n                id={`${chip.id}`}\n            >\n                <span class=\"mdc-chip__checkmark\">\n                    <svg class=\"mdc-chip__checkmark-svg\" viewBox=\"-2 -3 30 30\">\n                        <path\n                            class=\"mdc-chip__checkmark-path\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"\n                        />\n                    </svg>\n                </span>\n                <span role=\"gridcell\">\n                    <span\n                        role=\"checkbox\"\n                        tabindex={this.disabled ? '-1' : '0'}\n                        aria-checked=\"false\"\n                        class=\"mdc-chip__text\"\n                    >\n                        {chip.text}\n                    </span>\n                </span>\n                {this.renderBadge(chip)}\n            </div>\n        );\n    }\n\n    private renderInputChip(chip: Chip, index: number) {\n        return [\n            <div\n                class={{\n                    'mdc-chip': true,\n                    'mdc-chip--selected': this.inputChipIndexSelected === index,\n                    disabled: this.disabled,\n                }}\n                role=\"row\"\n                id={`${chip.id}`}\n                onClick={this.catchInputChipClicks}\n            >\n                {chip.icon ? this.renderChipIcon(chip) : null}\n                {this.renderChipLabel(chip)}\n                {this.renderChipRemoveButton(chip)}\n            </div>,\n            this.renderDelimiter(),\n        ];\n    }\n\n    private catchInputChipClicks(event) {\n        event.stopPropagation();\n    }\n\n    private renderChipIcon(chip: Chip) {\n        const style = {};\n        if (chip.iconFillColor) {\n            style['--icon-color'] = chip.iconFillColor;\n        }\n\n        if (chip.iconBackgroundColor) {\n            style['--icon-background-color'] = chip.iconBackgroundColor;\n        }\n\n        return (\n            <limel-icon\n                class=\"mdc-chip__icon mdc-chip__icon--leading\"\n                name={chip.icon}\n                style={style}\n                size=\"small\"\n                badge={true}\n                title={chip.iconTitle}\n            />\n        );\n    }\n\n    private renderLeadingIcon() {\n        if (!this.leadingIcon) {\n            return;\n        }\n\n        return (\n            <i class=\"mdc-text-field__icon search-icon\">\n                <limel-icon name={this.leadingIcon} />\n            </i>\n        );\n    }\n\n    private renderChipRemoveButton(chip: Chip) {\n        if (!chip.removable || this.readonly || this.disabled) {\n            return;\n        }\n\n        const svgData = `<svg style=\"height:100%;width:100%;\" width=\"32\" height=\"32\" x=\"0px\" y=\"0px\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\">\n    <line fill=\"none\" id=\"svg_1\" stroke=\"currentColor\" stroke-width=\"2\" x1=\"8\" x2=\"24\" y1=\"8\" y2=\"24\"/>\n    <line fill=\"none\" id=\"svg_2\" stroke=\"currentColor\" stroke-width=\"2\" x1=\"24\" x2=\"8\" y1=\"8\" y2=\"24\"/>\n</svg>`;\n\n        const removeFunc = (event: MouseEvent) => {\n            event.stopPropagation();\n            this.removeChip(chip.id);\n        };\n\n        return (\n            <button\n                class=\"mdc-chip__icon mdc-chip__icon--trailing mdc-deprecated-chip-trailing-action\"\n                aria-label={this.removeChipLabel}\n                tabindex=\"-1\"\n                innerHTML={svgData}\n                onClick={removeFunc}\n            />\n        );\n    }\n\n    private renderClearAllChipsButton() {\n        if (this.disabled || this.readonly || !this.clearAllButton) {\n            return;\n        }\n\n        return (\n            <a\n                href=\"\"\n                onClick={this.handleDeleteAllIconClick}\n                class=\"mdc-text-field__icon clear-all-button\"\n                tabindex=\"0\"\n                role=\"button\"\n                title={this.clearAllChipsLabel()}\n                aria-label={this.clearAllChipsLabel()}\n            />\n        );\n    }\n\n    private clearAllChipsLabel = (): string => {\n        return translate.get('chip-set.clear-all', this.language);\n    };\n\n    private removeChipLabel = (): string => {\n        return translate.get('chip-set.remove-chip', this.language);\n    };\n\n    private handleDeleteAllIconClick(event: Event) {\n        event.preventDefault();\n        this.change.emit([]);\n    }\n\n    private renderDelimiter() {\n        if (!this.delimiter) {\n            return;\n        }\n\n        return <div class=\"delimiter\">{this.delimiter}</div>;\n    }\n\n    private renderBadge(chip: Chip) {\n        if (!chip.badge) {\n            return;\n        }\n\n        return <limel-badge label={chip.badge} />;\n    }\n}\n"},{"filename":"chip-set.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/textfield';\n@use '@material/textfield/icon';\n@use '@material/notched-outline/mdc-notched-outline';\n@use '@material/floating-label';\n@use '@material/floating-label/mdc-floating-label';\n@use '@material/chips/deprecated/mdc-chips';\n\n/**\n * @prop --icon-background-color: Background color of the icon. Defaults to transparent.\n * @prop --icon-color: Color of the icon. Defaults to `rgb(var(--contrast-1100))`.\n * @prop --background-color: Background color of the field when type is set to input.\n * @prop --background-color-disabled: Background color of the field when type is set to input and the component is disabled or readonly.\n * @prop --input-chip-set-selected-chip-color: Color of the highlight around selected chips in input chip-sets.\n */\n\n@include textfield.core-styles;\n@include icon.icon-core-styles;\n\n@include shared_input-select-picker.outlined-style-overrides;\n@include shared_input-select-picker.floating-label-overrides;\n@include shared_input-select-picker.cropped-label-hack;\n@include shared_input-select-picker.disabled-overrides;\n@include shared_input-select-picker.readonly-overrides;\n@include shared_input-select-picker.leading-icon;\n\n$height-of-chip-set-input: functions.pxToRem(36);\n$leading-icon-space: functions.pxToRem(40);\n$background-color-of-remove-chip-buton-when-hovered: rgba(\n    var(--color-red-default),\n    0.2\n);\n$scale-of-remove-chip-x-when-hovered: scale(0.7);\n\n:host(limel-chip-set) {\n    isolation: isolate;\n}\n\n.mdc-chip {\n    @include mixins.is-elevated-inset-clickable();\n    max-width: 100%;\n    min-width: functions.pxToRem(32);\n    padding: 0 functions.pxToRem(1);\n    display: inline-grid;\n    grid-auto-flow: column;\n\n    span[role='gridcell'] {\n        min-width: 0; // This is needed to force mdc-chip__text (which is inside this span) to truncate\n\n        &:only-child {\n            .mdc-chip__text {\n                padding-left: functions.pxToRem(12);\n            }\n        }\n\n        &:first-child {\n            .mdc-chip__text {\n                padding-left: functions.pxToRem(12);\n            }\n        }\n\n        a[role='button'],\n        span[role='checkbox'] {\n            &:focus-visible {\n                &:after {\n                    // visualizes keyboard navigation on Chrome & Firefox\n                    // only when non-pointer input is being used,\n                    // e.g. tabbed into using keyboard\n                    content: '';\n                    display: block;\n                    position: absolute;\n                    top: 0;\n                    right: 0;\n                    bottom: 0;\n                    left: 0;\n                    border-radius: functions.pxToRem(60);\n                    box-shadow: var(--shadow-depth-8-focused);\n                }\n            }\n        }\n    }\n\n    &.mdc-chip--selected {\n        color: var(--mdc-theme-primary) !important;\n        background-color: var(--mdc-theme-surface) !important;\n        box-shadow: var(--button-shadow-inset);\n\n        &:active {\n            box-shadow: var(--button-shadow-inset-pressed);\n        }\n\n        .mdc-chip__icon--leading {\n            color: var(--mdc-theme-primary) !important;\n        }\n    }\n}\n\n.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n.mdc-chip__checkmark {\n    margin-right: functions.pxToRem(4);\n    margin-left: functions.pxToRem(8);\n}\n\nlimel-badge {\n    margin-right: functions.pxToRem(4);\n    margin-left: functions.pxToRem(-4);\n}\n\n.mdc-chip__text {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: block;\n    padding: 0 functions.pxToRem(12) 0 functions.pxToRem(4);\n    color: inherit;\n    text-decoration: none;\n\n    &:focus,\n    &:focus-visible {\n        outline: none;\n    }\n}\n\nlimel-icon.mdc-chip__icon.mdc-chip__icon--leading {\n    background-color: var(--icon-background-color, transparent);\n    margin: 0 !important;\n    color: var(--icon-color, rgb(var(--contrast-1100)));\n}\n\n.mdc-chip-set {\n    align-items: center;\n    min-height: shared_input-select-picker.$height-of-mdc-text-field;\n    position: relative;\n\n    &.chip-set--with-label {\n        .lime-floating-label--float-above {\n            padding-left: functions.pxToRem(4);\n        }\n    }\n\n    &.mdc-chip-set--input {\n        padding: functions.pxToRem(8);\n\n        width: 100%;\n\n        .mdc-chip--selected {\n            // When chip is selected with keyboard (backspace / arrow-keys) to be deleted\n            box-shadow: var(--shadow-depth-8-error);\n\n            .mdc-chip__icon--trailing {\n                color: rgb(var(--color-red-dark));\n                background-color: $background-color-of-remove-chip-buton-when-hovered;\n\n                svg {\n                    transform: $scale-of-remove-chip-x-when-hovered;\n                }\n            }\n        }\n    }\n\n    &.has-clear-all-button {\n        &.mdc-chip-set--input {\n            padding-right: functions.pxToRem(\n                32\n            ); // This leaves space for \"clear all\" button and avoids overlapping with chips\n        }\n    }\n\n    &.disabled:not(.mdc-chip-set--input) {\n        @include shared_input-select-picker.looks-disabled;\n    }\n}\n\n.mdc-chip__icon {\n    &.mdc-chip__icon--trailing {\n        transition: background-color 0.2s ease, color 0.2s ease;\n\n        color: var(--mdc-theme-on-surface);\n        margin-left: 0;\n        margin-right: functions.pxToRem(5);\n\n        width: functions.pxToRem(22);\n        height: functions.pxToRem(22);\n\n        &:hover {\n            background-color: $background-color-of-remove-chip-buton-when-hovered;\n\n            svg {\n                transform: $scale-of-remove-chip-x-when-hovered;\n            }\n        }\n\n        svg {\n            transition: transform 0.2s ease;\n            display: block;\n            transform: scale(0.9);\n        }\n    }\n}\n\n.mdc-text-field {\n    height: auto;\n    cursor: text;\n\n    .mdc-text-field__input {\n        @include shared_input-select-picker.input-field-placeholder;\n\n        width: auto;\n        height: $height-of-chip-set-input;\n        line-height: $height-of-chip-set-input;\n        padding: 0 functions.pxToRem(12);\n\n        flex-grow: 1;\n        flex-shrink: 0;\n\n        &.hidden {\n            // This class is added, as soon as there is a chip selected and displayed\n            // This input field should not be visually visible as it breaks the UI in some cases\n            // But it should be rendered to be able to tab between fields and do other keyboard commands /Kia\n            transition: all 0s;\n            opacity: 0;\n            position: absolute;\n            z-index: -100; // to let users interact with chips, in case they're covered\n        }\n        &[type='search'] {\n            -webkit-appearance: textfield; // Removes the default magnifying glass icon on iOS which appears automatically on input fields with type of search\n            background-color: transparent; // overides styles caused by previous line\n\n            &::-webkit-search-cancel-button {\n                display: none; // removes the default X button\n            }\n        }\n    }\n}\n\n.mdc-text-field--disabled .mdc-chip {\n    pointer-events: all;\n\n    &.disabled {\n        @include shared_input-select-picker.looks-disabled;\n    }\n}\n\n// used only in chipsets that do not have input\n.chip-set__label {\n    @include mixins.truncate-text;\n    width: 120%; // `120%` instead of `100%`,\n    // because this class is always together with `mdc-floating-label--float-above`,\n    // which scales the label down. So there is more horizontal space to display the label in.\n    top: functions.pxToRem(13);\n    padding-left: functions.pxToRem(20);\n}\n\n// Because MDC removes some classes in chipset, we add custom\n// classes with similar names and expected behavior & styles.\n// These class names start with `lime-`, instead of `mdc-`.\n.lime-notched-outline--notched {\n    .mdc-notched-outline__notch {\n        border-top: 1px solid transparent !important;\n\n        .lime-floating-label--float-above {\n            // This overrides MDC's original top value which is `top: 50%`.\n            // The reason is that a % value aligns the label in a wrong position\n            // vertically, when there are multiple rows of chips.\n            top: functions.pxToRem(27);\n\n            transform: translateY(-34.75px) scale(0.75);\n            font-size: shared_input-select-picker.$cropped-label-hack--font-size;\n        }\n    }\n}\n\n.force-invalid {\n    @extend .mdc-text-field--invalid;\n}\n\n.clear-all-button {\n    @include mixins.clear-all-button;\n    @include mixins.visualize-keyboard-focus;\n\n    position: absolute;\n    right: functions.pxToRem(8);\n    top: functions.pxToRem(18);\n\n    opacity: 0; // Is hidden, but can receive focus (such as when navigating through tab indexes).\n\n    &:focus,\n    .has-chips:not(.mdc-text-field--disabled):hover &,\n    .has-chips:not(.mdc-text-field--disabled).mdc-text-field--focused & {\n        opacity: 1;\n        outline: none;\n    }\n\n    :not(.has-chips) &,\n    .has-chips.mdc-text-field--disabled & {\n        display: none; // Won't receive focus when disabled\n    }\n}\n\n.has-leading-icon {\n    &:not(.has-chips) {\n        .mdc-text-field__input {\n            padding-left: $leading-icon-space;\n        }\n\n        .mdc-floating-label {\n            &:not(.lime-floating-label--float-above) {\n                left: $leading-icon-space;\n            }\n            &.mdc-floating-label--float-above {\n                left: functions.pxToRem(4);\n            }\n        }\n    }\n\n    .mdc-chip {\n        &:first-of-type {\n            margin-left: 40px;\n        }\n    }\n\n    .search-icon {\n        transition: transform 0.2s ease;\n        position: absolute;\n        top: functions.pxToRem(16);\n        left: functions.pxToRem(16);\n    }\n\n    limel-icon {\n        background-color: transparent;\n    }\n}\n\n.delimiter {\n    opacity: 0.5;\n    padding: 0 functions.pxToRem(2);\n    color: var(--mdc-theme-on-surface);\n}\n\n@import './partial-styles/_readonly';\n@import './partial-styles/_file-picker';\n@import './partial-styles/_helper-text';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress","filePath":"./src/components/circular-progress/circular-progress.tsx","fileName":"circular-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/usage","tag":"limel-circular-progress","overview":"The circular progress component can be used to visualize the curent state of\na progress in a scale; for example percentage of completion of a task.\n\nIts compact UI makes the component suitable when there is not enough screen\nspace available to visualise such information.\n\nThis component allows you to define your scale, from `0` to a desired\n`maxValue`; and also lets you chose a proper `suffix` for your scale.\n\n:::note\nThe component will round up the value when it is displayed, and only shows\none decimal digit.\nIt also abbreviates large numbers. For example 1234 will be displayed as 1.2k.\nOf course such numbers, if bigger than `maxValue` will be visualized as a\nfull progress.\n:::","usage":{},"docs":"The circular progress component can be used to visualize the curent state of\na progress in a scale; for example percentage of completion of a task.\n\nIts compact UI makes the component suitable when there is not enough screen\nspace available to visualise such information.\n\nThis component allows you to define your scale, from `0` to a desired\n`maxValue`; and also lets you chose a proper `suffix` for your scale.\n\n:::note\nThe component will round up the value when it is displayed, and only shows\none decimal digit.\nIt also abbreviates large numbers. For example 1234 will be displayed as 1.2k.\nOf course such numbers, if bigger than `maxValue` will be visualized as a\nfull progress.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-circular-progress"},{"name":"exampleComponent","text":"limel-example-circular-progress-sizes"},{"name":"exampleComponent","text":"limel-example-circular-progress-props"},{"name":"exampleComponent","text":"limel-example-circular-progress-css-variables"},{"name":"exampleComponent","text":"limel-example-circular-progress-percentage-colors"}],"encapsulation":"shadow","dependents":["limel-example-circular-progress","limel-example-circular-progress-css-variables","limel-example-circular-progress-percentage-colors","limel-example-circular-progress-props","limel-example-circular-progress-sizes","limel-info-tile"],"dependencies":[],"dependencyGraph":{"limel-example-circular-progress":["limel-circular-progress"],"limel-example-circular-progress-css-variables":["limel-circular-progress"],"limel-example-circular-progress-percentage-colors":["limel-circular-progress"],"limel-example-circular-progress-props":["limel-circular-progress"],"limel-example-circular-progress-sizes":["limel-circular-progress"],"limel-info-tile":["limel-circular-progress"]},"props":[{"name":"displayPercentageColors","type":"boolean","mutable":false,"attr":"display-percentage-colors","reflectToAttr":false,"docs":"When set to `true`, makes the filled section showing the percentage colorful. Colors change with intervals of 10%.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"maxValue","type":"number","mutable":false,"attr":"max-value","reflectToAttr":false,"docs":"The maximum value within the scale that the progress bar should visualize. Defaults to `100`.","docsTags":[],"default":"PERCENT","values":[{"type":"number"}],"optional":false,"required":false},{"name":"prefix","type":"string","mutable":false,"attr":"prefix","reflectToAttr":true,"docs":"The prefix which is displayed before the `value`, must be a few characters characters long.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":true,"required":false},{"name":"size","type":"\"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\"","mutable":false,"attr":"size","reflectToAttr":true,"docs":"Determines the visual size of the visualization from a preset size. This property can override the `--circular-progress-size` variable if it is specified.","docsTags":[],"values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"small","type":"string"},{"value":"x-large","type":"string"},{"value":"x-small","type":"string"}],"optional":false,"required":false},{"name":"suffix","type":"string","mutable":false,"attr":"suffix","reflectToAttr":false,"docs":"The suffix which is displayed after the `value`, must be one or two characters long. Defaults to `%`","docsTags":[],"default":"'%'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"number","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The value of the progress bar.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--circular-progress-background-color","annotation":"prop","docs":"Determines the background color of the central section. Defaults to `--contrast-100`."},{"name":"--circular-progress-fill-color","annotation":"prop","docs":"Determines the color of the progressed section. Defaults to `--lime-primary-color`."},{"name":"--circular-progress-prefix-color","annotation":"prop","docs":"Determines the color of the suffix. Defaults to `--contrast-1000`."},{"name":"--circular-progress-size","annotation":"prop","docs":"Determines the visual size of the visualization. This does not override the `size` property if it is specified."},{"name":"--circular-progress-suffix-color","annotation":"prop","docs":"Determines the color of the prefix. Defaults to `--contrast-1000`."},{"name":"--circular-progress-text-color","annotation":"prop","docs":"Determines the color of the value. Defaults to `--contrast-1200`."},{"name":"--circular-progress-track-color","annotation":"prop","docs":"Determines the color of the circular track. Defaults to `--contrast-400`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { CircularProgressSize } from './circular-progress.types';\nimport { abbreviate } from '../badge/format';\n\nconst PERCENT = 100;\n\n/**\n * The circular progress component can be used to visualize the curent state of\n * a progress in a scale; for example percentage of completion of a task.\n *\n * Its compact UI makes the component suitable when there is not enough screen\n * space available to visualise such information.\n *\n * This component allows you to define your scale, from `0` to a desired\n * `maxValue`; and also lets you chose a proper `suffix` for your scale.\n *\n * :::note\n * The component will round up the value when it is displayed, and only shows\n * one decimal digit.\n * It also abbreviates large numbers. For example 1234 will be displayed as 1.2k.\n * Of course such numbers, if bigger than `maxValue` will be visualized as a\n * full progress.\n * :::\n *\n * @exampleComponent limel-example-circular-progress\n * @exampleComponent limel-example-circular-progress-sizes\n * @exampleComponent limel-example-circular-progress-props\n * @exampleComponent limel-example-circular-progress-css-variables\n * @exampleComponent limel-example-circular-progress-percentage-colors\n */\n@Component({\n    tag: 'limel-circular-progress',\n    shadow: true,\n    styleUrl: 'circular-progress.scss',\n})\nexport class CircularProgress {\n    /**\n     * The value of the progress bar.\n     */\n    @Prop()\n    public value: number = 0;\n\n    /**\n     * The maximum value within the scale that the progress bar should visualize. Defaults to `100`.\n     */\n    @Prop()\n    public maxValue: number = PERCENT;\n\n    /**\n     * The prefix which is displayed before the `value`, must be a few characters characters long.\n     */\n    @Prop({ reflect: true })\n    public prefix?: string = null;\n\n    /**\n     * The suffix which is displayed after the `value`, must be one or two characters long. Defaults to `%`\n     */\n    @Prop()\n    public suffix: string = '%';\n\n    /**\n     * When set to `true`, makes the filled section showing the percentage colorful. Colors change with intervals of 10%.\n     */\n    @Prop()\n    public displayPercentageColors: boolean = false;\n\n    /**\n     * Determines the visual size of the visualization from a preset size. This property can override the `--circular-progress-size` variable if it is specified.\n     */\n    @Prop({ reflect: true })\n    public size: CircularProgressSize;\n\n    public render() {\n        const classList = {\n            'lime-circular-progress': true,\n            'displays-percentage-colors': this.displayPercentageColors,\n        };\n\n        const currentPercentage = (this.value * PERCENT) / this.maxValue + '%';\n        const value = Math.round(this.value * 10) / 10; // eslint-disable-line no-magic-numbers\n\n        return (\n            <div\n                role=\"progressbar\"\n                class={classList}\n                aria-label=\"%\"\n                aria-valuemin=\"0\"\n                aria-valuemax={this.maxValue}\n                aria-valuenow={this.value}\n                style={{ '--percentage': currentPercentage }}\n            >\n                {this.renderPrefix()}\n                <span class=\"value\">\n                    {abbreviate(value)}\n                    <span class=\"suffix\">{this.suffix}</span>\n                </span>\n            </div>\n        );\n    }\n    private renderPrefix = () => {\n        if (this.prefix) {\n            return <span class=\"prefix\">{this.prefix}</span>;\n        }\n    };\n}\n"},{"filename":"circular-progress.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/mixins';\n@use '../../style/internal/lime-theme';\n\n/**\n * @prop --circular-progress-size: Determines the visual size of the visualization. This does not override the `size` property if it is specified.\n * @prop --circular-progress-track-color: Determines the color of the circular track. Defaults to `--contrast-400`.\n * @prop --circular-progress-suffix-color: Determines the color of the prefix. Defaults to `--contrast-1000`.\n * @prop --circular-progress-text-color: Determines the color of the value. Defaults to `--contrast-1200`.\n * @prop --circular-progress-prefix-color: Determines the color of the suffix. Defaults to `--contrast-1000`.\n * @prop --circular-progress-fill-color: Determines the color of the progressed section. Defaults to `--lime-primary-color`.\n * @prop --circular-progress-background-color: Determines the background color of the central section. Defaults to `--contrast-100`.\n */\n\n:host {\n    display: block;\n    box-sizing: border-box;\n    isolation: isolate;\n}\n\n:host([size='x-small']) {\n    --circular-progress-size: 1.5rem;\n    font-weight: bold;\n}\n\n:host([size='small']) {\n    --circular-progress-size: 2rem;\n    font-weight: bold;\n}\n\n:host([size='medium']) {\n    --circular-progress-size: 3rem;\n}\n\n:host([size='large']) {\n    --circular-progress-size: 4rem;\n}\n\n:host([size='x-large']) {\n    --circular-progress-size: 5rem;\n}\n\n.lime-circular-progress {\n    --size: var(--circular-progress-size, 3rem);\n    --fill-color: var(--circular-progress-fill-color, var(--mdc-theme-primary));\n    --track-color: var(\n        --circular-progress-track-color,\n        rgb(var(--contrast-400))\n    );\n    position: relative;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    width: var(--size);\n    height: var(--size);\n    border-radius: 50%;\n\n    line-height: normal;\n\n    box-shadow: 0 0 0 0.125rem rgb(var(--contrast-100), 0.7);\n    background: conic-gradient(\n        var(--fill-color) 0% var(--percentage),\n        var(--track-color) var(--percentage) 100%\n    );\n\n    &:before {\n        $size-of-middle-circle: calc(\n            var(--size) * 0.75 + 0.25rem\n        ); // this calculation ensures that the middle circle is responsive and always perfectly centered\n\n        content: '';\n        position: absolute;\n        width: $size-of-middle-circle;\n        height: $size-of-middle-circle;\n        border-radius: 50%;\n        background-color: var(\n            --circular-progress-background-color,\n            rgb(var(--contrast-100))\n        );\n        box-shadow: var(--button-shadow-pressed);\n    }\n}\n\n.prefix {\n    font-size: clamp(0.5rem, calc(var(--size) * 0.16), 2.25rem);\n    @include mixins.truncate-text();\n    text-align: center;\n    color: var(--circular-progress-prefix-color, rgb(var(--contrast-1000)));\n\n    width: 45%;\n    top: 20%;\n    position: absolute;\n}\n\n.value {\n    display: flex;\n    font-size: clamp(0.5rem, calc(var(--size) * 0.25), 4rem);\n    color: var(--circular-progress-text-color, rgb(var(--contrast-1200)));\n    z-index: 1;\n    cursor: default;\n}\n\n.suffix {\n    font-size: clamp(0.5rem, calc(var(--size) * 0.18), 2.5rem);\n    color: var(--circular-progress-suffix-color, rgb(var(--contrast-1000)));\n    padding-top: 4%;\n}\n\n@import './partial-styles/_percentage-colors';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor","filePath":"./src/components/code-editor/code-editor.tsx","fileName":"code-editor.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/usage","tag":"limel-code-editor","overview":"Currently this component support syntax highlighting for `javascript`,\n`json` and `typescript` formats.","usage":{},"docs":"Currently this component support syntax highlighting for `javascript`,\n`json` and `typescript` formats.","docsTags":[{"name":"exampleComponent","text":"limel-example-code-editor"},{"name":"exampleComponent","text":"limel-example-code-editor-readonly-with-line-numbers"},{"name":"exampleComponent","text":"limel-example-code-editor-fold-lint"}],"encapsulation":"shadow","dependents":["limel-example-code-editor","limel-example-code-editor-fold-lint","limel-example-code-editor-readonly-with-line-numbers"],"dependencies":[],"dependencyGraph":{"limel-example-code-editor":["limel-code-editor"],"limel-example-code-editor-fold-lint":["limel-code-editor"],"limel-example-code-editor-readonly-with-line-numbers":["limel-code-editor"]},"props":[{"name":"colorScheme","type":"\"auto\" | \"dark\" | \"light\"","mutable":false,"attr":"color-scheme","reflectToAttr":false,"docs":"Select color scheme for the editor","docsTags":[],"default":"'auto'","values":[{"value":"auto","type":"string"},{"value":"dark","type":"string"},{"value":"light","type":"string"}],"optional":false,"required":false},{"name":"fold","type":"boolean","mutable":false,"attr":"fold","reflectToAttr":false,"docs":"Allows the user to fold code","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"javascript\" | \"json\" | \"typescript\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"The language of the code","docsTags":[],"values":[{"value":"javascript","type":"string"},{"value":"json","type":"string"},{"value":"typescript","type":"string"}],"optional":false,"required":false},{"name":"lineNumbers","type":"boolean","mutable":false,"attr":"line-numbers","reflectToAttr":false,"docs":"Displays line numbers in the editor","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"lint","type":"boolean","mutable":false,"attr":"lint","reflectToAttr":false,"docs":"Enables linting of JSON content","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":false,"docs":"Disables editing of the editor content","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The code to be rendered","docsTags":[],"default":"''","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the code has changed. Will only be emitted when the code\narea has lost focus","docsTags":[]}],"styles":[{"name":"--code-editor-font-size","annotation":"prop","docs":"Defines the font size of the code, defaults to `0.875rem`."},{"name":"--code-editor-max-height","annotation":"prop","docs":"Defines how tall the code editor can get before content becomes scrollable, defaults to `10rem`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"code-editor.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    Element,\n    Event,\n    EventEmitter,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { ColorScheme, Language } from './code-editor.types';\nimport CodeMirror from 'codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/selection/active-line';\nimport 'codemirror/addon/edit/matchbrackets';\nimport 'codemirror/addon/lint/lint';\nimport 'codemirror/addon/lint/json-lint';\nimport 'codemirror/addon/fold/foldgutter';\nimport 'codemirror/addon/fold/brace-fold';\nimport jslint from 'jsonlint-mod';\n\n/**\n * Currently this component support syntax highlighting for `javascript`,\n `json` and `typescript` formats.\n *\n * @exampleComponent limel-example-code-editor\n * @exampleComponent limel-example-code-editor-readonly-with-line-numbers\n * @exampleComponent limel-example-code-editor-fold-lint\n */\n@Component({\n    tag: 'limel-code-editor',\n    shadow: true,\n    styleUrl: 'code-editor.scss',\n})\nexport class CodeEditor {\n    /**\n     * The code to be rendered\n     */\n    @Prop()\n    public value: string = '';\n\n    /**\n     * The language of the code\n     */\n    @Prop()\n    public language: Language;\n\n    /**\n     * Disables editing of the editor content\n     */\n    @Prop()\n    public readonly: boolean = false;\n\n    /**\n     * Displays line numbers in the editor\n     */\n    @Prop()\n    public lineNumbers: boolean = false;\n\n    /**\n     * Allows the user to fold code\n     */\n    @Prop()\n    public fold: boolean = false;\n\n    /**\n     * Enables linting of JSON content\n     */\n    @Prop()\n    public lint: boolean = false;\n\n    /**\n     * Select color scheme for the editor\n     */\n    @Prop()\n    public colorScheme: ColorScheme = 'auto';\n\n    /**\n     * Emitted when the code has changed. Will only be emitted when the code\n     * area has lost focus\n     */\n    @Event()\n    public change: EventEmitter<string>;\n\n    @Element()\n    private host: HTMLLimelCodeEditorElement;\n\n    /**\n     * This is only used to trigger a redraw if the\n     * `(prefers-color-scheme: dark)` media query is changed\n     */\n    @State()\n    protected random: number;\n\n    private editor: CodeMirror.Editor;\n    private observer: ResizeObserver;\n\n    public connectedCallback() {\n        this.observer = new ResizeObserver(this.handleResize) as any;\n        this.observer.observe(this.host);\n\n        this.darkMode.addEventListener('change', this.handleChangeDarkMode);\n    }\n\n    public disconnectedCallback() {\n        this.observer.unobserve(this.host);\n        this.editor.off('change', this.handleChange);\n        this.editor = null;\n\n        this.darkMode.removeEventListener('change', this.handleChangeDarkMode);\n\n        const editorElement = this.host.shadowRoot.querySelector('.editor');\n        editorElement?.childNodes.forEach((child) => {\n            child.remove();\n        });\n    }\n\n    public componentDidRender() {\n        if (this.editor) {\n            return;\n        }\n\n        this.editor = this.createEditor();\n    }\n\n    @Watch('value')\n    protected watchValue(newValue: string) {\n        if (!this.editor) {\n            return;\n        }\n\n        const currentValue = this.editor.getValue();\n        if (newValue === currentValue) {\n            // Circuit breaker for when the change comes from the editor itself\n            // The caret position will be reset without this\n            return;\n        }\n\n        this.editor.getDoc().setValue(newValue || '');\n    }\n\n    private handleChangeDarkMode = () => {\n        if (this.colorScheme !== 'auto') {\n            return;\n        }\n\n        this.forceRedraw();\n    };\n\n    private handleChange = () => {\n        this.change.emit(this.editor.getValue());\n    };\n\n    private handleResize = () => {\n        if (!this.editor) {\n            return;\n        }\n\n        this.editor.refresh();\n    };\n\n    private createEditor() {\n        const options = this.getOptions();\n\n        const editor = CodeMirror(\n            this.host.shadowRoot.querySelector('.editor'),\n            options\n        );\n\n        editor.on('change', this.handleChange);\n\n        // Replace tab with spaces and use the actual indent setting for\n        // the space count\n        editor.setOption('extraKeys', {\n            Tab: (codeMirror) => {\n                const spaces = Array(\n                    codeMirror.getOption('indentUnit') + 1\n                ).join(' ');\n                codeMirror.replaceSelection(spaces);\n            },\n        });\n\n        return editor;\n    }\n\n    private getOptions(): CodeMirror.EditorConfiguration {\n        let mode: string | CodeMirror.ModeSpec<any> = this.language;\n        const TAB_SIZE = 4;\n        let theme = 'lime light';\n        const gutters = [];\n\n        if (this.isDarkMode()) {\n            theme = 'lime dark';\n        }\n\n        if (this.language === 'json') {\n            mode = {\n                name: 'application/json',\n                json: true,\n            };\n            if (this.lint) {\n                gutters.push('CodeMirror-lint-markers');\n                if (!('jsonlint' in window)) {\n                    // eslint-disable-next-line @typescript-eslint/dot-notation\n                    window['jsonlint'] = jslint;\n                }\n            }\n        } else if (this.language === 'typescript') {\n            mode = {\n                name: 'application/typescript',\n                typescript: true,\n            };\n        }\n\n        if (this.fold) {\n            gutters.push('CodeMirror-foldgutter');\n        }\n\n        return {\n            mode: mode,\n            value: this.value || '',\n            theme: theme,\n            readOnly: this.readonly,\n            tabSize: TAB_SIZE,\n            indentUnit: TAB_SIZE,\n            lineNumbers: this.lineNumbers,\n            styleActiveLine: true,\n            matchBrackets: true,\n            lint: this.lint,\n            foldGutter: this.fold,\n            gutters: gutters,\n        };\n    }\n\n    private isDarkMode(): boolean {\n        if (this.colorScheme !== 'auto') {\n            return this.colorScheme === 'dark';\n        }\n\n        return this.darkMode.matches;\n    }\n\n    public render() {\n        const classList = {\n            editor: true,\n            readonly: this.readonly,\n            'is-dark-mode': this.isDarkMode(),\n            'is-light-mode': !this.isDarkMode(),\n        };\n\n        return <div class={classList} />;\n    }\n\n    private forceRedraw() {\n        this.random = Math.random();\n    }\n\n    private get darkMode(): MediaQueryList {\n        return matchMedia('(prefers-color-scheme: dark)');\n    }\n}\n"},{"filename":"code-editor.scss","type":"scss","source":"@use '../../style/mixins';\n\n@import '../../../node_modules/codemirror/lib/codemirror.css';\n@import '../../../node_modules/codemirror/addon/lint/lint.css';\n@import '../../../node_modules/codemirror/addon/fold/foldgutter.css';\n\n/**\n * @prop --code-editor-max-height: Defines how tall the code editor can get before content becomes scrollable, defaults to `10rem`.\n * @prop --code-editor-font-size: Defines the font size of the code, defaults to `0.875rem`.\n */\n\n@mixin light-mode-styles {\n    --code-editor-neutral-text-color: var(--contrast-1100);\n    --code-editor-background-color: var(--contrast-200);\n    --code-editor-gutter-background-color: var(--contrast-300);\n    --code-editor-line-number-text-color: var(--contrast-700);\n    --code-editor-cursor-color: var(--color-amber-dark);\n\n    --code-editor-selection-highlight-color: var(--color-cyan-default);\n    --code-editor-selection-lowlight-color: var(--contrast-600);\n\n    .cm-attribute,\n    .cm-property,\n    .cm-keyword {\n        color: rgb(var(--color-violet-light));\n    }\n    .cm-operator {\n        color: rgb(var(--color-sky-dark));\n    }\n    .cm-variable {\n        color: rgb(var(--color-pink-light));\n    }\n    .cm-variable-2 {\n        color: rgb(var(--contrast-1100));\n    }\n    .cm-variable-3,\n    .cm-type {\n        color: rgb(var(--color-amber-darker));\n    }\n    .cm-builtin,\n    .cm-meta {\n        color: rgb(var(--color-amber-default));\n    }\n    .cm-atom {\n        color: rgb(var(--color-coral-default));\n    }\n    .cm-tag,\n    .cm-number {\n        color: rgb(var(--color-magenta-default));\n    }\n    .cm-def {\n        color: rgb(var(--color-sky-default));\n    }\n    .cm-string {\n        color: rgb(var(--color-green-dark));\n    }\n    .cm-string-2 {\n        color: rgb(var(--color-pink-default));\n    }\n    .cm-qualifier {\n        color: rgb(var(--color-grass-default));\n    }\n    .cm-error {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--color-red-default));\n    }\n    .cm-comment {\n        color: rgba(var(--code-editor-neutral-text-color), 0.7);\n    }\n}\n\n@mixin dark-mode-styles {\n    --code-editor-neutral-text-color: var(--contrast-1600);\n    // --code-editor-background-color: { same as light };\n    // --code-editor-gutter-background-color: { same as light };\n    --code-editor-line-number-text-color: var(--contrast-800);\n    --code-editor-cursor-color: var(--color-amber-default);\n\n    --code-editor-selection-highlight-color: var(--color-cyan-light);\n    --code-editor-selection-lowlight-color: var(--contrast-100);\n\n    .cm-attribute,\n    .cm-property,\n    .cm-keyword {\n        color: rgb(var(--color-purple-lighter));\n    }\n    .cm-operator {\n        color: rgb(var(--color-sky-lighter));\n    }\n    // .cm-variable { same as light }\n    // .cm-variable-2 { same as light }\n    .cm-variable-3,\n    .cm-type {\n        color: rgb(var(--color-yellow-light));\n    }\n    // .cm-builtin,\n    // .cm-meta { same as light }\n    .cm-atom {\n        color: rgb(var(--color-coral-light));\n    }\n    .cm-tag,\n    .cm-number {\n        color: rgb(var(--color-magenta-light));\n    }\n    .cm-def {\n        color: rgb(var(--color-sky-light));\n    }\n    .cm-string {\n        color: rgb(var(--color-lime-light));\n    }\n    .cm-string-2 {\n        color: rgb(var(--color-pink-lighter));\n    }\n    .cm-qualifier {\n        color: rgb(var(--color-grass-light));\n    }\n    // .cm-error { same as light }\n    .cm-comment {\n        color: rgba(var(--code-editor-neutral-text-color), 0.4);\n    }\n}\n\n:host {\n    display: flex;\n    font-size: var(--code-editor-font-size, 0.875rem); // 14px\n    @include light-mode-styles;\n}\n\n@include mixins.in(dark-mode) {\n    :host {\n        @include dark-mode-styles;\n    }\n}\n\n.editor {\n    display: flex;\n    align-items: stretch;\n    width: 100%;\n\n    &.readonly {\n        .CodeMirror-focused {\n            .CodeMirror-cursors {\n                visibility: visible !important;\n            }\n        }\n    }\n}\n\n.cm-s-lime {\n    &.CodeMirror {\n        color: rgb(var(--code-editor-neutral-text-color));\n        background-color: rgb(var(--code-editor-background-color));\n        border-radius: 0.25rem;\n        height: auto;\n        width: 100%;\n    }\n\n    .CodeMirror-scroll {\n        max-height: var(--code-editor-max-height, 10rem);\n    }\n\n    &.CodeMirror-focused {\n        div.CodeMirror-selected {\n            background: rgba(\n                var(--code-editor-selection-highlight-color),\n                0.15\n            );\n        }\n    }\n    div.CodeMirror-selected {\n        background: rgba(var(--code-editor-selection-highlight-color), 0.05);\n    }\n\n    .CodeMirror {\n        &-gutters {\n            background-color: rgb(var(--code-editor-gutter-background-color));\n            color: rgb(var(--code-editor-line-number-text-color));\n            border: none;\n        }\n\n        &-guttermarker,\n        &-guttermarker-subtle,\n        &-linenumber {\n            color: rgb(var(--code-editor-line-number-text-color));\n        }\n\n        &-cursor {\n            border-left: 1px solid rgb(var(--code-editor-cursor-color));\n\n            .editor.readonly & {\n                border-color: rgba(var(--code-editor-neutral-text-color), 0.5);\n                border-width: 0.125rem;\n            }\n        }\n\n        &-line {\n        }\n\n        &-activeline-background {\n            background: rgba(var(--code-editor-selection-lowlight-color), 0.5);\n        }\n\n        &-matchingbracket {\n            font-weight: bold;\n            color: rgb(var(--code-editor-neutral-text-color)) !important;\n            background: rgba(\n                var(--code-editor-selection-highlight-color),\n                0.15\n            );\n            position: relative;\n\n            &:before {\n                content: '_';\n                color: rgb(var(--code-editor-selection-highlight-color), 0.8);\n                position: absolute;\n                bottom: -0.4rem;\n                left: 0;\n                right: 0;\n            }\n        }\n    }\n    .CodeMirror-lint-marker-error,\n    .CodeMirror-lint-message-error {\n        background: {\n            image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><defs/><path fill='rgb(255,255,255)' d='M7.219 5.781L5.78 7.22 14.563 16 5.78 24.781 7.22 26.22 16 17.437l8.781 8.782 1.438-1.438L17.437 16l8.782-8.781L24.78 5.78 16 14.563z'/></svg>\");\n            color: rgb(var(--color-red-default));\n            size: 0.75rem;\n        }\n        border-radius: 50%;\n    }\n\n    .CodeMirror-foldmarker {\n        position: relative;\n        @include mixins.is-elevated-clickable($color: transparent);\n        text-shadow: none;\n\n        padding: 0 0.5rem;\n        border-radius: 1rem;\n\n        background: {\n            image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' xml:space='preserve'><circle fill='rgba(186,186,192,0.7)' cx='16' cy='16' r='2'/><circle fill='rgba(186,186,192,0.7)' cx='26' cy='16' r='2'/><circle fill='rgba(186,186,192,0.7)' cx='6' cy='16' r='2'/></svg>\");\n            size: contain;\n            repeat: no-repeat;\n            position: center;\n        }\n    }\n\n    [class^='CodeMirror-foldgutter'] {\n        color: var(--code-editor-neutral-text-color);\n        transition: opacity 0.2s ease;\n        opacity: 0.4;\n\n        &:hover {\n            opacity: 1;\n        }\n    }\n\n    .CodeMirror-foldgutter-folded {\n        opacity: 0.7;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section","filePath":"./src/components/collapsible-section/collapsible-section.tsx","fileName":"collapsible-section.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/usage","tag":"limel-collapsible-section","overview":"","usage":{},"docs":"","docsTags":[{"name":"slot","text":"- Content to put inside the collapsible section"},{"name":"exampleComponent","text":"limel-example-collapsible-section"},{"name":"exampleComponent","text":"limel-example-collapsible-section-actions"},{"name":"exampleComponent","text":"limel-example-collapsible-section-css-props"},{"name":"exampleComponent","text":"limel-example-collapsible-section-external-control"},{"name":"exampleComponent","text":"limel-example-collapsible-section-with-slider"}],"encapsulation":"shadow","dependents":["limel-example-collapsible-section","limel-example-collapsible-section-actions","limel-example-collapsible-section-css-props","limel-example-collapsible-section-external-control","limel-example-collapsible-section-with-slider","limel-example-dialog-nested-close-events","limel-example-tooltip-composite"],"dependencies":["limel-icon-button"],"dependencyGraph":{"limel-collapsible-section":["limel-icon-button"],"limel-icon-button":["limel-icon"],"limel-example-collapsible-section":["limel-collapsible-section"],"limel-example-collapsible-section-actions":["limel-collapsible-section"],"limel-example-collapsible-section-css-props":["limel-collapsible-section"],"limel-example-collapsible-section-external-control":["limel-collapsible-section"],"limel-example-collapsible-section-with-slider":["limel-collapsible-section"],"limel-example-dialog-nested-close-events":["limel-collapsible-section"],"limel-example-tooltip-composite":["limel-collapsible-section"]},"props":[{"name":"actions","type":"Action[]","mutable":false,"reflectToAttr":false,"docs":"Actions to place to the far right inside the header","docsTags":[],"values":[{"type":"Action[]"}],"optional":false,"required":false},{"name":"header","type":"string","mutable":false,"attr":"header","reflectToAttr":true,"docs":"Text to display in the header of the section","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"isOpen","type":"boolean","mutable":true,"attr":"is-open","reflectToAttr":true,"docs":"`true` if the section is expanded, `false` if collapsed.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"action","detail":"Action","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when an action is clicked inside the header","docsTags":[]},{"event":"close","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the section is collapsed","docsTags":[]},{"event":"open","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the section is expanded","docsTags":[]}],"styles":[{"name":"--body-background-color","annotation":"prop","docs":"background color for body"},{"name":"--body-padding","annotation":"prop","docs":"space around content of the body"},{"name":"--closed-header-background-color","annotation":"prop","docs":"background color for header when closed"},{"name":"--header-stroke-color","annotation":"prop","docs":"color of the animated icons that visualize collapsed or normal states of the headers, as well as the divider line on headers"},{"name":"--open-header-background-color","annotation":"prop","docs":"background color for header when open"}],"slots":[{"name":"","docs":"Content to put inside the collapsible section"}],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section.tsx","type":"tsx","source":"import { Component, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport { dispatchResizeEvent } from '../../util/dispatch-resize-event';\nimport { Action } from './action';\nimport { ENTER, ENTER_KEY_CODE } from '../../util/keycodes';\n\n/**\n * @slot - Content to put inside the collapsible section\n * @exampleComponent limel-example-collapsible-section\n * @exampleComponent limel-example-collapsible-section-actions\n * @exampleComponent limel-example-collapsible-section-css-props\n * @exampleComponent limel-example-collapsible-section-external-control\n * @exampleComponent limel-example-collapsible-section-with-slider\n */\n@Component({\n    tag: 'limel-collapsible-section',\n    shadow: true,\n    styleUrl: 'collapsible-section.scss',\n})\nexport class CollapsibleSection {\n    /**\n     * `true` if the section is expanded, `false` if collapsed.\n     */\n    @Prop({ mutable: true, reflect: true })\n    public isOpen: boolean = false;\n\n    /**\n     * Text to display in the header of the section\n     */\n    @Prop({ reflect: true })\n    public header: string;\n\n    /**\n     * Actions to place to the far right inside the header\n     */\n    @Prop()\n    public actions: Action[];\n\n    /**\n     * Emitted when the section is expanded\n     */\n    @Event()\n    private open: EventEmitter<void>;\n\n    /**\n     * Emitted when the section is collapsed\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    /**\n     * Emitted when an action is clicked inside the header\n     */\n    @Event()\n    private action: EventEmitter<Action>;\n\n    public render() {\n        return (\n            <section class={`${this.isOpen ? 'open' : ''}`}>\n                <header\n                    class=\"section__header\"\n                    onClick={this.onClick}\n                    onKeyDown={this.handleKeyDown}\n                    tabindex=\"0\"\n                >\n                    <div class=\"section__header__expand-icon\">\n                        <div class=\"expand-icon__line\"></div>\n                        <div class=\"expand-icon__line\"></div>\n                        <div class=\"expand-icon__line\"></div>\n                        <div class=\"expand-icon__line\"></div>\n                    </div>\n                    <h2 class=\"section__header__title mdc-typography mdc-typography--headline2\">\n                        {this.header}\n                    </h2>\n                    <div class=\"section__header__divider-line\" />\n                    {this.renderActions()}\n                </header>\n                <div class=\"section__body\">\n                    <slot />\n                </div>\n            </section>\n        );\n    }\n\n    private onClick = () => {\n        this.handleInteraction();\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        const isEnter = event.key === ENTER || event.keyCode === ENTER_KEY_CODE;\n\n        if (isEnter) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.handleInteraction();\n        }\n    };\n\n    private handleInteraction = () => {\n        this.isOpen = !this.isOpen;\n\n        if (this.isOpen) {\n            this.open.emit();\n            const waitForUiToRender = 100;\n            setTimeout(dispatchResizeEvent, waitForUiToRender);\n        } else {\n            this.close.emit();\n        }\n    };\n\n    private renderActions = () => {\n        if (!this.actions) {\n            return;\n        }\n\n        return (\n            <div class=\"section__header__actions\">\n                {this.actions.map(this.renderActionButton)}\n            </div>\n        );\n    };\n\n    private renderActionButton = (action: Action) => {\n        return (\n            <limel-icon-button\n                icon={action.icon}\n                label={action.label}\n                disabled={action.disabled}\n                onClick={this.handleActionClick(action)}\n            />\n        );\n    };\n\n    private handleActionClick = (action: Action) => (event: MouseEvent) => {\n        event.stopPropagation();\n        this.action.emit(action);\n    };\n}\n"},{"filename":"collapsible-section.scss","type":"scss","source":"@use '../../style/internal/lime-theme';\n@use '../../style/internal/lime-typography';\n@use '../../style/functions';\n@use '../../style/mixins';\n\n/**\n * @prop --closed-header-background-color: background color for header when closed\n * @prop --open-header-background-color: background color for header when open\n * @prop --header-stroke-color: color of the animated icons that visualize collapsed or normal states of the headers, as well as the divider line on headers\n * @prop --body-background-color: background color for body\n * @prop --body-padding: space around content of the body\n */\n\n:host {\n    --border-radius-of-header: 0.75rem;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([disabled]) {\n    pointer-events: none;\n}\n\n.section__header {\n    @include mixins.visualize-keyboard-focus;\n\n    transition: background-color 0.4s ease, border-radius 0.1s ease;\n    cursor: pointer;\n\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n\n    padding-left: functions.pxToRem(10);\n    padding-right: functions.pxToRem(10);\n    height: functions.pxToRem(60);\n\n    background-color: var(\n        --closed-header-background-color,\n        rgb(var(--contrast-200))\n    );\n    border-radius: var(--border-radius-of-header);\n\n    section.open & {\n        background-color: var(\n            --open-header-background-color,\n            rgb(var(--contrast-100))\n        );\n        border-radius: var(--border-radius-of-header)\n            var(--border-radius-of-header) 0 0;\n        &:hover {\n            background-color: var(\n                --open-header-background-color,\n                rgb(var(--contrast-300))\n            );\n        }\n    }\n\n    &:hover {\n        background-color: var(\n            --open-header-background-color,\n            rgb(var(--contrast-300))\n        );\n    }\n}\n\n.section__header__title {\n    @include lime-typography.typography(headline2);\n    color: var(--mdc-theme-on-surface);\n\n    justify-self: flex-start;\n    padding-right: functions.pxToRem(12);\n\n    user-select: none; // mostly to improve experience on Android, where tapping on sections selects the text too\n\n    padding-right: functions.pxToRem(8);\n\n    // Below tries to render text in two lines,\n    // and then truncate if there is no more space\n    height: auto;\n    max-height: 3rem;\n    line-height: 1.2rem;\n    white-space: normal;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n.section__header__divider-line {\n    transition: opacity 0.3s ease 0.3s;\n    flex-grow: 1;\n    height: functions.pxToRem(2);\n    border-radius: functions.pxToRem(1);\n    background-color: var(--header-stroke-color, rgb(var(--contrast-900)));\n    margin-right: functions.pxToRem(8);\n\n    opacity: 0;\n\n    section.open & {\n        opacity: 0.16;\n    }\n}\n\n.section__header__actions {\n    justify-self: flex-end;\n    flex-shrink: 0;\n}\n\n@keyframes fade-in-section__body {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n.section__body {\n    animation: fade-in-section__body 0.3s ease-in forwards;\n    background-color: var(--body-background-color, var(--contrast-100));\n    padding-left: var(--body-padding, functions.pxToRem(20));\n    padding-right: var(--body-padding, functions.pxToRem(20));\n    margin-bottom: functions.pxToRem(24);\n    border-radius: 0 0 var(--border-radius-of-header)\n        var(--border-radius-of-header);\n\n    display: none;\n    opacity: 0;\n    section.open & {\n        display: block;\n    }\n\n    &:before,\n    &:after {\n        content: ' ';\n        display: table;\n    }\n\n    &:after {\n        clear: both;\n    }\n}\n\n@import './partial-styles/expand-icon.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker","filePath":"./src/components/color-picker/color-picker.tsx","fileName":"color-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/usage","tag":"limel-color-picker","overview":"This component enables you to select a swatch from out color palette, simply\nby clicking on it. You can then copy the css variable name of the chosen color\nand use it where desired.\n\nThe color picker can also show you a preview of any valid color name or color value.\n\n:::note\nMake sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n:::","usage":{},"docs":"This component enables you to select a swatch from out color palette, simply\nby clicking on it. You can then copy the css variable name of the chosen color\nand use it where desired.\n\nThe color picker can also show you a preview of any valid color name or color value.\n\n:::note\nMake sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-color-picker"},{"name":"exampleComponent","text":"limel-example-color-picker-readonly"}],"encapsulation":"shadow","dependents":["limel-example-color-picker","limel-example-color-picker-readonly"],"dependencies":["limel-tooltip","limel-popover","limel-color-picker-palette","limel-input-field"],"dependencyGraph":{"limel-color-picker":["limel-tooltip","limel-popover","limel-color-picker-palette","limel-input-field"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-color-picker-palette":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"],"limel-example-color-picker":["limel-color-picker"],"limel-example-color-picker-readonly":["limel-color-picker"]},"props":[{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Helper text of the input field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The label of the input field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` if a value is readonly. This makes the component un-interactive.","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` if a value is required","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"tooltipLabel","type":"string","mutable":false,"attr":"tooltip-label","reflectToAttr":true,"docs":"Displayed as tooltips when picker is hovered.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":true,"docs":"Name or code of the chosen color","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Emits chosen value to the parent component","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"color-picker.tsx","type":"tsx","source":"/* eslint-disable multiline-ternary */\nimport { Component, h, Prop, State, Event, EventEmitter } from '@stencil/core';\nimport { FormComponent } from '../form/form.types';\n\n/**\n * This component enables you to select a swatch from out color palette, simply\n * by clicking on it. You can then copy the css variable name of the chosen color\n * and use it where desired.\n *\n * The color picker can also show you a preview of any valid color name or color value.\n *\n * :::note\n * Make sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n * :::\n *\n * @exampleComponent limel-example-color-picker\n * @exampleComponent limel-example-color-picker-readonly\n */\n@Component({\n    tag: 'limel-color-picker',\n    shadow: true,\n    styleUrl: 'color-picker.scss',\n})\nexport class ColorPicker implements FormComponent {\n    /**\n     * Name or code of the chosen color\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * The label of the input field\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Helper text of the input field\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Displayed as tooltips when picker is hovered.\n     */\n    @Prop({ reflect: true })\n    public tooltipLabel: string;\n\n    /**\n     * Set to `true` if a value is required\n     */\n    @Prop({ reflect: true })\n    public required: boolean;\n\n    /**\n     * Set to `true` if a value is readonly. This makes the component un-interactive.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean;\n\n    /**\n     * Emits chosen value to the parent component\n     */\n    @Event()\n    public change: EventEmitter<string>;\n\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            this.renderTooltip(),\n            <div class=\"color-picker\">\n                {this.renderPickerPalette()}\n\n                <limel-input-field\n                    label={this.label}\n                    helperText={this.helperText}\n                    value={this.value}\n                    onChange={this.handleChange}\n                    required={this.required}\n                    readonly={this.readonly}\n                    class=\"chosen-color-input\"\n                />\n            </div>,\n        ];\n    }\n    private renderTooltip = () => {\n        if (!this.readonly && this.tooltipLabel) {\n            return (\n                <limel-tooltip\n                    label={this.tooltipLabel}\n                    elementId=\"tooltip-button\"\n                />\n            );\n        }\n    };\n\n    private renderPickerPalette = () => {\n        if (this.readonly) {\n            return this.renderPickerTrigger();\n        }\n\n        return (\n            <limel-popover\n                open={this.isOpen}\n                openDirection=\"bottom-start\"\n                onClose={this.onPopoverClose}\n            >\n                {this.renderPickerTrigger()}\n                <limel-color-picker-palette\n                    value={this.value}\n                    label={this.label}\n                    helperText={this.helperText}\n                    onChange={this.handleChange}\n                    required={this.required}\n                />\n            </limel-popover>\n        );\n    };\n\n    private renderPickerTrigger = () => {\n        const background = this.value ? { '--background': this.value } : {};\n\n        return (\n            <div\n                class=\"picker-trigger\"\n                slot=\"trigger\"\n                style={background}\n                role=\"button\"\n                tabindex=\"0\"\n                onClick={this.openPopover}\n                id=\"tooltip-button\"\n            />\n        );\n    };\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.isOpen = true;\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        this.isOpen = false;\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.change.emit(event.detail);\n    };\n}\n"},{"filename":"color-picker.scss","type":"scss","source":"@use '../../style/mixins';\n@import './partial-styles/lime-admin-hack';\n\n:host {\n    --popover-surface-width: 50rem;\n    --color-picker-default-background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.16)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n}\n\n.color-picker {\n    display: grid;\n    gap: 0.5rem;\n    grid-template-columns: auto 1fr;\n}\n\n.chosen-color-preview,\n.picker-trigger {\n    box-sizing: border-box;\n    position: relative;\n    isolation: isolate;\n    width: 3.5rem;\n    height: 3.5rem;\n\n    &:before,\n    &:after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        border-radius: inherit;\n    }\n\n    &:before {\n        background: var(--color-picker-default-background);\n        background-size: 0.5rem;\n        z-index: 0;\n    }\n\n    &:after {\n        background: var(--background);\n        z-index: 1;\n    }\n}\n\n.picker-trigger {\n    border-radius: 0.5rem;\n    cursor: pointer;\n    @include mixins.is-elevated-clickable();\n\n    &:after {\n        box-shadow: 0 0 0 0.25rem rgb(var(--contrast-100)) inset;\n    }\n}\n\n:host([readonly]) {\n    .picker-trigger {\n        &:hover,\n        &:active {\n            cursor: default;\n            box-shadow: var(--button-shadow-normal);\n            transform: none;\n        }\n    }\n}\n\n.chosen-color-input[readonly] {\n    transform: translateY(1rem);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker","filePath":"./src/components/color-picker/color-picker-palette.tsx","fileName":"color-picker-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/usage","tag":"limel-color-picker-palette","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-color-picker"],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-color-picker-palette":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"],"limel-color-picker":["limel-color-picker-palette"]},"props":[{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Helper text of the input field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label of the input field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` if a value is required","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":true,"docs":"Color value that is manually typed by the user","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Emits chosen value to the parent component","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"color-picker-palette.tsx","type":"tsx","source":"import { Component, h, Prop, Event, EventEmitter } from '@stencil/core';\nimport { FormComponent } from '../form/form.types';\nimport { brightnesses, colors, getColorName, getCssColor } from './swatches';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-color-picker-palette',\n    shadow: true,\n    styleUrl: 'color-picker-palette.scss',\n})\nexport class Palette implements FormComponent {\n    /**\n     * Color value that is manually typed by the user\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * Label of the input field\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Helper text of the input field\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Set to `true` if a value is required\n     */\n    @Prop({ reflect: true })\n    public required: boolean;\n\n    /**\n     * Emits chosen value to the parent component\n     */\n    @Event()\n    public change: EventEmitter<string>;\n\n    public render() {\n        const background = this.value ? { '--background': this.value } : {};\n\n        return [\n            <div class=\"color-picker-palette\">{this.renderSwatches()}</div>,\n            <div class=\"chosen-color-name\">\n                <limel-input-field\n                    label={this.label}\n                    helperText={this.helperText}\n                    value={this.value}\n                    onChange={this.handleChange}\n                    required={this.required}\n                />\n                <div class=\"chosen-color-preview\" style={background} />\n            </div>,\n        ];\n    }\n\n    private renderSwatches = () => {\n        return colors.map((color) => {\n            return brightnesses.map(this.renderSwatch(color));\n        });\n    };\n\n    private renderSwatch = (color: string) => (brightness: string) => {\n        const colorName = getColorName(color, brightness);\n        const classList = {\n            swatch: true,\n            [colorName]: true,\n            'swatch--selected': this.value === getCssColor(color, brightness),\n        };\n\n        return (\n            <div\n                class={classList}\n                onClick={this.handleClick(color, brightness)}\n                tabindex=\"0\"\n            ></div>\n        );\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.change.emit(event.detail);\n    };\n\n    private handleClick =\n        (color: string, brightness: string) => (event: MouseEvent) => {\n            const value = getCssColor(color, brightness);\n            event.stopPropagation();\n            this.change.emit(value);\n        };\n}\n"},{"filename":"color-picker-palette.scss","type":"scss","source":"@use '../../design-guidelines/color-system/examples/extended-color-palette';\n@import './color-picker';\n\n:host {\n    border-radius: 0.75rem; // is like popover's default `--popover-border-radius`\n    background-color: rgb(var(--kompendium-contrast-300));\n}\n\n.color-picker-palette {\n    display: grid;\n    gap: 0.25rem;\n    grid-auto-flow: column;\n    grid-template-columns: repeat(20, 1fr);\n    grid-template-rows: repeat(4, 1fr) auto;\n    margin: 1rem;\n}\n\n.chosen-color-name {\n    box-sizing: border-box;\n    padding: 1rem;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 0.5rem;\n}\n\n.chosen-color-preview {\n    border: 1px solid rgba(var(--contrast-700), 0.65); // color is the same as\n    // colors in shared_input-select-picker.scss\n    border-radius: 50%;\n}\n\n.swatch:not(.hue) {\n    // We could use the `@include mixins.is-flat-clickable();` mixin\n    // But its `background-color` arguments would interfere with the\n    // styles here. So we just copy/pasted the useful parts of the mixin here\n    transition: color 0.2s ease, background-color 0.2s ease,\n        box-shadow 0.2s ease, transform 0.1s ease-out;\n\n    &:hover {\n        box-shadow: var(--button-shadow-hovered);\n    }\n\n    &:active {\n        box-shadow: var(--button-shadow-pressed);\n\n        transform: translate3d(0, 0.08rem, 0);\n    }\n    cursor: pointer;\n\n    &:focus-visible {\n        box-shadow: var(--shadow-depth-8-focused),\n            0 0 0 0.25rem rgb(var(--contrast-100)) inset;\n    }\n}\n\n.swatch--selected {\n    border-radius: 50%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/config","filePath":"./src/components/config/config.tsx","fileName":"config.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/config/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/config/usage","tag":"limel-config","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[{"name":"config","type":"object","mutable":false,"reflectToAttr":false,"docs":"Global configuration for Lime Elements","docsTags":[],"values":[{"type":"object"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"config.tsx","type":"tsx","source":"import { Component, Prop } from '@stencil/core';\nimport globalConfig from '../../global/config';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-config',\n    shadow: true,\n})\nexport class Config {\n    /**\n     * Global configuration for Lime Elements\n     */\n    @Prop()\n    public config: object;\n\n    public componentDidLoad() {\n        this.setGlobalConfig();\n    }\n\n    public componentDidUpdate() {\n        this.setGlobalConfig();\n    }\n\n    /*\n     * Copy any config settings to the global config object\n     */\n    private setGlobalConfig() {\n        if (!this.config) {\n            return;\n        }\n\n        Object.keys(this.config).forEach((key) => {\n            globalConfig[key] = this.config[key];\n        });\n    }\n\n    public render() {\n        return null;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker","filePath":"./src/components/date-picker/date-picker.tsx","fileName":"date-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/usage","tag":"limel-date-picker","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-date-picker-datetime"},{"name":"exampleComponent","text":"limel-example-date-picker-date"},{"name":"exampleComponent","text":"limel-example-date-picker-time"},{"name":"exampleComponent","text":"limel-example-date-picker-week"},{"name":"exampleComponent","text":"limel-example-date-picker-month"},{"name":"exampleComponent","text":"limel-example-date-picker-quarter"},{"name":"exampleComponent","text":"limel-example-date-picker-year"},{"name":"exampleComponent","text":"limel-example-date-picker-formatted"},{"name":"exampleComponent","text":"limel-example-date-picker-programmatic-change"},{"name":"exampleComponent","text":"limel-example-date-picker-composite"},{"name":"exampleComponent","text":"limel-example-date-picker-custom-formatter"}],"encapsulation":"shadow","dependents":["limel-example-date-picker-composite","limel-example-date-picker-custom-formatter","limel-example-date-picker-date","limel-example-date-picker-datetime","limel-example-date-picker-formatted","limel-example-date-picker-month","limel-example-date-picker-programmatic-change","limel-example-date-picker-quarter","limel-example-date-picker-time","limel-example-date-picker-week","limel-example-date-picker-year"],"dependencies":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"dependencyGraph":{"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"],"limel-example-date-picker-composite":["limel-date-picker"],"limel-example-date-picker-custom-formatter":["limel-date-picker"],"limel-example-date-picker-date":["limel-date-picker"],"limel-example-date-picker-datetime":["limel-date-picker"],"limel-example-date-picker-formatted":["limel-date-picker"],"limel-example-date-picker-month":["limel-date-picker"],"limel-example-date-picker-programmatic-change":["limel-date-picker"],"limel-example-date-picker-quarter":["limel-date-picker"],"limel-example-date-picker-time":["limel-date-picker"],"limel-example-date-picker-week":["limel-date-picker"],"limel-example-date-picker-year":["limel-date-picker"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"format","type":"string","mutable":false,"attr":"format","reflectToAttr":true,"docs":"Format to display the selected date in.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"formatter","type":"(date: Date) => string","mutable":false,"reflectToAttr":false,"docs":"Custom formatting function. Will be used for date formatting.\n\n:::note\noverrides `format` and `language`\n:::","docsTags":[],"values":[{"type":"(date: Date) => string"}],"optional":true,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the input field when it has focus","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the date picker is\ninvalid.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Text to display next to the date picker","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"placeholder","type":"string","mutable":false,"attr":"placeholder","reflectToAttr":true,"docs":"The placeholder text shown inside the input field, when the field is focused and empty","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` to indicate that the field is required.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"type","type":"\"date\" | \"datetime\" | \"month\" | \"quarter\" | \"time\" | \"week\" | \"year\"","mutable":false,"attr":"type","reflectToAttr":true,"docs":"Type of date picker.","docsTags":[],"default":"'datetime'","values":[{"value":"date","type":"string"},{"value":"datetime","type":"string"},{"value":"month","type":"string"},{"value":"quarter","type":"string"},{"value":"time","type":"string"},{"value":"week","type":"string"},{"value":"year","type":"string"}],"optional":false,"required":false},{"name":"value","type":"Date","mutable":false,"reflectToAttr":false,"docs":"The value of the field.","docsTags":[],"values":[{"type":"Date"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"Date","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the date picker value is changed.","docsTags":[]}],"styles":[{"name":"--dropdown-z-index","annotation":"prop","docs":"z-index of the dropdown menu."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    State,\n    Element,\n    EventEmitter,\n    Event,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { isAndroidDevice, isIOSDevice } from '../../util/device';\nimport { DateType, InputType, Languages } from '@limetech/lime-elements';\nimport { DateFormatter } from './dateFormatter';\nimport { MDCTextField } from '@material/textfield';\n\n// tslint:disable:no-duplicate-string\nconst nativeTypeForConsumerType: { [key: string]: InputType } = {\n    date: 'date',\n    time: 'time',\n    // Mobile Safari feature detects as capable of input type `week`,\n    // but it just displays a non-interactive input\n    // TODO(ads): remove this when support is decent on iOS!\n    week: isIOSDevice() ? 'date' : 'week',\n    month: 'month',\n    quarter: 'date',\n    year: 'date',\n    datetime: 'datetime-local',\n    default: 'datetime-local',\n};\nconst nativeFormatForType = {\n    date: 'Y-MM-DD',\n    time: 'HH:mm',\n    week: 'GGGG-[W]WW',\n    month: 'Y-MM',\n    'datetime-local': 'Y-MM-DD[T]HH:mm',\n};\n// tslint:enable:no-duplicate-string\n\n/**\n * @exampleComponent limel-example-date-picker-datetime\n * @exampleComponent limel-example-date-picker-date\n * @exampleComponent limel-example-date-picker-time\n * @exampleComponent limel-example-date-picker-week\n * @exampleComponent limel-example-date-picker-month\n * @exampleComponent limel-example-date-picker-quarter\n * @exampleComponent limel-example-date-picker-year\n * @exampleComponent limel-example-date-picker-formatted\n * @exampleComponent limel-example-date-picker-programmatic-change\n * @exampleComponent limel-example-date-picker-composite\n * @exampleComponent limel-example-date-picker-custom-formatter\n */\n@Component({\n    tag: 'limel-date-picker',\n    shadow: true,\n    styleUrl: 'date-picker.scss',\n})\nexport class DatePicker {\n    /**\n     * Set to `true` to disable the field.\n     * Use `disabled` to indicate that the field can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to make the field read-only.\n     * Use `readonly` when the field is only there to present the data it holds,\n     * and will not become possible for the current user to edit.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the date picker is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Text to display next to the date picker\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The placeholder text shown inside the input field, when the field is focused and empty\n     */\n    @Prop({ reflect: true })\n    public placeholder: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * The value of the field.\n     */\n    @Prop()\n    public value: Date;\n\n    /**\n     * Type of date picker.\n     */\n    @Prop({ reflect: true })\n    public type: DateType = 'datetime';\n\n    /**\n     * Format to display the selected date in.\n     */\n    @Prop({ reflect: true })\n    public format: string;\n\n    /**\n     * Defines the localisation for translations and date formatting.\n     * Property `format` customizes the localized date format.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Custom formatting function. Will be used for date formatting.\n     *\n     * :::note\n     * overrides `format` and `language`\n     * :::\n     */\n    @Prop()\n    public formatter?: (date: Date) => string;\n\n    /**\n     * Emitted when the date picker value is changed.\n     */\n    @Event()\n    private change: EventEmitter<Date>;\n\n    @Element()\n    private host: HTMLLimelDatePickerElement;\n\n    @State()\n    private formattedValue: string;\n\n    @State()\n    private internalFormat: string;\n    @State()\n    private showPortal = false;\n\n    private useNative: boolean;\n    private nativeType: InputType;\n    private nativeFormat: string;\n    private textField: HTMLElement;\n    private datePickerCalendar: HTMLLimelFlatpickrAdapterElement;\n    private portalId = `date-picker-calendar-${createRandomString()}`;\n    private dateFormatter: DateFormatter;\n\n    constructor() {\n        this.handleCalendarChange = this.handleCalendarChange.bind(this);\n        this.handleInputElementChange =\n            this.handleInputElementChange.bind(this);\n        this.showCalendar = this.showCalendar.bind(this);\n        this.dateFormatter = new DateFormatter(this.language);\n        this.clearValue = this.clearValue.bind(this);\n        this.hideCalendar = this.hideCalendar.bind(this);\n        this.onInputClick = this.onInputClick.bind(this);\n        this.nativeChangeHandler = this.nativeChangeHandler.bind(this);\n        this.preventBlurFromCalendarContainer =\n            this.preventBlurFromCalendarContainer.bind(this);\n    }\n\n    public componentWillLoad() {\n        this.useNative = !this.readonly && (isIOSDevice() || isAndroidDevice());\n\n        this.updateInternalFormatAndType();\n\n        this.formattedValue = this.formatValue(this.value);\n    }\n\n    public componentWillUpdate() {\n        this.updateInternalFormatAndType();\n    }\n\n    public render() {\n        const inputProps: any = {\n            onAction: this.clearValue,\n        };\n\n        if (this.value && !this.readonly) {\n            inputProps.trailingIcon = 'clear_symbol';\n        }\n\n        if (this.useNative) {\n            return (\n                <limel-input-field\n                    disabled={this.disabled}\n                    readonly={this.readonly}\n                    invalid={this.invalid}\n                    label={this.label}\n                    helperText={this.helperText}\n                    required={this.required}\n                    value={this.formattedValue}\n                    type={this.nativeType}\n                    onChange={this.nativeChangeHandler}\n                />\n            );\n        }\n\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index'\n        );\n\n        return [\n            <limel-input-field\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                label={this.label}\n                placeholder={this.placeholder}\n                helperText={this.helperText}\n                required={this.required}\n                value={this.formattedValue}\n                onFocus={this.showCalendar}\n                onBlur={this.hideCalendar}\n                onClick={this.onInputClick}\n                onChange={this.handleInputElementChange}\n                ref={(el) => (this.textField = el)}\n                {...inputProps}\n            />,\n            <limel-portal\n                containerId={this.portalId}\n                visible={this.showPortal}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-flatpickr-adapter\n                    format={this.internalFormat}\n                    language={this.language}\n                    type={this.type}\n                    value={this.value}\n                    ref={(el) => (this.datePickerCalendar = el)}\n                    isOpen={this.showPortal}\n                    formatter={this.formatValue}\n                    onChange={this.handleCalendarChange}\n                />\n            </limel-portal>,\n        ];\n    }\n\n    @Watch('value')\n    protected onValueChange(newValue: string, oldValue: string) {\n        if (newValue !== oldValue && newValue !== this.formattedValue) {\n            this.formattedValue = this.formatValue(this.value);\n        }\n    }\n\n    private updateInternalFormatAndType() {\n        this.nativeType = nativeTypeForConsumerType[this.type || 'default'];\n        this.nativeFormat = nativeFormatForType[this.nativeType];\n\n        if (this.useNative) {\n            this.internalFormat = this.nativeFormat;\n        } else if (this.formatter) {\n            this.formatValue = this.formatter;\n        } else if (this.format) {\n            this.internalFormat = this.format;\n        } else {\n            this.internalFormat = this.dateFormatter.getDateFormat(this.type);\n        }\n    }\n\n    private nativeChangeHandler(event: CustomEvent<string>) {\n        event.stopPropagation();\n        const date = this.dateFormatter.parseDate(\n            event.detail,\n            this.internalFormat\n        );\n        this.formattedValue = event.detail;\n        this.change.emit(date);\n    }\n\n    private showCalendar(event) {\n        this.showPortal = true;\n        const inputElement = this.textField.shadowRoot.querySelector('input');\n        setTimeout(() => {\n            this.datePickerCalendar.inputElement = inputElement;\n        });\n        event.stopPropagation();\n\n        document.addEventListener('mousedown', this.documentClickListener, {\n            passive: true,\n        });\n        document.addEventListener('keydown', this.documentClickListener, {\n            passive: true,\n        });\n\n        document.addEventListener(\n            'blur',\n            this.preventBlurFromCalendarContainer,\n            {\n                capture: true,\n            }\n        );\n    }\n\n    private preventBlurFromCalendarContainer(event) {\n        // We don't want the input element to lose focus when we pick\n        // a date in the calendar container.\n        // This is also required in order to not close the non\n        // automatically closing pickers (type datetime and time)\n        // when you pick a value.\n        if (event.relatedTarget === this.datePickerCalendar) {\n            event.stopPropagation();\n        }\n    }\n\n    private hideCalendar() {\n        setTimeout(() => {\n            this.showPortal = false;\n        });\n        document.removeEventListener('mousedown', this.documentClickListener);\n        document.removeEventListener('keydown', this.documentClickListener);\n        document.removeEventListener(\n            'blur',\n            this.preventBlurFromCalendarContainer\n        );\n\n        if (!this.pickerIsAutoClosing()) {\n            this.fixFlatpickrFocusBug();\n        }\n    }\n\n    private fixFlatpickrFocusBug() {\n        // Flatpickr removes the focus from the input field\n        // but the 'visual focus' is still there\n        const mdcTextField = new MDCTextField(\n            this.textField.shadowRoot.querySelector('.mdc-text-field')\n        );\n        mdcTextField.getDefaultFoundation().deactivateFocus();\n    }\n\n    private documentClickListener = (event: MouseEvent | KeyboardEvent) => {\n        if (\n            event.type === 'keydown' &&\n            (event as KeyboardEvent).key !== 'Tab'\n        ) {\n            return;\n        }\n\n        const element = document.querySelector(`#${this.portalId}`);\n        if (!element.contains(event.target as Node)) {\n            this.hideCalendar();\n        }\n    };\n\n    private handleCalendarChange(event) {\n        const date = event.detail;\n        this.formattedValue = this.formatValue(date);\n        event.stopPropagation();\n        if (this.pickerIsAutoClosing()) {\n            this.hideCalendar();\n        }\n\n        this.change.emit(date);\n    }\n\n    private onInputClick(event) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        if (this.showPortal) {\n            return;\n        }\n\n        this.showCalendar(event);\n    }\n\n    private handleInputElementChange(event) {\n        if (event.detail === '') {\n            this.clearValue();\n        }\n\n        event.stopPropagation();\n    }\n\n    private pickerIsAutoClosing() {\n        return this.type !== 'datetime' && this.type !== 'time';\n    }\n\n    private clearValue() {\n        this.formattedValue = '';\n        this.change.emit(null);\n    }\n\n    private formatValue = (value: Date): string =>\n        this.dateFormatter.formatDate(value, this.internalFormat);\n}\n"},{"filename":"date-picker.scss","type":"scss","source":"// Note! The `--dropdown-z-index` property is used from `date-picker.tsx`.\n/**\n * @prop --dropdown-z-index: z-index of the dropdown menu.\n */\n\n:host(limel-date-picker) {\n    position: relative;\n}\n\nlimel-input-field[disabled],\nlimel-input-field[readonly] {\n    pointer-events: none;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog","filePath":"./src/components/dialog/dialog.tsx","fileName":"dialog.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/usage","tag":"limel-dialog","overview":":::note\nRegarding the `close` event: When putting other elements that emit `close`\nevents inside a dialog, those events must be caught and stopped inside the\ndialog. If not, they will bubble to the event handler listening for `close`\nevents on the dialog, which will close the dialog too.\n\nSee the example _Nested `close` events_.\n:::\n\n:::important\nAre you developing for\n[Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\nyou should use the [DialogService](https://lundalogik.github.io/lime-web-components/versions/latest/#/api/dialog-service)\nfrom Lime Web Components to open dialogs in Lime CRM.\n:::","usage":{},"docs":":::note\nRegarding the `close` event: When putting other elements that emit `close`\nevents inside a dialog, those events must be caught and stopped inside the\ndialog. If not, they will bubble to the event handler listening for `close`\nevents on the dialog, which will close the dialog too.\n\nSee the example _Nested `close` events_.\n:::\n\n:::important\nAre you developing for\n[Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\nyou should use the [DialogService](https://lundalogik.github.io/lime-web-components/versions/latest/#/api/dialog-service)\nfrom Lime Web Components to open dialogs in Lime CRM.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-dialog"},{"name":"exampleComponent","text":"limel-example-dialog-nested-close-events"},{"name":"exampleComponent","text":"limel-example-dialog-heading"},{"name":"exampleComponent","text":"limel-example-dialog-form"},{"name":"exampleComponent","text":"limel-example-dialog-size"},{"name":"exampleComponent","text":"limel-example-dialog-fullscreen"},{"name":"exampleComponent","text":"limel-example-dialog-closing-actions"},{"name":"exampleComponent","text":"limel-example-dialog-action-buttons"},{"name":"slot","text":"- Content to put inside the dialog"},{"name":"slot","text":"button - The dialog buttons"}],"encapsulation":"shadow","dependents":["limel-example-dialog","limel-example-dialog-action-buttons","limel-example-dialog-closing-actions","limel-example-dialog-form","limel-example-dialog-fullscreen","limel-example-dialog-heading","limel-example-dialog-nested-close-events","limel-example-dialog-size","limel-example-select-dialog"],"dependencies":["limel-header"],"dependencyGraph":{"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-example-dialog":["limel-dialog"],"limel-example-dialog-action-buttons":["limel-dialog"],"limel-example-dialog-closing-actions":["limel-dialog"],"limel-example-dialog-form":["limel-dialog"],"limel-example-dialog-fullscreen":["limel-dialog"],"limel-example-dialog-heading":["limel-dialog"],"limel-example-dialog-nested-close-events":["limel-dialog"],"limel-example-dialog-size":["limel-dialog"],"limel-example-select-dialog":["limel-dialog"]},"props":[{"name":"closingActions","type":"ClosingActions","mutable":false,"reflectToAttr":false,"docs":"Defines which action triggers a close-event.","docsTags":[],"default":"{\n        escapeKey: true,\n        scrimClick: true,\n    }","values":[{"type":"ClosingActions"}],"optional":false,"required":false},{"name":"fullscreen","type":"boolean","mutable":false,"attr":"fullscreen","reflectToAttr":true,"docs":"Set to `true` to make the dialog \"fullscreen\".","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"heading","type":"DialogHeading | string","mutable":false,"attr":"heading","reflectToAttr":false,"docs":"The heading for the dialog, if any.","docsTags":[],"values":[{"type":"DialogHeading"},{"type":"string"}],"optional":false,"required":false},{"name":"open","type":"boolean","mutable":true,"attr":"open","reflectToAttr":true,"docs":"`true` if the dialog is open, `false` otherwise.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"close","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the dialog is closed from inside the component.\n(*Not* emitted when the consumer sets the `open`-property to `false`.)","docsTags":[]},{"event":"closing","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the dialog is in the process of being closed.","docsTags":[]}],"styles":[{"name":"--dialog-border-radius","annotation":"prop","docs":"Border radius of the dialog corners"},{"name":"--dialog-heading-icon-background-color","annotation":"prop","docs":"Background color of the icon when displayed as a badge."},{"name":"--dialog-heading-icon-color","annotation":"prop","docs":"Color of the icon."},{"name":"--dialog-heading-subtitle-color","annotation":"prop","docs":"Color of the subtitle."},{"name":"--dialog-heading-supporting-text-color","annotation":"prop","docs":"Color of the supporting text."},{"name":"--dialog-heading-title-color","annotation":"prop","docs":"Color of the title."},{"name":"--dialog-height","annotation":"prop","docs":"Height of the dialog."},{"name":"--dialog-max-height","annotation":"prop","docs":"Max height of the dialog."},{"name":"--dialog-max-width","annotation":"prop","docs":"Max width of the dialog."},{"name":"--dialog-padding-left-right","annotation":"prop","docs":"Padding on the sides of dialog content. Defaults to `1.25rem`."},{"name":"--dialog-padding-top-bottom","annotation":"prop","docs":"Padding on top and bottom of dialog content. Defaults to `1.5rem`."},{"name":"--dialog-width","annotation":"prop","docs":"Width of the dialog."},{"name":"--dialog-z-index","annotation":"prop","docs":"z-index of the dialog container, including the scrim."}],"slots":[{"name":"","docs":"Content to put inside the dialog"},{"name":"button","docs":"The dialog buttons"}],"parts":[],"listeners":[],"sources":[{"filename":"dialog.tsx","type":"tsx","source":"import { DialogHeading, ClosingActions } from '@limetech/lime-elements';\nimport { MDCDialog } from '@material/dialog';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { isEqual } from 'lodash-es';\nimport { dispatchResizeEvent } from '../../util/dispatch-resize-event';\nimport { createRandomString } from '../../util/random-string';\n\n/**\n * :::note\n * Regarding the `close` event: When putting other elements that emit `close`\n * events inside a dialog, those events must be caught and stopped inside the\n * dialog. If not, they will bubble to the event handler listening for `close`\n * events on the dialog, which will close the dialog too.\n *\n * See the example _Nested `close` events_.\n * :::\n *\n * :::important\n * Are you developing for\n * [Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\n * you should use the [DialogService](https://lundalogik.github.io/lime-web-components/versions/latest/#/api/dialog-service)\n * from Lime Web Components to open dialogs in Lime CRM.\n * :::\n *\n * @exampleComponent limel-example-dialog\n * @exampleComponent limel-example-dialog-nested-close-events\n * @exampleComponent limel-example-dialog-heading\n * @exampleComponent limel-example-dialog-form\n * @exampleComponent limel-example-dialog-size\n * @exampleComponent limel-example-dialog-fullscreen\n * @exampleComponent limel-example-dialog-closing-actions\n * @exampleComponent limel-example-dialog-action-buttons\n * @slot - Content to put inside the dialog\n * @slot button - The dialog buttons\n */\n@Component({\n    tag: 'limel-dialog',\n    shadow: true,\n    styleUrl: 'dialog.scss',\n})\nexport class Dialog {\n    /**\n     * The heading for the dialog, if any.\n     */\n    @Prop()\n    public heading: string | DialogHeading;\n\n    /**\n     * Set to `true` to make the dialog \"fullscreen\".\n     */\n    @Prop({ reflect: true })\n    public fullscreen = false;\n\n    /**\n     * `true` if the dialog is open, `false` otherwise.\n     */\n    @Prop({ mutable: true, reflect: true })\n    public open = false;\n\n    /**\n     * Defines which action triggers a close-event.\n     */\n    @Prop({ reflect: true })\n    public closingActions: ClosingActions = {\n        escapeKey: true,\n        scrimClick: true,\n    };\n    /**\n     * Emitted when the dialog is closed from inside the component.\n     * (*Not* emitted when the consumer sets the `open`-property to `false`.)\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    /**\n     * Emitted when the dialog is in the process of being closed.\n     */\n    @Event()\n    private closing: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelDialogElement;\n\n    private mdcDialog: MDCDialog;\n\n    private id: string;\n\n    private showFooter = true;\n\n    constructor() {\n        this.handleMdcOpened = this.handleMdcOpened.bind(this);\n        this.handleMdcClosed = this.handleMdcClosed.bind(this);\n        this.handleMdcClosing = this.handleMdcClosing.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentWillLoad() {\n        this.id = createRandomString();\n        this.showFooter = !!this.host.querySelector('[slot=\"button\"]');\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const element = this.host.shadowRoot.querySelector('.mdc-dialog');\n        if (!element) {\n            return;\n        }\n\n        this.mdcDialog = new MDCDialog(element);\n        if (this.open) {\n            this.mdcDialog.open();\n        }\n\n        this.mdcDialog.listen('MDCDialog:opened', this.handleMdcOpened);\n        this.mdcDialog.listen('MDCDialog:closed', this.handleMdcClosed);\n        this.mdcDialog.listen('MDCDialog:closing', this.handleMdcClosing);\n\n        this.setClosingActions();\n    }\n\n    public disconnectedCallback() {\n        this.mdcDialog.unlisten('MDCDialog:opened', this.handleMdcOpened);\n        this.mdcDialog.unlisten('MDCDialog:closed', this.handleMdcClosed);\n        this.mdcDialog.unlisten('MDCDialog:closing', this.handleMdcClosing);\n        this.mdcDialog.destroy();\n    }\n\n    public render() {\n        return (\n            <div\n                class={{\n                    'mdc-dialog': true,\n                    'full-screen': !!this.fullscreen,\n                }}\n                role=\"alertdialog\"\n                aria-modal=\"true\"\n                aria-labelledby={'limel-dialog-title-' + this.id}\n                aria-describedby={'limel-dialog-content-' + this.id}\n            >\n                <input hidden={true} id=\"initialFocusEl\" />\n                <div class=\"mdc-dialog__container\">\n                    <div class=\"mdc-dialog__surface\">\n                        {/*\n                            The `initialFocusElement` below is needed to make\n                            focus trapping work. At the time of writing, the\n                            focusable elements inside the slots are not\n                            detected, so we supply our own hidden element for\n                            the focus trap to use. Read more here:\n                            https://github.com/material-components/material-components-web/tree/v11.0.0/packages/mdc-dialog#handling-focus-trapping\n                        */}\n                        <input type=\"text\" id=\"initialFocusElement\" />\n                        {this.renderHeading()}\n                        <div\n                            class=\"mdc-dialog__content scrollbox\"\n                            id={'limel-dialog-content-' + this.id}\n                        >\n                            <slot />\n                        </div>\n                        {this.renderFooter()}\n                    </div>\n                </div>\n                <div class=\"mdc-dialog__scrim\" />\n            </div>\n        );\n    }\n\n    @Watch('open')\n    protected watchHandler(newValue: boolean, oldValue: boolean) {\n        if (oldValue === newValue) {\n            return;\n        }\n\n        if (!this.mdcDialog) {\n            return;\n        }\n\n        if (newValue) {\n            this.mdcDialog.open();\n        } else {\n            this.mdcDialog.close();\n        }\n    }\n\n    @Watch('closingActions')\n    protected closingActionsChanged(\n        newValue: ClosingActions,\n        oldValue: ClosingActions\n    ) {\n        if (isEqual(newValue, oldValue)) {\n            return;\n        }\n\n        this.setClosingActions();\n    }\n\n    private handleMdcOpened() {\n        // When the opening-animation has completed, dispatch a\n        // resize-event so that any content that depends on\n        // javascript for layout has a chance to update to the\n        // final layout of the dialog. /Ads\n        const waitForUiToRender = 100;\n        setTimeout(dispatchResizeEvent, waitForUiToRender);\n    }\n\n    private handleMdcClosed() {\n        if (this.open) {\n            this.close.emit();\n        }\n\n        this.open = false;\n    }\n\n    private handleMdcClosing() {\n        this.closing.emit();\n    }\n\n    private isBadgeHeading(\n        heading: string | DialogHeading\n    ): heading is DialogHeading {\n        return typeof heading === 'object' && !!heading.title && !!heading.icon;\n    }\n\n    private renderHeading() {\n        if (this.isBadgeHeading(this.heading)) {\n            const { title, subtitle, supportingText, icon } = this.heading;\n\n            return (\n                <limel-header\n                    icon={icon}\n                    heading={title}\n                    subheading={subtitle}\n                    supportingText={supportingText}\n                ></limel-header>\n            );\n        } else if (typeof this.heading === 'string') {\n            return <limel-header heading={this.heading}></limel-header>;\n        }\n\n        return null;\n    }\n\n    private renderFooter() {\n        if (this.showFooter) {\n            return (\n                <footer class=\"mdc-dialog__actions\">\n                    <slot name=\"button\" />\n                </footer>\n            );\n        }\n    }\n\n    private setClosingActions() {\n        this.mdcDialog.scrimClickAction = '';\n        if (this.closingActions.scrimClick) {\n            this.mdcDialog.scrimClickAction = 'close';\n        }\n\n        this.mdcDialog.escapeKeyAction = '';\n        if (this.closingActions.escapeKey) {\n            this.mdcDialog.escapeKeyAction = 'close';\n        }\n    }\n}\n"},{"filename":"dialog.scss","type":"scss","source":"@use '../../style/functions';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/dialog';\n\n/**\n * @prop --dialog-width: Width of the dialog.\n * @prop --dialog-height: Height of the dialog.\n * @prop --dialog-z-index: z-index of the dialog container, including the scrim.\n * @prop --dialog-heading-title-color: Color of the title.\n * @prop --dialog-heading-subtitle-color: Color of the subtitle.\n * @prop --dialog-heading-supporting-text-color: Color of the supporting text.\n * @prop --dialog-heading-icon-color: Color of the icon.\n * @prop --dialog-heading-icon-background-color: Background color of the icon when displayed as a badge.\n * @prop --dialog-max-width: Max width of the dialog.\n * @prop --dialog-max-height: Max height of the dialog.\n * @prop --dialog-border-radius: Border radius of the dialog corners\n * @prop --dialog-padding-top-bottom: Padding on top and bottom of dialog content. Defaults to `1.5rem`.\n * @prop --dialog-padding-left-right: Padding on the sides of dialog content. Defaults to `1.25rem`.\n */\n\n:host {\n    --dialog-background-color: var(--lime-elevated-surface-background-color);\n    --header-heading-color: var(--dialog-heading-title-color);\n    --header-subheading-color: var(--dialog-heading-subtitle-color);\n    --header-supporting-text-color: var(--dialog-heading-supporting-text-color);\n    --header-icon-color: var(--dialog-heading-icon-color);\n    --header-icon-background-color: var(--dialog-heading-icon-background-color);\n}\n\n$responsive-body-padding: 3vw; // 3% of viewport's width\n\n@include dialog.core-styles;\n\n.mdc-dialog {\n    @include dialog.max-width(16000px, dialog.$margin);\n\n    z-index: var(--dialog-z-index, dialog.$z-index);\n    padding: env(safe-area-inset-top) env(safe-area-inset-right)\n        env(safe-area-inset-bottom) env(safe-area-inset-left);\n\n    &.full-screen {\n        @include dialog.max-height(16000px, dialog.$margin);\n        .mdc-dialog__container {\n            height: 100%;\n            width: 100%;\n\n            .mdc-dialog__surface {\n                height: 100%;\n                width: 100%;\n            }\n        }\n    }\n\n    .mdc-dialog__scrim {\n        background-color: rgba(var(--color-black), 0.4);\n    }\n\n    .mdc-dialog__container {\n        height: 100%;\n        width: var(--dialog-width, auto);\n    }\n\n    .mdc-dialog__surface {\n        width: var(--dialog-width, auto);\n        height: var(--dialog-height, auto);\n        background-color: var(--dialog-background-color);\n        box-shadow: var(--shadow-depth-64);\n\n        max-width: var(--dialog-max-width, calc(100vw - 2rem));\n        max-height: var(--dialog-max-height, calc(100% - 2rem));\n        border-radius: var(--dialog-border-radius, 0.25rem);\n    }\n\n    .mdc-dialog__content {\n        color: var(--mdc-theme-on-surface);\n        padding: var(\n                --dialog-padding-top-bottom,\n                min(1.5rem, $responsive-body-padding)\n            )\n            var(\n                --dialog-padding-left-right,\n                min(1.25rem, $responsive-body-padding)\n            );\n    }\n}\n\n.scrollbox {\n    --dialog-background-color-transparent: rgba(var(--contrast-100), 0);\n    --dialog-scroll-shadow-color: rgba(var(--color-black), 0.2);\n    --dialog-scroll-shadow-color-transparent: rgba(var(--color-black), 0);\n\n    // Credit to the ever fantastic Lea Verou!\n    // http://lea.verou.me/2012/04/background-attachment-local/\n\n    /* prettier-ignore */\n    background:\n        /* Shadow covers */\n        linear-gradient(\n            var(--dialog-background-color) 30%,\n            var(--dialog-background-color-transparent)\n        ),\n        linear-gradient(\n            var(--dialog-background-color-transparent),\n            var(--dialog-background-color) 70%\n        )\n        0 100%,\n\n        /* Shadows */\n        radial-gradient(\n            farthest-side at 50% 0,\n            var(--dialog-scroll-shadow-color),\n            var(--dialog-scroll-shadow-color-transparent)\n        ),\n        radial-gradient(\n            farthest-side at 50% 100%,\n            var(--dialog-scroll-shadow-color),\n            var(--dialog-scroll-shadow-color-transparent)\n        )\n        0 100%;\n\n    background-repeat: no-repeat;\n    background-color: var(--dialog-background-color);\n    background-size: 100% functions.pxToRem(40), 100% functions.pxToRem(40),\n        100% functions.pxToRem(14), 100% functions.pxToRem(14);\n\n    /* Opera doesn't support this in the shorthand */\n    background-attachment: local, local, scroll, scroll;\n}\n\n#initialFocusElement {\n    position: absolute;\n    opacity: 0;\n    pointer-events: none;\n    z-index: -1;\n}\n\nslot[name='header'] {\n    display: none;\n}\n\nslot[name='button'] {\n    display: flex;\n    gap: 0.5rem; // Makes sure buttons get some default distance\n    width: 100%;\n    justify-content: flex-end;\n}\n\n@media screen and (max-width: 760px) {\n    slot[name='button'] {\n        flex-direction: column-reverse;\n    }\n    .mdc-dialog__actions {\n        padding: min(1.5rem, $responsive-body-padding);\n        padding-top: 1rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock","filePath":"./src/components/dock/dock.tsx","fileName":"dock.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/usage","tag":"limel-dock","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-dock-basic"},{"name":"exampleComponent","text":"limel-example-dock-custom-component"},{"name":"exampleComponent","text":"limel-example-dock-notification"},{"name":"exampleComponent","text":"limel-example-dock-mobile"},{"name":"exampleComponent","text":"limel-example-dock-expanded"},{"name":"exampleComponent","text":"limel-example-dock-colors-css"}],"encapsulation":"shadow","dependents":["limel-example-dock-basic","limel-example-dock-colors-css","limel-example-dock-custom-component","limel-example-dock-expanded","limel-example-dock-mobile","limel-example-dock-notification"],"dependencies":["limel-dock-button","limel-icon"],"dependencyGraph":{"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-example-dock-basic":["limel-dock"],"limel-example-dock-colors-css":["limel-dock"],"limel-example-dock-custom-component":["limel-dock"],"limel-example-dock-expanded":["limel-dock"],"limel-example-dock-mobile":["limel-dock"],"limel-example-dock-notification":["limel-dock"]},"props":[{"name":"accessibleLabel","type":"string","mutable":false,"attr":"accessible-label","reflectToAttr":true,"docs":"A label used to describe the purpose of the navigation element to users\nof assistive technologies, like screen readers. Especially useful when\nthere are multiple navigation elements in the user interface.\nExample value: \"Primary navigation\"","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"allowResize","type":"boolean","mutable":false,"attr":"allow-resize","reflectToAttr":true,"docs":"Set to `false` if you do not want to allow end-users\nto exapnd or shrink the Dock. This will hide the\nexpand/shrink button, and the only things that defines\nthe layout will be the `expanded` property, and\nthe `mobileBreakPoint`.","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"dockFooterItems","type":"DockItem[]","mutable":false,"reflectToAttr":false,"docs":"Items that are placed at the bottom of the dock. (Or at the end in mobile\nlayout.)","docsTags":[],"default":"[]","values":[{"type":"DockItem[]"}],"optional":true,"required":false},{"name":"dockItems","type":"DockItem[]","mutable":false,"reflectToAttr":false,"docs":"Items that are placed in the dock.","docsTags":[],"default":"[]","values":[{"type":"DockItem[]"}],"optional":false,"required":false},{"name":"expanded","type":"boolean","mutable":false,"attr":"expanded","reflectToAttr":true,"docs":"Defines the width of the component, when it loads.\n- `true`: shows both icons and labels of the Dock items.\n- `false`: only shows icons of the doc items, and displays\ntheir labels as tooltip.\n\nNote: when `useMobileLayout` is `true`, labels will always\nbe shown as tooltips. Read more below…","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"mobileBreakPoint","type":"number","mutable":false,"attr":"mobile-break-point","reflectToAttr":true,"docs":"Defines the breakpoint in pixles, at which the component will be rendered\nin a hoizontal layout. Default breakpoint is `700` pixels, which means\nwhen the screen size is smaller than `700px`, the component will automatically\nswitch to a horizontal layout.","docsTags":[],"default":"DEFAULT_MOBILE_BREAKPOINT","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[],"events":[{"event":"close","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when the popover is closed.","docsTags":[]},{"event":"dockExpanded","detail":"boolean","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a Dock is expanded or collapsed.","docsTags":[]},{"event":"itemSelected","detail":"DockItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a dock item has been selected from the dock.","docsTags":[]},{"event":"menuOpen","detail":"DockItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a dock menu is opened.","docsTags":[]}],"styles":[{"name":"--dock-background-color","annotation":"prop","docs":"Background color of the whole component, defaults to `--contrast-100`."},{"name":"--dock-expanded-max-width","annotation":"prop","docs":"The maximum width of the Dock when it is expanded. Defaults to `max-content` which means the Dock will adjust its width to the widest dock item."},{"name":"--dock-item-background-color--selected","annotation":"prop","docs":"Background color of selected dock item, defaults to `--contrast-200`."},{"name":"--dock-item-icon-color","annotation":"prop","docs":"Color of the optional icons used in each dock item. Only affects inactive dock items, defaults to text colors for default or selected states."},{"name":"--dock-item-text-color","annotation":"prop","docs":"Text of dock items, defaults to `--contrast-1100`."},{"name":"--dock-item-text-color--selected","annotation":"prop","docs":"Text color of selected dock item, defaults to `--contrast-1300`."},{"name":"--dock-padding-bottom","annotation":"prop","docs":"Space of the bottom side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-bottom)`."},{"name":"--dock-padding-left","annotation":"prop","docs":"Space of the left side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-left)`."},{"name":"--dock-padding-right","annotation":"prop","docs":"Space of the right side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-right)`."},{"name":"--dock-padding-top","annotation":"prop","docs":"Space of top side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-top)`."},{"name":"--popover-surface-width","annotation":"prop","docs":"Defines the width of the popover that is opened for dock items with custom components. Defaults to `auto`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock.tsx","type":"tsx","source":"import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { DockItem } from './dock.types';\n\nconst DEFAULT_MOBILE_BREAKPOINT = 700;\n\n/**\n * @exampleComponent limel-example-dock-basic\n * @exampleComponent limel-example-dock-custom-component\n * @exampleComponent limel-example-dock-notification\n * @exampleComponent limel-example-dock-mobile\n * @exampleComponent limel-example-dock-expanded\n * @exampleComponent limel-example-dock-colors-css\n */\n@Component({\n    tag: 'limel-dock',\n    shadow: true,\n    styleUrl: 'dock.scss',\n})\nexport class Dock {\n    /**\n     * Items that are placed in the dock.\n     */\n    @Prop()\n    public dockItems: DockItem[] = [];\n\n    /**\n     * Items that are placed at the bottom of the dock. (Or at the end in mobile\n     * layout.)\n     */\n    @Prop()\n    public dockFooterItems?: DockItem[] = [];\n\n    /**\n     * A label used to describe the purpose of the navigation element to users\n     * of assistive technologies, like screen readers. Especially useful when\n     * there are multiple navigation elements in the user interface.\n     * Example value: \"Primary navigation\"\n     */\n    @Prop({ reflect: true })\n    public accessibleLabel?: string;\n\n    /**\n     * Defines the width of the component, when it loads.\n     * - `true`: shows both icons and labels of the Dock items.\n     * - `false`: only shows icons of the doc items, and displays\n     * their labels as tooltip.\n     *\n     * Note: when `useMobileLayout` is `true`, labels will always\n     * be shown as tooltips. Read more below…\n     */\n    @Prop({ reflect: true })\n    public expanded? = false;\n\n    /**\n     * Set to `false` if you do not want to allow end-users\n     * to exapnd or shrink the Dock. This will hide the\n     * expand/shrink button, and the only things that defines\n     * the layout will be the `expanded` property, and\n     * the `mobileBreakPoint`.\n     */\n    @Prop({ reflect: true })\n    public allowResize? = true;\n\n    /**\n     * Defines the breakpoint in pixles, at which the component will be rendered\n     * in a hoizontal layout. Default breakpoint is `700` pixels, which means\n     * when the screen size is smaller than `700px`, the component will automatically\n     * switch to a horizontal layout.\n     */\n    @Prop({ reflect: true })\n    public mobileBreakPoint?: number = DEFAULT_MOBILE_BREAKPOINT;\n\n    /**\n     * Fired when a dock item has been selected from the dock.\n     */\n    @Event()\n    public itemSelected: EventEmitter<DockItem>;\n\n    /**\n     * Fired when a dock menu is opened.\n     */\n    @Event()\n    public menuOpen: EventEmitter<DockItem>;\n\n    /**\n     * Fired when the popover is closed.\n     */\n    @Event()\n    public close: EventEmitter<void>;\n\n    /**\n     * Fired when a Dock is expanded or collapsed.\n     */\n    @Event()\n    private dockExpanded: EventEmitter<boolean>;\n\n    /**\n     * Is used to render the component horizontally, and place\n     * the Dock items in a row.\n     */\n    @State()\n    private useMobileLayout = false;\n\n    private resizeObserver: ResizeObserver;\n\n    public componentDidLoad() {\n        this.resizeObserver = new ResizeObserver(this.handleResize);\n        this.resizeObserver.observe(document.body);\n    }\n\n    disconnectedCallback() {\n        this.resizeObserver.disconnect();\n    }\n\n    public render() {\n        return (\n            <Host\n                class={{\n                    dock: true,\n                    expanded: this.expanded,\n                    'has-mobile-layout': this.useMobileLayout,\n                }}\n            >\n                <nav aria-label={this.accessibleLabel}>\n                    {this.dockItems.map(this.renderDockItem)}\n                    {this.renderSeparator()}\n                    {this.dockFooterItems.map(this.renderDockItem)}\n                </nav>\n                {this.renderExpandShrinkToggle()}\n            </Host>\n        );\n    }\n\n    private renderSeparator = () => {\n        return this.useMobileLayout ? null : <span class=\"footer-separator\" />;\n    };\n\n    private renderDockItem = (item: DockItem) => {\n        return (\n            <limel-dock-button\n                class={{\n                    'dock-item': true,\n                    selected: item.selected,\n                }}\n                item={item}\n                expanded={this.expanded && !this.useMobileLayout}\n                useMobileLayout={this.useMobileLayout}\n            />\n        );\n    };\n\n    private handleResize = () => {\n        if (window.innerWidth <= this.mobileBreakPoint) {\n            this.useMobileLayout = true;\n        } else {\n            this.useMobileLayout = false;\n        }\n    };\n\n    private renderExpandShrinkToggle() {\n        if (this.useMobileLayout || !this.allowResize) {\n            return;\n        }\n\n        return (\n            <button\n                class={{\n                    'expand-shrink': true,\n                    expanded: this.expanded,\n                }}\n                onClick={this.toggleDockWidth}\n            >\n                <limel-icon name=\"angle_right\" />\n            </button>\n        );\n    }\n\n    private toggleDockWidth = () => {\n        this.expanded = !this.expanded;\n        this.dockExpanded.emit(this.expanded);\n    };\n}\n"},{"filename":"dock.scss","type":"scss","source":"@use '../../style/mixins';\n@use '../../style/functions';\n@use '../../style/internal/variables';\n\n/**\n* @prop --dock-expanded-max-width: The maximum width of the Dock when it is expanded. Defaults to `max-content` which means the Dock will adjust its width to the widest dock item.\n* @prop --dock-background-color: Background color of the whole component, defaults to `--contrast-100`.\n* @prop --dock-item-background-color--selected: Background color of selected dock item, defaults to `--contrast-200`.\n* @prop --dock-item-text-color: Text of dock items, defaults to `--contrast-1100`.\n* @prop --dock-item-text-color--selected: Text color of selected dock item, defaults to `--contrast-1300`.\n* @prop --dock-item-icon-color: Color of the optional icons used in each dock item. Only affects inactive dock items, defaults to text colors for default or selected states.\n* @prop --dock-padding-top: Space of top side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-top)`.\n* @prop --dock-padding-right: Space of the right side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-right)`.\n* @prop --dock-padding-bottom: Space of the bottom side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-bottom)`.\n* @prop --dock-padding-left: Space of the left side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-left)`.\n* @prop --popover-surface-width: Defines the width of the popover that is opened for dock items with custom components. Defaults to `auto`.\n*/\n\n:host(limel-dock) {\n    --badge-background-color: rgb(var(--color-red-default));\n    --badge-text-color: rgb(var(--color-white));\n\n    --dock-item-height: 2.75rem;\n    --dock-padding: 0.25rem;\n    --dock-expand-shrink-button-height: 1rem;\n\n    --limel-dock-item-text-color: var(\n        --dock-item-text-color,\n        rgb(var(--contrast-1100))\n    );\n    --limel-dock-item-text-color--selected: var(\n        --dock-item-text-color--selected,\n        rgb(var(--contrast-1300))\n    );\n\n    isolation: isolate;\n    position: relative;\n\n    display: inline-flex;\n    flex-direction: column;\n\n    background-color: var(--dock-background-color, rgb(var(--contrast-100)));\n    box-shadow: var(--shadow-depth-8);\n\n    padding-top: var(--dock-padding-top);\n    padding-right: var(--dock-padding-right);\n    padding-bottom: var(--dock-padding-bottom);\n    padding-left: var(--dock-padding-left);\n}\n\n:host(limel-dock:not(.has-mobile-layout)) {\n    height: 100%;\n    width: calc((var(--dock-padding) * 2) + var(--dock-item-height));\n}\n\n:host(limel-dock.expanded) {\n    width: var(--dock-expanded-max-width, max-content);\n}\n\n.footer-separator {\n    margin-top: auto;\n    justify-self: flex-end;\n}\n\nnav {\n    box-sizing: border-box;\n    display: inline-flex;\n    flex-direction: column;\n    gap: functions.pxToRem(6);\n    flex-grow: 1;\n\n    padding: var(--dock-padding); // needed for the focus effect\n\n    overflow-y: auto;\n    scrollbar-width: none; // This hides the scrollbars appearing under in Firefox\n    -ms-overflow-style: none; // Same as above for IE 11\n    &::-webkit-scrollbar {\n        display: none; // This hides the scrollbars appearing under in Chrome\n    }\n\n    :host(limel-dock.has-mobile-layout) & {\n        justify-content: space-between;\n        flex-direction: row;\n    }\n}\n\n@import './partial-styles/shrink-expand-button';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/dock-button","filePath":"./src/components/dock/dock-button/dock-button.tsx","fileName":"dock-button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/dock-button/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/dock-button/usage","tag":"limel-dock-button","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"none","dependents":["limel-dock"],"dependencies":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"dependencyGraph":{"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-dock":["limel-dock-button"]},"props":[{"name":"expanded","type":"boolean","mutable":false,"attr":"expanded","reflectToAttr":true,"docs":"When the dock is expanded or collapsed, dock items\nshow labels and tooltips as suitable for the layout.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"item","type":"DockItem","mutable":false,"reflectToAttr":false,"docs":"Item that is placed in the dock.","docsTags":[],"values":[{"type":"DockItem"}],"optional":false,"required":true},{"name":"useMobileLayout","type":"boolean","mutable":false,"attr":"use-mobile-layout","reflectToAttr":true,"docs":"When dock is using mobile layout, dock items\nshow labels and tooltips as suitable for the layout.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false}],"methods":[],"events":[{"event":"close","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when the popover is closed.","docsTags":[]},{"event":"itemSelected","detail":"DockItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a dock item has been selected from the dock.","docsTags":[]},{"event":"menuOpen","detail":"DockItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a dock menu is opened.","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-button.tsx","type":"tsx","source":"import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { DockItem } from '../dock.types';\nimport { createRandomString } from '../../../util/random-string';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-dock-button',\n    shadow: false,\n    styleUrl: 'dock-button.scss',\n})\nexport class DockButton {\n    /**\n     * Item that is placed in the dock.\n     */\n    @Prop()\n    public item!: DockItem;\n\n    /**\n     * When the dock is expanded or collapsed, dock items\n     * show labels and tooltips as suitable for the layout.\n     */\n    @Prop({ reflect: true })\n    public expanded? = false;\n\n    /**\n     * When dock is using mobile layout, dock items\n     * show labels and tooltips as suitable for the layout.\n     */\n    @Prop({ reflect: true })\n    public useMobileLayout? = false;\n\n    /**\n     * Fired when a dock item has been selected from the dock.\n     */\n    @Event()\n    public itemSelected: EventEmitter<DockItem>;\n\n    /**\n     * Fired when a dock menu is opened.\n     */\n    @Event()\n    public menuOpen: EventEmitter<DockItem>;\n\n    /**\n     * Indicated whether the popover that renders a component is open.\n     */\n    @State()\n    private isOpen = false;\n\n    /**\n     * Fired when the popover is closed.\n     */\n    @Event()\n    public close: EventEmitter<void>;\n\n    private tooltipId: string;\n    private customComponentElement: HTMLElement;\n\n    constructor() {\n        this.tooltipId = createRandomString();\n    }\n\n    public render() {\n        if (this.item?.dockMenu?.componentName) {\n            return this.renderPopover();\n        }\n\n        return this.renderButton(this.handleClick);\n    }\n\n    @Watch('isOpen')\n    protected openWatcher() {\n        if (!this.isOpen) {\n            return;\n        }\n\n        const observer = new IntersectionObserver(\n            this.focusCustomComponentElement\n        );\n        observer.observe(this.customComponentElement);\n    }\n\n    private renderPopover() {\n        const CustomComponent = this.item?.dockMenu.componentName;\n\n        return (\n            <limel-popover\n                openDirection={this.useMobileLayout ? 'top' : 'right'}\n                open={this.isOpen || this.item.dockMenu.menuOpen}\n                onClose={this.onPopoverClose}\n            >\n                {this.renderButton(this.openPopover, 'trigger')}\n                <CustomComponent\n                    ref={this.setCustomComponentElement}\n                    {...(this.item.dockMenu.props || {})}\n                    onClose={this.onPopoverClose}\n                />\n            </limel-popover>\n        );\n    }\n\n    private renderButton(\n        handleClick: (event: MouseEvent) => void,\n        slot?: string\n    ) {\n        return (\n            <button\n                slot={slot}\n                tabindex=\"0\"\n                id={this.tooltipId}\n                type=\"button\"\n                class={{\n                    button: true,\n                    selected: this.item?.selected,\n                }}\n                onClick={handleClick}\n                aria-live=\"polite\"\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderTooltip()}\n                {this.renderNotification()}\n            </button>\n        );\n    }\n\n    private renderNotification = () => {\n        if (this.item.badge !== undefined) {\n            return <limel-badge label={this.item.badge} />;\n        }\n    };\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.isOpen = true;\n        this.menuOpen.emit(this.item);\n    };\n\n    private setCustomComponentElement = (element: HTMLElement) => {\n        this.customComponentElement = element;\n    };\n\n    private onPopoverClose = () => {\n        this.isOpen = false;\n        this.close.emit();\n    };\n\n    private handleClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.itemSelected.emit(this.item);\n    };\n\n    private renderIcon() {\n        if (!this.item.icon) {\n            return;\n        }\n\n        return <limel-icon name={this.item.icon} class=\"icon\" />;\n    }\n\n    private renderLabel() {\n        if (this.expanded) {\n            return <span class=\"text\">{this.item.label}</span>;\n        }\n    }\n\n    private renderTooltip() {\n        if (!this.expanded && this.item.label) {\n            return (\n                <limel-tooltip\n                    elementId={this.tooltipId}\n                    label={this.item.label}\n                    helperLabel={this.item.helperLabel}\n                />\n            );\n        }\n\n        if (this.expanded && this.item.helperLabel) {\n            return (\n                <limel-tooltip\n                    elementId={this.tooltipId}\n                    label={this.item.helperLabel}\n                />\n            );\n        }\n    }\n\n    private focusCustomComponentElement = () => {\n        if (this.customComponentElement?.shadowRoot?.delegatesFocus) {\n            this.customComponentElement?.focus();\n        }\n    };\n}\n"},{"filename":"dock-button.scss","type":"scss","source":"@use '../../../style/mixins';\n@use '../../../style/functions';\n@use '../../../style/internal/variables';\n\n.button {\n    all: unset;\n    isolation: isolate;\n    position: relative;\n\n    cursor: pointer;\n    @include mixins.is-flat-inset-clickable(\n        $color: var(--limel-dock-item-text-color),\n        $background-color: var(--dock-background-color)\n    );\n    @include mixins.visualize-keyboard-focus;\n\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n\n    width: 100%;\n    height: var(--dock-item-height);\n\n    border-radius: functions.pxToRem(6);\n    font-size: functions.pxToRem(14);\n    padding: 0 0.5rem;\n    min-width: var(--dock-item-height);\n\n    &:hover {\n        z-index: 1;\n    }\n\n    &.selected {\n        color: var(--limel-dock-item-text-color--selected);\n        background-color: var(\n            --dock-item-background-color--selected,\n            rgb(var(--contrast-200))\n        );\n\n        box-shadow: var(--button-shadow-inset);\n\n        &:focus-visible {\n            box-shadow: var(--button-shadow-inset),\n                var(--shadow-depth-8-focused);\n        }\n\n        .icon {\n            color: var(--limel-dock-item-text--selected);\n        }\n    }\n}\n\nlimel-popover {\n    // makes buttons that are wrapped in a popover become fullwidth\n    display: grid;\n    grid-template-columns: 100%;\n}\n\n.text {\n    @include mixins.truncate-text();\n    padding-left: 0.5rem;\n    padding-right: 0.75rem;\n}\n\n.icon {\n    flex-shrink: 0;\n    width: calc(var(--dock-item-height) - 1rem);\n    height: calc(var(--dock-item-height) - 1rem);\n    color: var(--dock-item-icon-color, var(--limel-dock-item-text-color));\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.125rem;\n    right: -0.125rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/labels-explicit.tsx","fileName":"labels-explicit.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-choosing-explicit-labels","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-button"],"dependencyGraph":{"limel-example-action-buttons-choosing-explicit-labels":["limel-header","limel-button"],"limel-header":["limel-icon"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"labels-explicit.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-choosing-explicit-labels',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsChoosingExplicitLabelsExample {\n    public render() {\n        return [\n            <div class=\"do-dont-container action-buttons-examples\">\n                <div class=\"do-not\">\n                    <limel-header\n                        icon=\"brake_warning\"\n                        heading=\"Don't\"\n                    ></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <p>Discard this draft?</p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"No\" primary={true} />\n                                <limel-button label=\"Yes\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"do\">\n                    <limel-header icon=\"ok\" heading=\"Do\"></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <p>Discard this draft?</p>\n                            <div class=\"action-bar\">\n                                <limel-button\n                                    label=\"Back to editing\"\n                                    primary={true}\n                                />\n                                <limel-button label=\"Discard\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"@import '../../_generic-example-styles/_do-dont';\n\n// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: 0.25rem;\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n    background-color: rgb(var(--contrast-600));\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 0.25rem 0.25rem;\n\n    .shows-full-dialog & {\n        border-radius: 0.25rem;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/labels.tsx","fileName":"labels.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-choosing-labels","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-button"],"dependencyGraph":{"limel-example-action-buttons-choosing-labels":["limel-header","limel-button"],"limel-header":["limel-icon"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"labels.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-choosing-labels',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsChoosingLabelsExample {\n    public render() {\n        return [\n            <div class=\"do-dont-container action-buttons-examples\">\n                <div class=\"do-not\">\n                    <limel-header\n                        icon=\"brake_warning\"\n                        heading=\"Don't\"\n                    ></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                <b>Bad</b> usage of labels\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Close\" />\n                                <limel-button label=\"Save\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"do\">\n                    <limel-header icon=\"ok\" heading=\"Do\"></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                <b>Good</b> usage of labels\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Discard\" />\n                                <limel-button label=\"Save\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"@import '../../_generic-example-styles/_do-dont';\n\n// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: 0.25rem;\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n    background-color: rgb(var(--contrast-600));\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 0.25rem 0.25rem;\n\n    .shows-full-dialog & {\n        border-radius: 0.25rem;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/colors-do-dont.tsx","fileName":"colors-do-dont.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-colors-do-dont","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-button"],"dependencyGraph":{"limel-example-action-buttons-colors-do-dont":["limel-header","limel-button"],"limel-header":["limel-icon"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"colors-do-dont.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-colors-do-dont',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsColorsDoDontsExample {\n    public render() {\n        return [\n            <div class=\"do-dont-container action-buttons-examples\">\n                <div class=\"do\">\n                    <limel-header icon=\"ok\" heading=\"Do\"></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                icon=\"delete_message\"\n                                heading=\"Delete 23 items?\"\n                                class=\"delete\"\n                            />\n                            <p>\n                                You are about to delete 23 items. This is a\n                                permanent action and <b>cannot be undone</b>!\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button\n                                    label=\"Don't delete\"\n                                    class=\"button primary--caution\"\n                                    icon=\"cancel\"\n                                    primary={true}\n                                />\n                                <limel-button\n                                    label=\"Delete\"\n                                    class=\"button primary--danger\"\n                                    icon=\"trash\"\n                                    primary={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"do\">\n                    <limel-header icon=\"ok\" heading=\"Do\"></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                icon=\"delete_message\"\n                                heading=\"Delete selected items?\"\n                                class=\"delete\"\n                            />\n                            <p>\n                                Deleted items <b>can be restored</b> from the\n                                trash later at any time!\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Don't delete\" />\n                                <limel-button\n                                    label=\"Delete\"\n                                    class=\"button primary--danger-highlighted\"\n                                    icon=\"trash\"\n                                    primary={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"@import '../../_generic-example-styles/_do-dont';\n\n// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: 0.25rem;\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n    background-color: rgb(var(--contrast-600));\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 0.25rem 0.25rem;\n\n    .shows-full-dialog & {\n        border-radius: 0.25rem;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/icon-color.tsx","fileName":"icon-color.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-icon-color","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-button"],"dependencyGraph":{"limel-example-action-buttons-icon-color":["limel-header","limel-button"],"limel-header":["limel-icon"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-color.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-icon-color',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsIconColorExample {\n    public render() {\n        return [\n            <div class=\"action-buttons-examples\">\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                icon=\"ask_question\"\n                                heading=\"Save changes?\"\n                                class=\"save\"\n                            />\n                            <p>\n                                You have unsaved changes. Do you want to save\n                                them before leaving this page?\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button\n                                    label=\"Back to editing\"\n                                    class=\"button back primary--neutral justify-left\"\n                                    icon=\"left_arrow\"\n                                />\n                                <limel-button\n                                    label=\"Discard\"\n                                    class=\"button discard primary--caution\"\n                                    icon=\"cancel\"\n                                    primary={true}\n                                />\n                                <limel-button\n                                    label=\"Save\"\n                                    class=\"button update\"\n                                    icon=\"ok\"\n                                    primary={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                icon=\"delete_message\"\n                                heading=\"Delete selected items?\"\n                                class=\"delete\"\n                            />\n                            <p>\n                                You are about to delete 23 items. This is a\n                                permanent action and cannot be undone!\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button\n                                    label=\"Back to selection\"\n                                    class=\"button primary--neutral justify-left\"\n                                    icon=\"left_arrow\"\n                                />\n                                <limel-button\n                                    label=\"Don't delete\"\n                                    class=\"button primary--caution\"\n                                    icon=\"cancel\"\n                                    primary={true}\n                                />\n                                <limel-button\n                                    label=\"Delete\"\n                                    class=\"button primary--danger\"\n                                    icon=\"trash\"\n                                    primary={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"@import '../../_generic-example-styles/_do-dont';\n\n// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: 0.25rem;\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n    background-color: rgb(var(--contrast-600));\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 0.25rem 0.25rem;\n\n    .shows-full-dialog & {\n        border-radius: 0.25rem;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/placement.tsx","fileName":"placement.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-placement","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-action-buttons-placement":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"placement.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-placement',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsPlacementExample {\n    public render() {\n        return [\n            <div class=\"action-buttons-examples\">\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                Actions are located at the bottom-right corner\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Ok\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                Positive action is on the right side, and\n                                negative on left left.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" />\n                                <limel-button label=\"Ok\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"@import '../../_generic-example-styles/_do-dont';\n\n// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: 0.25rem;\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n    background-color: rgb(var(--contrast-600));\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 0.25rem 0.25rem;\n\n    .shows-full-dialog & {\n        border-radius: 0.25rem;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/primary-secondary.tsx","fileName":"primary-secondary.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-primary-secondary","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-action-buttons-primary-secondary":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"primary-secondary.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-primary-secondary',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsPrimarySecondaryExample {\n    public render() {\n        return [\n            <div class=\"action-buttons-examples\">\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                The primary action which is the expected action\n                                is highlighted.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" />\n                                <limel-button label=\"Continue\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                The primary action which is the expected action\n                                is highlighted.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Don't save\" />\n                                <limel-button label=\"Save\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"@import '../../_generic-example-styles/_do-dont';\n\n// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: 0.25rem;\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n    background-color: rgb(var(--contrast-600));\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 0.25rem 0.25rem;\n\n    .shows-full-dialog & {\n        border-radius: 0.25rem;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/primary-secondary-reversed.tsx","fileName":"primary-secondary-reversed.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-primary-secondary-reversed","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-button"],"dependencyGraph":{"limel-example-action-buttons-primary-secondary-reversed":["limel-header","limel-button"],"limel-header":["limel-icon"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"primary-secondary-reversed.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-primary-secondary-reversed',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsPrimarySecondaryReversedExample {\n    public render() {\n        return [\n            <div class=\"do-dont-container action-buttons-examples\">\n                <div class=\"do\">\n                    <limel-header icon=\"ok\" heading=\"Do\"></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <h4>\"Johan Andersson\" already exists!</h4>\n                            <p>\n                                A person called \"Johan Andersson\" is already\n                                assigned to this task. Do you want to replace\n                                him with another \"Johan Andersson\"?\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" primary={true} />\n                                <limel-button label=\"Replace\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"do\">\n                    <limel-header icon=\"ok\" heading=\"Do\"></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <h4>Want to leave this conversation?</h4>\n                            <p>\n                                By leaving this conversation, you will no longer\n                                have access to chat history, shared files, and\n                                new updates.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" primary={true} />\n                                <limel-button label=\"Leave\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"@import '../../_generic-example-styles/_do-dont';\n\n// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: 0.25rem;\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n    background-color: rgb(var(--contrast-600));\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 0.25rem 0.25rem;\n\n    .shows-full-dialog & {\n        border-radius: 0.25rem;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/primary-secondary-reversed-colors.tsx","fileName":"primary-secondary-reversed-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-primary-secondary-reversed-colors","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-button"],"dependencyGraph":{"limel-example-action-buttons-primary-secondary-reversed-colors":["limel-header","limel-button"],"limel-header":["limel-icon"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"primary-secondary-reversed-colors.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-primary-secondary-reversed-colors',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsPrimarySecondaryReversedColorsExample {\n    public render() {\n        return [\n            <div class=\"do-dont-container action-buttons-examples\">\n                <div class=\"do\">\n                    <limel-header icon=\"ok\" heading=\"Do\"></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <h4>\"Johan Andersson\" already exists!</h4>\n                            <p>\n                                A person called \"Johan Andersson\" is already\n                                assigned to this task. Do you want to replace\n                                him with another \"Johan Andersson\"?\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" primary={true} />\n                                <limel-button\n                                    label=\"Replace\"\n                                    primary={true}\n                                    class=\"button primary--danger\"\n                                    icon=\"replace\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"do\">\n                    <limel-header icon=\"ok\" heading=\"Do\"></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <h4>Want to leave this conversation?</h4>\n                            <p>\n                                By leaving this conversation, you will no longer\n                                have access to chat history, shared files, and\n                                new updates.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" primary={true} />\n                                <limel-button\n                                    label=\"Leave\"\n                                    primary={true}\n                                    class=\"button primary--danger\"\n                                    icon=\"exit\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"@import '../../_generic-example-styles/_do-dont';\n\n// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: 0.25rem;\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n    background-color: rgb(var(--contrast-600));\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 0.25rem 0.25rem;\n\n    .shows-full-dialog & {\n        border-radius: 0.25rem;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/third-alternative.tsx","fileName":"third-alternative.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-third-alternative","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-button"],"dependencyGraph":{"limel-example-action-buttons-third-alternative":["limel-header","limel-button"],"limel-header":["limel-icon"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"third-alternative.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-third-alternative',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsThirdAlternativeExample {\n    public render() {\n        return [\n            <div class=\"action-buttons-examples\">\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                heading=\"Save changes?\"\n                                class=\"is-narrow\"\n                            />\n                            <p>\n                                You have unsaved change. Do you want to save\n                                them before leaving this page?\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button\n                                    label=\"Back to editing\"\n                                    class=\"button justify-left\"\n                                />\n                                <limel-button label=\"Discard\" slot=\"button\" />\n                                <limel-button label=\"Save\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"@import '../../_generic-example-styles/_do-dont';\n\n// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: 0.25rem;\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n    background-color: rgb(var(--contrast-600));\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 0.25rem 0.25rem;\n\n    .shows-full-dialog & {\n        border-radius: 0.25rem;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples","filePath":"./src/components/badge/examples/badge.tsx","fileName":"badge.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/usage","tag":"limel-example-badge","overview":"Badge without a `label`\nWhen no `label` is provided, the badge will only render as a circle.\nThis is a convention which is used in many applications to attract the\nuser's attention to a certain element on the user interface; typically to\nmenus or buttons that navigate the user to another pane or screen.\n\nIn such cases, the idea is to provide the users with a \"red thread\"\nand help them find something that requires their attention, but is located\non another place in the app, and not directly visible.\n\n:::tip\nMake sure that the dot is noticeable, by providing an\neye-catching background color, as shown in this example.\n:::","usage":{},"docs":"Badge without a `label`\nWhen no `label` is provided, the badge will only render as a circle.\nThis is a convention which is used in many applications to attract the\nuser's attention to a certain element on the user interface; typically to\nmenus or buttons that navigate the user to another pane or screen.\n\nIn such cases, the idea is to provide the users with a \"red thread\"\nand help them find something that requires their attention, but is located\non another place in the app, and not directly visible.\n\n:::tip\nMake sure that the dot is noticeable, by providing an\neye-catching background color, as shown in this example.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-badge"],"dependencyGraph":{"limel-example-badge":["limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"badge.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Badge without a `label`\n * When no `label` is provided, the badge will only render as a circle.\n * This is a convention which is used in many applications to attract the\n * user's attention to a certain element on the user interface; typically to\n * menus or buttons that navigate the user to another pane or screen.\n *\n * In such cases, the idea is to provide the users with a \"red thread\"\n * and help them find something that requires their attention, but is located\n * on another place in the app, and not directly visible.\n *\n * :::tip\n * Make sure that the dot is noticeable, by providing an\n * eye-catching background color, as shown in this example.\n *:::\n */\n@Component({\n    tag: 'limel-example-badge',\n    styleUrl: 'badge.scss',\n    shadow: true,\n})\nexport class BadgeExample {\n    public render() {\n        return <limel-badge />;\n    }\n}\n"},{"filename":"badge.scss","type":"scss","source":":host(limel-example-badge) {\n    --badge-background-color: rgb(var(--color-red-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples","filePath":"./src/components/badge/examples/badge-number.tsx","fileName":"badge-number.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/usage","tag":"limel-example-badge-number","overview":"Number badges\n\nNumeric labels larger than 999 will get both rounded and abbreviated.\nFor example, if the label is `1090` the badge will display `1.1K`.\nAbbreviation units used are `k` (Kilo) that stands for Thousands,\n`M` for Millions, `B` for Billions, and `T` for Trillions.\n\nWhen users hover the abbreviated badge, the complete\n`label` will be displayed in a tooltip.","usage":{},"docs":"Number badges\n\nNumeric labels larger than 999 will get both rounded and abbreviated.\nFor example, if the label is `1090` the badge will display `1.1K`.\nAbbreviation units used are `k` (Kilo) that stands for Thousands,\n`M` for Millions, `B` for Billions, and `T` for Trillions.\n\nWhen users hover the abbreviated badge, the complete\n`label` will be displayed in a tooltip.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-badge"],"dependencyGraph":{"limel-example-badge-number":["limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"badge-number.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Number badges\n *\n * Numeric labels larger than 999 will get both rounded and abbreviated.\n * For example, if the label is `1090` the badge will display `1.1K`.\n * Abbreviation units used are `k` (Kilo) that stands for Thousands,\n * `M` for Millions, `B` for Billions, and `T` for Trillions.\n *\n * When users hover the abbreviated badge, the complete\n * `label` will be displayed in a tooltip.\n */\n@Component({\n    tag: 'limel-example-badge-number',\n    styleUrl: 'badge-number.scss',\n    shadow: true,\n})\nexport class BadgeExample {\n    private label1: number = 5;\n    private label2: number = 995;\n    private label3: number = 9951;\n    private label4: number = 999990;\n\n    public render() {\n        return [\n            <limel-badge label={this.label1} />,\n            <limel-badge label={this.label2} />,\n            <limel-badge label={this.label3} />,\n            <limel-badge label={this.label4} />,\n        ];\n    }\n}\n"},{"filename":"badge-number.scss","type":"scss","source":":host(limel-example-badge-number) {\n    display: flex;\n    justify-content: space-between;\n}\n\nlimel-badge {\n    &:nth-of-type(2) {\n        --badge-background-color: rgb(var(--color-red-default));\n        --badge-text-color: rgb(var(--color-yellow-lighter));\n    }\n\n    &:nth-of-type(3) {\n        --badge-background-color: rgb(var(--color-green-default));\n        --badge-text-color: rgb(var(--color-gray-lighter));\n    }\n\n    &:nth-of-type(4) {\n        --badge-background-color: rgb(var(--color-blue-default));\n        --badge-text-color: rgb(var(--color-white));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples","filePath":"./src/components/badge/examples/badge-string.tsx","fileName":"badge-string.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/usage","tag":"limel-example-badge-string","overview":"String badges\n\nString labels get truncated if their visual length is longer than\nsix characters placed side by side (six `0`s to be exact).\n\nWhen users hover the truncated badge, the complete\n`label` will be displayed in a tooltip.","usage":{},"docs":"String badges\n\nString labels get truncated if their visual length is longer than\nsix characters placed side by side (six `0`s to be exact).\n\nWhen users hover the truncated badge, the complete\n`label` will be displayed in a tooltip.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-badge"],"dependencyGraph":{"limel-example-badge-string":["limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"badge-string.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * String badges\n *\n * String labels get truncated if their visual length is longer than\n * six characters placed side by side (six `0`s to be exact).\n *\n * When users hover the truncated badge, the complete\n * `label` will be displayed in a tooltip.\n */\n@Component({\n    tag: 'limel-example-badge-string',\n    styleUrl: 'badge-string.scss',\n    shadow: true,\n})\nexport class BadgeExample {\n    private label0: string = '·';\n    private label1: string = 'NEW';\n    private label2: string = 'pretty';\n    private label3: string = 'Element';\n\n    public render() {\n        return [\n            <limel-badge label={this.label0} />,\n            <limel-badge label={this.label1} />,\n            <limel-badge label={this.label2} />,\n            <limel-badge label={this.label3} />,\n        ];\n    }\n}\n"},{"filename":"badge-string.scss","type":"scss","source":":host(limel-example-badge-string) {\n    display: flex;\n    justify-content: space-between;\n}\n\nlimel-badge {\n    &:nth-of-type(1) {\n        --badge-background-color: rgb(var(--color-magenta-light));\n        --badge-text-color: rgb(var(--color-yellow-lighter));\n    }\n\n    &:nth-of-type(2) {\n        --badge-background-color: rgb(var(--color-amber-light));\n        --badge-text-color: rgb(var(--color-black));\n    }\n\n    &:nth-of-type(3) {\n        --badge-background-color: rgb(var(--color-violet-default));\n        --badge-text-color: rgb(var(--color-white));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/banner/examples","filePath":"./src/components/banner/examples/banner.tsx","fileName":"banner.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/banner/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/banner/examples/usage","tag":"limel-example-banner","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-banner"],"dependencyGraph":{"limel-example-banner":["limel-button","limel-banner"],"limel-button":["limel-spinner","limel-icon"],"limel-banner":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"banner.tsx","type":"tsx","source":"import { Component, Element, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-banner',\n    shadow: true,\n    styleUrl: 'banner.scss',\n})\nexport class BannerExample {\n    @Element()\n    private host: HTMLLimelExampleBannerElement;\n\n    @State()\n    private disabled = false;\n\n    private message = 'This is a non-blocking but also non-transient message';\n\n    private banner: HTMLLimelBannerElement;\n\n    public componentDidLoad() {\n        this.banner = this.host.shadowRoot.querySelector('limel-banner');\n    }\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                disabled={this.disabled}\n                label=\"Show Banner\"\n                onClick={this.openBanner}\n            />,\n            <limel-banner message={this.message} icon=\"exclamation_mark\">\n                <limel-button\n                    label=\"Some Action\"\n                    onClick={this.someCustomAction}\n                    slot=\"buttons\"\n                />\n                <limel-button\n                    label=\"Close\"\n                    onClick={this.closeBanner}\n                    slot=\"buttons\"\n                />\n            </limel-banner>,\n        ];\n    }\n\n    private openBanner = () => {\n        this.banner.open();\n        this.disabled = true;\n    };\n\n    private closeBanner = () => {\n        this.banner.close();\n        this.disabled = false;\n    };\n\n    private someCustomAction = () => {\n        alert('Triggered an action of some sort');\n        this.closeBanner();\n    };\n}\n"},{"filename":"banner.scss","type":"scss","source":"limel-banner {\n    --banner-icon-fill-color: rgb(var(--color-yellow-lighter));\n    --banner-icon-background-color: rgb(var(--color-red-default));\n    position: fixed;\n    right: 0;\n    top: 0;\n    left: 0;\n    z-index: 112;\n\n    @media (max-width: 720px) {\n        position: absolute;\n    }\n\n    limel-button:not(last-child) {\n        margin-right: 0.625rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/lime-color-palette.tsx","fileName":"lime-color-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-brand-color-palette","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox"],"dependencyGraph":{"limel-example-brand-color-palette":["limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"lime-color-palette.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-brand-color-palette',\n    shadow: true,\n    styleUrl: 'lime-color-palette.scss',\n})\nexport class PaletteExample {\n    @State()\n    private primaryColors: boolean = false;\n\n    public render() {\n        return (\n            <div class={{ 'highlight-primary-colors': this.primaryColors }}>\n                <div class=\"color-palette\">\n                    <div class=\"--lime-brand-color-deep-red swatch hue\">\n                        --lime-brand-color-deep-red\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-red-light\n                        <span class=\"which-mood\">in dark-mode</span>\n                    </div>\n\n                    <div class=\"--lime-brand-color-loving-magenta swatch hue is-primary\">\n                        --lime-brand-color-loving-magenta\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-magenta-default\n                        <span class=\"which-mood\">in dark-mode</span>\n                    </div>\n\n                    <div class=\"--lime-brand-color-simple-blue swatch hue is-primary\">\n                        --lime-brand-color-simple-blue\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-sky-light\n                        <span class=\"which-mood\">in dark-mode</span>\n                    </div>\n\n                    <div class=\"--lime-brand-color-flexible-turquoise swatch hue is-primary\">\n                        --lime-brand-color-flexible-turquoise\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-teal-light\n                        <span class=\"which-mood\">in dark-mode</span>\n                    </div>\n\n                    <div class=\"--lime-brand-color-lime-green swatch hue is-primary\">\n                        --lime-brand-color-lime-green\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-lime-light\n                        <span class=\"which-mood\">in dark-mode</span>\n                    </div>\n\n                    <div class=\"--lime-brand-color-yellow swatch hue\">\n                        --lime-brand-color-yellow\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-amber-light\n                        <span class=\"which-mood\">in dark-mode</span>\n                    </div>\n\n                    <div class=\"--lime-brand-color-orange swatch hue\">\n                        --lime-brand-color-orange\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-amber-default\n                        <span class=\"which-mood\">in dark-mode</span>\n                    </div>\n\n                    <div class=\"--lime-brand-color-sellable-orange swatch hue is-primary\">\n                        --lime-brand-color-sellable-orange\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-coral-light\n                        <span class=\"which-mood\">in dark-mode</span>\n                    </div>\n\n                    <div class=\"--lime-brand-color-light-grey swatch hue\">\n                        --lime-brand-color-light-grey\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-gray-light\n                        <span class=\"which-mood\">in dark-mode</span>\n                    </div>\n\n                    <div class=\"--lime-brand-color-grey swatch hue is-primary\">\n                        --lime-brand-color-grey\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-gray-dark\n                        <span class=\"which-mood\">in light-mode</span>\n                    </div>\n\n                    <div class=\"--lime-brand-color-dark-blue swatch hue\">\n                        --lime-brand-color-dark-blue\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>--color-glaucous\n                        <span class=\"which-mood\">in light-mode</span>\n                    </div>\n                </div>\n                <limel-checkbox\n                    label=\"Highlight primary brand colors\"\n                    onChange={this.toggleMode}\n                    checked={this.primaryColors}\n                />\n            </div>\n        );\n    }\n\n    private toggleMode = () => {\n        this.primaryColors = !this.primaryColors;\n    };\n}\n"},{"filename":"lime-color-palette.scss","type":"scss","source":"@use '../../../style/functions';\n@use './shared-styles';\n\n// NOTE The following is a special local file that applies colors on :host\n// instead of :root. This is necessary to have this example use both dark- and\n// light-mode, despite the docs overall only using light-mode. This can be\n// removed once we enable dark-mode for the docs again. /Ads\n@use './color-palette-extended';\n\n.color-palette {\n    grid-auto-flow: row;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: repeat(11, 1fr);\n    gap: functions.pxToRem(4) functions.pxToRem(12);\n}\n.swatch {\n    transition: opacity 0.2s ease;\n    max-height: functions.pxToRem(32);\n    padding: 0 functions.pxToRem(12);\n    &.hue {\n        writing-mode: initial;\n        padding-top: 0;\n    }\n    &.--lime-brand-color-deep-red {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--lime-brand-color-deep-red));\n    }\n    &.--lime-brand-color-loving-magenta {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--lime-brand-color-loving-magenta));\n    }\n    &.--lime-brand-color-dark-blue {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--lime-brand-color-dark-blue));\n    }\n    &.--lime-brand-color-simple-blue {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--lime-brand-color-simple-blue));\n    }\n    &.--lime-brand-color-flexible-turquoise {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--lime-brand-color-flexible-turquoise));\n    }\n    &.--lime-brand-color-lime-green {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--lime-brand-color-lime-green));\n    }\n    &.--lime-brand-color-yellow {\n        color: rgb(var(--color-black));\n        background-color: rgb(var(--lime-brand-color-yellow));\n    }\n    &.--lime-brand-color-orange {\n        color: rgb(var(--color-black));\n        background-color: rgb(var(--lime-brand-color-orange));\n    }\n    &.--lime-brand-color-sellable-orange {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--lime-brand-color-sellable-orange));\n    }\n    &.--lime-brand-color-light-grey {\n        color: rgb(var(--color-black));\n        background-color: rgb(var(--lime-brand-color-light-grey));\n    }\n    &.--lime-brand-color-grey {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--lime-brand-color-grey));\n    }\n}\n\n.equals {\n    padding-right: functions.pxToRem(16);\n}\n\n.which-mood {\n    opacity: 0.5;\n    padding-left: functions.pxToRem(12);\n}\n\n.highlight-primary-colors {\n    .--lime-brand-color-deep-red,\n    .--lime-brand-color-dark-blue,\n    .--lime-brand-color-yellow,\n    .--lime-brand-color-orange,\n    .--lime-brand-color-light-grey {\n        opacity: 0.28;\n        filter: blur(#{functions.pxToRem(3)});\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-basic.tsx","fileName":"button-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-basic","overview":"Basic Example\n\nJust a label and a click-handler.\nOpen the dev-tools console to see logged clicks.","usage":{},"docs":"Basic Example\n\nJust a label and a click-handler.\nOpen the dev-tools console to see logged clicks.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-basic":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-basic.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic Example\n *\n * Just a label and a click-handler.\n * Open the dev-tools console to see logged clicks.\n */\n@Component({\n    tag: 'limel-example-button-basic',\n    shadow: true,\n})\nexport class ButtonBasicExample {\n    public render() {\n        return <limel-button label=\"Click me!\" onClick={this.onClick} />;\n    }\n\n    private onClick() {\n        console.log('Button clicked.');\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-click-fail.tsx","fileName":"button-click-fail.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-click-fail","overview":"With click handler, and failed feedback\n\nThis example works just like the \"With click handler\" example, except that,\nwhen the `loading` attribute changes from `true` to `false`, the button\nautomatically indicates that the previously ongoing process just failed.","usage":{},"docs":"With click handler, and failed feedback\n\nThis example works just like the \"With click handler\" example, except that,\nwhen the `loading` attribute changes from `true` to `false`, the button\nautomatically indicates that the previously ongoing process just failed.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-click-fail":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-click-fail.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With click handler, and failed feedback\n *\n * This example works just like the \"With click handler\" example, except that,\n * when the `loading` attribute changes from `true` to `false`, the button\n * automatically indicates that the previously ongoing process just failed.\n */\n@Component({\n    tag: 'limel-example-button-click-fail',\n    shadow: true,\n})\nexport class ButtonClickFailExample {\n    @State()\n    private loading = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private loadingFailed = false;\n\n    public render() {\n        return (\n            <limel-button\n                label=\"Click me!\"\n                primary={true}\n                loading={this.loading}\n                disabled={this.disabled}\n                onClick={this.onClick}\n                loadingFailed={this.loadingFailed}\n            />\n        );\n    }\n\n    private onClick() {\n        this.disabled = true;\n        this.loading = true;\n        this.loadingFailed = false;\n\n        const TIME_LOADING = 2000;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.disabled = false;\n            this.loadingFailed = true;\n        }, TIME_LOADING);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-click-success.tsx","fileName":"button-click-success.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-click-success","overview":"With click handler\n\nThe click handler in this example simulates saving some changed values in a\nform. When the button is clicked, the `loading` attribute is set to `true`.\nAfter a short while, we pretend that the saving was successful, and set\n`loading` to `false`. We also set `disabled` to `true`, because we just\nsuccessfully saved, so until the user updates our imaginary form again, there\nis nothing to save.\n\nWhen the `loading` attribute changes from `true` to `false`, the button\nautomatically displays a checkmark icon for 2 seconds. Note that our click\nhandler isn't actually involved in this.\n\nA short while after the checkmark has disappeared, we enable the button\nagain. This is just so that you can try the functionality again. Normally,\nthe button would stay disabled until the user made some changes, so there's\nsomething new to save!","usage":{},"docs":"With click handler\n\nThe click handler in this example simulates saving some changed values in a\nform. When the button is clicked, the `loading` attribute is set to `true`.\nAfter a short while, we pretend that the saving was successful, and set\n`loading` to `false`. We also set `disabled` to `true`, because we just\nsuccessfully saved, so until the user updates our imaginary form again, there\nis nothing to save.\n\nWhen the `loading` attribute changes from `true` to `false`, the button\nautomatically displays a checkmark icon for 2 seconds. Note that our click\nhandler isn't actually involved in this.\n\nA short while after the checkmark has disappeared, we enable the button\nagain. This is just so that you can try the functionality again. Normally,\nthe button would stay disabled until the user made some changes, so there's\nsomething new to save!","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-click-success":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-click-success.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With click handler\n *\n * The click handler in this example simulates saving some changed values in a\n * form. When the button is clicked, the `loading` attribute is set to `true`.\n * After a short while, we pretend that the saving was successful, and set\n * `loading` to `false`. We also set `disabled` to `true`, because we just\n * successfully saved, so until the user updates our imaginary form again, there\n * is nothing to save.\n *\n * When the `loading` attribute changes from `true` to `false`, the button\n * automatically displays a checkmark icon for 2 seconds. Note that our click\n * handler isn't actually involved in this.\n *\n * A short while after the checkmark has disappeared, we enable the button\n * again. This is just so that you can try the functionality again. Normally,\n * the button would stay disabled until the user made some changes, so there's\n * something new to save!\n */\n@Component({\n    tag: 'limel-example-button-click-success',\n    shadow: true,\n})\nexport class ButtonClickSuccessExample {\n    @State()\n    private loading = false;\n\n    @State()\n    private disabled = false;\n\n    public render() {\n        return (\n            <limel-button\n                label=\"Click me!\"\n                primary={true}\n                loading={this.loading}\n                disabled={this.disabled}\n                onClick={this.onClick}\n            />\n        );\n    }\n\n    private onClick() {\n        this.loading = true;\n\n        const TIME_LOADING = 1000;\n        const TIME_DISABLED = 5000;\n        setTimeout(() => {\n            this.loading = false;\n            this.disabled = true;\n            setTimeout(() => {\n                this.disabled = false;\n            }, TIME_DISABLED);\n        }, TIME_LOADING);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-colors.tsx","fileName":"button-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-colors","overview":"How to color button text and background\nWhen a button is a \"primary\" button (`primary={true}`), the color value you specify\nfor `--lime-primary-color` will apply to its background. By default, text color\nof primary buttons is white. To change their text color you must send a color\nvalue with the `--lime-on-primary-color` variable.\n\nWhen a button is not a \"primary\" button, the value of `--lime-primary-color`\nwill be applied to its text, and `--lime-on-primary-color` will have no effect.\n\nKeep in mind that `disabled` buttons don't care about your specified colors at all.","usage":{},"docs":"How to color button text and background\nWhen a button is a \"primary\" button (`primary={true}`), the color value you specify\nfor `--lime-primary-color` will apply to its background. By default, text color\nof primary buttons is white. To change their text color you must send a color\nvalue with the `--lime-on-primary-color` variable.\n\nWhen a button is not a \"primary\" button, the value of `--lime-primary-color`\nwill be applied to its text, and `--lime-on-primary-color` will have no effect.\n\nKeep in mind that `disabled` buttons don't care about your specified colors at all.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-colors":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-colors.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * How to color button text and background\n * When a button is a \"primary\" button (`primary={true}`), the color value you specify\n * for `--lime-primary-color` will apply to its background. By default, text color\n * of primary buttons is white. To change their text color you must send a color\n * value with the `--lime-on-primary-color` variable.\n *\n * When a button is not a \"primary\" button, the value of `--lime-primary-color`\n * will be applied to its text, and `--lime-on-primary-color` will have no effect.\n *\n * Keep in mind that `disabled` buttons don't care about your specified colors at all.\n */\n@Component({\n    tag: 'limel-example-button-colors',\n    shadow: true,\n    styleUrl: 'button-colors.scss',\n})\nexport class ButtonColorsExample {\n    public render() {\n        return (\n            <div class=\"colorful-buttons\">\n                <span>Enabled</span>\n                <limel-button\n                    class=\"blue-primary\"\n                    label=\"Primary\"\n                    primary={true}\n                    icon=\"star\"\n                />\n                <limel-button\n                    class=\"yellow-primary orange-text\"\n                    label=\"Primary\"\n                    primary={true}\n                    icon=\"star\"\n                />\n                <limel-button\n                    class=\"blue-secondary\"\n                    label=\"Secondary\"\n                    icon=\"button\"\n                />\n                <span>Disabled</span>\n                <limel-button\n                    class=\"blue-primary\"\n                    label=\"Primary\"\n                    primary={true}\n                    disabled={true}\n                    icon=\"star\"\n                />\n                <limel-button\n                    class=\"yellow-primary orange-text\"\n                    label=\"Primary\"\n                    primary={true}\n                    disabled={true}\n                    icon=\"star\"\n                />\n                <limel-button\n                    class=\"blue-secondary\"\n                    label=\"Secondary\"\n                    disabled={true}\n                    icon=\"button\"\n                />\n            </div>\n        );\n    }\n}\n"},{"filename":"button-colors.scss","type":"scss","source":".colorful-buttons {\n    display: grid;\n    grid-template-columns: auto 1fr 1fr 1fr;\n    gap: 1.5rem 1rem;\n    margin: 0 auto;\n    align-items: center;\n}\n\n.blue-primary {\n    /* background color for primary buttons */\n    --lime-primary-color: rgb(var(--color-blue-default));\n}\n\n.yellow-primary {\n    /* background color for primary buttons */\n    --lime-primary-color: rgb(var(--color-yellow-light));\n}\n\n.orange-text {\n    /* text color for primary buttons */\n    --lime-on-primary-color: rgb(var(--color-orange-default));\n}\n\n.blue-secondary {\n    /* text color for non-primary buttons */\n    --lime-primary-color: rgb(var(--color-blue-default));\n    /* has no effect for non-primary */\n    --lime-on-primary-color: rgb(var(--color-red-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-composite.tsx","fileName":"button-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-button-composite":["limel-button","limel-example-event-printer","limel-example-controls","limel-form"],"limel-button":["limel-spinner","limel-icon"]},"props":[{"name":"schema","type":"any","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-button-composite',\n    shadow: true,\n})\nexport class ButtonCompositeExample {\n    @Prop()\n    public schema: any;\n\n    @State()\n    private props = {\n        label: 'My button',\n        primary: true,\n        outlined: false,\n        icon: 'dog',\n        disabled: false,\n        loading: false,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema = {\n            ...this.schema,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-button {...this.props} onClick={this.handleEvent} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private handleEvent = (event: Event) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleChange = (event: CustomEvent) => {\n        this.props = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-disabled.tsx","fileName":"button-disabled.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-disabled","overview":"Disabled","usage":{},"docs":"Disabled","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-disabled":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-disabled.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Disabled\n */\n@Component({\n    tag: 'limel-example-button-disabled',\n    shadow: true,\n})\nexport class ButtonDisabledExample {\n    public render() {\n        return (\n            <limel-button\n                label=\"My Button\"\n                disabled={true}\n                onClick={this.onClick}\n            />\n        );\n    }\n\n    private onClick() {\n        console.log('This should never happen, since the button is disabled.');\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples","filePath":"./src/components/button-group/examples/button-group.tsx","fileName":"button-group.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/usage","tag":"limel-example-button-group","overview":"Text only\n\nThis layout is good when you do not have access to icons which are\ndescriptive enough.","usage":{},"docs":"Text only\n\nThis layout is good when you do not have access to icons which are\ndescriptive enough.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button-group","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-button-group":["limel-button-group","limel-example-controls","limel-checkbox"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Text only\n *\n * This layout is good when you do not have access to icons which are\n * descriptive enough.\n */\n@Component({\n    tag: 'limel-example-button-group',\n    shadow: true,\n})\nexport class ButtonGroupExample {\n    @State()\n    private disabled: boolean = false;\n\n    public render() {\n        return [\n            <limel-button-group\n                disabled={this.disabled}\n                onChange={this.handleChange}\n                value={[\n                    {\n                        id: '1',\n                        title: 'First',\n                    },\n                    {\n                        id: '2',\n                        title: 'Second',\n                        selected: true,\n                    },\n                    {\n                        id: '3',\n                        title: 'Third',\n                    },\n                ]}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.toggleEnabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        console.log(event.detail);\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples","filePath":"./src/components/button-group/examples/button-group-badges.tsx","fileName":"button-group-badges.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/usage","tag":"limel-example-button-group-badges","overview":"Button group with badges\n\nBadges can be used to add further contextual information.\nFor example, if the component is used to filter a set of data\nthe badges could visualize the number of entries\nfor each filter option.\n\nThe badge can either\nhave a `number` or `string` label.\nRead more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","usage":{},"docs":"Button group with badges\n\nBadges can be used to add further contextual information.\nFor example, if the component is used to filter a set of data\nthe badges could visualize the number of entries\nfor each filter option.\n\nThe badge can either\nhave a `number` or `string` label.\nRead more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button-group"],"dependencyGraph":{"limel-example-button-group-badges":["limel-button-group"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group-badges.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Button group with badges\n *\n * Badges can be used to add further contextual information.\n * For example, if the component is used to filter a set of data\n * the badges could visualize the number of entries\n * for each filter option.\n *\n * The badge can either\n * have a `number` or `string` label.\n * Read more about how the badge truncates or abbreviates the\n * provided label [here](#/component/limel-badge/).\n */\n@Component({\n    tag: 'limel-example-button-group-badges',\n    shadow: true,\n})\nexport class ButtonGroupBadgesExample {\n    public render() {\n        return [\n            <limel-button-group\n                onChange={this.handleChange}\n                value={[\n                    {\n                        id: '1',\n                        title: 'Overdue',\n                        badge: '50+',\n                    },\n                    {\n                        id: '2',\n                        title: 'Today',\n                        badge: 9,\n                        selected: true,\n                    },\n                    {\n                        id: '3',\n                        title: 'Upcoming',\n                        badge: 23,\n                    },\n                    {\n                        id: '4',\n                        title: 'Future',\n                        badge: 62,\n                    },\n                ]}\n            />,\n        ];\n    }\n\n    private handleChange = (event) => {\n        console.log(event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples","filePath":"./src/components/button-group/examples/button-group-composite.tsx","fileName":"button-group-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/usage","tag":"limel-example-button-group-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button-group","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-button-group-composite":["limel-button-group","limel-example-event-printer","limel-example-controls","limel-form"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[{"name":"schema","type":"any","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\nimport { Button } from '../../button/button.types';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-button-group-composite',\n    shadow: true,\n})\nexport class ButtonCompositeExample {\n    @Prop()\n    public schema: any;\n\n    @State()\n    private props = {\n        disabled: false,\n        value: [\n            {\n                id: '1',\n                title: 'Clear sky',\n                icon: 'sun',\n            },\n            {\n                id: '2',\n                title: 'Partly cloudy',\n                icon: 'partly_cloudy_day',\n            },\n            {\n                id: '3',\n                title: 'Rain showers',\n                icon: 'rain',\n            },\n            {\n                id: '4',\n                title: 'Thunderstorms',\n                icon: 'cloudshot',\n            },\n            {\n                id: '5',\n                title: 'Snow showers',\n                icon: 'snowflake',\n            },\n        ] as Button[],\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public render() {\n        return [\n            <limel-button-group {...this.props} onChange={this.handleChange} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<Button>) => {\n        this.eventPrinter.writeEvent(event);\n\n        const index = this.props.value.findIndex(\n            (button) => button === event.detail\n        );\n        if (!index) {\n            return;\n        }\n\n        this.props.value[index] = event.detail;\n        this.props.value = [...this.props.value];\n        this.props = { ...this.props };\n    };\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = { ...event.detail };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples","filePath":"./src/components/button-group/examples/button-group-icons.tsx","fileName":"button-group-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/usage","tag":"limel-example-button-group-icons","overview":"Icon only\n\nIf you pick well descriptive icons, this layout will usually suffice. When\nyou specify an `icon`, it will automatically be shown instead of the `title`.\n:::important\nAdding titles for buttons is compulsory. The reason is that when\nonly icons are shown, titles will appear as `aria-label` for screen readers,\nas well as `title` attribute when users hover and hold their cursors on the\nbuttons.\n:::\nThis makes it easier for them to know what the button actually does\nor what the icon tries to indicate.\n\nSo, make sure to label your icons properly and descriptively.","usage":{},"docs":"Icon only\n\nIf you pick well descriptive icons, this layout will usually suffice. When\nyou specify an `icon`, it will automatically be shown instead of the `title`.\n:::important\nAdding titles for buttons is compulsory. The reason is that when\nonly icons are shown, titles will appear as `aria-label` for screen readers,\nas well as `title` attribute when users hover and hold their cursors on the\nbuttons.\n:::\nThis makes it easier for them to know what the button actually does\nor what the icon tries to indicate.\n\nSo, make sure to label your icons properly and descriptively.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button-group","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-button-group-icons":["limel-button-group","limel-example-controls","limel-checkbox"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group-icons.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Icon only\n *\n * If you pick well descriptive icons, this layout will usually suffice. When\n * you specify an `icon`, it will automatically be shown instead of the `title`.\n *:::important\n * Adding titles for buttons is compulsory. The reason is that when\n * only icons are shown, titles will appear as `aria-label` for screen readers,\n * as well as `title` attribute when users hover and hold their cursors on the\n * buttons.\n * :::\n * This makes it easier for them to know what the button actually does\n * or what the icon tries to indicate.\n *\n * So, make sure to label your icons properly and descriptively.\n */\n@Component({\n    tag: 'limel-example-button-group-icons',\n    shadow: true,\n})\nexport class ButtonGroupIconsExample {\n    @State()\n    private disabled: boolean = false;\n\n    public render() {\n        return [\n            <limel-button-group\n                disabled={this.disabled}\n                onChange={this.handleChange}\n                value={[\n                    {\n                        id: '1',\n                        title: 'Clear sky',\n                        icon: 'sun',\n                    },\n                    {\n                        id: '2',\n                        title: 'Partly cloudy',\n                        icon: 'partly_cloudy_day',\n                    },\n                    {\n                        id: '3',\n                        title: 'Rain showers',\n                        icon: 'rain',\n                    },\n                    {\n                        id: '4',\n                        title: 'Thunderstorms',\n                        icon: 'cloudshot',\n                    },\n                    {\n                        id: '5',\n                        title: 'Snow showers',\n                        icon: 'snowflake',\n                    },\n                ]}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.toggleEnabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        console.log(event.detail);\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples","filePath":"./src/components/button-group/examples/button-group-mix.tsx","fileName":"button-group-mix.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/usage","tag":"limel-example-button-group-mix","overview":"Mixed text and icon within the same group\n\nGenerally, you should avoid mixing text and images in button group. Although\nindividual buttons can contain text or images, mixing the two in a single\ngroup can lead to an inconsistent and confusing interface.\n\nHowever, in some case your design may benefit from having only one button in\na different format.","usage":{},"docs":"Mixed text and icon within the same group\n\nGenerally, you should avoid mixing text and images in button group. Although\nindividual buttons can contain text or images, mixing the two in a single\ngroup can lead to an inconsistent and confusing interface.\n\nHowever, in some case your design may benefit from having only one button in\na different format.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button-group","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-button-group-mix":["limel-button-group","limel-example-controls","limel-checkbox"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group-mix.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Mixed text and icon within the same group\n *\n * Generally, you should avoid mixing text and images in button group. Although\n * individual buttons can contain text or images, mixing the two in a single\n * group can lead to an inconsistent and confusing interface.\n *\n * However, in some case your design may benefit from having only one button in\n * a different format.\n */\n@Component({\n    tag: 'limel-example-button-group-mix',\n    shadow: true,\n})\nexport class ButtonGroupMixExample {\n    @State()\n    private disabled: boolean = false;\n\n    public render() {\n        return [\n            <limel-button-group\n                disabled={this.disabled}\n                onChange={this.handleChange}\n                value={[\n                    {\n                        id: '1',\n                        title: 'All',\n                    },\n                    {\n                        id: '2',\n                        title: 'Banana',\n                        icon: 'banana',\n                    },\n                    {\n                        id: '3',\n                        title: 'Apple',\n                        icon: 'apple',\n                    },\n                    {\n                        id: '4',\n                        title: 'Pear',\n                        icon: 'pear',\n                    },\n                ]}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.toggleEnabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        console.log(event.detail);\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-icon.tsx","fileName":"button-icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-icon","overview":"Icon","usage":{},"docs":"Icon","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-icon":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-icon.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Icon\n */\n@Component({\n    tag: 'limel-example-button-icon',\n    shadow: true,\n})\nexport class ButtonIconExample {\n    public render() {\n        return <limel-button icon=\"filled_message\" />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-loading.tsx","fileName":"button-loading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-loading","overview":"Loading\n\nNote that the example is also using `disabled`, because a button that is\nloading should normally also be disabled.","usage":{},"docs":"Loading\n\nNote that the example is also using `disabled`, because a button that is\nloading should normally also be disabled.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-loading":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-loading.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Loading\n *\n * Note that the example is also using `disabled`, because a button that is\n * loading should normally also be disabled.\n */\n@Component({\n    tag: 'limel-example-button-loading',\n    shadow: true,\n})\nexport class ButtonLoadingExample {\n    public render() {\n        return (\n            <limel-button label=\"My Button\" disabled={true} loading={true} />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-outlined.tsx","fileName":"button-outlined.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-outlined","overview":"Outlined\n\nBy setting `outlined={true}`, you can create a style\nof buttons which could be used to indicate an action\nwith medium emphasis.\n\n:::note\nThis style is useful to indicate the \"secondariness\" of an action.\nTherefore, only use this style, if there is another related\n`primary` button present on the same view or screen,\nalong with another normal button.\n\nAlso, give such a choice a second thought by reading\n[our guidelines for Split button](#/component/limel-split-button/).\n:::","usage":{},"docs":"Outlined\n\nBy setting `outlined={true}`, you can create a style\nof buttons which could be used to indicate an action\nwith medium emphasis.\n\n:::note\nThis style is useful to indicate the \"secondariness\" of an action.\nTherefore, only use this style, if there is another related\n`primary` button present on the same view or screen,\nalong with another normal button.\n\nAlso, give such a choice a second thought by reading\n[our guidelines for Split button](#/component/limel-split-button/).\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-outlined":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-outlined.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Outlined\n *\n * By setting `outlined={true}`, you can create a style\n * of buttons which could be used to indicate an action\n * with medium emphasis.\n *\n * :::note\n * This style is useful to indicate the \"secondariness\" of an action.\n * Therefore, only use this style, if there is another related\n * `primary` button present on the same view or screen,\n * along with another normal button.\n *\n * Also, give such a choice a second thought by reading\n * [our guidelines for Split button](#/component/limel-split-button/).\n * :::\n */\n@Component({\n    tag: 'limel-example-button-outlined',\n    shadow: true,\n})\nexport class ButtonOutlinedExample {\n    public render() {\n        return <limel-button label=\"My Button\" outlined={true} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-primary.tsx","fileName":"button-primary.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-primary","overview":"Primary\n\nEach screen (modal, or section with action buttons)\nshould contain a single prominent button like this one,\nto emphasize the primary action.\n\n:::note\nThink twice before setting `primary={true}` on buttons.\nThe arrangement of buttons and their colors should clearly\ncommunicate their importance and primariness or secondariness.\n\nSee some examples at [our design guidelines for\nAction buttons](#/DesignGuidelines/action-buttons.md/).\n:::","usage":{},"docs":"Primary\n\nEach screen (modal, or section with action buttons)\nshould contain a single prominent button like this one,\nto emphasize the primary action.\n\n:::note\nThink twice before setting `primary={true}` on buttons.\nThe arrangement of buttons and their colors should clearly\ncommunicate their importance and primariness or secondariness.\n\nSee some examples at [our design guidelines for\nAction buttons](#/DesignGuidelines/action-buttons.md/).\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-primary":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-primary.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Primary\n *\n * Each screen (modal, or section with action buttons)\n * should contain a single prominent button like this one,\n * to emphasize the primary action.\n *\n * :::note\n * Think twice before setting `primary={true}` on buttons.\n * The arrangement of buttons and their colors should clearly\n * communicate their importance and primariness or secondariness.\n *\n * See some examples at [our design guidelines for\n * Action buttons](#/DesignGuidelines/action-buttons.md/).\n * :::\n */\n@Component({\n    tag: 'limel-example-button-primary',\n    shadow: true,\n})\nexport class ButtonPrimaryExample {\n    public render() {\n        return <limel-button label=\"My Button\" primary={true} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-reduce-presence.tsx","fileName":"button-reduce-presence.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-reduce-presence","overview":"Reduce Presence\n\nThis example is identical to the \"With click handler\" example, except that\nhere, the `has-reduced-presence` class has been set to `true`. This will hide\nthe button when it is disabled. However, it will also make sure that the\nbutton remains visible while the loading animation is ongoing. When the\nanimation is done and the checkmark has been shown, the button will hide.\n\nRead more in the [Design Guidelines](#/DesignGuidelines/decluttering.md/)","usage":{},"docs":"Reduce Presence\n\nThis example is identical to the \"With click handler\" example, except that\nhere, the `has-reduced-presence` class has been set to `true`. This will hide\nthe button when it is disabled. However, it will also make sure that the\nbutton remains visible while the loading animation is ongoing. When the\nanimation is done and the checkmark has been shown, the button will hide.\n\nRead more in the [Design Guidelines](#/DesignGuidelines/decluttering.md/)","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-reduce-presence":["limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-reduce-presence.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Reduce Presence\n *\n * This example is identical to the \"With click handler\" example, except that\n * here, the `has-reduced-presence` class has been set to `true`. This will hide\n * the button when it is disabled. However, it will also make sure that the\n * button remains visible while the loading animation is ongoing. When the\n * animation is done and the checkmark has been shown, the button will hide.\n *\n * Read more in the [Design Guidelines](#/DesignGuidelines/decluttering.md/)\n */\n@Component({\n    tag: 'limel-example-button-reduce-presence',\n    shadow: true,\n})\nexport class ButtonReducePresenceExample {\n    @State()\n    private loading = false;\n\n    @State()\n    private disabled = false;\n\n    public render() {\n        return (\n            <limel-button\n                class=\"has-reduced-presence\"\n                label=\"Click me!\"\n                primary={true}\n                loading={this.loading}\n                disabled={this.disabled}\n                onClick={this.onClick}\n            />\n        );\n    }\n\n    private onClick() {\n        this.disabled = true;\n        this.loading = true;\n\n        const TIME_LOADING = 1000;\n        const TIME_DISABLED = 5000;\n        setTimeout(() => {\n            this.loading = false;\n            setTimeout(() => {\n                this.disabled = false;\n            }, TIME_DISABLED);\n        }, TIME_LOADING);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples","filePath":"./src/design-guidelines/shadows/examples/button-shadows.tsx","fileName":"button-shadows.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/usage","tag":"limel-example-button-shadows","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-shadows.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-button-shadows',\n    shadow: true,\n    styleUrl: 'shadow-examples.scss',\n})\nexport class ButtonShadowExample {\n    public render() {\n        return [\n            <div class=\"shadow-example-grid\">\n                <div class=\"visualization\">\n                    <button class=\"button normal\">\n                        <div class=\"label\">Normal</div>\n                    </button>\n                    <code>--button-shadow-normal</code>\n                    <p>makes the element look clickable</p>\n                </div>\n                <div class=\"visualization\">\n                    <button class=\"button hovered\">\n                        <div class=\"label\">Hover</div>\n                    </button>\n                    <code>--button-shadow-hovered</code>\n                    <p>\n                        makes the element look raised a bit more, ready to be\n                        pressed\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <button class=\"button pressed\">\n                        <div class=\"label\">Pressed</div>\n                    </button>\n                    <code>--button-shadow-pressed</code>\n                    <p>\n                        makes the element look pressed down towards the surface\n                        below\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <button class=\"button inset\">\n                        <div class=\"label\">Inset</div>\n                    </button>\n                    <code>--button-shadow-inset</code>\n                    <p>\n                        makes the element look pressed down below its background\n                        surface\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <button class=\"button inset-pressed\">\n                        <div class=\"label three\">Pressed Inset</div>\n                    </button>\n                    <code>--button-shadow-inset-pressed</code>\n                    <p>makes the inset element look even more pressed down</p>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"shadow-examples.scss","type":"scss","source":"@use '../../../style/functions';\n@use './button-shadows';\n@use './surface-shadows';\n@use './surface-shadows-inflated';\n\n.shadow-example-grid {\n    display: grid;\n    gap: functions.pxToRem(28);\n    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));\n    padding: functions.pxToRem(20) 0;\n}\n\n.visualization {\n    display: flex;\n    flex-direction: column;\n\n    code {\n        font-size: functions.pxToRem(12);\n        background-color: rgb(var(--kompendium-contrast-500));\n        color: rgb(var(--kompendium-contrast-1100));\n        padding: 0 functions.pxToRem(4);\n        border-radius: functions.pxToRem(3);\n        margin-top: functions.pxToRem(12);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples","filePath":"./src/components/checkbox/examples/checkbox.tsx","fileName":"checkbox.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples/usage","tag":"limel-example-checkbox","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox","limel-example-controls","limel-example-value","limel-example-event-printer"],"dependencyGraph":{"limel-example-checkbox":["limel-checkbox","limel-example-controls","limel-example-value","limel-example-event-printer"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"checkbox.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-checkbox',\n    shadow: true,\n    styleUrl: 'checkbox.scss',\n})\nexport class CheckboxExample {\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private required: boolean = false;\n\n    @State()\n    private value: boolean = false;\n\n    @State()\n    private indeterminate: boolean = false;\n\n    @State()\n    private readonly: boolean = false;\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public render() {\n        return [\n            <limel-checkbox\n                disabled={this.disabled}\n                label=\"My fab checkbox\"\n                id=\"fab\"\n                checked={this.value}\n                indeterminate={this.indeterminate}\n                required={this.required}\n                onChange={this.handleChange}\n                readonly={this.readonly}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Checked\"\n                    onChange={this.setChecked}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.indeterminate}\n                    label=\"Indeterminate\"\n                    onChange={this.setIndeterminate}\n                />\n            </limel-example-controls>,\n            <limel-example-value label=\"Checked\" value={this.value} />,\n            <limel-example-value\n                label=\"Indeterminate\"\n                value={this.indeterminate}\n            />,\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<boolean>) => {\n        this.value = event.detail;\n\n        // The only way a user can interact with the checkbox is to check it or\n        // uncheck it. The indeterminate state can only be set programmatically\n        // and will always be unset when the user interacts with the checkbox.\n        // Therefore, we must set indeterminate to `false` here.\n        this.indeterminate = false;\n\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private setIndeterminate = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.indeterminate = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"},{"filename":"checkbox.scss","type":"scss","source":":host(limel-example-checkbox) {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples","filePath":"./src/components/checkbox/examples/checkbox-helper-text.tsx","fileName":"checkbox-helper-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples/usage","tag":"limel-example-checkbox-helper-text","overview":"With `helperText`\n\nCheckboxes can have a helper text, which is useful when providing additional information\ncan clarify functionality of the checkbox for the user.\n\nThe helper text is displayed when user hovers the checkbox, or focuses on it using keyboard\nnavigation. However, on touchscreen devices, the helper text is always displayed.","usage":{},"docs":"With `helperText`\n\nCheckboxes can have a helper text, which is useful when providing additional information\ncan clarify functionality of the checkbox for the user.\n\nThe helper text is displayed when user hovers the checkbox, or focuses on it using keyboard\nnavigation. However, on touchscreen devices, the helper text is always displayed.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox"],"dependencyGraph":{"limel-example-checkbox-helper-text":["limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"checkbox-helper-text.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * With `helperText`\n *\n * Checkboxes can have a helper text, which is useful when providing additional information\n * can clarify functionality of the checkbox for the user.\n *\n * The helper text is displayed when user hovers the checkbox, or focuses on it using keyboard\n * navigation. However, on touchscreen devices, the helper text is always displayed.\n */\n\n@Component({\n    tag: 'limel-example-checkbox-helper-text',\n    shadow: true,\n})\nexport class CheckboxHelperTextExample {\n    public render() {\n        return (\n            <section>\n                <div>\n                    <limel-checkbox\n                        label=\"I accept terms of use\"\n                        helperText=\"You need to accept to be able to continue…\"\n                        id=\"terms\"\n                    />\n                </div>\n            </section>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-icon-colors.tsx","fileName":"chip-icon-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-icon-color","overview":"Chip Icon Color\n\nThe color and background color of each chip's icon can be individually\nconfigured.","usage":{},"docs":"Chip Icon Color\n\nThe color and background color of each chip's icon can be individually\nconfigured.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set"],"dependencyGraph":{"limel-example-chip-icon-color":["limel-chip-set"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-icon-colors.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Chip Icon Color\n *\n * The color and background color of each chip's icon can be individually\n * configured.\n */\n@Component({\n    tag: 'limel-example-chip-icon-color',\n    shadow: true,\n})\nexport class ChipIconColorExample {\n    public render() {\n        return [\n            <limel-chip-set\n                value={[\n                    {\n                        id: 1,\n                        text: 'Badger',\n                        icon: 'badger',\n                    },\n                    {\n                        id: 2,\n                        text: 'Elephant',\n                        icon: 'elephant',\n                        iconFillColor: 'rgb(var(--color-magenta-default))',\n                    },\n                    {\n                        id: 3,\n                        text: 'Caterpillar',\n                        icon: 'caterpillar',\n                        iconBackgroundColor: 'rgb(var(--color-orange-default))',\n                    },\n                    {\n                        id: 4,\n                        text: 'Fish',\n                        icon: 'fish',\n                        iconFillColor: 'rgb(var(--color-yellow-light))',\n                        iconBackgroundColor: 'rgb(var(--color-indigo-darker))',\n                    },\n                ]}\n            />,\n        ];\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set.tsx","fileName":"chip-set.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set","overview":"Basic example with no `type` set\n\nMay be useful as a read-only presentation of a collection of tags, or\nsimilar.\n\nDepending on the use case, you may also wish to consider\n[limel-button](#/component/limel-button/) or\n[limel-button-group](#/component/limel-button-group/).","usage":{},"docs":"Basic example with no `type` set\n\nMay be useful as a read-only presentation of a collection of tags, or\nsimilar.\n\nDepending on the use case, you may also wish to consider\n[limel-button](#/component/limel-button/) or\n[limel-button-group](#/component/limel-button-group/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chip-set":["limel-chip-set","limel-example-controls","limel-checkbox"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example with no `type` set\n *\n * May be useful as a read-only presentation of a collection of tags, or\n * similar.\n *\n * Depending on the use case, you may also wish to consider\n * [limel-button](#/component/limel-button/) or\n * [limel-button-group](#/component/limel-button-group/).\n */\n@Component({\n    tag: 'limel-example-chip-set',\n    shadow: true,\n})\nexport class ChipSetExample {\n    @State()\n    private disabled: boolean = false;\n\n    public render() {\n        return [\n            <limel-chip-set\n                label=\"Tags\"\n                disabled={this.disabled}\n                onInteract={this.handleInteraction}\n                value={[\n                    {\n                        id: 1,\n                        text: 'Fruit',\n                    },\n                    {\n                        id: 2,\n                        text: 'Green',\n                    },\n                    {\n                        id: 3,\n                        text: 'Sour',\n                    },\n                ]}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.toggleEnabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleInteraction = (event) => {\n        console.log(event.detail);\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-choice.tsx","fileName":"chip-set-choice.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-choice","overview":"Choice chip set\n\nOnly one option can be selected at once. Kind of like radio-buttons, but the\nuser can deselect the chosen option too. Good as an alternative to using a\n`select` when there are only a few options.","usage":{},"docs":"Choice chip set\n\nOnly one option can be selected at once. Kind of like radio-buttons, but the\nuser can deselect the chosen option too. Good as an alternative to using a\n`select` when there are only a few options.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chip-set-choice":["limel-chip-set","limel-example-controls","limel-checkbox"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-choice.tsx","type":"tsx","source":"import { Chip } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Choice chip set\n *\n * Only one option can be selected at once. Kind of like radio-buttons, but the\n * user can deselect the chosen option too. Good as an alternative to using a\n * `select` when there are only a few options.\n */\n@Component({\n    tag: 'limel-example-chip-set-choice',\n    shadow: true,\n})\nexport class ChipSetChoiceExample {\n    @State()\n    private chips: Chip[] = [\n        {\n            id: 1,\n            text: 'Lime',\n            icon: 'citrus',\n        },\n        {\n            id: 2,\n            text: 'Apple',\n            selected: true,\n            icon: 'apple',\n        },\n        {\n            id: 3,\n            text: 'Banana',\n            icon: 'banana',\n        },\n    ];\n\n    @State()\n    private disabled: boolean = false;\n\n    public render() {\n        return [\n            <limel-chip-set\n                disabled={this.disabled}\n                type=\"choice\"\n                label=\"Thirst quencher with a twist of\"\n                onChange={this.handleChange}\n                value={this.chips}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        console.log(event.detail);\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-composite.tsx","fileName":"chip-set-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-chip-set-composite":["limel-chip-set","limel-example-event-printer","limel-example-controls","limel-form"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[{"name":"schema","type":"any","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\nimport { Languages } from '../../date-picker/date.types';\nimport { Chip } from '../chip.types';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-chip-set-composite',\n    shadow: true,\n})\nexport class ChipSetCompositeExample {\n    @Prop()\n    public schema: any;\n\n    @State()\n    private props = {\n        language: 'en' as Languages,\n        value: [\n            {\n                id: 'dog',\n                text: 'Dog',\n                icon: 'dog',\n            },\n            {\n                id: 'cat',\n                text: 'Cat',\n                icon: 'cat',\n            },\n        ] as Chip[],\n        type: 'choice' as any,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n        this.schema.properties.value.lime = {\n            layout: {\n                colSpan: 'all',\n            },\n        };\n        this.schema.definitions.Chip.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-chip-set {...this.props} onChange={this.handleChange} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<Chip | Chip[]>) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = { ...event.detail };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-filter.tsx","fileName":"chip-set-filter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-filter","overview":"Filter chip set\n\nAny number of options can be selected at once, including none. As the name\nsuggests, this one is good for filtering things.","usage":{},"docs":"Filter chip set\n\nAny number of options can be selected at once, including none. As the name\nsuggests, this one is good for filtering things.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chip-set-filter":["limel-chip-set","limel-example-controls","limel-checkbox"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-filter.tsx","type":"tsx","source":"import { Chip } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Filter chip set\n *\n * Any number of options can be selected at once, including none. As the name\n * suggests, this one is good for filtering things.\n */\n@Component({\n    tag: 'limel-example-chip-set-filter',\n    shadow: true,\n})\nexport class ChipSetFilterExample {\n    @State()\n    private chips: Chip[] = [\n        {\n            id: 1,\n            text: 'Lime',\n        },\n        {\n            id: 2,\n            text: 'Apple',\n            selected: true,\n        },\n        {\n            id: 3,\n            text: 'Banana',\n        },\n    ];\n\n    @State()\n    private disabled: boolean = false;\n\n    public render() {\n        return [\n            <limel-chip-set\n                label=\"Include fruits of type:\"\n                disabled={this.disabled}\n                type=\"filter\"\n                onChange={this.handleChange}\n                value={this.chips}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        console.log(event.detail);\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-filter-badge.tsx","fileName":"chip-set-filter-badge.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-filter-badge","overview":"Filter chip set with badge.\nThe badge can be used to visulize the number of results using each filter.","usage":{},"docs":"Filter chip set with badge.\nThe badge can be used to visulize the number of results using each filter.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chip-set-filter-badge":["limel-chip-set","limel-example-controls","limel-checkbox"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-filter-badge.tsx","type":"tsx","source":"import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nconst CHIP_SELECET_ALL_ID = 1;\n\n/**\n * Filter chip set with badge.\n * The badge can be used to visulize the number of results using each filter.\n */\n@Component({\n    tag: 'limel-example-chip-set-filter-badge',\n    shadow: true,\n})\nexport class ChipSetFilterBadgeExample {\n    @State()\n    private chips: Chip[] = [\n        {\n            id: 1,\n            text: 'All',\n        },\n        {\n            id: 2,\n            text: 'Lime',\n            badge: 5,\n        },\n        {\n            id: 3,\n            text: 'Apple',\n            selected: true,\n            badge: 0,\n        },\n        {\n            id: 4,\n            text: 'Banana',\n            badge: 1,\n        },\n    ];\n\n    @State()\n    private disabled: boolean = false;\n\n    constructor() {\n        this.setAllBadgeValue();\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                label=\"Include fruits of type:\"\n                disabled={this.disabled}\n                type=\"filter\"\n                onChange={this.handleChange}\n                value={this.chips}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip>) => {\n        const updatedChips = [...this.chips];\n        if (event.detail.id !== CHIP_SELECET_ALL_ID) {\n            updatedChips[0].selected = false;\n        }\n\n        if (event.detail.id === CHIP_SELECET_ALL_ID && event.detail.selected) {\n            updatedChips.forEach((chip) => {\n                chip.selected = false;\n            });\n        }\n\n        const index = this.chips.findIndex(\n            (chips) => chips.id === event.detail.id\n        );\n        updatedChips[index] = event.detail;\n        this.chips = updatedChips;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n\n    private setAllBadgeValue() {\n        let badgeValue = 0;\n        this.chips.forEach((chip) => {\n            if (chip.id !== CHIP_SELECET_ALL_ID) {\n                badgeValue += chip.badge;\n            }\n        });\n        this.chips[0].badge = badgeValue;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-input.tsx","fileName":"chip-set-input.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-input","overview":"Input chip set\n\nUseful for collections of tags or labels. Can also be used as an advanced\nsearch input, with leading icon and a delimiter between search terms.","usage":{},"docs":"Input chip set\n\nUseful for collections of tags or labels. Can also be used as an advanced\nsearch input, with leading icon and a delimiter between search terms.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-controls","limel-input-field","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-chip-set-input":["limel-chip-set","limel-example-controls","limel-input-field","limel-checkbox","limel-example-value"],"limel-chip-set":["limel-icon","limel-badge"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-input.tsx","type":"tsx","source":"import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER, ENTER_KEY_CODE } from '../../../util/keycodes';\n\n/**\n * Input chip set\n *\n * Useful for collections of tags or labels. Can also be used as an advanced\n * search input, with leading icon and a delimiter between search terms.\n */\n@Component({\n    tag: 'limel-example-chip-set-input',\n    shadow: true,\n})\nexport class ChipSetInputExample {\n    @State()\n    private value: Chip[];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private required: boolean = false;\n\n    @State()\n    private readonly: boolean = false;\n\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private maxItems = 0;\n\n    @State()\n    private emptyInputOnBlur: boolean = true;\n\n    @State()\n    private hasLeadingIcon: boolean = false;\n\n    @State()\n    private delimiter: string = null;\n\n    constructor() {\n        this.value = [\n            this.createChip('Elephant'),\n            this.createChip('Caterpillar'),\n            this.createChip('Badger'),\n            this.createChip('Fish'),\n        ];\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                type=\"input\"\n                label=\"Animal\"\n                helperText=\"For some animal names, icons are displayed on the chips\"\n                searchLabel=\"Type an animal name & press Enter\"\n                value={this.value}\n                required={this.required}\n                readonly={this.readonly}\n                disabled={this.disabled}\n                leadingIcon={this.hasLeadingIcon ? 'search' : null}\n                maxItems={this.maxItems}\n                onChange={this.handleChange}\n                onInput={this.handleInput}\n                onInteract={this.handleInteraction}\n                onKeyUp={this.onKeyUp}\n                emptyInputOnBlur={this.emptyInputOnBlur}\n                delimiter={this.delimiter}\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-max-columns-width': '9rem' }}\n            >\n                <limel-input-field\n                    label=\"Max items\"\n                    value={this.maxItems.toString()}\n                    type=\"number\"\n                    onChange={this.setMaxItems}\n                />\n                <limel-checkbox\n                    label=\"Empty input on blur\"\n                    onChange={this.setEmptyInputOnBlur}\n                    checked={this.emptyInputOnBlur}\n                />\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                    checked={this.disabled}\n                />\n                <limel-checkbox\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                    checked={this.readonly}\n                />\n                <limel-checkbox\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                    checked={this.required}\n                />\n                <limel-checkbox\n                    label={'Leading icon'}\n                    onChange={this.setLeadingIcon}\n                    checked={this.hasLeadingIcon}\n                />\n                <limel-checkbox\n                    label=\"Use delimiters\"\n                    onChange={this.useDelimiters}\n                    checked={this.delimiter !== null}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleInput = (event: CustomEvent<string>) => {\n        this.textValue = event.detail;\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (\n            (event.key === ENTER || event.keyCode === ENTER_KEY_CODE) &&\n            this.textValue.trim()\n        ) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.textValue = '';\n        }\n    };\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        console.log(event.detail);\n        this.value = event.detail;\n    };\n\n    private handleInteraction = (event: CustomEvent<Chip>) => {\n        console.log('Chip interacted with: ', event.detail);\n    };\n\n    private createChip = (name: string): Chip => {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n            icon: `${name}`.toLowerCase(),\n        };\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        this.required = event.detail;\n    };\n\n    private setEmptyInputOnBlur = (event: CustomEvent<boolean>) => {\n        this.emptyInputOnBlur = event.detail;\n    };\n\n    private setLeadingIcon = (event: CustomEvent<boolean>) => {\n        this.hasLeadingIcon = event.detail;\n    };\n\n    private setMaxItems = (event: CustomEvent<string>) => {\n        this.maxItems = +event.detail;\n    };\n\n    private useDelimiters = (event: CustomEvent<boolean>) => {\n        this.delimiter = event.detail ? '&' : null;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-input-type-search.tsx","fileName":"chip-set-input-type-search.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-input-type-search","overview":"Input chip set with `inputType` of `search`\n\nWhen autocorrection is potentially harmful for the user experience and for\nyour intended result, use `search` as `inputType`. For instance, for a\nquestion like \"Please suggest unique names for our newly founded company\",\nyou probably don't want autocorrection, because you would expect many\nvalid suggestions to not exist in the autocorrection dictionary. Therefore,\nyou do not want the respondent's input to be regarded as a typo and to be\nchanged when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.","usage":{},"docs":"Input chip set with `inputType` of `search`\n\nWhen autocorrection is potentially harmful for the user experience and for\nyour intended result, use `search` as `inputType`. For instance, for a\nquestion like \"Please suggest unique names for our newly founded company\",\nyou probably don't want autocorrection, because you would expect many\nvalid suggestions to not exist in the autocorrection dictionary. Therefore,\nyou do not want the respondent's input to be regarded as a typo and to be\nchanged when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set"],"dependencyGraph":{"limel-example-chip-set-input-type-search":["limel-chip-set"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-input-type-search.tsx","type":"tsx","source":"import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER, ENTER_KEY_CODE } from '../../../util/keycodes';\n\n/**\n * Input chip set with `inputType` of `search`\n *\n * When autocorrection is potentially harmful for the user experience and for\n * your intended result, use `search` as `inputType`. For instance, for a\n * question like \"Please suggest unique names for our newly founded company\",\n * you probably don't want autocorrection, because you would expect many\n * valid suggestions to not exist in the autocorrection dictionary. Therefore,\n * you do not want the respondent's input to be regarded as a typo and to be\n * changed when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.\n */\n@Component({\n    tag: 'limel-example-chip-set-input-type-search',\n    shadow: true,\n})\nexport class ChipSetInputExample {\n    @State()\n    private value: Chip[];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private maxItems = 3;\n\n    @State()\n    private emptyInputOnBlur: boolean = true;\n\n    constructor() {\n        this.value = [this.createChip('Lundalogik'), this.createChip('Lime')];\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"search\"\n                label=\"Suggest three unique names for our newly founded company\"\n                maxItems={this.maxItems}\n                value={this.value}\n                onChange={this.handleChange}\n                onInput={this.handleInput}\n                onKeyUp={this.onKeyUp}\n                emptyInputOnBlur={this.emptyInputOnBlur}\n            />,\n        ];\n    }\n\n    private handleInput = (event: CustomEvent<string>) => {\n        this.textValue = event.detail;\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (\n            (event.key === ENTER || event.keyCode === ENTER_KEY_CODE) &&\n            this.textValue.trim()\n        ) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.textValue = '';\n        }\n    };\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        this.value = event.detail;\n    };\n\n    private createChip = (name: string): Chip => {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n        };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-input-type-text.tsx","fileName":"chip-set-input-type-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-input-type-text","overview":"Input chip set with `inputType` of `text`\n\nThere is a slight difference in the way browsers treat `input` field\nwith `type=\"text\"` and `type=\"search\"`. You can read more about this\ndifference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\nbut the most important difference in this case is activation of the\nautocorrection feature on most smart devices.\n\nWhen a user makes a spelling mistake while typing in an input field with\n`type=\"text\"`, the mistake will be corrected automatically, right after they\npress <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\ndo not auto correct the user's input.\n\nIf you want to use limel-chip-set in a form context, where autocorrection is\na good thing, use `text` as `inputType`. It is important to know that the\nchip-set component creates a chip from the autocorrected value, after the\nuser has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\nexisting typos! For example, for a question like \"Please type five of your\nfavorite fruits\", you would want to avoid misspellings, to collect higher\nquality data.","usage":{},"docs":"Input chip set with `inputType` of `text`\n\nThere is a slight difference in the way browsers treat `input` field\nwith `type=\"text\"` and `type=\"search\"`. You can read more about this\ndifference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\nbut the most important difference in this case is activation of the\nautocorrection feature on most smart devices.\n\nWhen a user makes a spelling mistake while typing in an input field with\n`type=\"text\"`, the mistake will be corrected automatically, right after they\npress <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\ndo not auto correct the user's input.\n\nIf you want to use limel-chip-set in a form context, where autocorrection is\na good thing, use `text` as `inputType`. It is important to know that the\nchip-set component creates a chip from the autocorrected value, after the\nuser has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\nexisting typos! For example, for a question like \"Please type five of your\nfavorite fruits\", you would want to avoid misspellings, to collect higher\nquality data.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set"],"dependencyGraph":{"limel-example-chip-set-input-type-text":["limel-chip-set"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-input-type-text.tsx","type":"tsx","source":"import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER, ENTER_KEY_CODE } from '../../../util/keycodes';\n\n/**\n * Input chip set with `inputType` of `text`\n *\n * There is a slight difference in the way browsers treat `input` field\n * with `type=\"text\"` and `type=\"search\"`. You can read more about this\n * difference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\n * but the most important difference in this case is activation of the\n * autocorrection feature on most smart devices.\n *\n * When a user makes a spelling mistake while typing in an input field with\n * `type=\"text\"`, the mistake will be corrected automatically, right after they\n * press <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\n * do not auto correct the user's input.\n *\n * If you want to use limel-chip-set in a form context, where autocorrection is\n * a good thing, use `text` as `inputType`. It is important to know that the\n * chip-set component creates a chip from the autocorrected value, after the\n * user has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\n * existing typos! For example, for a question like \"Please type five of your\n * favorite fruits\", you would want to avoid misspellings, to collect higher\n * quality data.\n */\n@Component({\n    tag: 'limel-example-chip-set-input-type-text',\n    shadow: true,\n})\nexport class ChipSetInputExample {\n    @State()\n    private value: Chip[];\n\n    @State()\n    private companyValue: Chip[];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private maxItems = 5;\n\n    @State()\n    private emptyInputOnBlur: boolean = true;\n\n    constructor() {\n        this.value = [\n            this.createChip('Apple'),\n            this.createChip('Pear'),\n            this.createChip('Strawberry'),\n            this.createChip('Banana'),\n        ];\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"text\"\n                label=\"Type five of your favorite fruits.\"\n                helperText=\"For some fruit names, icons are displayed on the chips\"\n                value={this.value}\n                maxItems={this.maxItems}\n                onChange={this.handleChange}\n                onInput={this.handleInput}\n                onKeyUp={this.onKeyUp}\n                emptyInputOnBlur={this.emptyInputOnBlur}\n            />,\n        ];\n    }\n\n    private handleInput = (event: CustomEvent<string>) => {\n        this.textValue = event.detail;\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (\n            (event.key === ENTER || event.keyCode === ENTER_KEY_CODE) &&\n            this.textValue.trim()\n        ) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.companyValue = [\n                ...this.companyValue,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.textValue = '';\n        }\n    };\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        this.value = event.detail;\n    };\n\n    private createChip = (name: string): Chip => {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n            icon: `${name}`.toLowerCase(),\n        };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples","filePath":"./src/components/circular-progress/examples/circular-progress.tsx","fileName":"circular-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/usage","tag":"limel-example-circular-progress","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-circular-progress"],"dependencyGraph":{"limel-example-circular-progress":["limel-input-field","limel-circular-progress"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-circular-progress',\n    styleUrl: 'circular-progress.scss',\n})\nexport class CircularProgressExample {\n    @State()\n    private value = 65;\n\n    public render() {\n        const value = `${this.value}`;\n\n        return [\n            <limel-input-field\n                label=\"Value\"\n                type=\"number\"\n                value={value}\n                onChange={this.handleChange}\n            />,\n            <limel-circular-progress value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.value = +event.detail;\n    };\n}\n"},{"filename":"circular-progress.scss","type":"scss","source":":host {\n    display: flex;\n    gap: 2rem;\n    align-items: center;\n    justify-content: space-between;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples","filePath":"./src/components/circular-progress/examples/circular-progress-css-variables.tsx","fileName":"circular-progress-css-variables.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/usage","tag":"limel-example-circular-progress-css-variables","overview":"Tweaking the style, using CSS variables\nThe component offers a few possibilities for tweaking its size and colors\nusing a few CSS variables.\n\n:::note\nIf you have tweaked component's size using size presets offered by the\n`size` prop, the css variable of `--circular-progress-size` will not have any\neffect.\n:::\n:::important\nMake sure that the track color is lighter than the fill color. Otherwise the\nUI will be very confusing for the users.\n:::","usage":{},"docs":"Tweaking the style, using CSS variables\nThe component offers a few possibilities for tweaking its size and colors\nusing a few CSS variables.\n\n:::note\nIf you have tweaked component's size using size presets offered by the\n`size` prop, the css variable of `--circular-progress-size` will not have any\neffect.\n:::\n:::important\nMake sure that the track color is lighter than the fill color. Otherwise the\nUI will be very confusing for the users.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-circular-progress"],"dependencyGraph":{"limel-example-circular-progress-css-variables":["limel-circular-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress-css-variables.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Tweaking the style, using CSS variables\n * The component offers a few possibilities for tweaking its size and colors\n * using a few CSS variables.\n *\n * :::note\n * If you have tweaked component's size using size presets offered by the\n * `size` prop, the css variable of `--circular-progress-size` will not have any\n * effect.\n * :::\n * :::important\n * Make sure that the track color is lighter than the fill color. Otherwise the\n * UI will be very confusing for the users.\n * :::\n */\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-circular-progress-css-variables',\n    styleUrl: 'circular-progress-css-variables.scss',\n})\nexport class CircularProgressCssVariablesExample {\n    private value = 90;\n\n    public render() {\n        return <limel-circular-progress prefix=\"↗\" value={this.value} />;\n    }\n}\n"},{"filename":"circular-progress-css-variables.scss","type":"scss","source":":host {\n    --circular-progress-size: 8rem;\n    --circular-progress-fill-color: rgb(var(--color-orange-default));\n    --circular-progress-track-color: rgb(var(--color-orange-lighter));\n    --circular-progress-prefix-color: rgb(var(--color-cyan-light));\n    --circular-progress-text-color: rgb(var(--contrast-100));\n    --circular-progress-suffix-color: rgb(var(--contrast-800));\n    --circular-progress-background-color: rgb(var(--contrast-1100));\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: rgb(var(--contrast-600));\n    padding: 2rem;\n    border-radius: 0.5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples","filePath":"./src/components/circular-progress/examples/circular-progress-percentage-colors.tsx","fileName":"circular-progress-percentage-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/usage","tag":"limel-example-circular-progress-percentage-colors","overview":"Displaying percentage colors\nAt Lime Technologies we have a convention for displaying percentage colors.\nThe colors we use to display a range change with intervals of 10.\nThe color spectrum is not modifiable, and looks like\nred → orange → yellow → green → teal.\nTo enable this feature, simply set `displayPercentageColors` to `true`.\n\nTry changing the value in the example below to see how colors change\nfor different percentages.","usage":{},"docs":"Displaying percentage colors\nAt Lime Technologies we have a convention for displaying percentage colors.\nThe colors we use to display a range change with intervals of 10.\nThe color spectrum is not modifiable, and looks like\nred → orange → yellow → green → teal.\nTo enable this feature, simply set `displayPercentageColors` to `true`.\n\nTry changing the value in the example below to see how colors change\nfor different percentages.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-circular-progress"],"dependencyGraph":{"limel-example-circular-progress-percentage-colors":["limel-input-field","limel-circular-progress"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress-percentage-colors.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n/**\n * Displaying percentage colors\n * At Lime Technologies we have a convention for displaying percentage colors.\n * The colors we use to display a range change with intervals of 10.\n * The color spectrum is not modifiable, and looks like\n * red → orange → yellow → green → teal.\n * To enable this feature, simply set `displayPercentageColors` to `true`.\n *\n * Try changing the value in the example below to see how colors change\n * for different percentages.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-circular-progress-percentage-colors',\n    styleUrl: 'circular-progress.scss',\n})\nexport class CircularProgressPercentageColorsExample {\n    @State()\n    private value = 5;\n\n    public render() {\n        const value = `${this.value}`;\n\n        return [\n            <limel-input-field\n                label=\"Value\"\n                type=\"number\"\n                value={value}\n                onChange={this.handleChange}\n            />,\n            <limel-circular-progress\n                value={this.value}\n                displayPercentageColors={true}\n            />,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.value = +event.detail;\n    };\n}\n"},{"filename":"circular-progress.scss","type":"scss","source":":host {\n    display: flex;\n    gap: 2rem;\n    align-items: center;\n    justify-content: space-between;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples","filePath":"./src/components/circular-progress/examples/circular-progress-props.tsx","fileName":"circular-progress-props.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/usage","tag":"limel-example-circular-progress-props","overview":"Using the props\nThis component is initially designed to visualize a percentage on a scale of\nzero to 100. However, you can easily visualize a progress in other scales,\nsimply by setting `maxValue`, `prefix` and `suffix`.\n\nLook at this example to see how the component displays an angle in a\n360-degrees scale, a 60-seconds scale, and a 5-stars rating.","usage":{},"docs":"Using the props\nThis component is initially designed to visualize a percentage on a scale of\nzero to 100. However, you can easily visualize a progress in other scales,\nsimply by setting `maxValue`, `prefix` and `suffix`.\n\nLook at this example to see how the component displays an angle in a\n360-degrees scale, a 60-seconds scale, and a 5-stars rating.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-circular-progress"],"dependencyGraph":{"limel-example-circular-progress-props":["limel-circular-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress-props.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Using the props\n * This component is initially designed to visualize a percentage on a scale of\n * zero to 100. However, you can easily visualize a progress in other scales,\n * simply by setting `maxValue`, `prefix` and `suffix`.\n *\n * Look at this example to see how the component displays an angle in a\n * 360-degrees scale, a 60-seconds scale, and a 5-stars rating.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-circular-progress-props',\n    styleUrl: 'circular-progress.scss',\n})\nexport class CircularProgressPropsExample {\n    private degree = 45;\n    private maxDegrees = 360;\n    private degrees = '°';\n\n    private second = 15;\n    private maxSeconds = 60;\n    private seconds = '\"';\n\n    private star = 4;\n    private maxStars = 5;\n    private stars = '⭐️';\n\n    private budget = 4000;\n    private maxBudget = 5000;\n    private increase = '+';\n    private currency = '$';\n\n    public render() {\n        return [\n            <limel-circular-progress\n                size=\"x-large\"\n                value={this.degree}\n                maxValue={this.maxDegrees}\n                suffix={this.degrees}\n            />,\n            <limel-circular-progress\n                size=\"x-large\"\n                value={this.second}\n                maxValue={this.maxSeconds}\n                suffix={this.seconds}\n            />,\n            <limel-circular-progress\n                size=\"x-large\"\n                value={this.star}\n                maxValue={this.maxStars}\n                suffix={this.stars}\n            />,\n            <limel-circular-progress\n                size=\"x-large\"\n                value={this.budget}\n                maxValue={this.maxBudget}\n                suffix={this.currency}\n                prefix={this.increase}\n            />,\n        ];\n    }\n}\n"},{"filename":"circular-progress.scss","type":"scss","source":":host {\n    display: flex;\n    gap: 2rem;\n    align-items: center;\n    justify-content: space-between;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples","filePath":"./src/components/circular-progress/examples/circular-progress-sizes.tsx","fileName":"circular-progress-sizes.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/usage","tag":"limel-example-circular-progress-sizes","overview":"Size presets\nYou can chose a preset size for the component to render it desireably,\nusing the `size` prop.\nHowever, if these preset sizes do not suit your UI needs, do not specify them\nand instead specify the size using the `--circular-progress-size` variable,\nwhich must always be according to our\n[size rhythm](#/DesignGuidelines/size-rhythms.md/) guidelines.\n\nNote that the text size is automatically adjusted, based on the visual size\nof the component.","usage":{},"docs":"Size presets\nYou can chose a preset size for the component to render it desireably,\nusing the `size` prop.\nHowever, if these preset sizes do not suit your UI needs, do not specify them\nand instead specify the size using the `--circular-progress-size` variable,\nwhich must always be according to our\n[size rhythm](#/DesignGuidelines/size-rhythms.md/) guidelines.\n\nNote that the text size is automatically adjusted, based on the visual size\nof the component.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-circular-progress"],"dependencyGraph":{"limel-example-circular-progress-sizes":["limel-circular-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress-sizes.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Size presets\n * You can chose a preset size for the component to render it desireably,\n * using the `size` prop.\n * However, if these preset sizes do not suit your UI needs, do not specify them\n * and instead specify the size using the `--circular-progress-size` variable,\n * which must always be according to our\n * [size rhythm](#/DesignGuidelines/size-rhythms.md/) guidelines.\n *\n * Note that the text size is automatically adjusted, based on the visual size\n * of the component.\n */\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-circular-progress-sizes',\n    styleUrl: 'circular-progress.scss',\n})\nexport class CircularProgressSizesExample {\n    private value = 92.6;\n\n    public render() {\n        return [\n            <limel-circular-progress value={this.value} size=\"x-small\" />,\n            <limel-circular-progress value={this.value} size=\"small\" />,\n            <limel-circular-progress value={this.value} size=\"medium\" />,\n            <limel-circular-progress value={this.value} size=\"large\" />,\n            <limel-circular-progress value={this.value} size=\"x-large\" />,\n        ];\n    }\n}\n"},{"filename":"circular-progress.scss","type":"scss","source":":host {\n    display: flex;\n    gap: 2rem;\n    align-items: center;\n    justify-content: space-between;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples","filePath":"./src/components/code-editor/examples/code-editor.tsx","fileName":"code-editor.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/usage","tag":"limel-example-code-editor","overview":"Editable with automatic theme\nHere you see an instance of the Code Editor component which allows editing the\npresented code.\nThis instance has an `auto` `colorScheme`, which means it reacts\nto the operating system's settings for preferred appearance (dark or light).","usage":{},"docs":"Editable with automatic theme\nHere you see an instance of the Code Editor component which allows editing the\npresented code.\nThis instance has an `auto` `colorScheme`, which means it reacts\nto the operating system's settings for preferred appearance (dark or light).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-code-editor"],"dependencyGraph":{"limel-example-code-editor":["limel-code-editor"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"code-editor.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { data } from '../../table/examples/birds';\n\n/**\n * Editable with automatic theme\n * Here you see an instance of the Code Editor component which allows editing the\n * presented code.\n * This instance has an `auto` `colorScheme`, which means it reacts\n * to the operating system's settings for preferred appearance (dark or light).\n */\n\n@Component({\n    tag: 'limel-example-code-editor',\n    shadow: true,\n    styleUrl: 'code-editor.scss',\n})\nexport class CodeExample {\n    @State()\n    private json: string = JSON.stringify(data, null, '    ');\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.json = event.detail;\n    };\n\n    public render() {\n        return (\n            <limel-code-editor\n                value={this.json}\n                language=\"json\"\n                onChange={this.handleChange}\n            />\n        );\n    }\n}\n"},{"filename":"code-editor.scss","type":"scss","source":":host {\n    --code-editor-max-height: 20rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples","filePath":"./src/components/code-editor/examples/code-editor-with-linting-and-folding.tsx","fileName":"code-editor-with-linting-and-folding.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/usage","tag":"limel-example-code-editor-fold-lint","overview":"Editable with JSON linting and folding\nHere you see an instance of the Code Editor component with linting and\nfolding support, which allows the user to see syntax errors in the JSON\ncode shown in the editor. Folding makes it easier to collapse larger pieces\nof code.","usage":{},"docs":"Editable with JSON linting and folding\nHere you see an instance of the Code Editor component with linting and\nfolding support, which allows the user to see syntax errors in the JSON\ncode shown in the editor. Folding makes it easier to collapse larger pieces\nof code.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-code-editor"],"dependencyGraph":{"limel-example-code-editor-fold-lint":["limel-code-editor"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"code-editor-with-linting-and-folding.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { data } from '../../table/examples/birds';\n\n/**\n * Editable with JSON linting and folding\n * Here you see an instance of the Code Editor component with linting and\n * folding support, which allows the user to see syntax errors in the JSON\n * code shown in the editor. Folding makes it easier to collapse larger pieces\n * of code.\n */\n\n@Component({\n    tag: 'limel-example-code-editor-fold-lint',\n    shadow: true,\n    styleUrl: 'code-editor.scss',\n})\nexport class CodeFoldAndLintExample {\n    @State()\n    private json: string = JSON.stringify(data, null, '    ');\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.json = event.detail;\n    };\n\n    public render() {\n        return (\n            <limel-code-editor\n                value={this.json}\n                language=\"json\"\n                lineNumbers={true}\n                lint={true}\n                fold={true}\n                onChange={this.handleChange}\n            />\n        );\n    }\n}\n"},{"filename":"code-editor.scss","type":"scss","source":":host {\n    --code-editor-max-height: 20rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples","filePath":"./src/components/code-editor/examples/code-editor-readonly-with-line-numbers.tsx","fileName":"code-editor-readonly-with-line-numbers.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/usage","tag":"limel-example-code-editor-readonly-with-line-numbers","overview":"Readonly, with line numbers and dark theme\nHere you see a `readonly` instance of the Code Editor component. This means\nyou cannot edit the code. We also display line numbers here.\nAdditionally, this instance has a `dark` `colorScheme`, which means it does not\nrespect the operating system's settings for preferred appearance (dark or light).","usage":{},"docs":"Readonly, with line numbers and dark theme\nHere you see a `readonly` instance of the Code Editor component. This means\nyou cannot edit the code. We also display line numbers here.\nAdditionally, this instance has a `dark` `colorScheme`, which means it does not\nrespect the operating system's settings for preferred appearance (dark or light).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-code-editor"],"dependencyGraph":{"limel-example-code-editor-readonly-with-line-numbers":["limel-code-editor"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"code-editor-readonly-with-line-numbers.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Readonly, with line numbers and dark theme\n * Here you see a `readonly` instance of the Code Editor component. This means\n * you cannot edit the code. We also display line numbers here.\n * Additionally, this instance has a `dark` `colorScheme`, which means it does not\n * respect the operating system's settings for preferred appearance (dark or light).\n */\n@Component({\n    tag: 'limel-example-code-editor-readonly-with-line-numbers',\n    shadow: true,\n})\nexport class CodeExample {\n    private code: string = `class Animal {\n    move(distanceInMeters: number = 0) {\n        console.log(\\`Animal moved \\${distanceInMeters}m.\\`);\n    }\n}\n\nclass Dog extends Animal {\n    bark() {\n        console.log(\"Woof! Woof!\");\n    }\n}\n// Just a comment…\nconst dog = new Dog();\ndog.bark();\ndog.move(10);`;\n\n    public render() {\n        return (\n            <limel-code-editor\n                value={this.code}\n                language=\"typescript\"\n                readonly\n                line-numbers\n                colorScheme=\"dark\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section.tsx","fileName":"collapsible-section.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section"],"dependencyGraph":{"limel-example-collapsible-section":["limel-collapsible-section"],"limel-collapsible-section":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-collapsible-section',\n    shadow: true,\n})\nexport class CollapsibleSectionExample {\n    public render() {\n        return (\n            <div>\n                <limel-collapsible-section header=\"This text becomes the header\">\n                    <p>This element becomes the body.</p>\n                </limel-collapsible-section>\n            </div>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-actions.tsx","fileName":"collapsible-section-actions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-actions","overview":"Example with actions","usage":{},"docs":"Example with actions","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section","limel-icon"],"dependencyGraph":{"limel-example-collapsible-section-actions":["limel-collapsible-section","limel-icon"],"limel-collapsible-section":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-actions.tsx","type":"tsx","source":"import { Action } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Example with actions\n */\n@Component({\n    tag: 'limel-example-collapsible-section-actions',\n    shadow: true,\n})\nexport class CollapsibleSectionActionsExample {\n    @State()\n    private action: Action = {\n        id: '0',\n        icon: 'test_tube',\n    };\n\n    private actions = [\n        {\n            id: '1',\n            icon: 'trash',\n        },\n        {\n            id: '2',\n            icon: 'available_updates',\n            disabled: true,\n        },\n        {\n            id: '3',\n            icon: 'menu_2',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-collapsible-section\n                header=\"This section has actions\"\n                actions={this.actions}\n                onAction={this.handleAction}\n            >\n                <limel-icon name={this.action.icon} size=\"large\" />\n            </limel-collapsible-section>\n        );\n    }\n\n    private handleAction = (event: CustomEvent<Action>) => {\n        this.action = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-css-props.tsx","fileName":"collapsible-section-css-props.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-css-props","overview":"Using the CSS properties","usage":{},"docs":"Using the CSS properties","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section"],"dependencyGraph":{"limel-example-collapsible-section-css-props":["limel-collapsible-section"],"limel-collapsible-section":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-css-props.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Using the CSS properties\n */\n@Component({\n    tag: 'limel-example-collapsible-section-css-props',\n    shadow: true,\n    styleUrl: 'collapsible-section.scss',\n})\nexport class CollapsibleSectionCssPropsExample {\n    public render() {\n        return (\n            <limel-collapsible-section header=\"Outer\">\n                <p>Lorem ipsum.</p>\n                <limel-collapsible-section header=\"Inner\">\n                    <p>Dolor sit amet.</p>\n                </limel-collapsible-section>\n            </limel-collapsible-section>\n        );\n    }\n}\n"},{"filename":"collapsible-section.scss","type":"scss","source":":host(limel-example-collapsible-section-css-props) {\n    --closed-header-background-color: rgba(var(--contrast-1700), 0.05);\n    --open-header-background-color: rgba(var(--contrast-1700), 0.1);\n    --body-background-color: rgba(var(--contrast-1700), 0.05);\n    --body-padding: 1rem;\n    --header-stroke-color: rgb(var(--color-sky-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-external-control.tsx","fileName":"collapsible-section-external-control.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-external-control","overview":"Opening and closing from outside the component","usage":{},"docs":"Opening and closing from outside the component","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-collapsible-section"],"dependencyGraph":{"limel-example-collapsible-section-external-control":["limel-button","limel-collapsible-section"],"limel-button":["limel-spinner","limel-icon"],"limel-collapsible-section":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-external-control.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Opening and closing from outside the component\n */\n@Component({\n    tag: 'limel-example-collapsible-section-external-control',\n    shadow: true,\n})\nexport class CollapsibleSectionExternalControlExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                label={'toggle'}\n                primary={true}\n                onClick={this.toggle}\n                style={{ 'margin-bottom': '1rem' }}\n            />,\n            <limel-collapsible-section\n                header=\"Click me or click the button\"\n                isOpen={this.isOpen}\n                onOpen={this.onOpen}\n                onClose={this.onClose}\n            >\n                <p>Either way, the section will toggle!</p>\n            </limel-collapsible-section>,\n        ];\n    }\n\n    private toggle = () => {\n        this.isOpen = !this.isOpen;\n    };\n\n    private onOpen = () => {\n        console.log('Section opened');\n        this.isOpen = true;\n    };\n\n    private onClose = () => {\n        console.log('Section closed');\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-with-slider.tsx","fileName":"collapsible-section-with-slider.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-with-slider","overview":"With a limel-slider - for testing\n:::note\nSome elements need to be redrawn if they were created\nwhile their container was hidden. The collapsible\nsection will emit a resize event after opening, to make this happen.\n:::","usage":{},"docs":"With a limel-slider - for testing\n:::note\nSome elements need to be redrawn if they were created\nwhile their container was hidden. The collapsible\nsection will emit a resize event after opening, to make this happen.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section","limel-slider"],"dependencyGraph":{"limel-example-collapsible-section-with-slider":["limel-collapsible-section","limel-slider"],"limel-collapsible-section":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-with-slider.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With a limel-slider - for testing\n * :::note\n * Some elements need to be redrawn if they were created\n * while their container was hidden. The collapsible\n * section will emit a resize event after opening, to make this happen.\n * :::\n */\n@Component({\n    tag: 'limel-example-collapsible-section-with-slider',\n    shadow: true,\n})\nexport class CollapsibleSectionWithSliderExample {\n    @State()\n    private percentage = 34;\n\n    public render() {\n        return (\n            <limel-collapsible-section header=\"With a limel-slider\">\n                <div>\n                    <p>This is primarily here for testing purposes.</p>\n                    <limel-slider unit=\"%\" value={this.percentage} />\n                </div>\n            </limel-collapsible-section>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples","filePath":"./src/components/color-picker/examples/color-picker.tsx","fileName":"color-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples/usage","tag":"limel-example-color-picker","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-color-picker"],"dependencyGraph":{"limel-example-color-picker":["limel-color-picker"],"limel-color-picker":["limel-tooltip","limel-popover","limel-color-picker-palette","limel-input-field"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-color-picker-palette":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"color-picker.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n@Component({\n    tag: 'limel-example-color-picker',\n    shadow: true,\n})\nexport class ColorPickerExample {\n    @State()\n    private value: string;\n\n    public render() {\n        return (\n            <limel-color-picker\n                value={this.value}\n                tooltipLabel=\"Click to pick a color\"\n                helperText=\"You can also type a color name or value to preview it here\"\n                label=\"Chosen color\"\n                onChange={this.onChange}\n            />\n        );\n    }\n\n    private onChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples","filePath":"./src/components/color-picker/examples/color-picker-readonly.tsx","fileName":"color-picker-readonly.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples/usage","tag":"limel-example-color-picker-readonly","overview":"Using the component in `readonly` mode\nIt is possible to use the component to visualize a color of your choice.\nIn this case, users cannot pick any colors, but they can view what you have picked.","usage":{},"docs":"Using the component in `readonly` mode\nIt is possible to use the component to visualize a color of your choice.\nIn this case, users cannot pick any colors, but they can view what you have picked.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-color-picker"],"dependencyGraph":{"limel-example-color-picker-readonly":["limel-color-picker"],"limel-color-picker":["limel-tooltip","limel-popover","limel-color-picker-palette","limel-input-field"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-color-picker-palette":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"color-picker-readonly.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Using the component in `readonly` mode\n * It is possible to use the component to visualize a color of your choice.\n * In this case, users cannot pick any colors, but they can view what you have picked.\n */\n\n@Component({\n    tag: 'limel-example-color-picker-readonly',\n    shadow: true,\n})\nexport class ColorPickerReadonlyExample {\n    public render() {\n        return (\n            <limel-color-picker\n                label=\"Look at this beautiful color!\"\n                readonly={true}\n                value=\"rgba(var(--color-red-default), 0.4)\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/colors-in-components.tsx","fileName":"colors-in-components.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-colors-in-components","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-linear-progress"],"dependencyGraph":{"limel-example-colors-in-components":["limel-button","limel-linear-progress"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"colors-in-components.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-colors-in-components',\n    shadow: true,\n    styleUrl: 'colors-in-components.scss',\n})\nexport class ColorExample {\n    public render() {\n        return (\n            <div class=\"background\">\n                <h3>Buttons</h3>\n                <div class=\"example-buttons\">\n                    <limel-button class=\"success\" label=\"Continue\" />\n                    <limel-button\n                        primary={true}\n                        class=\"caution\"\n                        label=\"Pause\"\n                    />\n                    <limel-button\n                        primary={true}\n                        label=\"Do not press!\"\n                        style={{\n                            '--lime-primary-color':\n                                'rgb(var(--color-red-default))',\n                        }}\n                    />\n                </div>\n                <h3>Linear progress</h3>\n                <p>\n                    <limel-linear-progress value={0.5} />\n                </p>\n                <h3>Custom component</h3>\n                <div class=\"box\">This is a message.</div>\n            </div>\n        );\n    }\n}\n"},{"filename":"colors-in-components.scss","type":"scss","source":"@use '../../../style/functions';\n\nh3 {\n    color: rgb(var(--kompendium-contrast-1300));\n}\n\n.background {\n    margin: functions.pxToRem(12) auto functions.pxToRem(20) auto;\n    padding: functions.pxToRem(20) functions.pxToRem(12);\n    background-color: rgb(var(--kompendium-contrast-300));\n    border-radius: functions.pxToRem(3);\n}\n\n.example-buttons {\n    display: grid;\n    grid-auto-flow: column;\n    gap: 1rem;\n    justify-content: left;\n    margin-bottom: 2rem;\n}\n\nlimel-button.success {\n    /* When a button is not a \"primary\" button, the --lime-primary-color will apply to its text */\n    --lime-primary-color: rgb(var(--color-green-default));\n}\n\nlimel-button.caution {\n    --lime-on-primary-color: rgb(var(--color-black));\n    /* When a button is a \"primary\" button, the --lime-primary-color will apply to its background */\n    --lime-primary-color: rgb(var(--color-amber-default));\n}\n\nlimel-linear-progress {\n    --lime-primary-color: rgb(var(--color-blue-default));\n    --background-color: rgb(var(--color-gray-light));\n\n    display: block;\n    margin-bottom: 2rem;\n}\n\n.box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 10rem;\n    height: 3rem;\n    border-radius: 0.25rem;\n\n    color: rgb(var(--kompendium-contrast-200));\n    background-color: rgb(var(--kompendium-contrast-1100));\n    box-shadow: var(--shadow-depth-16);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/contrast-color-palette.tsx","fileName":"contrast-color-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-contrast-color-palette","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"contrast-color-palette.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-contrast-color-palette',\n    shadow: true,\n    styleUrl: 'contrast-color-palette.scss',\n})\nexport class PaletteExample {\n    public render() {\n        return (\n            <div class=\"color-palette\">\n                <div class=\"swatch --contrast-100\">\n                    <span>100</span>\n                </div>\n                <div class=\"swatch --contrast-200\">\n                    <span>200</span>\n                </div>\n                <div class=\"swatch --contrast-300\">\n                    <span>300</span>\n                </div>\n                <div class=\"swatch --contrast-400\">\n                    <span>400</span>\n                </div>\n                <div class=\"swatch --contrast-500\">\n                    <span>500</span>\n                </div>\n                <div class=\"swatch --contrast-600\">\n                    <span>600</span>\n                </div>\n                <div class=\"swatch --contrast-700\">\n                    <span>700</span>\n                </div>\n                <div class=\"swatch --contrast-800\">\n                    <span>800</span>\n                </div>\n                <div class=\"swatch --contrast-900\">\n                    <span>900</span>\n                </div>\n                <div class=\"swatch --contrast-1000\">\n                    <span>1000</span>\n                </div>\n                <div class=\"swatch --contrast-1100\">\n                    <span>1100</span>\n                </div>\n                <div class=\"swatch --contrast-1200\">\n                    <span>1200</span>\n                </div>\n                <div class=\"swatch --contrast-1300\">\n                    <span>1300</span>\n                </div>\n                <div class=\"swatch --contrast-1400\">\n                    <span>1400</span>\n                </div>\n                <div class=\"swatch --contrast-1500\">\n                    <span>1500</span>\n                </div>\n                <div class=\"swatch --contrast-1600\">\n                    <span>1600</span>\n                </div>\n                <div class=\"swatch --contrast-1700\">\n                    <span>1700</span>\n                </div>\n                <div class=\"spacer\"></div>\n                <div class=\"swatch --color-white\">\n                    <span>white</span>\n                </div>\n                <div class=\"swatch --color-black\">\n                    <span>black</span>\n                </div>\n            </div>\n        );\n    }\n}\n"},{"filename":"contrast-color-palette.scss","type":"scss","source":"@use '../../../style/functions';\n@use './shared-styles';\n\n.color-palette {\n    grid-template-columns: repeat(20, 1fr);\n    gap: 0;\n    padding: functions.pxToRem(20) functions.pxToRem(12);\n    background-color: rgb(var(--contrast-300));\n    border-radius: functions.pxToRem(3);\n}\n\n.swatch {\n    border-radius: 0;\n    font-size: functions.pxToRem(12);\n    font-family: 'Source Code Pro', monospace;\n    letter-spacing: functions.pxToRem(-1);\n}\n\n.--color-white {\n    border-radius: 50%;\n    transform: translateX(functions.pxToRem(-8));\n}\n.--color-black {\n    border-radius: 50%;\n}\n\n.--contrast-100 {\n    border-radius: functions.pxToRem(5) 0 0 functions.pxToRem(5);\n}\n.--contrast-1700 {\n    border-radius: 0 functions.pxToRem(5) functions.pxToRem(5) 0;\n}\n.--contrast-900 {\n    &:before {\n        content: '';\n\n        display: block;\n        position: absolute;\n        right: 0;\n        bottom: -12px;\n        left: 0;\n        width: 4px;\n        height: 4px;\n        margin: auto;\n\n        background-color: rgba(var(--contrast-900), 0.5);\n        border-radius: 50%;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/examples","filePath":"./src/examples/example-controls.tsx","fileName":"example-controls.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/examples/usage","tag":"limel-example-controls","overview":"This component is only used in our documentations\nto provide a container for settings of examples.\n\nFor example, it visually groups and organizes checkboxes\nused to show different states of components,\nsuch as Disabled, Required, Readonly, etc…\n\n:::warning\nFor internal use only!\n:::","usage":{},"docs":"This component is only used in our documentations\nto provide a container for settings of examples.\n\nFor example, it visually groups and organizes checkboxes\nused to show different states of components,\nsuch as Disabled, Required, Readonly, etc…\n\n:::warning\nFor internal use only!\n:::","docsTags":[],"encapsulation":"shadow","dependents":["limel-example-button-composite","limel-example-button-group","limel-example-button-group-composite","limel-example-button-group-icons","limel-example-button-group-mix","limel-example-checkbox","limel-example-chip-set","limel-example-chip-set-choice","limel-example-chip-set-composite","limel-example-chip-set-filter","limel-example-chip-set-filter-badge","limel-example-chip-set-input","limel-example-date-picker-composite","limel-example-dialog-nested-close-events","limel-example-file","limel-example-file-composite","limel-example-form-span-fields","limel-example-icon-button-composite","limel-example-info-tile-loading","limel-example-info-tile-progress","limel-example-input-field-autocomplete","limel-example-input-field-number","limel-example-input-field-showlink","limel-example-input-field-text","limel-example-input-field-text-decluttering-guidelines","limel-example-input-field-textarea","limel-example-menu-composite","limel-example-picker-composite","limel-example-picker-static-actions","limel-example-progress-flow-basic","limel-example-select","limel-example-select-change-options","limel-example-select-multiple","limel-example-select-with-empty-option","limel-example-slider","limel-example-slider-composite","limel-example-slider-multiplier-percentage-colors","limel-example-snackbar","limel-example-spinner","limel-example-spinner-color","limel-example-switch","limel-example-table-selectable-rows"],"dependencies":[],"dependencyGraph":{"limel-example-button-composite":["limel-example-controls"],"limel-example-button-group":["limel-example-controls"],"limel-example-button-group-composite":["limel-example-controls"],"limel-example-button-group-icons":["limel-example-controls"],"limel-example-button-group-mix":["limel-example-controls"],"limel-example-checkbox":["limel-example-controls"],"limel-example-chip-set":["limel-example-controls"],"limel-example-chip-set-choice":["limel-example-controls"],"limel-example-chip-set-composite":["limel-example-controls"],"limel-example-chip-set-filter":["limel-example-controls"],"limel-example-chip-set-filter-badge":["limel-example-controls"],"limel-example-chip-set-input":["limel-example-controls"],"limel-example-date-picker-composite":["limel-example-controls"],"limel-example-dialog-nested-close-events":["limel-example-controls"],"limel-example-file":["limel-example-controls"],"limel-example-file-composite":["limel-example-controls"],"limel-example-form-span-fields":["limel-example-controls"],"limel-example-icon-button-composite":["limel-example-controls"],"limel-example-info-tile-loading":["limel-example-controls"],"limel-example-info-tile-progress":["limel-example-controls"],"limel-example-input-field-autocomplete":["limel-example-controls"],"limel-example-input-field-number":["limel-example-controls"],"limel-example-input-field-showlink":["limel-example-controls"],"limel-example-input-field-text":["limel-example-controls"],"limel-example-input-field-text-decluttering-guidelines":["limel-example-controls"],"limel-example-input-field-textarea":["limel-example-controls"],"limel-example-menu-composite":["limel-example-controls"],"limel-example-picker-composite":["limel-example-controls"],"limel-example-picker-static-actions":["limel-example-controls"],"limel-example-progress-flow-basic":["limel-example-controls"],"limel-example-select":["limel-example-controls"],"limel-example-select-change-options":["limel-example-controls"],"limel-example-select-multiple":["limel-example-controls"],"limel-example-select-with-empty-option":["limel-example-controls"],"limel-example-slider":["limel-example-controls"],"limel-example-slider-composite":["limel-example-controls"],"limel-example-slider-multiplier-percentage-colors":["limel-example-controls"],"limel-example-snackbar":["limel-example-controls"],"limel-example-spinner":["limel-example-controls"],"limel-example-spinner-color":["limel-example-controls"],"limel-example-switch":["limel-example-controls"],"limel-example-table-selectable-rows":["limel-example-controls"]},"props":[],"methods":[],"events":[],"styles":[{"name":"--example-controls-column-layout","annotation":"prop","docs":"Defines how columns take up the available space. By default, it is set to be `auto-fill`, which fills the row with as many columns as it can. But it can also be set it to `auto-fit` stretches the columns to occupy all the available space."},{"name":"--example-controls-max-columns-width","annotation":"prop","docs":"Defines maximum width of columns. Defaults to `6rem`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"example-controls.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * This component is only used in our documentations\n * to provide a container for settings of examples.\n *\n * For example, it visually groups and organizes checkboxes\n * used to show different states of components,\n * such as Disabled, Required, Readonly, etc…\n *\n * :::warning\n * For internal use only!\n * :::\n */\n@Component({\n    tag: 'limel-example-controls',\n    shadow: true,\n    styleUrl: 'example-controls.scss',\n})\nexport class ExampleControls {\n    public render() {\n        return <slot />;\n    }\n}\n"},{"filename":"example-controls.scss","type":"scss","source":"/**\n * @prop --example-controls-max-columns-width: Defines maximum width of columns. Defaults to `6rem`.\n * @prop --example-controls-column-layout: Defines how columns take up the available space. By default, it is set to be `auto-fill`, which fills the row with as many columns as it can. But it can also be set it to `auto-fit` stretches the columns to occupy all the available space.\n */\n\n:host(limel-example-controls) {\n    display: grid;\n    grid-template-columns: repeat(\n        var(--example-controls-column-layout, auto-fill),\n        minmax(var(--example-controls-max-columns-width, 6rem), 1fr)\n    );\n    gap: 0.25rem 1rem;\n    align-items: center;\n\n    margin: 1rem 0 0 0;\n    padding: 0.25rem 0.5rem;\n    border: rgb(var(--contrast-500)) 1px dashed;\n    border-radius: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/custom-component-form.tsx","fileName":"custom-component-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-custom-component-form","overview":"Custom form component\n\nYou can specify a custom component to use for any property in your form. This\nis done under the `lime` key in the schema, following the\n[LimeSchemaOptions](#/type/LimeSchemaOptions/) specification, for example:\n\n```ts\nconst schema = {\n    type: 'object',\n    properties: {\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'my-useful-hero-picker',\n                },\n            },\n        },\n    },\n};\n```\n\nWhile you can, in principle, use any component in a form, your custom form\ncomponents should implement the [FormComponent](#/type/FormComponent/)\ninterface.","usage":{},"docs":"Custom form component\n\nYou can specify a custom component to use for any property in your form. This\nis done under the `lime` key in the schema, following the\n[LimeSchemaOptions](#/type/LimeSchemaOptions/) specification, for example:\n\n```ts\nconst schema = {\n    type: 'object',\n    properties: {\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'my-useful-hero-picker',\n                },\n            },\n        },\n    },\n};\n```\n\nWhile you can, in principle, use any component in a form, your custom form\ncomponents should implement the [FormComponent](#/type/FormComponent/)\ninterface.","docsTags":[{"name":"link","text":"custom-component-schema.ts"},{"name":"link","text":"custom-component-picker.tsx"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-custom-component-form":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"custom-component-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { schema } from './custom-component-schema';\n\n/**\n * Custom form component\n *\n * You can specify a custom component to use for any property in your form. This\n * is done under the `lime` key in the schema, following the\n * [LimeSchemaOptions](#/type/LimeSchemaOptions/) specification, for example:\n *\n * ```ts\n * const schema = {\n *     type: 'object',\n *     properties: {\n *         hero: {\n *             type: 'integer',\n *             title: 'Hero',\n *             lime: {\n *                 component: {\n *                     name: 'my-useful-hero-picker',\n *                 },\n *             },\n *         },\n *     },\n * };\n * ```\n *\n * While you can, in principle, use any component in a form, your custom form\n * components should implement the [FormComponent](#/type/FormComponent/)\n * interface.\n *\n * @link custom-component-schema.ts\n * @link custom-component-picker.tsx\n */\n@Component({\n    tag: 'limel-example-custom-component-form',\n    shadow: true,\n})\nexport class CustomComponentFormExample {\n    @State()\n    private formData: object = {\n        name: 'My superhero deal',\n        value: 1000000,\n        hero: 1001,\n    };\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"custom-component-schema.ts","type":"ts","source":"export const schema = {\n    type: 'object',\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Name',\n            description: 'Name of the superhero deal',\n        },\n        value: {\n            type: 'integer',\n            title: 'Value',\n            description: 'Amount to pay to hero',\n        },\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'limel-example-custom-picker',\n                    props: {\n                        helperText: 'Pick your superhero!',\n                    },\n                },\n            },\n        },\n    },\n};\n"},{"filename":"custom-component-picker.tsx","type":"tsx","source":"import { Component, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport { FormComponent, LimelPickerCustomEvent } from '@limetech/lime-elements';\nimport { ListItem } from '../../list/list-item.types';\n\n@Component({\n    tag: 'limel-example-custom-picker',\n    shadow: true,\n})\nexport class CustomPickerExample implements FormComponent<number> {\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public value: number;\n\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public required: boolean;\n\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean;\n\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean;\n\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public helperText?: string;\n\n    /**\n     * Emitted when the value is changed\n     */\n    @Event()\n    public change: EventEmitter<number>;\n\n    private heroes: Array<ListItem<number>> = [\n        {\n            text: 'Superman',\n            value: 1001,\n            icon: 'superman',\n            iconColor: 'var(--lime-deep-red)',\n        },\n        {\n            text: 'Squirrel Girl',\n            value: 1002,\n            icon: 'squirrel',\n            iconColor: 'var(--lime-orange)',\n        },\n        {\n            text: 'Captain America',\n            value: 1003,\n            icon: 'captain_america',\n            iconColor: 'var(--lime-blue)',\n        },\n        {\n            text: 'Black Widow',\n            value: 1004,\n            icon: 'spider',\n            iconColor: 'var(--lime-dark-grey)',\n        },\n    ];\n\n    private handleChange = (\n        event: LimelPickerCustomEvent<ListItem<number>>\n    ) => {\n        event.stopPropagation();\n        this.change.emit(event.detail?.value);\n    };\n\n    private search = async (query: string): Promise<ListItem[]> => {\n        return this.heroes.filter((hero) => {\n            return hero.text.toLowerCase().includes(query.toLowerCase());\n        });\n    };\n\n    public render() {\n        const value = this.heroes.find((hero) => hero.value === this.value);\n\n        return (\n            <limel-picker\n                label={this.label}\n                value={value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                onChange={this.handleChange}\n                searcher={this.search}\n                helperText={this.helperText}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/custom-error-message-form.tsx","fileName":"custom-error-message-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-custom-error-message","overview":"Form with custom error message","usage":{},"docs":"Form with custom error message","docsTags":[{"name":"link","text":"custom-error-message-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-button"],"dependencyGraph":{"limel-example-custom-error-message":["limel-form","limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"custom-error-message-form.tsx","type":"tsx","source":"import { ValidationStatus, FormError } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { schema } from './custom-error-message-schema';\n\n/**\n * Form with custom error message\n *\n * @link custom-error-message-schema.ts\n */\n@Component({\n    tag: 'limel-example-custom-error-message',\n    shadow: true,\n})\nexport class CustomErrorMessageFormExample {\n    @State()\n    private formData: object = {\n        personalIdentityNumber: '',\n    };\n\n    @State()\n    private valid = true;\n\n    public render() {\n        return [\n            <limel-form\n                onValidate={this.handleFormValidate}\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n                transformErrors={this.transformErrors}\n            />,\n            <br />,\n            <limel-button\n                label=\"Submit\"\n                primary={true}\n                disabled={!this.valid}\n                onClick={this.handleSubmit}\n            />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n\n    private handleSubmit = () => {\n        const json = JSON.stringify(this.formData, null, '    ');\n        alert(`Sending information to villains...\\n\\n${json}`);\n    };\n\n    private handleFormValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.valid = event.detail.valid;\n    };\n\n    private transformErrors = (errors: FormError[]): FormError[] => {\n        return errors.map((error) => {\n            if (\n                error.name === 'pattern' &&\n                error.property === '.personalIdentityNumber'\n            ) {\n                error.message = 'Invalid format, use YYYYMMDD-NNNN';\n            }\n\n            return error;\n        });\n    };\n}\n"},{"filename":"custom-error-message-schema.ts","type":"ts","source":"export const schema = {\n    title: 'Personal identity number form',\n    description: 'Please enter your personal identity number',\n    type: 'object',\n    required: ['personalIdentityNumber'],\n    properties: {\n        personalIdentityNumber: {\n            type: 'string',\n            title: 'Personal identity number',\n            description: 'Enter your personal identity number',\n            pattern: '[0-9]{8}[-][0-9]{4}',\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/custom-component-picker.tsx","fileName":"custom-component-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-custom-picker","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker"],"dependencyGraph":{"limel-example-custom-picker":["limel-picker"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Whether or not the current property is disabled","docsTags":[{"name":"inheritdoc"}],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"The helper text for the current property","docsTags":[{"name":"inheritdoc"}],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The label of the current property","docsTags":[{"name":"inheritdoc"}],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Whether or not the current property is readonly","docsTags":[{"name":"inheritdoc"}],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Whether or not the current property is required","docsTags":[{"name":"inheritdoc"}],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"number","mutable":false,"attr":"value","reflectToAttr":true,"docs":"The value of the current property","docsTags":[{"name":"inheritdoc"}],"values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"number","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the value is changed","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"custom-component-picker.tsx","type":"tsx","source":"import { Component, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport { FormComponent, LimelPickerCustomEvent } from '@limetech/lime-elements';\nimport { ListItem } from '../../list/list-item.types';\n\n@Component({\n    tag: 'limel-example-custom-picker',\n    shadow: true,\n})\nexport class CustomPickerExample implements FormComponent<number> {\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public value: number;\n\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public required: boolean;\n\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean;\n\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean;\n\n    /**\n     * @inheritdoc\n     */\n    @Prop({ reflect: true })\n    public helperText?: string;\n\n    /**\n     * Emitted when the value is changed\n     */\n    @Event()\n    public change: EventEmitter<number>;\n\n    private heroes: Array<ListItem<number>> = [\n        {\n            text: 'Superman',\n            value: 1001,\n            icon: 'superman',\n            iconColor: 'var(--lime-deep-red)',\n        },\n        {\n            text: 'Squirrel Girl',\n            value: 1002,\n            icon: 'squirrel',\n            iconColor: 'var(--lime-orange)',\n        },\n        {\n            text: 'Captain America',\n            value: 1003,\n            icon: 'captain_america',\n            iconColor: 'var(--lime-blue)',\n        },\n        {\n            text: 'Black Widow',\n            value: 1004,\n            icon: 'spider',\n            iconColor: 'var(--lime-dark-grey)',\n        },\n    ];\n\n    private handleChange = (\n        event: LimelPickerCustomEvent<ListItem<number>>\n    ) => {\n        event.stopPropagation();\n        this.change.emit(event.detail?.value);\n    };\n\n    private search = async (query: string): Promise<ListItem[]> => {\n        return this.heroes.filter((hero) => {\n            return hero.text.toLowerCase().includes(query.toLowerCase());\n        });\n    };\n\n    public render() {\n        const value = this.heroes.find((hero) => hero.value === this.value);\n\n        return (\n            <limel-picker\n                label={this.label}\n                value={value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                onChange={this.handleChange}\n                searcher={this.search}\n                helperText={this.helperText}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/dark-light-mode.tsx","fileName":"dark-light-mode.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-dark-light-mode","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dark-light-mode.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-dark-light-mode',\n    shadow: true,\n    styleUrl: 'dark-light-mode.scss',\n})\nexport class DarkLightModeExample {\n    public render() {\n        return (\n            <div class=\"app-layout\">\n                <nav class=\"nav\">\n                    <a class=\"nav__logo\">\n                        <svg\n                            viewBox=\"0 0 227 220\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill-rule=\"evenodd\"\n                            clip-rule=\"evenodd\"\n                            stroke-linejoin=\"round\"\n                            stroke-miterlimit=\"2\"\n                        >\n                            <path\n                                d=\"M222.7 75.7c-15.2-52.5-58.3-71.1-82.2-74.6C120.4-2 68.2-2.3 34.7 53.3c-26.4 43.8-7.3 79.5-7.1 108.9-.2 13.4-2.2 29.5-20.8 42-18.5 12.4 6 13.4 8.5 13.5 15.1 1 39 3.2 66.4 1.9 23.7-1.1 65-.7 102-31.1 18.5-15.2 54.1-54.2 39-112.8z\"\n                                fill=\"rgb(var(--lime-brand-color-flexible-turquoise))\"\n                            />\n                            <path\n                                d=\"M67 118.9c1.9 1.9 4.4 2.9 7.5 2.9 4.8 0 7.9-2.4 9.5-7.2l.1-.4 10.4 2.7-.1.5c-1.1 4.5-3.5 8.2-7.2 10.9-3.7 2.7-8 4.1-12.7 4.1-5.9 0-11-2-15.1-5.9-4.1-3.9-6.2-9-6.2-15.2 0-6.1 2.1-11.3 6.2-15.2 4.1-3.9 9.2-5.9 15.1-5.9 4.7 0 8.9 1.4 12.5 4 3.6 2.7 6.1 6.3 7.5 10.7l.1.5-10.9 3.1-.1-.5c-1.2-4.9-4.2-7.3-9.1-7.3-3.1 0-5.6 1-7.5 3-1.9 2-2.9 4.6-2.9 7.8.1 2.8 1 5.4 2.9 7.4zm41.6 12.1H97.3V91.1h11.3v6.1c3.5-4.4 8-6.6 13.4-6.6 1.3 0 2.2.1 2.9.3l.4.1-.6 10.8H122c-9 0-13.4 5.3-13.4 16.2v13zm30.6 0h-11.3V91.1h11.3v2.6c2.9-2.5 6.6-3.7 11.1-3.7 5.5 0 9.8 2 12.8 6.1 3.5-4 8.2-6.1 14.1-6.1 4.3 0 8 1.5 11 4.5s4.6 7 4.6 11.7V131h-11.2v-22.7c0-2.4-.7-4.3-2-5.8-1.4-1.4-3-2.1-5.1-2.1-2.7 0-4.7.9-6.2 2.8s-2.3 4.8-2.3 8.6V131h-11.3v-22.7c0-2.4-.7-4.3-2-5.8-1.4-1.4-3-2.1-5.1-2.1-2.7 0-4.7.9-6.2 2.8s-2.2 4.8-2.2 8.6V131z\"\n                                fill=\"rgb(var(--color-white))\"\n                            />\n                        </svg>\n                    </a>\n                    <a class=\"nav_item\">\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 24 24\"\n                        >\n                            <path\n                                d=\"M20.56 18.44l-4.67-4.67a7 7 0 10-2.12 2.12l4.67 4.67a1.5 1.5 0 002.12 0 1.49 1.49 0 000-2.12zM5 10a5 5 0 115 5 5 5 0 01-5-5z\"\n                                fill=\"rgb(var(--contrast-1000))\"\n                            />\n                        </svg>\n                    </a>\n                    <a class=\"nav_item\">\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 24 24\"\n                        >\n                            <path\n                                d=\"M16.855 20.966c-.224 0-.443-.05-.646-.146a.831.831 0 01-.104-.051l-4.107-2.343-4.107 2.344a1.524 1.524 0 01-1.627-.09 1.505 1.505 0 01-.586-1.509l.957-4.642-1.602-1.457-1.895-1.725a.756.756 0 01-.078-.082 1.503 1.503 0 01-.34-1.492c.173-.524.62-.912 1.16-1.009a.87.87 0 01.102-.018l4.701-.521 1.946-4.31a.692.692 0 01.06-.11 1.5 1.5 0 011.309-.771c.543 0 1.044.298 1.309.77.021.036.041.073.06.112l1.948 4.312 4.701.521a1.508 1.508 0 011.262 1.029 1.504 1.504 0 01-.418 1.572l-3.498 3.184.957 4.632a1.514 1.514 0 01-.59 1.519 1.488 1.488 0 01-.874.281zm-8.149-6.564c-.039.182-.466 2.246-.845 4.082l3.643-2.077a1 1 0 01.99 0l3.643 2.075-.849-4.104a.998.998 0 01.308-.942l3.1-2.822-4.168-.461a1 1 0 01-.801-.584l-1.728-3.821-1.726 3.821c-.146.322-.45.543-.801.584l-4.168.461 3.1 2.822a.995.995 0 01.302.966z\"\n                                fill=\"rgb(var(--contrast-1000))\"\n                            />\n                        </svg>\n                    </a>\n                </nav>\n                <div class=\"workspace\">\n                    <header class=\"header\">Header</header>\n                    <div class=\"content\">\n                        <div class=\"card shadow-card\">\n                            <div class=\"card__header\">Card</div>\n                            <div class=\"card__body\">\n                                <p>\n                                    Switch between dark mode and light mode on\n                                    your{' '}\n                                    <a href=\"https://support.apple.com/en-us/HT208976\">\n                                        Mac\n                                    </a>{' '}\n                                    or{' '}\n                                    <a href=\"https://blogs.windows.com/windowsexperience/2016/08/08/windows-10-tip-personalize-your-pc-by-enabling-the-dark-theme/\">\n                                        Windows\n                                    </a>{' '}\n                                    to see how colors change in this example.\n                                </p>\n                                <hr />\n                                <button\n                                    type=\"button\"\n                                    name=\"success\"\n                                    class=\"button success\"\n                                >\n                                    Success\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    name=\"danger\"\n                                    class=\"button danger\"\n                                >\n                                    Danger\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    name=\"warning\"\n                                    class=\"button warning\"\n                                >\n                                    Warning\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    name=\"continue\"\n                                    class=\"button accented\"\n                                >\n                                    Accented\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n"},{"filename":"dark-light-mode.scss","type":"scss","source":"@use '../../../style/functions';\n@use '../../../style/mixins';\n@use '../../../style/shadows';\n@use './shared-styles';\n\n* {\n    box-sizing: border-box;\n}\n\na {\n    text-decoration: none;\n    color: rgb(var(--color-blue-default));\n}\np {\n    color: rgb(var(--contrast-1400));\n    margin-top: 0;\n}\nhr {\n    border-style: solid;\n    border-width: 1px 0 0 0;\n    border-color: rgb(var(--contrast-400));\n    margin-bottom: functions.pxToRem(12);\n}\n\n.app-layout {\n    margin: functions.pxToRem(20) 0;\n    display: grid;\n    width: 100%;\n    min-height: functions.pxToRem(400);\n    overflow: hidden;\n    border: 1px solid rgba(var(--color-black), 0.07);\n    border-radius: functions.pxToRem(5);\n\n    grid-auto-flow: column;\n    grid-template-columns: functions.pxToRem(80) auto;\n\n    .nav {\n        background-color: rgb(var(--contrast-200));\n        box-shadow: var(--shadow-depth-8);\n        z-index: 1;\n    }\n\n    .nav__logo {\n        display: block;\n        width: calc(100% - #{functions.pxToRem(32)});\n        margin: functions.pxToRem(16) auto;\n        cursor: pointer;\n    }\n\n    .nav_item {\n        cursor: pointer;\n        display: block;\n        width: functions.pxToRem(40);\n        height: functions.pxToRem(40);\n        margin: functions.pxToRem(20) auto;\n    }\n\n    .workspace {\n        background-color: rgb(var(--contrast-300));\n    }\n\n    .header {\n        background-color: rgb(var(--contrast-200));\n        color: rgb(var(--contrast-1200));\n        height: functions.pxToRem(44);\n        line-height: functions.pxToRem(44);\n        padding-left: functions.pxToRem(16);\n    }\n}\n\n.card {\n    display: grid;\n    width: 60%;\n    height: functions.pxToRem(200);\n    margin: functions.pxToRem(100) auto;\n\n    background-color: rgb(var(--contrast-200));\n    border-radius: functions.pxToRem(7);\n    box-shadow: var(--shadow-depth-16);\n\n    &__header {\n        font-size: functions.pxToRem(16);\n        line-height: functions.pxToRem(40);\n\n        width: 100%;\n        height: functions.pxToRem(40);\n        padding: 0 functions.pxToRem(12);\n\n        color: rgb(var(--contrast-1100));\n        background-color: rgb(var(--contrast-300));\n        border-radius: functions.pxToRem(7) functions.pxToRem(7) 0 0;\n    }\n\n    &__body {\n        padding: functions.pxToRem(4) functions.pxToRem(16)\n            functions.pxToRem(12) functions.pxToRem(16);\n    }\n}\n\n@media (prefers-color-scheme: dark) {\n    .card {\n        // Note how in dark mode, we do specify a \"lighter\" background color here.\n        // This is because the card has an elevated effect, and human brain normally expect deeper objects to be darker and visa versa.\n        // This unconsciously helps users' perception of the interface.\n        background-color: rgb(var(--contrast-400));\n    }\n}\n\n.button {\n    @include mixins.is-elevated-clickable();\n    margin-right: functions.pxToRem(8);\n    line-height: functions.pxToRem(32);\n\n    height: functions.pxToRem(32);\n    padding: 0 functions.pxToRem(8);\n\n    border: none;\n    border-radius: functions.pxToRem(4);\n\n    cursor: pointer;\n\n    &:focus {\n        outline: none;\n    }\n\n    &.success {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--color-green-default));\n        &:hover {\n            background-color: rgb(var(--color-green-light));\n        }\n    }\n    &.warning {\n        color: rgb(var(--color-black));\n        background-color: rgb(var(--color-amber-default));\n        &:hover {\n            background-color: rgb(var(--color-amber-light));\n        }\n    }\n    &.danger {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--color-red-default));\n        &:hover {\n            background-color: rgb(var(--color-red-light));\n        }\n    }\n    &.accented {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--color-blue-default));\n        &:hover {\n            background-color: rgb(var(--color-blue-light));\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-composite.tsx","fileName":"date-picker-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-date-picker-composite":["limel-date-picker","limel-example-event-printer","limel-example-controls","limel-form"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[{"name":"schema","type":"any","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-date-picker-composite',\n    shadow: true,\n})\nexport class DatePickerCompositeExample {\n    @Prop()\n    public schema: any;\n\n    @State()\n    private props: any = {\n        helperText: 'Please add a date',\n        label: 'Date',\n        language: 'en',\n        type: 'date',\n        value: new Date(),\n    };\n\n    private key = 0;\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        const properties = { ...this.schema.properties };\n        delete properties.formatter;\n\n        this.schema = {\n            ...this.schema,\n            properties: properties,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-date-picker\n                key={`updateOnFormChange-${this.key}`}\n                {...this.props}\n                onChange={this.handlePickerChange}\n            />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleFormChange = (event: CustomEvent) => {\n        const value = this.props.value;\n        this.props = { ...event.detail, value: value };\n        this.key += 1;\n    };\n\n    private handlePickerChange = (event: CustomEvent<Date>) => {\n        this.handleEvent(event);\n        this.props = { ...this.props, value: event.detail };\n    };\n\n    private handleEvent = (event: Event) => {\n        this.eventPrinter.writeEvent(event);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-custom-formatter.tsx","fileName":"date-picker-custom-formatter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-custom-formatter","overview":"Custom date formatter\n\nYou can provide a function to customize the date formatting.","usage":{},"docs":"Custom date formatter\n\nYou can provide a function to customize the date formatting.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-custom-formatter":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-custom-formatter.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Custom date formatter\n *\n * You can provide a function to customize the date formatting.\n */\n@Component({\n    tag: 'limel-example-date-picker-custom-formatter',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"date\"\n                    label=\"date\"\n                    value={this.value}\n                    formatter={this.myCustomFormatter}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private myCustomFormatter = (value: Date) => {\n        return Intl.DateTimeFormat('en-GB', {\n            dateStyle: 'medium',\n            timeStyle: 'short',\n        }).format(value);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-date.tsx","fileName":"date-picker-date.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-date","overview":"date","usage":{},"docs":"date","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-date":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-date.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * date\n */\n@Component({\n    tag: 'limel-example-date-picker-date',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"date\"\n                    label=\"date\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-datetime.tsx","fileName":"date-picker-datetime.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-datetime","overview":"datetime","usage":{},"docs":"datetime","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-datetime":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-datetime.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * datetime\n */\n@Component({\n    tag: 'limel-example-date-picker-datetime',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"datetime\"\n                    label=\"datetime\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-formatted.tsx","fileName":"date-picker-formatted.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-formatted","overview":"With defined localization","usage":{},"docs":"With defined localization","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-formatted":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-formatted.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With defined localization\n */\n@Component({\n    tag: 'limel-example-date-picker-formatted',\n    shadow: true,\n})\nexport class DatePickerFormattedExample {\n    @State()\n    private valueNo = new Date('2018-11-04');\n\n    @State()\n    private valueFi = new Date('2018-11-04');\n\n    public render() {\n        return [\n            <limel-date-picker\n                language=\"no\"\n                type=\"datetime\"\n                label=\"Localized date\"\n                value={this.valueNo}\n                onChange={this.handleChangeNo}\n            />,\n            <limel-example-value value={this.valueNo} />,\n            <limel-date-picker\n                language=\"fi\"\n                format=\"YYYY-MM-DD\"\n                type=\"datetime\"\n                label=\"Date with custom format\"\n                value={this.valueFi}\n                onChange={this.handleChangeFi}\n            />,\n            <limel-example-value value={this.valueFi} />,\n        ];\n    }\n\n    private handleChangeNo = (event) => {\n        this.valueNo = event.detail;\n    };\n\n    private handleChangeFi = (event) => {\n        this.valueFi = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-month.tsx","fileName":"date-picker-month.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-month","overview":"month","usage":{},"docs":"month","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-month":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-month.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * month\n */\n@Component({\n    tag: 'limel-example-date-picker-month',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"month\"\n                    label=\"month\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-programmatic-change.tsx","fileName":"date-picker-programmatic-change.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-programmatic-change","overview":"Changing the input programmatically","usage":{},"docs":"Changing the input programmatically","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-programmatic-change":["limel-button","limel-date-picker","limel-example-value"],"limel-button":["limel-spinner","limel-icon"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-programmatic-change.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport moment from 'moment/moment';\n\n/**\n * Changing the input programmatically\n */\n@Component({\n    tag: 'limel-example-date-picker-programmatic-change',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return [\n            <limel-button\n                onClick={this.addOneHour}\n                label=\"Add one hour\"\n                style={{ 'margin-bottom': '1rem' }}\n            />,\n            <limel-date-picker\n                type=\"datetime\"\n                label=\"datetime\"\n                value={this.value}\n                onChange={this.handleChange}\n            />,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private addOneHour = () => {\n        this.value = moment(this.value).add(1, 'hour').toDate();\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-quarter.tsx","fileName":"date-picker-quarter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-quarter","overview":"quarter","usage":{},"docs":"quarter","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-quarter":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-quarter.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * quarter\n */\n@Component({\n    tag: 'limel-example-date-picker-quarter',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"quarter\"\n                    label=\"quarter\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-time.tsx","fileName":"date-picker-time.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-time","overview":"time","usage":{},"docs":"time","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-time":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-time.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * time\n */\n@Component({\n    tag: 'limel-example-date-picker-time',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"time\"\n                    label=\"time\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-week.tsx","fileName":"date-picker-week.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-week","overview":"week","usage":{},"docs":"week","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-week":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-week.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * week\n */\n@Component({\n    tag: 'limel-example-date-picker-week',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"week\"\n                    label=\"week\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-year.tsx","fileName":"date-picker-year.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-year","overview":"year","usage":{},"docs":"year","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-year":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-year.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * year\n */\n@Component({\n    tag: 'limel-example-date-picker-year',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"year\"\n                    label=\"year\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog.tsx","fileName":"dialog.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog"],"dependencyGraph":{"limel-example-dialog":["limel-button","limel-dialog"],"limel-button":["limel-spinner","limel-icon"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-dialog',\n    shadow: true,\n})\nexport class DialogExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog open={this.isOpen} onClose={this.closeDialog}>\n                <p>This is a simple alert-dialog.</p>\n                <limel-button\n                    label=\"Ok\"\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-action-buttons.tsx","fileName":"dialog-action-buttons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-action-buttons","overview":"Example with three action buttons\n\nThis example shows how more than two buttons can be positioned in a dialog's\nfooter. Pay attention to how they are labeled & styled, and how you can\nenable important actions conditionally.\n\n:::note\nWhen it comes to details such as placement of action buttons, choice of\nlabels, and adding meaningful graphical details, it's important to follow\na few design conventions which are explained in\n[this guide](#/DesignGuidelines/action-buttons.md/).","usage":{},"docs":"Example with three action buttons\n\nThis example shows how more than two buttons can be positioned in a dialog's\nfooter. Pay attention to how they are labeled & styled, and how you can\nenable important actions conditionally.\n\n:::note\nWhen it comes to details such as placement of action buttons, choice of\nlabels, and adding meaningful graphical details, it's important to follow\na few design conventions which are explained in\n[this guide](#/DesignGuidelines/action-buttons.md/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-checkbox"],"dependencyGraph":{"limel-example-dialog-action-buttons":["limel-button","limel-dialog","limel-checkbox"],"limel-button":["limel-spinner","limel-icon"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-action-buttons.tsx","type":"tsx","source":"import { DialogHeading } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Example with three action buttons\n *\n * This example shows how more than two buttons can be positioned in a dialog's\n * footer. Pay attention to how they are labeled & styled, and how you can\n * enable important actions conditionally.\n *\n * :::note\n * When it comes to details such as placement of action buttons, choice of\n * labels, and adding meaningful graphical details, it's important to follow\n * a few design conventions which are explained in\n * [this guide](#/DesignGuidelines/action-buttons.md/).\n */\n@Component({\n    tag: 'limel-example-dialog-action-buttons',\n    shadow: true,\n    styleUrl: 'dialog-action-buttons.scss',\n})\nexport class DialogActionButtonsExample {\n    @State()\n    private checked = false;\n\n    @State()\n    private isOpen = false;\n\n    public render() {\n        const heading: DialogHeading = {\n            title: 'Whoa…! Be careful.',\n            subtitle: 'Wanna mass-update 2345 items?',\n            icon: 'brake_warning',\n        };\n\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                heading={heading}\n                open={this.isOpen}\n                onClose={this.closeDialog}\n            >\n                <div class=\"dialog-content\">\n                    <p>\n                        You are about to update 2345 items simultaneously. This\n                        will irreversibly change the affected values in the\n                        database, for all of these items!\n                    </p>\n                    <p>Are you sure you want to update them all?</p>\n                    <limel-checkbox\n                        label=\"It's OK. I'm aware of the consequences of this action.\"\n                        id=\"confirmation-checkbox\"\n                        required={true}\n                        onChange={this.confirmed}\n                        checked={this.checked}\n                    />\n                </div>\n                <limel-button\n                    label=\"Back to editing\"\n                    class=\"button back primary--neutral\"\n                    icon=\"left_arrow\"\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n                <limel-button\n                    label=\"Discard changes\"\n                    class=\"button discard primary--caution\"\n                    icon=\"cancel\"\n                    primary={true}\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n                <limel-button\n                    label=\"Update all\"\n                    class=\"button update\"\n                    icon=\"ok\"\n                    primary={true}\n                    onClick={this.displayFeedback}\n                    disabled={!this.checked}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private confirmed = (event: CustomEvent<boolean>) => {\n        this.checked = event.detail;\n    };\n\n    private displayFeedback = () => {\n        alert(\n            '2345 items are being updated in the background. This may take a few seconds…'\n        );\n        this.closeDialog();\n    };\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"},{"filename":"dialog-action-buttons.scss","type":"scss","source":":host {\n    --dialog-heading-icon-background-color: rgb(var(--color-red-default));\n    --dialog-heading-icon-color: rgb(var(--color-yellow-lighter));\n    --dialog-width: 40rem;\n}\n\n.button {\n    &.back {\n        // these styles will align the targeted button to the left.\n        margin-right: auto;\n        margin-top: 0;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-glaucous-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n\n@media screen and (max-width: 760px) {\n    .button {\n        &.back {\n            // these styles will add a gap between \"back button\" and \"discard\" in a mobile view\n            // and put all buttons in a column.\n            margin-top: 1rem;\n            margin-right: 0;\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-closing-actions.tsx","fileName":"dialog-closing-actions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-closing-actions","overview":"Custom closing actions\n\nAction buttons in dialogs can be used to add a clear visual indication for\nthe sighted users to realize that the dialog can be closed by pressing\na button as well.\nThis may sometimes be considered an unnecessary usage of action buttons for\nsighted users. Because majority of them users know that clicking or tapping\noutside the dialog closes it.\n\nSuch buttons are usually labeled ***OK***, ***Dismiss*** or ***Close***.\n\n:::tip\nWhen to use action buttons for simple \"close\" actions?\n- In fullscreen dialogs where clicking outside to close is hard.\n- When big dialogs are opened on phones, which make tapping outside hard for users.\n- When designing with accessibility in mind, and for those users who\nuse screen readers to navigate the user interface.\n:::\n\nBut sometimes, depending on the importance of the message which is displayed,\nyou have to choose to display a close button, and disable other means of\ndismissing the dialog.\n\n:::tip\nWhen to use custom closing actions?\n- To make sure that the user really reads and understands the dialog's content.\n- To make sure that the user does not accidentally click outside and close the dialog.\n:::\n\nFor such cases, avoid generic labels like ***OK***, or ***Close*** which unconsciously\nmotivate users to dismiss the message; and instead use more purposeful labels\nsuch as ***I understand***, ***Looks good!***, ***Continue***, and similar;\nlike in the example below.","usage":{},"docs":"Custom closing actions\n\nAction buttons in dialogs can be used to add a clear visual indication for\nthe sighted users to realize that the dialog can be closed by pressing\na button as well.\nThis may sometimes be considered an unnecessary usage of action buttons for\nsighted users. Because majority of them users know that clicking or tapping\noutside the dialog closes it.\n\nSuch buttons are usually labeled ***OK***, ***Dismiss*** or ***Close***.\n\n:::tip\nWhen to use action buttons for simple \"close\" actions?\n- In fullscreen dialogs where clicking outside to close is hard.\n- When big dialogs are opened on phones, which make tapping outside hard for users.\n- When designing with accessibility in mind, and for those users who\nuse screen readers to navigate the user interface.\n:::\n\nBut sometimes, depending on the importance of the message which is displayed,\nyou have to choose to display a close button, and disable other means of\ndismissing the dialog.\n\n:::tip\nWhen to use custom closing actions?\n- To make sure that the user really reads and understands the dialog's content.\n- To make sure that the user does not accidentally click outside and close the dialog.\n:::\n\nFor such cases, avoid generic labels like ***OK***, or ***Close*** which unconsciously\nmotivate users to dismiss the message; and instead use more purposeful labels\nsuch as ***I understand***, ***Looks good!***, ***Continue***, and similar;\nlike in the example below.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog"],"dependencyGraph":{"limel-example-dialog-closing-actions":["limel-button","limel-dialog"],"limel-button":["limel-spinner","limel-icon"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-closing-actions.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Custom closing actions\n *\n * Action buttons in dialogs can be used to add a clear visual indication for\n * the sighted users to realize that the dialog can be closed by pressing\n * a button as well.\n * This may sometimes be considered an unnecessary usage of action buttons for\n * sighted users. Because majority of them users know that clicking or tapping\n * outside the dialog closes it.\n *\n * Such buttons are usually labeled ***OK***, ***Dismiss*** or ***Close***.\n *\n * :::tip\n * When to use action buttons for simple \"close\" actions?\n * - In fullscreen dialogs where clicking outside to close is hard.\n * - When big dialogs are opened on phones, which make tapping outside hard for users.\n * - When designing with accessibility in mind, and for those users who\n * use screen readers to navigate the user interface.\n * :::\n *\n * But sometimes, depending on the importance of the message which is displayed,\n * you have to choose to display a close button, and disable other means of\n * dismissing the dialog.\n *\n * :::tip\n * When to use custom closing actions?\n * - To make sure that the user really reads and understands the dialog's content.\n * - To make sure that the user does not accidentally click outside and close the dialog.\n * :::\n *\n * For such cases, avoid generic labels like ***OK***, or ***Close*** which unconsciously\n * motivate users to dismiss the message; and instead use more purposeful labels\n * such as ***I understand***, ***Looks good!***, ***Continue***, and similar;\n * like in the example below.\n */\n\n@Component({\n    tag: 'limel-example-dialog-closing-actions',\n    shadow: true,\n})\nexport class DialogClosingActionsExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                open={this.isOpen}\n                closingActions={{ escapeKey: false, scrimClick: false }}\n                onClose={this.closeDialog}\n            >\n                <p>\n                    This dialog doesn't close by clicking the scrim or pressing\n                    the escape key. Only the button triggers a close event.\n                </p>\n                <limel-button\n                    label=\"I understand\"\n                    onClick={this.handleConfirmClick}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private handleConfirmClick = () => {\n        this.isOpen = false;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-form.tsx","fileName":"dialog-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-form","overview":"Dialog with form and header","usage":{},"docs":"Dialog with form and header","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-input-field","limel-slider"],"dependencyGraph":{"limel-example-dialog-form":["limel-button","limel-dialog","limel-input-field","limel-slider"],"limel-button":["limel-spinner","limel-icon"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\nconst MIN_NAME_LENGTH = 5;\nconst MIN_AGE = 20;\nconst MAX_AGE = 50;\n\n/**\n * Dialog with form and header\n */\n@Component({\n    tag: 'limel-example-dialog-form',\n    shadow: true,\n})\nexport class DialogFormExample {\n    @State()\n    private isOpen = false;\n\n    @State()\n    private name = '';\n\n    @State()\n    private age: string;\n\n    @State()\n    private percentage = 45;\n\n    @State()\n    private isConfirmationOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                heading=\"Registration\"\n                open={this.isOpen}\n                onClose={this.closeDialog}\n                onClosing={this.onClosing}\n            >\n                <form>\n                    <p>\n                        <limel-input-field\n                            label=\"Name\"\n                            value={this.name}\n                            required={true}\n                            invalid={!this.nameValid()}\n                            onChange={this.nameOnChange}\n                        />\n                    </p>\n                    <p>\n                        <limel-input-field\n                            label=\"Age\"\n                            value={this.age}\n                            required={true}\n                            invalid={!this.ageValid()}\n                            onChange={this.ageOnChange}\n                            type=\"number\"\n                        />\n                    </p>\n                    <p>\n                        <limel-slider unit=\"%\" value={this.percentage} />\n                    </p>\n                </form>\n                <limel-button\n                    label=\"Cancel\"\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n                <limel-button\n                    primary={true}\n                    label=\"Save\"\n                    disabled={!this.nameValid() || !this.ageValid()}\n                    onClick={this.submitForm}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n            <limel-dialog\n                open={this.isConfirmationOpen}\n                onClose={this.closeConfirmation}\n            >\n                <p>Are you sure you want to close this? </p>\n                <limel-button\n                    label=\"No\"\n                    onClick={this.onConfirmNegative}\n                    slot=\"button\"\n                />\n                <limel-button\n                    label=\"Yes\"\n                    onClick={this.onConfirmPositive}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private nameValid() {\n        return this.name.length >= MIN_NAME_LENGTH;\n    }\n\n    private ageValid() {\n        return +this.age > MIN_AGE && +this.age < MAX_AGE;\n    }\n\n    private submitForm = () => {\n        alert(`${this.name} is ${this.age} years old`);\n        this.closeDialog();\n    };\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n\n    private onClosing = () => {\n        console.log('dialog is closing now!');\n        this.isConfirmationOpen = true;\n    };\n\n    private nameOnChange = (event) => {\n        this.name = event.detail;\n    };\n\n    private ageOnChange = (event) => {\n        this.age = event.detail;\n    };\n\n    private closeConfirmation = () => {\n        this.isConfirmationOpen = false;\n    };\n\n    private onConfirmPositive = () => {\n        this.isConfirmationOpen = false;\n        this.isOpen = false;\n    };\n\n    private onConfirmNegative = () => {\n        this.isOpen = true;\n        this.isConfirmationOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-fullscreen.tsx","fileName":"dialog-fullscreen.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-fullscreen","overview":"Fullscreen","usage":{},"docs":"Fullscreen","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog"],"dependencyGraph":{"limel-example-dialog-fullscreen":["limel-button","limel-dialog"],"limel-button":["limel-spinner","limel-icon"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-fullscreen.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Fullscreen\n */\n@Component({\n    tag: 'limel-example-dialog-fullscreen',\n    shadow: true,\n})\nexport class DialogSizeExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                open={this.isOpen}\n                fullscreen={true}\n                onClose={this.closeDialog}\n            >\n                <p>This dialog is fullscreen</p>\n                <limel-button\n                    label=\"Ok\"\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-heading.tsx","fileName":"dialog-heading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-heading","overview":"Dialog with heading\n\nIn this example you can also see how available style properties can be used.","usage":{},"docs":"Dialog with heading\n\nIn this example you can also see how available style properties can be used.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-input-field","limel-select"],"dependencyGraph":{"limel-example-dialog-heading":["limel-button","limel-dialog","limel-input-field","limel-select"],"limel-button":["limel-spinner","limel-icon"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-heading.tsx","type":"tsx","source":"import {\n    DialogHeading,\n    LimelSelectCustomEvent,\n    Option,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Dialog with heading\n *\n * In this example you can also see how available style properties can be used.\n */\n@Component({\n    tag: 'limel-example-dialog-heading',\n    styleUrl: 'dialog-heading.scss',\n    shadow: true,\n})\nexport class DialogHeadingExample {\n    @State()\n    private isOpen = false;\n\n    @State()\n    private title: string = 'Title';\n\n    @State()\n    private subtitle: string = 'Subtitle';\n\n    @State()\n    private supportingText: string;\n\n    @State()\n    private icon: Option;\n\n    private icons: Option[] = [\n        {\n            text: 'Company',\n            value: 'organization',\n        },\n        {\n            text: 'Person',\n            value: 'user_group_man_man',\n        },\n        {\n            text: 'Deal',\n            value: 'money',\n        },\n        {\n            text: 'Todo',\n            value: 'todo_list',\n        },\n    ];\n\n    constructor() {\n        this.icon = this.icons[0];\n    }\n\n    public render() {\n        const heading: DialogHeading = {\n            title: this.title,\n            subtitle: this.subtitle,\n            supportingText: this.supportingText,\n            icon: this.icon.value,\n        };\n        const classNames = {\n            [this.icon.text.toLowerCase()]: true,\n        };\n\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                open={this.isOpen}\n                onClose={this.closeDialog}\n                heading={heading}\n                class={classNames}\n            >\n                <limel-input-field\n                    required={true}\n                    label=\"Title\"\n                    value={this.title}\n                    onChange={this.handleTitleChange}\n                />\n                <limel-input-field\n                    label=\"Subtitle\"\n                    value={this.subtitle}\n                    onChange={this.handleSubtitleChange}\n                />\n                <limel-input-field\n                    label=\"Supporting text\"\n                    value={this.supportingText}\n                    onChange={this.handleSupportingTextChange}\n                />\n\n                <limel-select\n                    required={true}\n                    options={this.icons}\n                    label=\"Icon\"\n                    value={this.icon}\n                    onChange={this.handleIconChange}\n                />\n\n                <limel-button\n                    label=\"Ok\"\n                    primary={true}\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n\n    private handleTitleChange = (event: CustomEvent<string>) => {\n        this.title = event.detail;\n    };\n\n    private handleSubtitleChange = (event: CustomEvent<string>) => {\n        this.subtitle = event.detail;\n    };\n\n    private handleSupportingTextChange = (event: CustomEvent<string>) => {\n        this.supportingText = event.detail;\n    };\n\n    private handleIconChange = (event: LimelSelectCustomEvent<Option>) => {\n        this.icon = event.detail;\n    };\n}\n"},{"filename":"dialog-heading.scss","type":"scss","source":":host(limel-example-dialog-heading) {\n    --dialog-width: 40rem;\n    --dialog-heading-subtitle-color: rgb(var(--contrast-1200));\n    --dialog-heading-icon-color: rgb(var(--color-white));\n\n    limel-input-field {\n        margin-bottom: 1rem;\n    }\n\n    limel-dialog {\n        &.company {\n            --dialog-heading-icon-background-color: rgb(\n                var(--color-sky-default)\n            );\n        }\n\n        &.person {\n            --dialog-heading-icon-background-color: rgb(\n                var(--color-orange-default)\n            );\n        }\n\n        &.deal {\n            --dialog-heading-icon-background-color: rgb(\n                var(--color-green-default)\n            );\n        }\n\n        &.todo {\n            --header-heading-color: rgb(var(--color-teal-dark));\n            --dialog-heading-supporting-text-color: rgb(var(--color-red-dark));\n            --dialog-heading-icon-color: rgb(var(--color-teal-default));\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-nested-close-events.tsx","fileName":"dialog-nested-close-events.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-nested-close-events","overview":"Nested `close` events\n\nWhen putting other elements that emit `close` events inside a dialog, those\nevents must be caught and stopped inside the dialog. If not, they will bubble\nto the event handler listening for `close` events on the dialog, which will\nclose the dialog too.\n\nThis example has an event handler for the `close` event on the dialog, and\na second event handler for the `close` event on the collapsible-section.\n\nTry it out with the _Stop the inner close-event_ switch disabled, and then\nwith the switch enabled, to see the difference.","usage":{},"docs":"Nested `close` events\n\nWhen putting other elements that emit `close` events inside a dialog, those\nevents must be caught and stopped inside the dialog. If not, they will bubble\nto the event handler listening for `close` events on the dialog, which will\nclose the dialog too.\n\nThis example has an event handler for the `close` event on the dialog, and\na second event handler for the `close` event on the collapsible-section.\n\nTry it out with the _Stop the inner close-event_ switch disabled, and then\nwith the switch enabled, to see the difference.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-collapsible-section","limel-example-controls","limel-switch"],"dependencyGraph":{"limel-example-dialog-nested-close-events":["limel-button","limel-dialog","limel-collapsible-section","limel-example-controls","limel-switch"],"limel-button":["limel-spinner","limel-icon"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-collapsible-section":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-nested-close-events.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Nested `close` events\n *\n * When putting other elements that emit `close` events inside a dialog, those\n * events must be caught and stopped inside the dialog. If not, they will bubble\n * to the event handler listening for `close` events on the dialog, which will\n * close the dialog too.\n *\n * This example has an event handler for the `close` event on the dialog, and\n * a second event handler for the `close` event on the collapsible-section.\n *\n * Try it out with the _Stop the inner close-event_ switch disabled, and then\n * with the switch enabled, to see the difference.\n */\n@Component({\n    tag: 'limel-example-dialog-nested-close-events',\n    shadow: true,\n})\nexport class DialogNestedCloseEventsExample {\n    @State()\n    private isOpen = false;\n\n    @State()\n    private stopInnerCloseEvent = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog open={this.isOpen} onClose={this.handleCloseOnDialog}>\n                <limel-collapsible-section\n                    header=\"Click to open me\"\n                    onClose={this.handleCloseOnCollapsible}\n                >\n                    <p>Then close me again…</p>\n                </limel-collapsible-section>\n                <limel-button\n                    label=\"Ok\"\n                    onClick={this.handleCloseOnDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-switch\n                    label=\"Stop the inner close-event\"\n                    value={this.stopInnerCloseEvent}\n                    onChange={this.handleStopEventChange}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private handleCloseOnDialog = () => {\n        this.isOpen = false;\n    };\n\n    private handleCloseOnCollapsible = (event: CustomEvent) => {\n        if (this.stopInnerCloseEvent) {\n            console.log('Stopping the inner `close` event.');\n            event.stopPropagation();\n        } else {\n            console.log('NOT stopping the inner `close` event!');\n        }\n    };\n\n    private handleStopEventChange = (event: CustomEvent<boolean>) => {\n        this.stopInnerCloseEvent = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-size.tsx","fileName":"dialog-size.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-size","overview":"Custom size","usage":{},"docs":"Custom size","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog"],"dependencyGraph":{"limel-example-dialog-size":["limel-button","limel-dialog"],"limel-button":["limel-spinner","limel-icon"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-size.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Custom size\n */\n@Component({\n    tag: 'limel-example-dialog-size',\n    shadow: true,\n    styleUrl: 'dialog-size.scss',\n})\nexport class DialogSizeExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog open={this.isOpen} onClose={this.closeDialog}>\n                <p>This dialog has a custom size set through CSS variables:</p>\n                <p>\n                    <code>--dialog-width: 25rem</code>\n                </p>\n                <p>\n                    <code>--dialog-height: 50%</code>\n                </p>\n                <p>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                    Mauris efficitur condimentum elit id viverra. Morbi\n                    venenatis malesuada iaculis. Suspendisse potenti. Curabitur\n                    rutrum quis tortor laoreet hendrerit. Sed a maximus orci.\n                    Curabitur pharetra in purus vulputate tempor. Proin non\n                    ullamcorper felis. Vivamus enim dolor, vulputate vel ipsum\n                    sollicitudin, venenatis varius eros. Aenean dignissim\n                    venenatis elit, a cursus nibh ornare in. Mauris sed congue\n                    ipsum. Vivamus cursus sapien eu nibh convallis, at\n                    scelerisque diam vulputate. Aliquam erat volutpat. Class\n                    aptent taciti sociosqu ad litora torquent per conubia\n                    nostra, per inceptos himenaeos. Morbi efficitur semper ex eu\n                    lacinia. Maecenas a dictum mauris, in pulvinar ligula.\n                </p>\n                <p>\n                    Etiam risus lectus, rhoncus eu ipsum nec, consectetur\n                    iaculis ex. Suspendisse nunc ex, aliquam nec malesuada\n                    vitae, porttitor eget ipsum. Aenean et pharetra nunc, quis\n                    dignissim ipsum. Aenean ut arcu vestibulum, commodo nulla\n                    ac, volutpat mauris. Praesent vel lectus odio. Pellentesque\n                    imperdiet congue pretium. Donec finibus ligula nulla, sed\n                    maximus dui pharetra a.\n                </p>\n                <p>\n                    Nunc dictum ut eros vitae euismod. Vestibulum condimentum\n                    justo nec mauris convallis condimentum. Sed ut sapien vel\n                    urna consectetur efficitur. Sed quis dui enim. Maecenas\n                    iaculis rhoncus magna, nec elementum massa tempor a. Donec\n                    molestie porttitor rhoncus. Sed lacinia nisi augue, dapibus\n                    scelerisque nisi consectetur sed. Nullam eros dui, interdum\n                    ut pretium a, ultrices nec nisi. Phasellus vulputate, mi id\n                    posuere tristique, ante massa efficitur nulla, vitae\n                    imperdiet justo massa nec justo. Phasellus commodo mauris et\n                    augue pretium, vulputate sodales ligula vehicula. Vivamus\n                    tempus turpis blandit, facilisis ante ac, iaculis sem.\n                    Aenean tincidunt tempus efficitur. Pellentesque iaculis\n                    posuere enim, id interdum dui. Etiam molestie, mi in aliquet\n                    sagittis, lectus odio semper mauris, vitae dictum nisl\n                    lectus sed est. Mauris vel feugiat lorem, et luctus risus.\n                </p>\n                <p>\n                    Nulla facilisi. Pellentesque congue metus vitae nibh\n                    volutpat pretium. Vestibulum luctus nibh sit amet mi sodales\n                    molestie. Maecenas dapibus, massa eu facilisis cursus, elit\n                    est facilisis nibh, at gravida augue lorem non lacus. Sed eu\n                    lectus semper, semper ipsum vitae, maximus metus. Etiam\n                    mattis lorem purus, nec efficitur sapien dignissim sit amet.\n                    Sed mollis sem id ex maximus blandit. Duis commodo blandit\n                    pellentesque.\n                </p>\n                <p>\n                    Etiam at imperdiet lacus. Vivamus vehicula turpis in rhoncus\n                    pretium. Duis dapibus tellus ut enim lacinia bibendum. Morbi\n                    consequat metus quis ligula ultricies sodales. Vivamus\n                    aliquam, lectus quis pulvinar semper, arcu massa vehicula\n                    metus, porttitor condimentum odio lectus vel mi. Cras\n                    molestie, turpis eget auctor dapibus, augue metus euismod\n                    dolor, nec tincidunt urna dolor nec odio. Curabitur bibendum\n                    dignissim est in dapibus. Aenean dignissim nec dolor nec\n                    rhoncus. Maecenas vel justo consectetur, bibendum tortor\n                    vel, viverra risus. Donec elementum, ex iaculis pharetra\n                    aliquet, mi enim pharetra nisl, in euismod enim ex at orci.\n                    Quisque in leo sed risus cursus ornare. Nam ut turpis\n                    consequat, rhoncus leo eu, dignissim nisl. Sed blandit,\n                    libero vel fringilla porttitor, odio orci rutrum enim, sed\n                    rhoncus quam risus eu neque.\n                </p>\n                <limel-button\n                    label=\"Ok\"\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"},{"filename":"dialog-size.scss","type":"scss","source":"limel-dialog {\n    --dialog-width: 25rem;\n    --dialog-height: 50%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-basic.tsx","fileName":"dock-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-basic","overview":"Basic Example\n\nThe Dock component can be used as a place for displaying the app's\nprimary navigation.\n\n:::important\nAvoid having too many items in the Dock, because it will become\nproblematic on mobile devices, when the component is rendered horizontally.\n:::\n\nIt is possible to split the dock items into two sections and place one or\nmore items at the bottom of the column. To do so, you can use `isFooterStart`\non one of the items, which will act as a separator between the two sections,\npushing itself and preceding to the bottom.\n\n:::important\nYou must provide `label`s for to improve accesibility! Without labels,\nscreen-readers cannot tell visually impared persons about the content\nof the Dock.\n:::\n\nIt is possible to add extra information about the items using `helperLabel`.\n\nWhen the component is expanded, only the `helpeLabel` is used\nin the tooltip, when items are hovered.\nWhen the component is shrunk, both `label` and `helperLabel` are displayed\ninside the tooltip.\n\nKeep in mind that on a mobile phone, the component will be displayed horizontally\nand no labels are displayed! Instead, both `label` and `helperLabel` will be used\nas a tooltip to improve accessibility for screen-reader technologies.\n\nHowever, since hovering is not possible on touch-only mobile devices, users who\nrely on their vision to navigate the app will only see your chosen icons.\nSo pick them carefully.","usage":{},"docs":"Basic Example\n\nThe Dock component can be used as a place for displaying the app's\nprimary navigation.\n\n:::important\nAvoid having too many items in the Dock, because it will become\nproblematic on mobile devices, when the component is rendered horizontally.\n:::\n\nIt is possible to split the dock items into two sections and place one or\nmore items at the bottom of the column. To do so, you can use `isFooterStart`\non one of the items, which will act as a separator between the two sections,\npushing itself and preceding to the bottom.\n\n:::important\nYou must provide `label`s for to improve accesibility! Without labels,\nscreen-readers cannot tell visually impared persons about the content\nof the Dock.\n:::\n\nIt is possible to add extra information about the items using `helperLabel`.\n\nWhen the component is expanded, only the `helpeLabel` is used\nin the tooltip, when items are hovered.\nWhen the component is shrunk, both `label` and `helperLabel` are displayed\ninside the tooltip.\n\nKeep in mind that on a mobile phone, the component will be displayed horizontally\nand no labels are displayed! Instead, both `label` and `helperLabel` will be used\nas a tooltip to improve accessibility for screen-reader technologies.\n\nHowever, since hovering is not possible on touch-only mobile devices, users who\nrely on their vision to navigate the app will only see your chosen icons.\nSo pick them carefully.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-basic":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-basic.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '../dock.types';\n\n/**\n * Basic Example\n *\n * The Dock component can be used as a place for displaying the app's\n * primary navigation.\n *\n * :::important\n * Avoid having too many items in the Dock, because it will become\n * problematic on mobile devices, when the component is rendered horizontally.\n * :::\n *\n * It is possible to split the dock items into two sections and place one or\n * more items at the bottom of the column. To do so, you can use `isFooterStart`\n * on one of the items, which will act as a separator between the two sections,\n * pushing itself and preceding to the bottom.\n *\n * :::important\n * You must provide `label`s for to improve accesibility! Without labels,\n * screen-readers cannot tell visually impared persons about the content\n * of the Dock.\n * :::\n *\n * It is possible to add extra information about the items using `helperLabel`.\n *\n * When the component is expanded, only the `helpeLabel` is used\n * in the tooltip, when items are hovered.\n * When the component is shrunk, both `label` and `helperLabel` are displayed\n * inside the tooltip.\n *\n * Keep in mind that on a mobile phone, the component will be displayed horizontally\n * and no labels are displayed! Instead, both `label` and `helperLabel` will be used\n * as a tooltip to improve accessibility for screen-reader technologies.\n *\n * However, since hovering is not possible on touch-only mobile devices, users who\n * rely on their vision to navigate the app will only see your chosen icons.\n * So pick them carefully.\n *\n */\n@Component({\n    tag: 'limel-example-dock-basic',\n    shadow: true,\n    styleUrl: 'dock-basic.scss',\n})\nexport class DockBasicExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: 'home',\n            label: 'Lime',\n            helperLabel: 'Cmd + H',\n            selected: true,\n            icon: '-lime-logo-outlined-colored',\n        },\n        {\n            id: 'tables',\n            label: 'Tables',\n            icon: 'insert_table',\n        },\n        {\n            id: 'search',\n            label: 'Search',\n            icon: 'search',\n        },\n    ];\n\n    @State()\n    private dockFooterItems: DockItem[] = [\n        {\n            id: 'user',\n            label: 'Preferences',\n            icon: 'user',\n        },\n        {\n            id: 'settings',\n            label: 'Settings',\n            icon: 'settings',\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: basic dock\"\n                    dockItems={this.dockItems}\n                    dockFooterItems={this.dockFooterItems}\n                    onItemSelected={this.handleSelected}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        const setSelection = (item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        };\n\n        this.dockItems = this.dockItems.map(setSelection);\n        this.dockFooterItems = this.dockFooterItems.map(setSelection);\n    };\n}\n"},{"filename":"dock-basic.scss","type":"scss","source":":host {\n    --popover-surface-width: min(100vw, 40rem);\n}\n\n.application {\n    background-color: rgb(var(--contrast-400));\n    border: 1px solid rgb(var(--contrast-500));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-colors-css.tsx","fileName":"dock-colors-css.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-colors-css","overview":"Using CSS color variables for theming the Dock\n\nA few CSS variables can be used to customize the look and feel of the steps.\n\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual Dock items!\n:::\n:::important\nMake sure that:\n- text has enough contrast with its background and is readable.\n:::","usage":{},"docs":"Using CSS color variables for theming the Dock\n\nA few CSS variables can be used to customize the look and feel of the steps.\n\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual Dock items!\n:::\n:::important\nMake sure that:\n- text has enough contrast with its background and is readable.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-colors-css":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-colors-css.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '../dock.types';\n\n/**\n * Using CSS color variables for theming the Dock\n *\n * A few CSS variables can be used to customize the look and feel of the steps.\n *\n * :::note\n * Using CSS variables to tweak the colors, applies the colors globally to the\n * component, not to individual Dock items!\n * :::\n * :::important\n * Make sure that:\n * - text has enough contrast with its background and is readable.\n * :::\n */\n\n@Component({\n    tag: 'limel-example-dock-colors-css',\n    shadow: true,\n    styleUrl: 'dock-colors-css.scss',\n})\nexport class DockColorsCssExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: '1',\n            label: 'Home',\n            selected: true,\n            icon: 'home',\n        },\n        {\n            id: '2',\n            label: 'Search',\n            icon: 'search',\n        },\n        {\n            id: '3',\n            label: 'Calls',\n            icon: 'phone',\n        },\n        {\n            id: '4',\n            label: 'Chats',\n            icon: 'chat',\n        },\n    ];\n\n    @State()\n    private dockFooterItems: DockItem[] = [\n        {\n            id: '5',\n            label: 'Settings',\n            icon: 'settings',\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: CSS color variables\"\n                    dockItems={this.dockItems}\n                    dockFooterItems={this.dockFooterItems}\n                    onItemSelected={this.handleSelected}\n                    expanded={true}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        const setSelection = (item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        };\n\n        this.dockItems = this.dockItems.map(setSelection);\n        this.dockFooterItems = this.dockFooterItems.map(setSelection);\n    };\n}\n"},{"filename":"dock-colors-css.scss","type":"scss","source":":host {\n    --dock-background-color: rgb(var(--color-glaucous-darker));\n    --dock-item-text-color: rgb(var(--color-cyan-lighter));\n    --dock-item-text-color--selected: rgb(var(--color-white));\n    --dock-item-icon-color: rgb(var(--color-cyan-lighter));\n    --dock-item-background-color--selected: rgb(var(--color-cyan-darker));\n}\n\n.application {\n    background-color: rgb(var(--contrast-1600));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-custom-component.tsx","fileName":"dock-custom-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-custom-component","overview":"Displaying a custom component after Dock item is clicked\n\nIt is possible to display a custom component in a popover,\nwhen the Dock item is clicked. This enables you to design\nthe content of the menu as you wish, independently from the Dock.\n\n:::note\nPay attention to the `--popover-surface-width` variable in the\n`.SCSS` file. That defines the width the popover component, which is `auto`\nby default. But modifying it may be helpful depending on the usage.\n:::","usage":{},"docs":"Displaying a custom component after Dock item is clicked\n\nIt is possible to display a custom component in a popover,\nwhen the Dock item is clicked. This enables you to design\nthe content of the menu as you wish, independently from the Dock.\n\n:::note\nPay attention to the `--popover-surface-width` variable in the\n`.SCSS` file. That defines the width the popover component, which is `auto`\nby default. But modifying it may be helpful depending on the usage.\n:::","docsTags":[{"name":"link","text":"my-custom-menu.tsx"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-custom-component":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-custom-component.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '../dock.types';\n\n/**\n * Displaying a custom component after Dock item is clicked\n *\n * It is possible to display a custom component in a popover,\n * when the Dock item is clicked. This enables you to design\n * the content of the menu as you wish, independently from the Dock.\n *\n * :::note\n * Pay attention to the `--popover-surface-width` variable in the\n * `.SCSS` file. That defines the width the popover component, which is `auto`\n * by default. But modifying it may be helpful depending on the usage.\n * :::\n *\n * @link my-custom-menu.tsx\n */\n\n@Component({\n    tag: 'limel-example-dock-custom-component',\n    shadow: true,\n    styleUrl: 'dock-basic.scss',\n})\nexport class DockCustomComponentExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: 'home',\n            label: 'Lime',\n            helperLabel: 'Cmd + H',\n            selected: true,\n            icon: '-lime-logo-outlined-colored',\n        },\n        {\n            id: 'tables',\n            label: 'Tables',\n            icon: 'insert_table',\n            dockMenu: { componentName: 'my-custom-menu' },\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: item with custom menu\"\n                    dockItems={this.dockItems}\n                    onItemSelected={this.handleSelected}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        this.dockItems = this.dockItems.map((item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        });\n    };\n}\n"},{"filename":"dock-basic.scss","type":"scss","source":":host {\n    --popover-surface-width: min(100vw, 40rem);\n}\n\n.application {\n    background-color: rgb(var(--contrast-400));\n    border: 1px solid rgb(var(--contrast-500));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n}\n"},{"filename":"my-custom-menu.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'my-custom-menu',\n    shadow: { delegatesFocus: true },\n})\nexport class MyCustomMenu {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'Companies',\n            icon: 'organization',\n            iconColor: 'rgb(var(--color-blue-default)',\n        },\n        {\n            text: 'Deals',\n            icon: 'money',\n            iconColor: 'rgb(var(--color-green-default))',\n        },\n        {\n            text: 'Agreements',\n            icon: 'handshake',\n            iconColor: 'rgb(var(--color-pink-default))',\n        },\n        {\n            text: 'Todos',\n            icon: 'today',\n            iconColor: 'rgb(var(--color-teal-default))',\n        },\n        {\n            text: 'History',\n            icon: 'comments',\n            iconColor: 'rgb(var(--color-grey-light))',\n        },\n        {\n            text: 'Coworkers',\n            icon: 'gender_neutral_user',\n            iconColor: 'rgb(var(--color-orange-light))',\n        },\n        {\n            text: 'Persons',\n            icon: 'user_group_man_man',\n            iconColor: 'rgb(var(--color-yellow-dark)',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-header\n                heading=\"Navigate to a table\"\n                subheading=\"Showing 7 of 12\"\n                supportingText=\"Show all…\"\n            />,\n            <limel-list\n                items={this.items}\n                class=\"has-grid-layout has-interactive-items\"\n            />,\n        ];\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-expanded.tsx","fileName":"dock-expanded.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-expanded","overview":"Basic Example expanded","usage":{},"docs":"Basic Example expanded","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-expanded":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-expanded.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '../dock.types';\n\n/**\n * Basic Example expanded\n */\n@Component({\n    tag: 'limel-example-dock-expanded',\n    shadow: true,\n    styleUrl: 'dock-basic.scss',\n})\nexport class DockExpandedExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: 'home',\n            label: 'Lime',\n            helperLabel: 'Cmd + H',\n            selected: true,\n            icon: '-lime-logo-outlined-colored',\n        },\n        {\n            id: 'tables',\n            label: 'Tables',\n            icon: 'insert_table',\n            dockMenu: { componentName: 'my-custom-menu' },\n        },\n        {\n            id: 'search',\n            label: 'Search',\n            icon: 'search',\n        },\n    ];\n\n    @State()\n    private dockFooterItems: DockItem[] = [\n        {\n            id: 'create',\n            label: 'Create object',\n            icon: 'plus_math',\n        },\n        {\n            id: 'settings',\n            label: 'Settings',\n            icon: 'settings',\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: expanded\"\n                    dockItems={this.dockItems}\n                    dockFooterItems={this.dockFooterItems}\n                    onItemSelected={this.handleSelected}\n                    allowResize={false}\n                    expanded={true}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        const setSelection = (item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        };\n\n        this.dockItems = this.dockItems.map(setSelection);\n        this.dockFooterItems = this.dockFooterItems.map(setSelection);\n    };\n}\n"},{"filename":"dock-basic.scss","type":"scss","source":":host {\n    --popover-surface-width: min(100vw, 40rem);\n}\n\n.application {\n    background-color: rgb(var(--contrast-400));\n    border: 1px solid rgb(var(--contrast-500));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-mobile.tsx","fileName":"dock-mobile.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-mobile","overview":"Setting a horizontal layout for mobile devices.\n\nBy default, the component has a vertical layout, placing the\nDock items in a column. However, the component will render the\nDock items in a horizontal layout when the screen width is smaller\nthan `700px`.\n\nIf you prefer the component to switch to the horizontal mobile layout\nat another breakpoint, use the `mobileBreakPoint` property and give it\na desired value in pixels (without `px`).\n\nIn this example, we have chosen a very large number (`5000`) to force\nthe component to be rendered in mobile layout here in the documentation,\nno matter how large the reader's screen size is.\n\n:::important\nTriggering the mobile layout does not automatically adjust the position\nof the component at the bottom of the screen. You should do that manually\nyourself in a proper way, depending on where the component is used;\nfor example by using CSS media queries, and setting `position: fixed`.\n:::\n\n:::note\nLabels are not displayed in horizontal layout, but they will be instead\ndisplayed as tooltips.\n:::","usage":{},"docs":"Setting a horizontal layout for mobile devices.\n\nBy default, the component has a vertical layout, placing the\nDock items in a column. However, the component will render the\nDock items in a horizontal layout when the screen width is smaller\nthan `700px`.\n\nIf you prefer the component to switch to the horizontal mobile layout\nat another breakpoint, use the `mobileBreakPoint` property and give it\na desired value in pixels (without `px`).\n\nIn this example, we have chosen a very large number (`5000`) to force\nthe component to be rendered in mobile layout here in the documentation,\nno matter how large the reader's screen size is.\n\n:::important\nTriggering the mobile layout does not automatically adjust the position\nof the component at the bottom of the screen. You should do that manually\nyourself in a proper way, depending on where the component is used;\nfor example by using CSS media queries, and setting `position: fixed`.\n:::\n\n:::note\nLabels are not displayed in horizontal layout, but they will be instead\ndisplayed as tooltips.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-mobile":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-mobile.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '../dock.types';\n\n/**\n * Setting a horizontal layout for mobile devices.\n *\n * By default, the component has a vertical layout, placing the\n * Dock items in a column. However, the component will render the\n * Dock items in a horizontal layout when the screen width is smaller\n * than `700px`.\n *\n * If you prefer the component to switch to the horizontal mobile layout\n * at another breakpoint, use the `mobileBreakPoint` property and give it\n * a desired value in pixels (without `px`).\n *\n * In this example, we have chosen a very large number (`5000`) to force\n * the component to be rendered in mobile layout here in the documentation,\n * no matter how large the reader's screen size is.\n *\n * :::important\n * Triggering the mobile layout does not automatically adjust the position\n * of the component at the bottom of the screen. You should do that manually\n * yourself in a proper way, depending on where the component is used;\n * for example by using CSS media queries, and setting `position: fixed`.\n * :::\n *\n * :::note\n * Labels are not displayed in horizontal layout, but they will be instead\n * displayed as tooltips.\n * :::\n */\n@Component({\n    tag: 'limel-example-dock-mobile',\n    shadow: true,\n    styleUrl: 'dock-mobile.scss',\n})\nexport class DockMobileExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: 'home',\n            label: 'Lime',\n            selected: true,\n            icon: '-lime-logo-outlined-colored',\n        },\n        {\n            id: 'tables',\n            label: 'Tables',\n            icon: 'insert_table',\n            dockMenu: { componentName: 'my-custom-menu' },\n        },\n        {\n            id: 'search',\n            label: 'Search',\n            icon: 'search',\n        },\n    ];\n\n    @State()\n    private dockFooterItems: DockItem[] = [\n        {\n            id: 'create',\n            label: 'Create object',\n            icon: 'plus_math',\n        },\n        {\n            id: 'settings',\n            label: 'Settings',\n            icon: 'settings',\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: mobile layout\"\n                    dockItems={this.dockItems}\n                    dockFooterItems={this.dockFooterItems}\n                    onItemSelected={this.handleSelected}\n                    mobileBreakPoint={5000}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        const setSelection = (item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        };\n\n        this.dockItems = this.dockItems.map(setSelection);\n        this.dockFooterItems = this.dockFooterItems.map(setSelection);\n    };\n}\n"},{"filename":"dock-mobile.scss","type":"scss","source":":host {\n    --popover-surface-width: min(100vw, 40rem);\n}\n\n.application {\n    position: relative;\n    background-color: rgb(var(--contrast-400));\n    border: 1px solid rgb(var(--contrast-500));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n    width: 20rem;\n    margin: 0 auto;\n}\n\nlimel-dock {\n    position: absolute;\n    inset: auto 0 0 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-notification.tsx","fileName":"dock-notification.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-notification","overview":"Displaying a notification badge\n\nIt is possible to display a notification badge on each individual\nbutton in the Dock. Badges are supposed to inform the user that\nthere is something in the menu that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\n\n:::important\nThe menus are not a part of the Dock. They are individual components\nthat you develop separately. Make sure that the information\nand interactions regarding the notifications are correctly handled.\n\nFor example, when the items that require user's attention are\nseen or handled by the user after opening the menu, the badge on the\nDock button should disappear.\n:::\n\nWhen this quantity is unclear or undefined, you can simply pass an\nempty string (`badge: ''`), which will only render a circle on the button.\nThis is enough to attract user's attention.\nHowever, it is also possible to use a short string such as \"·\" or \"!\"\nfor such cases, if considered necessary.\n\n:::warning\nDo not negatively exploit this possibility and spam users' awareness.\nThe Dock is the most important and most dominant structural part of\nthe UI of your application. Therefore crowding it with too much noise\n_will_ negatively affect the user experience.\n:::","usage":{},"docs":"Displaying a notification badge\n\nIt is possible to display a notification badge on each individual\nbutton in the Dock. Badges are supposed to inform the user that\nthere is something in the menu that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\n\n:::important\nThe menus are not a part of the Dock. They are individual components\nthat you develop separately. Make sure that the information\nand interactions regarding the notifications are correctly handled.\n\nFor example, when the items that require user's attention are\nseen or handled by the user after opening the menu, the badge on the\nDock button should disappear.\n:::\n\nWhen this quantity is unclear or undefined, you can simply pass an\nempty string (`badge: ''`), which will only render a circle on the button.\nThis is enough to attract user's attention.\nHowever, it is also possible to use a short string such as \"·\" or \"!\"\nfor such cases, if considered necessary.\n\n:::warning\nDo not negatively exploit this possibility and spam users' awareness.\nThe Dock is the most important and most dominant structural part of\nthe UI of your application. Therefore crowding it with too much noise\n_will_ negatively affect the user experience.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-notification":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-notification.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '../dock.types';\n\n/**\n * Displaying a notification badge\n *\n * It is possible to display a notification badge on each individual\n * button in the Dock. Badges are supposed to inform the user that\n * there is something in the menu that requires their attention.\n *\n * This is typically done by displaying a number, which summarizes\n * the quantity of the items that require user's attention.\n *\n * :::important\n * The menus are not a part of the Dock. They are individual components\n * that you develop separately. Make sure that the information\n * and interactions regarding the notifications are correctly handled.\n *\n * For example, when the items that require user's attention are\n * seen or handled by the user after opening the menu, the badge on the\n * Dock button should disappear.\n * :::\n *\n * When this quantity is unclear or undefined, you can simply pass an\n * empty string (`badge: ''`), which will only render a circle on the button.\n * This is enough to attract user's attention.\n * However, it is also possible to use a short string such as \"·\" or \"!\"\n * for such cases, if considered necessary.\n *\n * :::warning\n * Do not negatively exploit this possibility and spam users' awareness.\n * The Dock is the most important and most dominant structural part of\n * the UI of your application. Therefore crowding it with too much noise\n * _will_ negatively affect the user experience.\n * :::\n *\n *\n */\n@Component({\n    tag: 'limel-example-dock-notification',\n    shadow: true,\n    styleUrl: 'dock-notification.scss',\n})\nexport class DockNotificationExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: 'home',\n            label: 'Home',\n            selected: true,\n            icon: '-lime-logo-go-filled',\n        },\n        {\n            id: 'tables',\n            label: 'Tables',\n            icon: 'insert_table',\n        },\n        {\n            id: 'search',\n            label: 'Search',\n            icon: 'search',\n            badge: '',\n        },\n    ];\n\n    @State()\n    private dockFooterItems: DockItem[] = [\n        {\n            id: 'user',\n            label: 'Account',\n            icon: 'user',\n            badge: 5,\n            dockMenu: { componentName: 'my-custom-menu-with-notifications' },\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: dock with notification badges\"\n                    dockItems={this.dockItems}\n                    dockFooterItems={this.dockFooterItems}\n                    onItemSelected={this.handleSelected}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        const setSelection = (item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        };\n\n        this.dockItems = this.dockItems.map(setSelection);\n        this.dockFooterItems = this.dockFooterItems.map(setSelection);\n    };\n}\n"},{"filename":"dock-notification.scss","type":"scss","source":":host {\n    --popover-surface-width: min(100vw, 15rem);\n}\n\n.application {\n    background-color: rgb(var(--contrast-400));\n    border: 1px solid rgb(var(--contrast-500));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/dynamic-form.tsx","fileName":"dynamic-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-dynamic-form","overview":"Dynamic schema","usage":{},"docs":"Dynamic schema","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-dynamic-form":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dynamic-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ValidationStatus } from '@limetech/lime-elements';\n\n/**\n * Dynamic schema\n */\n@Component({\n    tag: 'limel-example-dynamic-form',\n    shadow: true,\n    styleUrl: 'dynamic-form.scss',\n})\nexport class DynamicFormExample {\n    @State()\n    private formData: object = {\n        title: 'Test',\n    };\n    @State()\n    private errors = null;\n\n    @State()\n    private schema: any = {\n        id: 'test',\n        title: 'My form',\n        description: 'Lorem ipsum dolor sit amet',\n        type: 'object',\n        required: ['title'],\n        properties: {\n            title: {\n                type: 'string',\n                title: 'Title',\n                default: 'A new task',\n                description: 'Lorem ipsum dolor sit amet',\n                minLength: 5,\n            },\n            done: { type: 'boolean', title: 'Done?', default: false },\n        },\n    };\n\n    @State()\n    private text: string;\n\n    constructor() {\n        this.text = JSON.stringify(this.schema, null, '    ');\n    }\n\n    public render() {\n        return [\n            <textarea onChange={this.handleTextChange}>{this.text}</textarea>,\n            <br />,\n            <limel-form\n                onChange={this.handleFormChange}\n                onValidate={this.handleValidate}\n                value={this.formData}\n                schema={this.schema}\n            />,\n            <limel-example-value value={this.formData} />,\n            <limel-example-value label=\"Errors\" value={this.errors} />,\n        ];\n    }\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.formData = event.detail;\n    };\n\n    private handleTextChange = (event) => {\n        this.text = event.target.value;\n        try {\n            const json = JSON.parse(event.target.value);\n            if (json) {\n                this.schema = json;\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    private handleValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.errors = event.detail;\n    };\n}\n"},{"filename":"dynamic-form.scss","type":"scss","source":"textarea {\n    width: 100%;\n    min-height: 300px;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/examples","filePath":"./src/examples/example-event-printer.tsx","fileName":"example-event-printer.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/examples/usage","tag":"limel-example-event-printer","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"none","dependents":["limel-example-button-composite","limel-example-button-group-composite","limel-example-checkbox","limel-example-chip-set-composite","limel-example-date-picker-composite","limel-example-file-composite","limel-example-menu-composite","limel-example-picker-composite","limel-example-slider-composite","limel-example-table-selectable-rows"],"dependencies":[],"dependencyGraph":{"limel-example-button-composite":["limel-example-event-printer"],"limel-example-button-group-composite":["limel-example-event-printer"],"limel-example-checkbox":["limel-example-event-printer"],"limel-example-chip-set-composite":["limel-example-event-printer"],"limel-example-date-picker-composite":["limel-example-event-printer"],"limel-example-file-composite":["limel-example-event-printer"],"limel-example-menu-composite":["limel-example-event-printer"],"limel-example-picker-composite":["limel-example-event-printer"],"limel-example-slider-composite":["limel-example-event-printer"],"limel-example-table-selectable-rows":["limel-example-event-printer"]},"props":[],"methods":[{"name":"writeEvent","returns":{"type":"Promise<void>","docs":""},"signature":"writeEvent(event: Event) => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"example-event-printer.tsx","type":"tsx","source":"import { Component, h, Method, State } from '@stencil/core';\nimport dayjs from 'dayjs';\n\n@Component({\n    tag: 'limel-example-event-printer',\n    styleUrl: 'example-event-printer.scss',\n})\nexport class ExampleEventPrinter {\n    @State()\n    private caughtEvents: Array<{ timestamp: string; event: Event }> = [];\n\n    protected eventCatcher!: HTMLElement;\n\n    constructor() {\n        this.formatEvent = this.formatEvent.bind(this);\n        this.pushEvent = this.pushEvent.bind(this);\n    }\n\n    @Method()\n    public async writeEvent(event: Event) {\n        console.log(event);\n        this.pushEvent(event);\n    }\n\n    public render() {\n        return [\n            <header>Caught events:</header>,\n            this.caughtEvents.map(this.formatEvent),\n        ];\n    }\n\n    private formatEvent({ timestamp, event }) {\n        return (\n            <details>\n                <summary>\n                    {`${timestamp} ${event\n                        .toString()\n                        .replace(/\\[object (.*)\\]/, '$1')}: `}\n                    type=<code>{event.type}</code> detail=\n                    <code>{`${event.detail}`}</code>\n                </summary>\n                <pre>\n                    <code>{serializeEvent(event)}</code>\n                </pre>\n            </details>\n        );\n    }\n\n    private pushEvent(event: Event) {\n        this.caughtEvents = [\n            { timestamp: dayjs().format('HH:mm:ss.SSS'), event: event },\n            ...this.caughtEvents,\n        ];\n    }\n}\n\nfunction serializeEvent(e: any) {\n    if (!e) {\n        return;\n    }\n\n    const obj = {\n        eventName: e.toString(),\n        altKey: e.altKey,\n        bubbles: e.bubbles,\n        button: e.button,\n        buttons: e.buttons,\n        cancelBubble: e.cancelBubble,\n        cancelable: e.cancelable,\n        clientX: e.clientX,\n        clientY: e.clientY,\n        composed: e.composed,\n        ctrlKey: e.ctrlKey,\n        currentTarget: e.currentTarget ? e.currentTarget.outerHTML : null,\n        defaultPrevented: e.defaultPrevented,\n        detail: e.detail,\n        eventPhase: e.eventPhase,\n        fromElement: e.fromElement ? e.fromElement.outerHTML : null,\n        isTrusted: e.isTrusted,\n        layerX: e.layerX,\n        layerY: e.layerY,\n        metaKey: e.metaKey,\n        movementX: e.movementX,\n        movementY: e.movementY,\n        offsetX: e.offsetX,\n        offsetY: e.offsetY,\n        pageX: e.pageX,\n        pageY: e.pageY,\n        path: e.path && e.path.length ? e.path.map((n) => n.localName) : null,\n        relatedTarget: e.relatedTarget ? e.relatedTarget.outerHTML : null,\n        returnValue: e.returnValue,\n        screenX: e.screenX,\n        screenY: e.screenY,\n        shiftKey: e.shiftKey,\n        sourceCapabilities: null,\n        target: e.target ? e.target.outerHTML : null,\n        timeStamp: e.timeStamp,\n        toElement: e.toElement ? e.toElement.outerHTML : null,\n        type: e.type,\n        view: e.view ? e.view.toString() : null,\n        which: e.which,\n        x: e.x,\n        y: e.y,\n    };\n    if (e.sourceCapabilities) {\n        obj.sourceCapabilities = e.sourceCapabilities.toString();\n    }\n\n    return JSON.stringify(obj, null, 2);\n}\n"},{"filename":"example-event-printer.scss","type":"scss","source":"@use './example-value';\n@use '../style/mixins';\n\n:host(limel-example-event-printer) {\n    isolation: isolate;\n    max-height: 20rem;\n    overflow-y: auto;\n    padding-bottom: 0.25rem;\n}\n\ndetails {\n    font-size: 0.875rem; // 14px\n}\n\nsummary {\n    cursor: pointer;\n    @include mixins.is-flat-clickable();\n    border-radius: 0.25rem;\n    padding: 0.25rem 0.5rem;\n    margin: 0 0.25rem;\n    position: sticky;\n    top: 0;\n    background-color: rgb(var(--kompendium-contrast-100));\n\n    details[open] & {\n        z-index: 1;\n        background-color: var(--lime-elevated-surface-background-color);\n        box-shadow: var(--button-shadow-pressed);\n        border-bottom-left-radius: 0;\n        border-bottom-right-radius: 0;\n    }\n\n    &:hover {\n        z-index: 1;\n    }\n    &:focus {\n        outline: none;\n    }\n    &:focus-visible {\n        z-index: 1;\n        outline: none;\n        box-shadow: var(--kompendium-shadow-depth-8-focused);\n    }\n\n    &::marker {\n        content: '+';\n        display: block;\n        width: 1.5rem;\n        font-weight: bold;\n        font-size: 1rem;\n        color: rgb(var(--kompendium-color-primary));\n\n        details[open] & {\n            content: '–';\n            color: rgb(var(--kompendium-color-red-default));\n        }\n    }\n}\n\npre {\n    margin: 0 0.25rem 0.25rem 0.25rem;\n\n    > code {\n        margin-top: 0;\n        border-top-left-radius: 0;\n        border-top-right-radius: 0;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/extended-color-palette.tsx","fileName":"extended-color-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-extended-color-palette","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox"],"dependencyGraph":{"limel-example-extended-color-palette":["limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"extended-color-palette.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-extended-color-palette',\n    shadow: true,\n    styleUrl: 'extended-color-palette.scss',\n})\nexport class PaletteExample {\n    @State()\n    private brandColors: boolean = false;\n\n    private colors = [\n        'red',\n        'pink',\n        'magenta',\n        'purple',\n        'violet',\n        'indigo',\n        'blue',\n        'sky',\n        'cyan',\n        'teal',\n        'green',\n        'lime',\n        'grass',\n        'yellow',\n        'amber',\n        'orange',\n        'coral',\n        'brown',\n        'gray',\n        'glaucous',\n    ];\n\n    public render() {\n        return (\n            <div class={{ 'brand-colors': this.brandColors }}>\n                <div class=\"color-palette\">\n                    {this.renderSwatches()}\n                    <div class=\"brightness-label\">lighter</div>\n                    <div class=\"brightness-label\">light</div>\n                    <div class=\"brightness-label\">default</div>\n                    <div class=\"brightness-label\">dark</div>\n                    <div class=\"brightness-label\">darker</div>\n                </div>\n                <limel-checkbox\n                    label=\"Highlight Lime's brand colors\"\n                    onChange={this.toggleMode}\n                    checked={this.brandColors}\n                />\n                <div class=\"brand-colors-tips\">\n                    Most of the brand colors are included in the subset for \"\n                    <b>dark mode</b>\". Switch between dark & light mode to see\n                    all of them.\n                </div>\n            </div>\n        );\n    }\n\n    private renderSwatches = (): JSX.Element[][] => {\n        return this.colors.map((color) => {\n            return [\n                <div class={`swatch --color-${color}-lighter`}></div>,\n                <div class={`swatch --color-${color}-light`}></div>,\n                <div class={`swatch --color-${color}-default`}>·</div>,\n                <div class={`swatch --color-${color}-dark`}></div>,\n                <div class={`swatch --color-${color}-darker`}></div>,\n                <div class=\"swatch hue\">{color}</div>,\n            ];\n        });\n    };\n\n    private toggleMode = () => {\n        this.brandColors = !this.brandColors;\n    };\n}\n"},{"filename":"extended-color-palette.scss","type":"scss","source":"@use './shared-styles';\n\n.color-palette {\n    grid-template-rows: repeat(5, 1fr) auto;\n    grid-template-columns: repeat(20, 1fr) auto;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples","filePath":"./src/components/file/examples/file.tsx","fileName":"file.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/usage","tag":"limel-example-file","overview":"Basic example","usage":{},"docs":"Basic example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-file":["limel-file","limel-example-controls","limel-checkbox","limel-example-value"],"limel-file":["limel-chip-set"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n */\n@Component({\n    tag: 'limel-example-file',\n    shadow: true,\n})\nexport class FileExample {\n    @State()\n    private value: FileInfo = { filename: 'letter.docx', id: 123 };\n\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    public render() {\n        return [\n            <limel-file\n                label=\"Attach a file\"\n                onChange={this.handleChange}\n                required={this.required}\n                value={this.value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo>) => {\n        this.value = event.detail;\n        console.log('onChange', this.value);\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = !!event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = !!event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = !!event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples","filePath":"./src/components/file/examples/file-accepted-types.tsx","fileName":"file-accepted-types.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/usage","tag":"limel-example-file-accepted-types","overview":"Limit accepted file types","usage":{},"docs":"Limit accepted file types","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file"],"dependencyGraph":{"limel-example-file-accepted-types":["limel-file"],"limel-file":["limel-chip-set"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-accepted-types.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Limit accepted file types\n */\n@Component({\n    tag: 'limel-example-file-accepted-types',\n    shadow: true,\n})\nexport class FileAcceptedTypesExample {\n    @State()\n    private value: FileInfo = { filename: 'picture.jpg', id: 123 };\n\n    @State()\n    private required = false;\n\n    public render() {\n        return [\n            <limel-file\n                label=\"Attach only images (png, jpeg)\"\n                onChange={this.handleChange}\n                required={this.required}\n                value={this.value}\n                accept=\"image/jpeg,image/png\"\n            />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo>) => {\n        this.value = event.detail;\n        console.log('onChange', this.value);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples","filePath":"./src/components/file/examples/file-composite.tsx","fileName":"file-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/usage","tag":"limel-example-file-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-file-composite":["limel-file","limel-example-event-printer","limel-example-controls","limel-form"],"limel-file":["limel-chip-set"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[{"name":"schema","type":"any","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-composite.tsx","type":"tsx","source":"import { FileInfo, Languages } from '@limetech/lime-elements';\nimport { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-file-composite',\n    shadow: true,\n})\nexport class FileCompositeExample {\n    @Prop()\n    public schema: any;\n\n    @State()\n    private props = {\n        label: 'Attach a file',\n        value: {\n            id: '123',\n            filename: 'document.pdf',\n        } as FileInfo,\n        language: 'en' as Languages,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n        this.schema.properties.value.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-file {...this.props} onChange={this.handleChange} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo>) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = { ...event.detail };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples","filePath":"./src/components/file/examples/file-custom-icon.tsx","fileName":"file-custom-icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/usage","tag":"limel-example-file-custom-icon","overview":"Custom icon and color\nThis component automatically visualizes the file type, based on the extension\nof the selected file. The visualization is done by displaying a colorful icon\nalong with the filename, for the most common file types.\n\nHowever, you can also customize the icon and its fill color & background color.","usage":{},"docs":"Custom icon and color\nThis component automatically visualizes the file type, based on the extension\nof the selected file. The visualization is done by displaying a colorful icon\nalong with the filename, for the most common file types.\n\nHowever, you can also customize the icon and its fill color & background color.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file","limel-example-value"],"dependencyGraph":{"limel-example-file-custom-icon":["limel-file","limel-example-value"],"limel-file":["limel-chip-set"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-custom-icon.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Custom icon and color\n * This component automatically visualizes the file type, based on the extension\n * of the selected file. The visualization is done by displaying a colorful icon\n * along with the filename, for the most common file types.\n *\n * However, you can also customize the icon and its fill color & background color.\n */\n@Component({\n    tag: 'limel-example-file-custom-icon',\n    shadow: true,\n})\nexport class FileCustomIconExample {\n    @State()\n    private value: FileInfo = { filename: 'custom.crab', id: 123 };\n\n    public componentWillLoad() {\n        this.updateIcon();\n    }\n\n    public render() {\n        return [\n            <limel-file\n                label=\"Attach a file\"\n                onChange={this.handleChange}\n                value={this.value}\n            />,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo>) => {\n        this.value = event.detail;\n        this.updateIcon();\n        console.log('onChange', this.value);\n    };\n\n    private updateIcon() {\n        if (this.value?.filename?.substr(-5) === '.crab') {\n            this.value.icon = 'crab';\n            this.value.iconColor = 'rgb(var(--color-white))';\n            this.value.iconBackgroundColor = 'rgb(var(--color-coral-default))';\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/basic-form.tsx","fileName":"basic-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form","overview":"Basic form with validation","usage":{},"docs":"Basic form with validation","docsTags":[{"name":"link","text":"basic-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-form":["limel-form","limel-button","limel-example-value"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"basic-form.tsx","type":"tsx","source":"import { ValidationStatus } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { schema } from './basic-schema';\n\n/**\n * Basic form with validation\n *\n * @link basic-schema.ts\n */\n@Component({\n    tag: 'limel-example-form',\n    shadow: true,\n})\nexport class FormExample {\n    @State()\n    private formData: object = {\n        date: '1922-12-28',\n        params: {\n            secretHideout: 'Cave',\n            hidden: true,\n            entryCode: [1, 1, 2, 3, 5, 8],\n        },\n    };\n\n    @State()\n    private valid = true;\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                onValidate={this.handleFormValidate}\n                value={this.formData}\n                schema={schema}\n            />,\n            <br />,\n            <limel-button\n                label=\"Submit\"\n                primary={true}\n                disabled={!this.valid}\n                onClick={this.handleSubmit}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n\n    private handleFormValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.valid = event.detail.valid;\n        console.log(\n            'Basic form with validation - handleFormValidate:',\n            event.detail\n        );\n    };\n\n    private handleSubmit = () => {\n        const json = JSON.stringify(this.formData, null, '    ');\n        alert(`Sending information to villains...\\n\\n${json}`);\n    };\n}\n"},{"filename":"basic-schema.ts","type":"ts","source":"export const schema = {\n    title: 'Registration form',\n    description: 'Please enter your personal information',\n    type: 'object',\n    required: ['name', 'email', 'newsletters'],\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Name',\n            default: 'Batman',\n            description: 'Enter your heroic name',\n            minLength: 5,\n            maxLength: 20,\n        },\n        email: {\n            type: 'string',\n            title: 'Email',\n            description: 'Enter your email address',\n            format: 'email',\n        },\n        home: {\n            type: 'string',\n            title: 'Home',\n            default: 'Earth',\n            readOnly: true,\n        },\n        happiness: {\n            type: 'number',\n            title: 'Happiness',\n            description: 'How happy are you?',\n            minimum: 0,\n            maximum: 1,\n            multipleOf: 0.01,\n        },\n        bananas: {\n            type: 'number',\n            title: 'Bananas',\n            description: 'How many bananas do you want?',\n            minimum: 0,\n            maximum: 50,\n            multipleOf: 10,\n        },\n        date: {\n            type: 'string',\n            title: 'Birthdate',\n            format: 'date',\n            description: 'Pick a nice date!',\n        },\n        color: {\n            type: 'string',\n            title: 'Favorite cape color',\n            description: 'Preferably matching your boots',\n            oneOf: [\n                {\n                    type: 'string',\n                    const: 'red',\n                    title: 'Red',\n                },\n                {\n                    type: 'string',\n                    const: 'yellow',\n                    title: 'Yellow',\n                },\n                {\n                    type: 'string',\n                    const: 'green',\n                    title: 'Green',\n                },\n                {\n                    type: 'string',\n                    const: 'blue',\n                    title: 'Blue',\n                },\n                {\n                    type: 'string',\n                    const: 'black',\n                    title: 'Black',\n                },\n            ],\n        },\n        sidekicks: {\n            type: 'array',\n            title: 'Sidekicks',\n            description: 'Please select your sidekicks',\n            uniqueItems: true,\n            minItems: 2,\n            items: {\n                title: 'Friends',\n                type: 'string',\n                anyOf: [\n                    {\n                        type: 'string',\n                        const: 'super',\n                        title: 'Superman',\n                    },\n                    {\n                        type: 'string',\n                        const: 'widow',\n                        title: 'Black Widow',\n                    },\n                    {\n                        type: 'string',\n                        const: 'america',\n                        title: 'Captain America',\n                    },\n                    {\n                        type: 'string',\n                        const: 'squirrel',\n                        title: 'Squirrel Girl',\n                    },\n                    {\n                        type: 'string',\n                        const: 'devil',\n                        title: 'Daredevil',\n                    },\n                    {\n                        type: 'string',\n                        const: 'marvel',\n                        title: 'Captain Marvel',\n                    },\n                    {\n                        type: 'string',\n                        const: 'fantastic',\n                        title: 'Mr. Fantastic',\n                    },\n                ],\n            },\n        },\n        newsletters: {\n            type: 'boolean',\n            title: 'I want to receive daily newsletters!',\n            default: false,\n            const: true,\n        },\n        params: {\n            type: 'object',\n            title: 'Parameters',\n            description: 'Additional data to send',\n            additionalProperties: true,\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/layout-form.tsx","fileName":"layout-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form-layout","overview":"Layout\nBy default, each item in a limel-form will be rendered in a single row, and\neach row occupies the entire available width of the form's container.\n\nThis default layout may work fine on small screens or narrow containers,\nbut on larger screens it usually won't produce a nice layout. Thus we\nrecommend that you choose an appropriate responsive layout for your form.\n\n###### Enabling responsive layouts\n\nBy specifying `'grid'` as the layout `type` in your schema, as well as your desired\nnumber of `columns`, you can leave the job of responsively handling the form\nlayout to Lime Elements.\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 3,\n        },\n    },\n    …\n};\n```\n:::note\nValue for `columns` can only be `5`, `4`, `3`, `2`, or `1`. If you do not\nspecify a value, `limel-form` will choose `5` by default.\n:::\n\nSo if you have chosen `4` for instance, the form will do its best to fit\nfour columns in a row. But for smaller containers in which placement of four\nitems per row is not possible, the form will automatically change the layout\nand fit 3 items per row. As the container's width decreases, the number of\ncolumns will also decrease.\n\n:::tip\nYou can divide a form into sections,\nand specify a different layout for each section.\n:::\n\nIn this example, each collapsible section has its own `colSpan`.\nHowever, since the layout is responsive, make sure to change the browser\nwindow size to see how their responsive layout changes.","usage":{},"docs":"Layout\nBy default, each item in a limel-form will be rendered in a single row, and\neach row occupies the entire available width of the form's container.\n\nThis default layout may work fine on small screens or narrow containers,\nbut on larger screens it usually won't produce a nice layout. Thus we\nrecommend that you choose an appropriate responsive layout for your form.\n\n###### Enabling responsive layouts\n\nBy specifying `'grid'` as the layout `type` in your schema, as well as your desired\nnumber of `columns`, you can leave the job of responsively handling the form\nlayout to Lime Elements.\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 3,\n        },\n    },\n    …\n};\n```\n:::note\nValue for `columns` can only be `5`, `4`, `3`, `2`, or `1`. If you do not\nspecify a value, `limel-form` will choose `5` by default.\n:::\n\nSo if you have chosen `4` for instance, the form will do its best to fit\nfour columns in a row. But for smaller containers in which placement of four\nitems per row is not possible, the form will automatically change the layout\nand fit 3 items per row. As the container's width decreases, the number of\ncolumns will also decrease.\n\n:::tip\nYou can divide a form into sections,\nand specify a different layout for each section.\n:::\n\nIn this example, each collapsible section has its own `colSpan`.\nHowever, since the layout is responsive, make sure to change the browser\nwindow size to see how their responsive layout changes.","docsTags":[{"name":"link","text":"layout-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-button"],"dependencyGraph":{"limel-example-form-layout":["limel-form","limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"layout-form.tsx","type":"tsx","source":"import { ValidationStatus } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { schema } from './layout-schema';\n\n/**\n * Layout\n * By default, each item in a limel-form will be rendered in a single row, and\n * each row occupies the entire available width of the form's container.\n *\n * This default layout may work fine on small screens or narrow containers,\n * but on larger screens it usually won't produce a nice layout. Thus we\n * recommend that you choose an appropriate responsive layout for your form.\n *\n * ###### Enabling responsive layouts\n *\n * By specifying `'grid'` as the layout `type` in your schema, as well as your desired\n * number of `columns`, you can leave the job of responsively handling the form\n * layout to Lime Elements.\n * ```ts\n * export const schema = {\n *     type: 'object',\n *     lime: {\n *         layout: {\n *             type: 'grid',\n *             columns: 3,\n *         },\n *     },\n *     …\n * };\n * ```\n * :::note\n * Value for `columns` can only be `5`, `4`, `3`, `2`, or `1`. If you do not\n * specify a value, `limel-form` will choose `5` by default.\n * :::\n *\n * So if you have chosen `4` for instance, the form will do its best to fit\n * four columns in a row. But for smaller containers in which placement of four\n * items per row is not possible, the form will automatically change the layout\n * and fit 3 items per row. As the container's width decreases, the number of\n * columns will also decrease.\n *\n * :::tip\n * You can divide a form into sections,\n * and specify a different layout for each section.\n * :::\n *\n * In this example, each collapsible section has its own `colSpan`.\n * However, since the layout is responsive, make sure to change the browser\n * window size to see how their responsive layout changes.\n *\n * @link layout-schema.ts\n */\n@Component({\n    tag: 'limel-example-form-layout',\n    shadow: true,\n})\nexport class FormLayoutExample {\n    @State()\n    private formData: object = {};\n\n    @State()\n    private valid = true;\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                onValidate={this.handleFormValidate}\n                value={this.formData}\n                schema={schema}\n            />,\n            <br />,\n            <limel-button\n                label=\"Submit\"\n                primary={true}\n                disabled={!this.valid}\n                onClick={this.handleSubmit}\n            />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n\n    private handleFormValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.valid = event.detail.valid;\n        console.log(event.detail);\n    };\n\n    private handleSubmit = () => {\n        const json = JSON.stringify(this.formData, null, '    ');\n        alert(`Sending information to villains...\\n\\n${json}`);\n    };\n}\n"},{"filename":"layout-schema.ts","type":"ts","source":"export const schema = {\n    title: 'Registration form',\n    description:\n        'This main form has no specified layout, so it gets the default 1 column.',\n    type: 'object',\n    properties: {\n        info: {\n            title: 'Player info',\n            description: 'This section has a 4 column grid layout.',\n            type: 'object',\n            lime: {\n                collapsible: true,\n                layout: {\n                    type: 'grid',\n                    columns: 4,\n                },\n            },\n            properties: {\n                name: {\n                    type: 'string',\n                    title: 'Name',\n                },\n                age: {\n                    type: 'integer',\n                    title: 'Age',\n                },\n                race: {\n                    type: 'string',\n                    title: 'Race',\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'angel',\n                            title: 'Angel',\n                        },\n                        {\n                            type: 'string',\n                            const: 'dragon',\n                            title: 'Dragon',\n                        },\n                        {\n                            type: 'string',\n                            const: 'elf',\n                            title: 'Elf',\n                        },\n                        {\n                            type: 'string',\n                            const: 'yeti',\n                            title: 'Yeti',\n                        },\n                        {\n                            type: 'string',\n                            const: 'vampire',\n                            title: 'Vampire',\n                        },\n                        {\n                            type: 'string',\n                            const: 'warewolf',\n                            title: 'Werewolf',\n                        },\n                        {\n                            type: 'string',\n                            const: 'orc',\n                            title: 'Orc',\n                        },\n                        {\n                            type: 'string',\n                            const: 'wizard',\n                            title: 'Wizard',\n                        },\n                    ],\n                },\n                placeOfBirth: {\n                    type: 'string',\n                    title: 'Place of birth',\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'palight',\n                            title: 'Palight',\n                        },\n                        {\n                            type: 'string',\n                            const: 'ekudshire',\n                            title: 'Ekudshire',\n                        },\n                        {\n                            type: 'string',\n                            const: 'blarc',\n                            title: 'Blarc',\n                        },\n                        {\n                            type: 'string',\n                            const: 'kamond',\n                            title: 'Kamond',\n                        },\n                        {\n                            type: 'string',\n                            const: 'blodholm',\n                            title: 'Blodholm',\n                        },\n                        {\n                            type: 'string',\n                            const: 'wuacross',\n                            title: 'Wuacross',\n                        },\n                        {\n                            type: 'string',\n                            const: 'bruhgnathal',\n                            title: 'Bruhgnathal',\n                        },\n                        {\n                            type: 'string',\n                            const: 'orasas',\n                            title: 'Orasas',\n                        },\n                    ],\n                },\n            },\n        },\n        address: {\n            title: 'Player address',\n            description: 'This section has a 2 column grid layout.',\n            type: 'object',\n            lime: {\n                collapsible: true,\n                layout: {\n                    type: 'grid',\n                    columns: 2,\n                },\n            },\n            properties: {\n                city: {\n                    type: 'string',\n                    title: 'City',\n                },\n                country: {\n                    type: 'string',\n                    title: 'Country',\n                    description: 'It might also be a planet',\n                },\n            },\n        },\n        emails: {\n            title: \"Friends' emails\",\n            description:\n                'This section has a grid layout, but no colSpan is specified; which will result in a 5 column layout.',\n            type: 'object',\n            lime: {\n                collapsible: true,\n                layout: {\n                    type: 'grid',\n                },\n            },\n            properties: {\n                email1: {\n                    type: 'string',\n                    title: 'Email',\n                    description: 'Enter a valid email address',\n                    format: 'email',\n                },\n                email2: {\n                    type: 'string',\n                    title: 'Email',\n                    description: 'Enter a valid email address',\n                    format: 'email',\n                },\n                email3: {\n                    type: 'string',\n                    title: 'Email',\n                    description: 'Enter a valid email address',\n                    format: 'email',\n                },\n                email4: {\n                    type: 'string',\n                    title: 'Email',\n                    description: 'Enter a valid email address',\n                    format: 'email',\n                },\n                email5: {\n                    type: 'string',\n                    title: 'Email',\n                    description: 'Enter a valid email address',\n                    format: 'email',\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/map-component.tsx","fileName":"map-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form-map-component","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"map-component.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-form-map-component',\n    shadow: true,\n    styleUrl: 'map-component.scss',\n})\nexport class ExampleMapComponent {\n    @Prop()\n    public label: string;\n\n    public render() {\n        return (\n            <div class=\"custom-component\">\n                <span class=\"label\">{this.label}</span>\n                <iframe\n                    src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2249.3352777658542!2d13.175623716225816!3d55.683158480534814!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x465397fae5b2e6d9%3A0xff3855ec5b30981f!2sLime%20Technologies%20Sweden%20AB!5e0!3m2!1sen!2sse!4v1605781801916!5m2!1sen!2sse\"\n                    aria-hidden=\"false\"\n                    tabindex=\"0\"\n                    frameborder=\"0\"\n                ></iframe>\n            </div>\n        );\n    }\n}\n"},{"filename":"map-component.scss","type":"scss","source":":host {\n    display: block;\n    width: 100%;\n    height: 100%;\n}\n\n.custom-component {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.label {\n    display: inline-block;\n\n    z-index: 1;\n    position: absolute;\n    left: 0.5rem;\n    bottom: 0.5rem;\n\n    border-radius: 0.25rem;\n    width: fit-content;\n    padding: 0 0.25rem;\n    background-color: rgba(var(--contrast-300), 0.9);\n    color: rgb(var(--contrast-1100));\n\n    font-size: 0.875rem;\n    font-family: 'Roboto';\n}\n\niframe {\n    z-index: 0;\n    position: relative;\n    border: 0;\n    width: 100%;\n    height: 100%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/row-layout.tsx","fileName":"row-layout.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form-row-layout","overview":"Row layout","usage":{},"docs":"Row layout","docsTags":[{"name":"link","text":"row-layout-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form"],"dependencyGraph":{"limel-example-form-row-layout":["limel-form"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"row-layout.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { schema } from './row-layout-schema';\n\n/**\n * Row layout\n *\n * @link row-layout-schema.ts\n */\n@Component({\n    tag: 'limel-example-form-row-layout',\n    shadow: true,\n})\nexport class FormRowLayoutExample {\n    @State()\n    private formData: object = {};\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"row-layout-schema.ts","type":"ts","source":"export const schema = {\n    description: 'This form has the row layout',\n    type: 'object',\n    properties: {\n        info: {\n            title: 'Preferences',\n            description:\n                'These settings will not affect how others see the data. These are only for you.',\n            type: 'object',\n            lime: {\n                layout: {\n                    type: 'row',\n                },\n            },\n            properties: {\n                language: {\n                    type: 'string',\n                    title: 'Language',\n                    description: 'Select the app language',\n                    default: 'ua',\n                    lime: {\n                        layout: {\n                            icon: 'globe',\n                        },\n                    },\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'sv',\n                            title: 'Swedish',\n                        },\n                        {\n                            type: 'string',\n                            const: 'ua',\n                            title: 'Ukrainian',\n                        },\n                        {\n                            type: 'string',\n                            const: 'en',\n                            title: 'English',\n                        },\n                        {\n                            type: 'string',\n                            const: 'am',\n                            title: 'Amharic',\n                        },\n                        {\n                            type: 'string',\n                            const: 'fa',\n                            title: 'Farsi',\n                        },\n                    ],\n                },\n                date: {\n                    type: 'string',\n                    title: 'Date format',\n                    default: 'yyyy-mm-dd',\n                    lime: {\n                        layout: {\n                            icon: 'calendar',\n                        },\n                    },\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'yyyy-mm-dd',\n                            title: '1999-01-31',\n                        },\n                        {\n                            type: 'string',\n                            const: 'yyyy.dd.mm',\n                            title: '1999.01.31',\n                        },\n                        {\n                            type: 'string',\n                            const: 'yyyy/dd/mm',\n                            title: '1999/01/31',\n                        },\n                    ],\n                },\n                notification: {\n                    type: 'boolean',\n                    title: 'Receive email notifications',\n                    lime: {\n                        component: {\n                            name: 'limel-switch',\n                        },\n                        layout: {\n                            icon: 'filled_message',\n                        },\n                    },\n                },\n                frequency: {\n                    type: 'number',\n                    title: 'Frequency of notifications',\n                    description:\n                        'How many times per day can we sent you email notifications at most?',\n                    minimum: 0,\n                    maximum: 10,\n                    multipleOf: 1,\n                    lime: {\n                        layout: {\n                            icon: 'notification_center_92458',\n                        },\n                    },\n                },\n                personalNumber: {\n                    type: 'integer',\n                    title: 'Personal identity number',\n                    lime: {\n                        layout: {\n                            icon: 'numbers_input_form',\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/span-fields.tsx","fileName":"span-fields.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form-span-fields","overview":"Stretching fields in a form\n\nSometimes, you need a field in the form to occupy several columns or the\nentire row, and stretch itself as wide as the form's width,\ndisregarding the form's layout and placement of the item in the list.\n\nThis could be nice for fields that require more space to provide better\nusability.\n\n:::tip\nFor example, a larger `textarea` is easier for the user to type in and\na `slider` that has many steps is easier to interact with when it is rendered wider.\n:::\n\nTo do so, in your schema you need to specify a `layout` for the field itself.\n`span` specifies the number of columns that the field should span.\n\nThus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\nSince we do not offer a *form layout* that has more than five columns,\nvalues higher than 5 (or higher than the maximum number of columns in the form)\nwill only force the field to be full-width, just like `all` does.\n\n```ts\nexport const schema = {\n    …\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                layout: {\n                      colSpan: 'all',\n                  },\n              },\n        },\n        …\n    },\n    …\n};\n```\n\n###### Dense layout (Auto reorder fields to avoid empty cells)\nThe order of fields and the number of columns that a field must span, can\naffect the layout of your responsive form when the container width changes.\n\nLet's say you have a form with a 4 column layout, and you specify that its\nsecond field must span 3 columns.\nIf the container's width decreases, it will force the form to render its\nlayout in 3 columns instead. Therefore, the second field has to jump\nto the next line to still be able to span 3 columns.\nThis will leave 2 empty cells in the first row, right after the first field.\n\nTo avoid these empty cells in the UI, limel-form will place the next available\nfield in this hole, provided it fits. So the hole may be filled by a single 2 column\nwide field, by two 1 column wide fields, or only partially filled by a single 1 column\nwide field. If none of the remaining fields fit, the hole will be left as it is.\n\nHowever, you can disable this functionality by setting `dense` to `false` in the\noptions for the grid layout.\n\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            dense: false,\n        },\n    },\n};\n```\n\n:::note\nSometimes, the order of fields are important for the way users perceive the form.\nIf you choose to use the default auto-reordering behavior, make sure to test your\nform's layout in different screen sizes to see whether you can mitigate unwanted\nlayout changes.\n\nSome unwanted results can be avoided by changing the order of the fields,\nso that they render appropriately on different screens, or by dividing\nthe form into more sections.\n:::\n\n###### Stretching a field vertically\nMost standard elements that can be used in forms, such as `limel-input`,\n`limel-select`, `limel-slider`, etc, have a fixed height, and therefore\nit does not really make sense to stretch them vertically, and we strongly\nrecommend you not to!\n\nBut there are some exceptions. One of them is `limel-input-field` with\n`type='textarea'`.\n\nAlso, if you create a custom component for your form—let's say a map—you\ncan use `rowSpan` to increase the height of your custom component.\n```ts\nexport const schema = {\n    type: 'object',\n    properties: {\n        comment: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                      colSpan: 3,\n                      rowSpan: 2,\n                },\n            },\n        },\n    },\n};\n```\n\n:::note\nIf you do *not* set the `rowSpan` for a component, it can stretch vertically\nwithin its row, and the row will simply expand with the component.\n\nIf you *do* set a `rowSpan`, even if you set it to `1`, the component is\nfixed to that height. What happens to any potential overflow depends on the\ncomponent.\n:::\n\n:::warning\nCustom web-components that you include in the forms should not have hard-coded\n`width` or `height` values! Otherwise they will stretch out of their cell and break\nthe UI. Make sure that such components are internally designed to be responsive,\nand that their `:host` and any potential wrapping container has the following styles:\n```scss\n:host {\n    display: block; // or another suitable property\n    width: 100%;\n    height: 100%;\n}\n:host([hidden]) {\n    display: none;\n}\n.my-component {\n    width: 100%;\n    height: 100%;\n}\n```\n:::","usage":{},"docs":"Stretching fields in a form\n\nSometimes, you need a field in the form to occupy several columns or the\nentire row, and stretch itself as wide as the form's width,\ndisregarding the form's layout and placement of the item in the list.\n\nThis could be nice for fields that require more space to provide better\nusability.\n\n:::tip\nFor example, a larger `textarea` is easier for the user to type in and\na `slider` that has many steps is easier to interact with when it is rendered wider.\n:::\n\nTo do so, in your schema you need to specify a `layout` for the field itself.\n`span` specifies the number of columns that the field should span.\n\nThus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\nSince we do not offer a *form layout* that has more than five columns,\nvalues higher than 5 (or higher than the maximum number of columns in the form)\nwill only force the field to be full-width, just like `all` does.\n\n```ts\nexport const schema = {\n    …\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                layout: {\n                      colSpan: 'all',\n                  },\n              },\n        },\n        …\n    },\n    …\n};\n```\n\n###### Dense layout (Auto reorder fields to avoid empty cells)\nThe order of fields and the number of columns that a field must span, can\naffect the layout of your responsive form when the container width changes.\n\nLet's say you have a form with a 4 column layout, and you specify that its\nsecond field must span 3 columns.\nIf the container's width decreases, it will force the form to render its\nlayout in 3 columns instead. Therefore, the second field has to jump\nto the next line to still be able to span 3 columns.\nThis will leave 2 empty cells in the first row, right after the first field.\n\nTo avoid these empty cells in the UI, limel-form will place the next available\nfield in this hole, provided it fits. So the hole may be filled by a single 2 column\nwide field, by two 1 column wide fields, or only partially filled by a single 1 column\nwide field. If none of the remaining fields fit, the hole will be left as it is.\n\nHowever, you can disable this functionality by setting `dense` to `false` in the\noptions for the grid layout.\n\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            dense: false,\n        },\n    },\n};\n```\n\n:::note\nSometimes, the order of fields are important for the way users perceive the form.\nIf you choose to use the default auto-reordering behavior, make sure to test your\nform's layout in different screen sizes to see whether you can mitigate unwanted\nlayout changes.\n\nSome unwanted results can be avoided by changing the order of the fields,\nso that they render appropriately on different screens, or by dividing\nthe form into more sections.\n:::\n\n###### Stretching a field vertically\nMost standard elements that can be used in forms, such as `limel-input`,\n`limel-select`, `limel-slider`, etc, have a fixed height, and therefore\nit does not really make sense to stretch them vertically, and we strongly\nrecommend you not to!\n\nBut there are some exceptions. One of them is `limel-input-field` with\n`type='textarea'`.\n\nAlso, if you create a custom component for your form—let's say a map—you\ncan use `rowSpan` to increase the height of your custom component.\n```ts\nexport const schema = {\n    type: 'object',\n    properties: {\n        comment: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                      colSpan: 3,\n                      rowSpan: 2,\n                },\n            },\n        },\n    },\n};\n```\n\n:::note\nIf you do *not* set the `rowSpan` for a component, it can stretch vertically\nwithin its row, and the row will simply expand with the component.\n\nIf you *do* set a `rowSpan`, even if you set it to `1`, the component is\nfixed to that height. What happens to any potential overflow depends on the\ncomponent.\n:::\n\n:::warning\nCustom web-components that you include in the forms should not have hard-coded\n`width` or `height` values! Otherwise they will stretch out of their cell and break\nthe UI. Make sure that such components are internally designed to be responsive,\nand that their `:host` and any potential wrapping container has the following styles:\n```scss\n:host {\n    display: block; // or another suitable property\n    width: 100%;\n    height: 100%;\n}\n:host([hidden]) {\n    display: none;\n}\n.my-component {\n    width: 100%;\n    height: 100%;\n}\n```\n:::","docsTags":[{"name":"link","text":"span-fields-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-controls","limel-switch","limel-form","limel-button"],"dependencyGraph":{"limel-example-form-span-fields":["limel-example-controls","limel-switch","limel-form","limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"span-fields.tsx","type":"tsx","source":"import { ValidationStatus } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { schema } from './span-fields-schema';\n\n/**\n * Stretching fields in a form\n *\n * Sometimes, you need a field in the form to occupy several columns or the\n * entire row, and stretch itself as wide as the form's width,\n * disregarding the form's layout and placement of the item in the list.\n *\n * This could be nice for fields that require more space to provide better\n * usability.\n *\n * :::tip\n * For example, a larger `textarea` is easier for the user to type in and\n * a `slider` that has many steps is easier to interact with when it is rendered wider.\n * :::\n *\n * To do so, in your schema you need to specify a `layout` for the field itself.\n * `span` specifies the number of columns that the field should span.\n *\n * Thus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\n * Since we do not offer a *form layout* that has more than five columns,\n * values higher than 5 (or higher than the maximum number of columns in the form)\n * will only force the field to be full-width, just like `all` does.\n *\n * ```ts\n * export const schema = {\n *     …\n *     properties: {\n *         name: {\n *             type: 'string',\n *             title: 'Comment',\n *             lime: {\n *                 layout: {\n *                       colSpan: 'all',\n *                   },\n *               },\n *         },\n *         …\n *     },\n *     …\n * };\n * ```\n *\n * ###### Dense layout (Auto reorder fields to avoid empty cells)\n * The order of fields and the number of columns that a field must span, can\n * affect the layout of your responsive form when the container width changes.\n *\n * Let's say you have a form with a 4 column layout, and you specify that its\n * second field must span 3 columns.\n * If the container's width decreases, it will force the form to render its\n * layout in 3 columns instead. Therefore, the second field has to jump\n * to the next line to still be able to span 3 columns.\n * This will leave 2 empty cells in the first row, right after the first field.\n *\n * To avoid these empty cells in the UI, limel-form will place the next available\n * field in this hole, provided it fits. So the hole may be filled by a single 2 column\n * wide field, by two 1 column wide fields, or only partially filled by a single 1 column\n * wide field. If none of the remaining fields fit, the hole will be left as it is.\n *\n * However, you can disable this functionality by setting `dense` to `false` in the\n * options for the grid layout.\n *\n * ```ts\n * export const schema = {\n *     type: 'object',\n *     lime: {\n *         layout: {\n *             type: 'grid',\n *             dense: false,\n *         },\n *     },\n * };\n * ```\n *\n * :::note\n * Sometimes, the order of fields are important for the way users perceive the form.\n * If you choose to use the default auto-reordering behavior, make sure to test your\n * form's layout in different screen sizes to see whether you can mitigate unwanted\n * layout changes.\n *\n * Some unwanted results can be avoided by changing the order of the fields,\n * so that they render appropriately on different screens, or by dividing\n * the form into more sections.\n * :::\n *\n * ###### Stretching a field vertically\n * Most standard elements that can be used in forms, such as `limel-input`,\n * `limel-select`, `limel-slider`, etc, have a fixed height, and therefore\n * it does not really make sense to stretch them vertically, and we strongly\n * recommend you not to!\n *\n * But there are some exceptions. One of them is `limel-input-field` with\n * `type='textarea'`.\n *\n * Also, if you create a custom component for your form—let's say a map—you\n * can use `rowSpan` to increase the height of your custom component.\n * ```ts\n * export const schema = {\n *     type: 'object',\n *     properties: {\n *         comment: {\n *             type: 'string',\n *             title: 'Comment',\n *             lime: {\n *                 component: {\n *                     props: {\n *                         type: 'textarea',\n *                     },\n *                 },\n *                 layout: {\n *                       colSpan: 3,\n *                       rowSpan: 2,\n *                 },\n *             },\n *         },\n *     },\n * };\n * ```\n *\n * :::note\n * If you do *not* set the `rowSpan` for a component, it can stretch vertically\n * within its row, and the row will simply expand with the component.\n *\n * If you *do* set a `rowSpan`, even if you set it to `1`, the component is\n * fixed to that height. What happens to any potential overflow depends on the\n * component.\n * :::\n *\n * :::warning\n * Custom web-components that you include in the forms should not have hard-coded\n * `width` or `height` values! Otherwise they will stretch out of their cell and break\n * the UI. Make sure that such components are internally designed to be responsive,\n * and that their `:host` and any potential wrapping container has the following styles:\n * ```scss\n * :host {\n *     display: block; // or another suitable property\n *     width: 100%;\n *     height: 100%;\n * }\n * :host([hidden]) {\n *     display: none;\n * }\n * .my-component {\n *     width: 100%;\n *     height: 100%;\n * }\n * ```\n * :::\n *\n * @link span-fields-schema.ts\n */\n@Component({\n    tag: 'limel-example-form-span-fields',\n    shadow: true,\n})\nexport class FormLayoutExample {\n    @State()\n    private formData: object = {};\n\n    @State()\n    private valid = true;\n\n    @State()\n    private dense = true;\n\n    @State()\n    private schema = schema;\n\n    public render() {\n        return [\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-switch\n                    label=\"Dense layout\"\n                    value={this.dense}\n                    onChange={this.handleCheckboxChange}\n                />\n            </limel-example-controls>,\n            <limel-form\n                onChange={this.handleFormChange}\n                onValidate={this.handleFormValidate}\n                value={this.formData}\n                schema={this.schema}\n            />,\n            <limel-button\n                label=\"Submit\"\n                primary={true}\n                disabled={!this.valid}\n                onClick={this.handleSubmit}\n            />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n\n    private handleFormValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.valid = event.detail.valid;\n        console.log(event.detail);\n    };\n\n    private handleSubmit = () => {\n        const json = JSON.stringify(this.formData, null, '    ');\n        alert(`Sending information to villains...\\n\\n${json}`);\n    };\n\n    private handleCheckboxChange = (event: CustomEvent<boolean>) => {\n        this.dense = event.detail;\n        this.schema = { ...this.schema };\n        this.schema.lime.layout.dense = this.dense;\n    };\n}\n"},{"filename":"span-fields-schema.ts","type":"ts","source":"export const schema = {\n    title: 'A form with fields that span columns and rows',\n    description:\n        'This main form has a grid layout with 5 columns. Notice how fields reorder to fill holes when the \"Dense layout\" is enabled. You may need to resize your browser window to see this responsive layout in effect.',\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 5,\n            dense: true,\n        },\n    },\n    properties: {\n        field1: {\n            type: 'string',\n            title: 'Nr. 1: spans 1 column',\n        },\n        field2: {\n            type: 'integer',\n            title: 'Nr. 2: spans 2 columns',\n            lime: {\n                layout: {\n                    colSpan: 2,\n                },\n            },\n        },\n        field3: {\n            type: 'string',\n            title: 'Nr. 3: spans 2 columns',\n            lime: {\n                layout: {\n                    colSpan: 2,\n                },\n            },\n        },\n        field4: {\n            type: 'string',\n            title: 'Nr. 4: spans 1 columns',\n        },\n        field5: {\n            type: 'number',\n            title: 'Nr. 6: spans 2 columns & 3 rows',\n            lime: {\n                component: {\n                    name: 'limel-example-form-map-component',\n                },\n                layout: {\n                    colSpan: 2,\n                    rowSpan: 3,\n                },\n            },\n        },\n        field6: {\n            type: 'string',\n            title: 'Nr. 5: spans 2 columns & 2 rows',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                    colSpan: 2,\n                    rowSpan: 2,\n                },\n            },\n        },\n        field7: {\n            type: 'number',\n            title: 'Nr. 7: spans all columns',\n            minimum: 0,\n            maximum: 100,\n            multipleOf: 10,\n            lime: {\n                layout: {\n                    colSpan: 'all',\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/grid/examples","filePath":"./src/components/grid/examples/grid.tsx","fileName":"grid.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/grid/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/grid/examples/usage","tag":"limel-example-grid","overview":"We use the `grid-area` property to give each component a unique name, and\nthen use this name to \"draw\" our grid layout.\n\nYou can name each component anything you want, like `salespipe`, or\n`infotile-active-support-tickets`, but keeping the names to a fixed number of\ncharacters makes the \"drawing\" of the grid look more like the actual grid.\nOne to three characters is probably a good number for most cases.\n\nAny \"name\" that doesn't match a named element will create empty cells. In our\ncase, we use a dot (`.`) to mark empty cells. Empty cells can be put anywhere\nin the grid, not just at the end.\n\nNote that we can add some extra spaces after the dot marking an empty cell,\nin order to align the next cell in our config-string. This can also be used\nif your elements have named of differing lengths. The extra whitespace is\nignored when the CSS is parsed.\n\nIf the name of an element does not appear in the grid-configuration, it will\nnot be displayed at all. This might be useful if you wish to show a specific\ncomponent only under certain circumstances, like if the viewport is large\nenough to accomodate it.","usage":{},"docs":"We use the `grid-area` property to give each component a unique name, and\nthen use this name to \"draw\" our grid layout.\n\nYou can name each component anything you want, like `salespipe`, or\n`infotile-active-support-tickets`, but keeping the names to a fixed number of\ncharacters makes the \"drawing\" of the grid look more like the actual grid.\nOne to three characters is probably a good number for most cases.\n\nAny \"name\" that doesn't match a named element will create empty cells. In our\ncase, we use a dot (`.`) to mark empty cells. Empty cells can be put anywhere\nin the grid, not just at the end.\n\nNote that we can add some extra spaces after the dot marking an empty cell,\nin order to align the next cell in our config-string. This can also be used\nif your elements have named of differing lengths. The extra whitespace is\nignored when the CSS is parsed.\n\nIf the name of an element does not appear in the grid-configuration, it will\nnot be displayed at all. This might be useful if you wish to show a specific\ncomponent only under certain circumstances, like if the viewport is large\nenough to accomodate it.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-grid"],"dependencyGraph":{"limel-example-grid":["limel-grid"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"grid.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * We use the `grid-area` property to give each component a unique name, and\n * then use this name to \"draw\" our grid layout.\n *\n * You can name each component anything you want, like `salespipe`, or\n * `infotile-active-support-tickets`, but keeping the names to a fixed number of\n * characters makes the \"drawing\" of the grid look more like the actual grid.\n * One to three characters is probably a good number for most cases.\n *\n * Any \"name\" that doesn't match a named element will create empty cells. In our\n * case, we use a dot (`.`) to mark empty cells. Empty cells can be put anywhere\n * in the grid, not just at the end.\n *\n * Note that we can add some extra spaces after the dot marking an empty cell,\n * in order to align the next cell in our config-string. This can also be used\n * if your elements have named of differing lengths. The extra whitespace is\n * ignored when the CSS is parsed.\n *\n * If the name of an element does not appear in the grid-configuration, it will\n * not be displayed at all. This might be useful if you wish to show a specific\n * component only under certain circumstances, like if the viewport is large\n * enough to accomodate it.\n */\n@Component({\n    tag: 'limel-example-grid',\n    shadow: true,\n    styleUrl: 'grid.scss',\n})\nexport class GridExample {\n    public render() {\n        return (\n            <limel-grid>\n                <my-deep-red-component />\n                <my-red-component />\n                <my-orange-component />\n                <my-yellow-component />\n                <my-green-component />\n                <my-turquoise-component />\n                <my-blue-component />\n                <my-dark-blue-component />\n                <my-magenta-component />\n                <my-light-grey-component />\n                <my-dark-grey-component />\n            </limel-grid>\n        );\n    }\n}\n"},{"filename":"grid.scss","type":"scss","source":"my-deep-red-component {\n    grid-area: drd;\n}\nmy-red-component {\n    grid-area: red;\n}\nmy-orange-component {\n    grid-area: ora;\n}\nmy-yellow-component {\n    grid-area: yel;\n}\nmy-green-component {\n    grid-area: grn;\n}\nmy-turquoise-component {\n    grid-area: trq;\n}\nmy-blue-component {\n    grid-area: blu;\n}\nmy-dark-blue-component {\n    grid-area: dbl;\n}\nmy-magenta-component {\n    grid-area: mag;\n}\nmy-light-grey-component {\n    grid-area: lgr;\n}\nmy-dark-grey-component {\n    grid-area: dgr;\n}\n\n/* prettier-ignore */\nlimel-grid {\n    --lime-grid-columns: 4;\n\n    --lime-grid-area:\n        \"drd drd blu dbl\"\n        \"drd drd blu dbl\"\n        \"trq trq blu dbl\"\n        \"trq trq blu dbl\"\n        \"red red red red\"\n        \"red red red red\"\n        \"red red red red\"\n        \"dgr mag mag lgr\"\n        \"dgr mag mag lgr\"\n        \"dgr mag mag lgr\"\n        \"ora mag mag yel\"\n        \"ora mag mag yel\"\n        \"grn grn .   .  \"\n        \"grn grn .   .  \"\n        \"grn grn .   .  \"\n        \"grn grn .   .  \";\n}\n\n// Below is stuff that's only here for the boxes in the grid\n// to look nice in this example. You wouldn't use any of this\n// when placing real components into a grid.\n\nmy-deep-red-component {\n    background-color: rgb(var(--color-red-darker));\n}\nmy-red-component {\n    background-color: rgb(var(--color-red-default));\n}\nmy-orange-component {\n    background-color: rgb(var(--color-orange-default));\n}\nmy-yellow-component {\n    background-color: rgb(var(--color-yellow-default));\n}\nmy-green-component {\n    background-color: rgb(var(--color-green-default));\n}\nmy-turquoise-component {\n    background-color: rgb(var(--color-teal-default));\n}\nmy-blue-component {\n    background-color: rgb(var(--color-sky-default));\n}\nmy-dark-blue-component {\n    background-color: rgb(var(--color-blue-darker));\n}\nmy-magenta-component {\n    background-color: rgb(var(--color-magenta-default));\n}\nmy-light-grey-component {\n    background-color: rgb(var(--color-glaucous-light));\n}\nmy-dark-grey-component {\n    background-color: rgb(var(--color-glaucous-darker));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples","filePath":"./src/components/header/examples/header.tsx","fileName":"header.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/usage","tag":"limel-example-header","overview":"How default layout of header works\nAll content of a header by default are placed on a horizontal row.\nThis will always render the headings on the left side, and the actions\non the right side.\n\nIn small containers when having the default layout, the `actions` area\nwins the battle of limited space! It means, if you have a very wide\ncomponent in the actions area, it will never shrink in size, and instead\nforces the headings to truncate.\n\n:::tip\nUsers can still hover the cursor on the truncated headings to read the full\ntext.\n:::","usage":{},"docs":"How default layout of header works\nAll content of a header by default are placed on a horizontal row.\nThis will always render the headings on the left side, and the actions\non the right side.\n\nIn small containers when having the default layout, the `actions` area\nwins the battle of limited space! It means, if you have a very wide\ncomponent in the actions area, it will never shrink in size, and instead\nforces the headings to truncate.\n\n:::tip\nUsers can still hover the cursor on the truncated headings to read the full\ntext.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-icon-button"],"dependencyGraph":{"limel-example-header":["limel-header","limel-icon-button"],"limel-header":["limel-icon"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * How default layout of header works\n * All content of a header by default are placed on a horizontal row.\n * This will always render the headings on the left side, and the actions\n * on the right side.\n *\n * In small containers when having the default layout, the `actions` area\n * wins the battle of limited space! It means, if you have a very wide\n * component in the actions area, it will never shrink in size, and instead\n * forces the headings to truncate.\n *\n * :::tip\n * Users can still hover the cursor on the truncated headings to read the full\n * text.\n * :::\n *\n */\n\n@Component({\n    tag: 'limel-example-header',\n    shadow: true,\n})\nexport class HeaderExample {\n    public render() {\n        return (\n            <limel-header\n                icon=\"brake_warning\"\n                heading=\"Useful information\"\n                subheading=\"Note\"\n                supportingText=\"Data couldn't be loaded!\"\n            >\n                <limel-icon-button\n                    slot=\"actions\"\n                    icon=\"multiply\"\n                    label=\"Close\"\n                    onClick={this.handleActionClick()}\n                />\n            </limel-header>\n        );\n    }\n\n    private handleActionClick = () => (event: MouseEvent) => {\n        event.stopPropagation();\n        console.log('close');\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples","filePath":"./src/components/header/examples/header-colors.tsx","fileName":"header-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/usage","tag":"limel-example-header-colors","overview":"Colorful header\nIt's up to you to choose colors for the background, text or icon.\nWhen you change the default colors pay attention to how they look together.\nFor instance the text is readable and has enough contrast with a background color.","usage":{},"docs":"Colorful header\nIt's up to you to choose colors for the background, text or icon.\nWhen you change the default colors pay attention to how they look together.\nFor instance the text is readable and has enough contrast with a background color.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button","limel-header"],"dependencyGraph":{"limel-example-header-colors":["limel-icon-button","limel-header"],"limel-icon-button":["limel-icon"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header-colors.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { Action } from '@limetech/lime-elements';\n\n/**\n * Colorful header\n * It's up to you to choose colors for the background, text or icon.\n * When you change the default colors pay attention to how they look together.\n * For instance the text is readable and has enough contrast with a background color.\n */\n\n@Component({\n    tag: 'limel-example-header-colors',\n    shadow: true,\n    styleUrl: 'header-colors.scss',\n})\nexport class HeaderExample {\n    private actions = [\n        {\n            id: '1',\n            icon: 'multiply',\n            label: 'Close',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-header\n                icon=\"create_new\"\n                heading=\"Edit note\"\n                subheading=\"Created: 17 Jan 2023\"\n            >\n                {this.renderActions()}\n            </limel-header>\n        );\n    }\n\n    private renderActions() {\n        if (!this.actions) {\n            return;\n        }\n\n        return (\n            <div class=\"actions\">\n                {this.actions.map(this.renderActionButton)}\n            </div>\n        );\n    }\n\n    private renderActionButton = (action: Action) => {\n        return (\n            <limel-icon-button\n                class=\"action-icon\"\n                icon={action.icon}\n                label={action.label}\n                onClick={this.handleActionClick(action)}\n            />\n        );\n    };\n\n    private handleActionClick = (action: Action) => (event: MouseEvent) => {\n        event.stopPropagation();\n        console.log(action);\n    };\n}\n"},{"filename":"header-colors.scss","type":"scss","source":":host(limel-example-header-colors) {\n    --header-background-color: rgb(var(--color-yellow-dark));\n    --header-icon-color: rgb(var(--color-white));\n    --header-heading-color: rgb(var(--color-brown-default));\n    --header-subheading-color: rgb(var(--color-brown-darker));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/header-menu.tsx","fileName":"header-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-header-menu","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-icon"],"dependencyGraph":{"limel-example-header-menu":["limel-menu","limel-icon"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"]},"props":[{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"items","type":"ListItem<any>[]","mutable":false,"reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"ListItem<any>[]"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header-menu.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { ListItem } from '../../list/list-item.types';\n\n@Component({\n    tag: 'limel-example-header-menu',\n    shadow: true,\n    styleUrl: 'header-menu.scss',\n})\nexport class HeaderMenu {\n    @Prop()\n    public items: ListItem[];\n\n    @Prop()\n    public icon: string;\n\n    private menuOpen = true;\n\n    public render() {\n        return (\n            <limel-menu items={this.items} open={this.menuOpen}>\n                <limel-icon slot=\"trigger\" name={this.icon} size=\"x-small\" />\n            </limel-menu>\n        );\n    }\n}\n"},{"filename":"header-menu.scss","type":"scss","source":":host {\n    line-height: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples","filePath":"./src/components/header/examples/header-narrow.tsx","fileName":"header-narrow.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/usage","tag":"limel-example-header-narrow","overview":"Narrow headers\nSometimes your UI design may require having a narrower header.\nThis will be easy to achieve by sending in the class of `is-narrow`\nto your component.\n\nThis will render the header icon smaller, and reduces the font size of\nthe `heading`.\n\n:::tip\nKeep in mind that headers are programmed to grow in height, depending\non their content. So if you have large custom components in the `actions`\nslot or use both `heading` and `subheading`, they will still force the header\nto appear tall.\n:::","usage":{},"docs":"Narrow headers\nSometimes your UI design may require having a narrower header.\nThis will be easy to achieve by sending in the class of `is-narrow`\nto your component.\n\nThis will render the header icon smaller, and reduces the font size of\nthe `heading`.\n\n:::tip\nKeep in mind that headers are programmed to grow in height, depending\non their content. So if you have large custom components in the `actions`\nslot or use both `heading` and `subheading`, they will still force the header\nto appear tall.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header"],"dependencyGraph":{"limel-example-header-narrow":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header-narrow.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Narrow headers\n * Sometimes your UI design may require having a narrower header.\n * This will be easy to achieve by sending in the class of `is-narrow`\n * to your component.\n *\n * This will render the header icon smaller, and reduces the font size of\n * the `heading`.\n *\n * :::tip\n * Keep in mind that headers are programmed to grow in height, depending\n * on their content. So if you have large custom components in the `actions`\n * slot or use both `heading` and `subheading`, they will still force the header\n * to appear tall.\n * :::\n *\n */\n@Component({\n    tag: 'limel-example-header-narrow',\n    shadow: true,\n    styleUrl: 'header-narrow.scss',\n})\nexport class HeaderExample {\n    public render() {\n        return (\n            <limel-header\n                class=\"is-narrow\"\n                icon=\"ok\"\n                heading=\"This is a narrow header\"\n            />\n        );\n    }\n}\n"},{"filename":"header-narrow.scss","type":"scss","source":":host(limel-example-header-narrow) {\n    --header-icon-color: rgb(var(--color-blue-default));\n    --header-top-right-left-border-radius: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples","filePath":"./src/components/header/examples/header-responsive.tsx","fileName":"header-responsive.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/usage","tag":"limel-example-header-responsive","overview":"How Responsive layout of header works\nHowever, sometimes you may need to make the layout be responsive and split\ninto two rows, at a break point.\n\nTo activate this responsive layout, you can simply add the `has-responsive-layout`\nclass to your `limel-header` component.\n\nThis makes a few changes in the layout. Firstly, both the left side (icon and\nheadings) and right side (actions slot) will occupy 50% of the total header\nwidth each. However, the width of left and right side will never become smaller\nthan `22rem`.\n\n:::tip\nThe value of `22rem` is the default breakpoint. But you can easily change it\nby tweaking the `--header-responsive-breakpoint` variable in your component.\n:::","usage":{},"docs":"How Responsive layout of header works\nHowever, sometimes you may need to make the layout be responsive and split\ninto two rows, at a break point.\n\nTo activate this responsive layout, you can simply add the `has-responsive-layout`\nclass to your `limel-header` component.\n\nThis makes a few changes in the layout. Firstly, both the left side (icon and\nheadings) and right side (actions slot) will occupy 50% of the total header\nwidth each. However, the width of left and right side will never become smaller\nthan `22rem`.\n\n:::tip\nThe value of `22rem` is the default breakpoint. But you can easily change it\nby tweaking the `--header-responsive-breakpoint` variable in your component.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button","limel-header"],"dependencyGraph":{"limel-example-header-responsive":["limel-icon-button","limel-header"],"limel-icon-button":["limel-icon"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header-responsive.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { Action } from '@limetech/lime-elements';\n/**\n * How Responsive layout of header works\n * However, sometimes you may need to make the layout be responsive and split\n * into two rows, at a break point.\n *\n * To activate this responsive layout, you can simply add the `has-responsive-layout`\n * class to your `limel-header` component.\n *\n * This makes a few changes in the layout. Firstly, both the left side (icon and\n * headings) and right side (actions slot) will occupy 50% of the total header\n * width each. However, the width of left and right side will never become smaller\n * than `22rem`.\n *\n * :::tip\n * The value of `22rem` is the default breakpoint. But you can easily change it\n * by tweaking the `--header-responsive-breakpoint` variable in your component.\n * :::\n *\n */\n\n@Component({\n    tag: 'limel-example-header-responsive',\n    shadow: true,\n    styleUrl: 'header-responsive.scss',\n})\nexport class HeaderExample {\n    private actions = [\n        {\n            id: '1',\n            icon: 'refresh',\n            label: 'Refresh',\n        },\n        {\n            id: '2',\n            icon: 'delete',\n            label: 'Delete',\n            disabled: true,\n        },\n        {\n            id: '3',\n            icon: 'edit',\n            label: 'Edit',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-header\n                class=\"has-responsive-layout\"\n                icon=\"resize_horizontal\"\n                heading=\"This header is responsive\"\n                subheading=\"Resize the container of this header to see how it works\"\n            >\n                {this.renderActions()}\n            </limel-header>\n        );\n    }\n\n    private renderActions() {\n        if (!this.actions) {\n            return;\n        }\n\n        return (\n            <div class=\"actions\" slot=\"actions\">\n                {this.actions.map(this.renderActionButton)}\n            </div>\n        );\n    }\n\n    private renderActionButton = (action: Action) => {\n        return (\n            <limel-icon-button\n                icon={action.icon}\n                label={action.label}\n                disabled={action.disabled}\n                onClick={this.handleActionClick(action)}\n            />\n        );\n    };\n\n    private handleActionClick = (action: Action) => (event: MouseEvent) => {\n        event.stopPropagation();\n        console.log(action);\n    };\n}\n"},{"filename":"header-responsive.scss","type":"scss","source":":host(limel-example-header-responsive) {\n    --header-responsive-breakpoint: 12rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples","filePath":"./src/components/icon/examples/icon.tsx","fileName":"icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/usage","tag":"limel-example-icon","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon"],"dependencyGraph":{"limel-example-icon":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-icon',\n    shadow: true,\n    styleUrl: 'icon.scss',\n})\nexport class IconExample {\n    public render() {\n        return [\n            <section class=\"lime-green\">\n                <h3>X-small</h3>\n                <limel-icon name=\"citrus\" size=\"x-small\" />\n                <limel-icon name=\"alps\" size=\"x-small\" />\n                <limel-icon name=\"ninja\" size=\"x-small\" />\n                <limel-icon name=\"thor_hammer\" size=\"x-small\" />\n                <limel-icon name=\"mate\" size=\"x-small\" />\n                <limel-icon name=\"croissant\" size=\"x-small\" />\n            </section>,\n            <section class=\"loving-magenta\">\n                <h3>Small</h3>\n                <limel-icon name=\"citrus\" size=\"small\" />\n                <limel-icon name=\"curls_with_dumbbells\" size=\"small\" />\n                <limel-icon name=\"bench_press\" size=\"small\" />\n                <limel-icon name=\"squats\" size=\"small\" />\n                <limel-icon name=\"pullups\" size=\"small\" />\n                <limel-icon name=\"pushups\" size=\"small\" />\n            </section>,\n            <section class=\"simple-blue\">\n                <h3>Medium</h3>\n                <limel-icon name=\"citrus\" size=\"medium\" />\n                <limel-icon name=\"day_of_the_tentacle\" size=\"medium\" />\n                <limel-icon name=\"bad_piggies\" size=\"medium\" />\n                <limel-icon name=\"triforce\" size=\"medium\" />\n                <limel-icon name=\"mana\" size=\"medium\" />\n                <limel-icon name=\"pokemon\" size=\"medium\" />\n            </section>,\n            <section class=\"sellable-orange\">\n                <h3>Large</h3>\n                <limel-icon name=\"citrus\" size=\"large\" />\n                <limel-icon name=\"dragon\" size=\"large\" />\n                <limel-icon name=\"caterpillar\" size=\"large\" />\n                <limel-icon name=\"frog\" size=\"large\" />\n                <limel-icon name=\"octopus\" size=\"large\" />\n                <limel-icon name=\"gorilla\" size=\"large\" />\n            </section>,\n            <section class=\"custom-size\">\n                <h3>Custom</h3>\n                <p> Size set in css.</p>\n                <limel-icon name=\"citrus\" />\n                <limel-icon name=\"strawberry\" />\n                <limel-icon name=\"broccoli\" />\n                <limel-icon name=\"paprika\" />\n                <limel-icon name=\"pear\" />\n            </section>,\n        ];\n    }\n}\n"},{"filename":"icon.scss","type":"scss","source":".lime-green {\n    limel-icon {\n        color: rgb(var(--lime-brand-color-lime-green));\n    }\n}\n\n.loving-magenta {\n    limel-icon {\n        color: rgb(var(--lime-brand-color-loving-magenta));\n    }\n}\n\n.simple-blue {\n    limel-icon {\n        color: rgb(var(--lime-brand-color-simple-blue));\n    }\n}\n\n.sellable-orange {\n    limel-icon {\n        color: rgb(var(--lime-brand-color-sellable-orange));\n    }\n}\n\n.custom-size {\n    limel-icon {\n        height: 6.25rem;\n        width: 6.25rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples","filePath":"./src/components/icon/examples/icon-background.tsx","fileName":"icon-background.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/usage","tag":"limel-example-icon-background","overview":"Example with background color\n:::note\nNote that `badge` is set to `true` to provide more space around the icon,\nand make sure the background color is nicely displayed.\n:::","usage":{},"docs":"Example with background color\n:::note\nNote that `badge` is set to `true` to provide more space around the icon,\nand make sure the background color is nicely displayed.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon"],"dependencyGraph":{"limel-example-icon-background":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-background.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Example with background color\n *:::note\n * Note that `badge` is set to `true` to provide more space around the icon,\n * and make sure the background color is nicely displayed.\n *:::\n */\n@Component({\n    tag: 'limel-example-icon-background',\n    shadow: true,\n    styleUrl: 'icon-background.scss',\n})\nexport class IconBackgroundExample {\n    public render() {\n        return [\n            <limel-icon\n                badge={true}\n                class=\"company\"\n                name=\"organization\"\n                size=\"large\"\n            />,\n            <limel-icon\n                badge={true}\n                class=\"person\"\n                name=\"user_group_man_man\"\n                size=\"large\"\n            />,\n            <limel-icon badge={true} class=\"deal\" name=\"money\" size=\"large\" />,\n            <limel-icon\n                badge={true}\n                class=\"todo\"\n                name=\"todo_list\"\n                size=\"large\"\n            />,\n            <limel-icon\n                badge={true}\n                class=\"campaign\"\n                name=\"megaphone\"\n                size=\"large\"\n            />,\n        ];\n    }\n}\n"},{"filename":"icon-background.scss","type":"scss","source":":host(limel-example-icon-background) {\n    display: grid;\n    grid-auto-flow: row;\n    gap: 1rem;\n\n    limel-icon {\n        color: rgb(var(--color-white)); /* For all icons in this example */\n\n        &.company {\n            background-color: rgb(var(--color-sky-default));\n        }\n        &.person {\n            background-color: rgb(var(--color-orange-default));\n        }\n        &.deal {\n            background-color: rgb(var(--color-green-default));\n        }\n        &.todo {\n            color: rgb(var(--contrast-1100));\n            /*\n                Since `background-color` is not specified here, it defaults to `transparent`.\n                Therefore we must ensure that the `color` of this icon is visible\n                on its background.\n            */\n        }\n        &.campaign {\n            background-color: rgb(var(--color-pink-default));\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples","filePath":"./src/components/icon-button/examples/icon-button-basic.tsx","fileName":"icon-button-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/usage","tag":"limel-example-icon-button-basic","overview":"Basic Example\n\nJust an icon and a click-handler.\nOpen the dev-tools console to see logged clicks.","usage":{},"docs":"Basic Example\n\nJust an icon and a click-handler.\nOpen the dev-tools console to see logged clicks.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button"],"dependencyGraph":{"limel-example-icon-button-basic":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button-basic.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic Example\n *\n * Just an icon and a click-handler.\n * Open the dev-tools console to see logged clicks.\n */\n@Component({\n    tag: 'limel-example-icon-button-basic',\n    shadow: true,\n})\nexport class IconButtonBasicExample {\n    public render() {\n        return [\n            <limel-icon-button\n                label=\"Add favourite\"\n                icon=\"heart_outlined\"\n                onClick={this.onClick}\n            />,\n        ];\n    }\n\n    private onClick() {\n        console.log('Button clicked.');\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples","filePath":"./src/components/icon-button/examples/icon-button-composite.tsx","fileName":"icon-button-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/usage","tag":"limel-example-icon-button-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button","limel-example-controls","limel-switch"],"dependencyGraph":{"limel-example-icon-button-composite":["limel-icon-button","limel-example-controls","limel-switch"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button-composite.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-icon-button-composite',\n    shadow: true,\n    styleUrl: 'icon-button-composite.scss',\n})\nexport class IconButtonCompositeExample {\n    @State()\n    private isFavorite = false;\n\n    @State()\n    private props = {\n        disabled: false,\n        elevated: false,\n    };\n\n    public render() {\n        return [\n            <limel-icon-button\n                label={this.isFavorite ? 'Remove Favorite' : 'Add Favorite'}\n                icon={this.isFavorite ? 'heart_filled' : 'heart_outlined'}\n                onClick={this.toggleFavorite}\n                {...this.props}\n            />,\n            <limel-example-controls>\n                {this.renderControls()}\n            </limel-example-controls>,\n        ];\n    }\n\n    private renderControls() {\n        const controls = [\n            {\n                property: 'disabled',\n                label: 'Disabled',\n                value: true,\n            },\n            {\n                property: 'elevated',\n                label: 'Elevated',\n                value: true,\n            },\n        ];\n\n        return controls.map((control) => {\n            return (\n                <limel-switch\n                    label={control.label}\n                    value={!!this.props[control.property]}\n                    onChange={this.handleChange(control)}\n                />\n            );\n        });\n    }\n\n    private handleChange = (control) => (event: CustomEvent) => {\n        this.props = {\n            ...this.props,\n            ...{\n                [control.property]: (event.detail && control.value) || null,\n            },\n        };\n    };\n\n    private toggleFavorite = () => {\n        this.isFavorite = !this.isFavorite;\n    };\n}\n"},{"filename":"icon-button-composite.scss","type":"scss","source":"limel-switch {\n    margin-right: 0.9375rem;\n}\n\nlimel-icon-button {\n    margin-bottom: 1.25rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples","filePath":"./src/components/icon-button/examples/icon-button-disabled.tsx","fileName":"icon-button-disabled.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/usage","tag":"limel-example-icon-button-disabled","overview":"Disabled","usage":{},"docs":"Disabled","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button"],"dependencyGraph":{"limel-example-icon-button-disabled":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button-disabled.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Disabled\n */\n@Component({\n    tag: 'limel-example-icon-button-disabled',\n    shadow: true,\n})\nexport class IconButtonDisabledExample {\n    public render() {\n        return [\n            <limel-icon-button\n                label=\"Add favourite\"\n                icon=\"heart_outlined\"\n                disabled={true}\n                onClick={this.onClick}\n            />,\n        ];\n    }\n\n    private onClick() {\n        console.log('This should never happen, since the button is disabled.');\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples","filePath":"./src/components/icon-button/examples/icon-button-elevated.tsx","fileName":"icon-button-elevated.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/usage","tag":"limel-example-icon-button-elevated","overview":"Elevated\n\nAn alternative button style, which helps communicate that this is a button\nwhich can be clicked.","usage":{},"docs":"Elevated\n\nAn alternative button style, which helps communicate that this is a button\nwhich can be clicked.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button"],"dependencyGraph":{"limel-example-icon-button-elevated":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button-elevated.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Elevated\n *\n * An alternative button style, which helps communicate that this is a button\n * which can be clicked.\n */\n@Component({\n    tag: 'limel-example-icon-button-elevated',\n    shadow: true,\n})\nexport class IconButtonElevatedExample {\n    public render() {\n        return (\n            <limel-icon-button\n                label=\"Add favourite\"\n                icon=\"heart_outlined\"\n                elevated={true}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples","filePath":"./src/components/icon-button/examples/icon-button-toggle-state.tsx","fileName":"icon-button-toggle-state.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/usage","tag":"limel-example-icon-button-toggle-state","overview":"Toggle State\n\nThis isn't really a feature of `limel-icon-button`, but since it is a common\nuse case, here is a simple way to make the icon button toggle between two\ndifferent \"states\", each with its own icon and label.","usage":{},"docs":"Toggle State\n\nThis isn't really a feature of `limel-icon-button`, but since it is a common\nuse case, here is a simple way to make the icon button toggle between two\ndifferent \"states\", each with its own icon and label.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button"],"dependencyGraph":{"limel-example-icon-button-toggle-state":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button-toggle-state.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Toggle State\n *\n * This isn't really a feature of `limel-icon-button`, but since it is a common\n * use case, here is a simple way to make the icon button toggle between two\n * different \"states\", each with its own icon and label.\n */\n@Component({\n    tag: 'limel-example-icon-button-toggle-state',\n    shadow: true,\n})\nexport class IconButtonToggleStateExample {\n    @State()\n    private isFavorite = false;\n\n    public render() {\n        return (\n            <limel-icon-button\n                label={this.isFavorite ? 'Remove Favorite' : 'Add Favorite'}\n                icon={this.isFavorite ? 'heart_filled' : 'heart_outlined'}\n                onClick={this.toggleFavorite}\n            />\n        );\n    }\n\n    private toggleFavorite = () => {\n        this.isFavorite = !this.isFavorite;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples","filePath":"./src/components/icon/examples/icon-finder.tsx","fileName":"icon-finder.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/usage","tag":"limel-example-icon-finder","overview":"Icon Finder\n\nUsed in the docs for `limel-icon`.","usage":{},"docs":"Icon Finder\n\nUsed in the docs for `limel-icon`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button","limel-chip-set"],"dependencyGraph":{"limel-example-icon-finder":["limel-icon-button","limel-chip-set"],"limel-icon-button":["limel-icon"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-finder.tsx","type":"tsx","source":"import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER, ENTER_KEY_CODE } from '../../../util/keycodes';\n\ninterface Icon {\n    id: string;\n    tags: string[];\n}\n\n/**\n * Icon Finder\n *\n * Used in the docs for `limel-icon`.\n */\n@Component({\n    tag: 'limel-example-icon-finder',\n    shadow: true,\n})\nexport class IconFinder {\n    @State()\n    private value: Chip[] = [];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private icons: Icon[] = [];\n\n    private indexedIcons: any[] = [];\n\n    public componentWillLoad() {\n        this.loadIconIndex();\n    }\n\n    private loadIconIndex = async () => {\n        const response = await fetch(\n            'https://lundalogik.github.io/lime-icons8/assets/icon-index.json'\n        );\n        const json = await response?.json?.();\n        this.indexedIcons = json;\n    };\n\n    public render() {\n        return [\n            <limel-chip-set\n                label=\"Icon finder\"\n                type=\"input\"\n                value={this.value}\n                onChange={this.chipSetOnChange}\n                onInput={this.onInput}\n                onKeyUp={this.onKeyUp}\n                searchLabel=\"Type and press enter to search\"\n                emptyInputOnBlur={true}\n                leadingIcon={'search'}\n            />,\n            <div> {this.icons.map(this.renderIconButton)}</div>,\n        ];\n    }\n\n    private renderIconButton = (icon: Icon) => {\n        const iconName = icon.id.replace('.svg', '');\n        const label = `Copy ${iconName}`;\n\n        return (\n            <limel-icon-button\n                label={label}\n                icon={iconName}\n                onClick={this.copyIconName}\n            />\n        );\n    };\n\n    private copyIconName(event) {\n        const iconName = event.target.icon;\n        const element = document.createElement('textarea');\n        element.value = iconName;\n        document.body.appendChild(element);\n        element.select();\n        document.execCommand('copy');\n        document.body.removeChild(element);\n        console.log(`copied icon name '${iconName}' to clipboard`);\n    }\n\n    private onInput = (event: CustomEvent<string>) => {\n        this.textValue = event.detail;\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (\n            (event.key === ENTER || event.keyCode === ENTER_KEY_CODE) &&\n            this.textValue.trim()\n        ) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.searchIcons();\n            this.textValue = '';\n        }\n    };\n\n    private searchIcons = () => {\n        this.icons = [];\n        this.indexedIcons.forEach((icon: Icon) => {\n            this.value.forEach((search: Chip) => {\n                const hits = icon.tags.filter((tag) =>\n                    tag.includes(search.text)\n                );\n                if (hits.length || icon.id.includes(search.text)) {\n                    this.icons.push(icon);\n                }\n            });\n        });\n        this.icons = [...new Set(this.icons)];\n    };\n\n    private chipSetOnChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        this.value = event.detail;\n        this.searchIcons();\n    };\n\n    private createChip(name: string): Chip {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n        };\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile.tsx","fileName":"info-tile.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile","overview":"Basic example\n\nThis component does its best to offer a responsive layout\nthat reacts both to the length of text, and size of the container.\n\n:::note\nTo use this component properly, you need to define both\na declared `height` and a declared `width` for it. Alternatively,\nmake sure that its container enforces a width and height,\nfor instance, use it as a flex or grid child.\n:::\n\nIn this example, you can resize the component to see how it\ntries to adjust its content to the size of its container.\n\n:::tip\nTry to avoid long textual content to get\nthe best possible visualization. They can cause\nundesired overlapping of the content, depending on the size of the\ncomponent.\n:::","usage":{},"docs":"Basic example\n\nThis component does its best to offer a responsive layout\nthat reacts both to the length of text, and size of the container.\n\n:::note\nTo use this component properly, you need to define both\na declared `height` and a declared `width` for it. Alternatively,\nmake sure that its container enforces a width and height,\nfor instance, use it as a flex or grid child.\n:::\n\nIn this example, you can resize the component to see how it\ntries to adjust its content to the size of its container.\n\n:::tip\nTry to avoid long textual content to get\nthe best possible visualization. They can cause\nundesired overlapping of the content, depending on the size of the\ncomponent.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile"],"dependencyGraph":{"limel-example-info-tile":["limel-info-tile"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic example\n *\n * This component does its best to offer a responsive layout\n * that reacts both to the length of text, and size of the container.\n *\n * :::note\n * To use this component properly, you need to define both\n * a declared `height` and a declared `width` for it. Alternatively,\n * make sure that its container enforces a width and height,\n * for instance, use it as a flex or grid child.\n * :::\n *\n * In this example, you can resize the component to see how it\n * tries to adjust its content to the size of its container.\n *\n * :::tip\n * Try to avoid long textual content to get\n * the best possible visualization. They can cause\n * undesired overlapping of the content, depending on the size of the\n * component.\n * :::\n */\n@Component({\n    tag: 'limel-example-info-tile',\n    shadow: true,\n    styleUrl: 'info-tile.scss',\n})\nexport class InfoTileExample {\n    public render() {\n        const link = {\n            href: 'https://duckduckgo.com/?q=weather',\n            title: 'Click to see real-time weather forecast',\n            target: '_blank',\n        };\n\n        return (\n            <div>\n                <limel-info-tile\n                    icon=\"partly_cloudy_rain\"\n                    label=\"Partly cloudy with a risk of rain\"\n                    prefix=\"temp\"\n                    value=\"23\"\n                    suffix=\"°C\"\n                    link={link}\n                />\n            </div>\n        );\n    }\n}\n"},{"filename":"info-tile.scss","type":"scss","source":"div {\n    resize: both;\n    overflow: auto;\n\n    box-sizing: border-box;\n    position: relative;\n\n    min-width: 8rem;\n    width: 12rem;\n    max-width: 40rem;\n\n    min-height: 8rem;\n    height: 12rem;\n    max-height: 40rem;\n\n    padding: 1rem;\n    border: 0.125rem dashed rgb(var(--contrast-500));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile-badge.tsx","fileName":"info-tile-badge.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile-badge","overview":"Displaying a notification badge\n\nThe component can display a badge, which could either be a `number` or\na `string`. Read more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","usage":{},"docs":"Displaying a notification badge\n\nThe component can display a badge, which could either be a `number` or\na `string`. Read more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile"],"dependencyGraph":{"limel-example-info-tile-badge":["limel-info-tile"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile-badge.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Displaying a notification badge\n *\n * The component can display a badge, which could either be a `number` or\n * a `string`. Read more about how the badge truncates or abbreviates the\n * provided label [here](#/component/limel-badge/).\n */\n@Component({\n    tag: 'limel-example-info-tile-badge',\n    shadow: true,\n    styleUrl: 'info-tile-badge.scss',\n})\nexport class InfoTileBadgeExample {\n    private NumberBadge: number = 6;\n    private NumberValue: number = 23;\n\n    private StringBadge: string = '···';\n    private StringValue: string = '23,89';\n\n    public render() {\n        return [\n            <limel-info-tile\n                icon=\"doctors_bag\"\n                label=\"Active support tickets\"\n                value={this.NumberValue}\n                badge={this.NumberBadge}\n                link={{ href: '#' }}\n            />,\n            <limel-info-tile\n                icon=\"water\"\n                label=\"Average weekly usage\"\n                value={this.StringValue}\n                suffix=\"L\"\n                badge={this.StringBadge}\n                link={{ href: '#' }}\n            />,\n        ];\n    }\n}\n"},{"filename":"info-tile-badge.scss","type":"scss","source":":host(limel-example-info-tile-badge) {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 8rem;\n    gap: 2rem;\n    padding: 2rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile-loading.tsx","fileName":"info-tile-loading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile-loading","overview":"Loading state\n\nSometimes the value needs to be calculated, updated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow an indeterminate progressbar indicating the data is being updated,\nwhile the older value is still being displayed.\n\n:::note\nNote that this does _not_ disable the link, and most probably you\ndo not need it to be disabled either.\nIf the link should be disabled while loading, the\n`disabled` property should be set to `true` as well.\n:::","usage":{},"docs":"Loading state\n\nSometimes the value needs to be calculated, updated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow an indeterminate progressbar indicating the data is being updated,\nwhile the older value is still being displayed.\n\n:::note\nNote that this does _not_ disable the link, and most probably you\ndo not need it to be disabled either.\nIf the link should be disabled while loading, the\n`disabled` property should be set to `true` as well.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-info-tile-loading":["limel-info-tile","limel-example-controls","limel-checkbox"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile-loading.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Loading state\n *\n * Sometimes the value needs to be calculated, updated, or fetched\n * through a process that requires some time. In such cases, it is\n * a great idea to let the users know that the data is being updated.\n *\n * To do so, set the `loading` property to `true`. The component will then\n * show an indeterminate progressbar indicating the data is being updated,\n * while the older value is still being displayed.\n *\n * :::note\n * Note that this does _not_ disable the link, and most probably you\n * do not need it to be disabled either.\n * If the link should be disabled while loading, the\n * `disabled` property should be set to `true` as well.\n * :::\n */\n@Component({\n    tag: 'limel-example-info-tile-loading',\n    shadow: true,\n    styleUrl: 'info-tile-loading.scss',\n})\nexport class InfoTileLoadingExample {\n    @State()\n    public loading = false;\n\n    public render() {\n        const link = {\n            href: 'https://duckduckgo.com/?q=weather',\n            title: 'Click to see real-time weather forecast',\n        };\n\n        return [\n            <limel-info-tile\n                icon=\"partly_cloudy_rain\"\n                label=\"Partly cloudy with a risk of rain\"\n                prefix=\"temp\"\n                value=\"23\"\n                suffix=\"°C\"\n                link={link}\n                loading={this.loading}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Loading\"\n                    checked={this.loading}\n                    onChange={this.setLoading}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private setLoading = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.loading = event.detail;\n    };\n}\n"},{"filename":"info-tile-loading.scss","type":"scss","source":":host(limel-example-info-tile-loading) {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 8rem;\n    gap: 2rem;\n    padding: 2rem;\n}\n\nlimel-example-controls {\n    margin: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile-progress.tsx","fileName":"info-tile-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile-progress","overview":"Displaying a progress bar\n\nBy defining a numeric `progressValue`, you can display\na circular progress bar to visualize more data on the component.\nThis can for instance help illustrate how much of a\nset goal has been reached, which together with the `value` will help users\nget a better overview of the provided data.\n\nWhen the circular progress is shown, that would become the primary\nillustrative element on the component,\nwhich means the icon will be rendered smaller, only as a supportive\ncontextual visual element.\n\n:::tip\nIt is possible to customize the progress bar's suffix, but it is\nset to display the percentage sign (**%**) by default.\n:::","usage":{},"docs":"Displaying a progress bar\n\nBy defining a numeric `progressValue`, you can display\na circular progress bar to visualize more data on the component.\nThis can for instance help illustrate how much of a\nset goal has been reached, which together with the `value` will help users\nget a better overview of the provided data.\n\nWhen the circular progress is shown, that would become the primary\nillustrative element on the component,\nwhich means the icon will be rendered smaller, only as a supportive\ncontextual visual element.\n\n:::tip\nIt is possible to customize the progress bar's suffix, but it is\nset to display the percentage sign (**%**) by default.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile","limel-example-controls","limel-input-field"],"dependencyGraph":{"limel-example-info-tile-progress":["limel-info-tile","limel-example-controls","limel-input-field"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile-progress.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { InfoTileProgress } from '../info-tile.types';\n\n/**\n * Displaying a progress bar\n *\n * By defining a numeric `progressValue`, you can display\n * a circular progress bar to visualize more data on the component.\n * This can for instance help illustrate how much of a\n * set goal has been reached, which together with the `value` will help users\n * get a better overview of the provided data.\n *\n * When the circular progress is shown, that would become the primary\n * illustrative element on the component,\n * which means the icon will be rendered smaller, only as a supportive\n * contextual visual element.\n *\n * :::tip\n * It is possible to customize the progress bar's suffix, but it is\n * set to display the percentage sign (**%**) by default.\n * :::\n *\n */\n@Component({\n    tag: 'limel-example-info-tile-progress',\n    shadow: true,\n    styleUrl: 'info-tile-progress.scss',\n})\nexport class InfoTileProgressExample {\n    @State()\n    private progress: InfoTileProgress = {\n        value: 76,\n        prefix: '↑',\n    };\n\n    public render() {\n        return [\n            <limel-info-tile\n                label=\"Won deals this month\"\n                icon=\"money\"\n                prefix=\"Total value\"\n                value=\"70,659\"\n                suffix=\"EUR\"\n                link={{ href: '#' }}\n                progress={this.progress}\n            />,\n            <limel-example-controls>\n                <limel-input-field\n                    label=\"Progress value\"\n                    type=\"number\"\n                    value={`${this.progress.value}`}\n                    onChange={this.handleChange}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.progress = {\n            ...this.progress,\n            value: +event.detail,\n        };\n    };\n}\n"},{"filename":"info-tile-progress.scss","type":"scss","source":":host(limel-example-info-tile-progress) {\n    display: grid;\n    grid-template-columns: 3fr 1fr;\n    grid-template-rows: 10rem;\n    gap: 2rem;\n}\n\nlimel-example-controls {\n    margin: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile-styling.tsx","fileName":"info-tile-styling.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile-styling","overview":"How to style the Info tile\n\nThe component offers different CSS variables for styling\nthe color of the text, background, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","usage":{},"docs":"How to style the Info tile\n\nThe component offers different CSS variables for styling\nthe color of the text, background, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile"],"dependencyGraph":{"limel-example-info-tile-styling":["limel-info-tile"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile-styling.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { InfoTileProgress } from '../info-tile.types';\n\n/**\n * How to style the Info tile\n *\n * The component offers different CSS variables for styling\n * the color of the text, background, and it's icon; as well as\n * radius of it's rounded corners, and colors of the notification badge\n * and its text.\n */\n@Component({\n    tag: 'limel-example-info-tile-styling',\n    shadow: true,\n    styleUrl: 'info-tile-styling.scss',\n})\nexport class InfoTileStylingExample {\n    private value: string = '4 876';\n    private badge: number = 3;\n\n    private progress: InfoTileProgress = {\n        value: 12,\n        maxValue: 100,\n        suffix: '%',\n        displayPercentageColors: false,\n    };\n\n    public render() {\n        return [\n            <limel-info-tile\n                icon=\"electricity\"\n                label=\"Average weekly usage\"\n                value={this.value}\n                suffix=\"kWh\"\n                badge={this.badge}\n            />,\n            <limel-info-tile\n                label=\"Average weekly usage\"\n                icon=\"electricity\"\n                value={this.value}\n                suffix=\"kWh\"\n                progress={this.progress}\n                prefix=\"↑\"\n            />,\n        ];\n    }\n}\n"},{"filename":"info-tile-styling.scss","type":"scss","source":":host(limel-example-info-tile-styling) {\n    display: flex;\n    justify-content: space-evenly;\n    gap: 2rem;\n    padding: 2rem;\n    border-radius: 0.5rem;\n    background-color: rgb(var(--contrast-1500));\n}\n\nlimel-info-tile {\n    width: 18rem;\n    height: 8rem;\n\n    &:first-of-type {\n        --info-tile-icon-color: rgb(var(--color-cyan-light));\n        --info-tile-text-color: rgb(var(--color-yellow-default));\n        --info-tile-background-color: rgb(var(--color-indigo-dark));\n\n        --info-tile-badge-text-color: rgb(var(--color-indigo-dark));\n        --info-tile-badge-background-color: rgb(var(--color-orange-default));\n    }\n\n    &:last-of-type {\n        --info-tile-border-radius: 0.5rem;\n        --info-tile-icon-color: rgb(var(--color-cyan-dark));\n\n        --info-tile-progress-fill-color: rgb(var(--color-lime-light));\n        --info-tile-progress-prefix-color: rgb(var(--color-red-default));\n        --info-tile-progress-text-color: rgb(var(--color-lime-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-autocomplete.tsx","fileName":"input-field-autocomplete.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-autocomplete","overview":"Input Field with Completions","usage":{},"docs":"Input Field with Completions","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-input-field-autocomplete":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-autocomplete.tsx","type":"tsx","source":"import { Component, h, State, Watch } from '@stencil/core';\n\n/**\n * Input Field with Completions\n */\n@Component({\n    tag: 'limel-example-input-field-autocomplete',\n    shadow: true,\n})\nexport class InputFieldAutocompleteExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private value: string;\n\n    @State()\n    private completions: string[] = [\n        'Lundalogik AB',\n        'Lundalogik AS',\n        'SAAB AB',\n        'Lundalogistik & Spedition AB',\n        'Aftonbladet AB',\n        'Expressen AB',\n        'Swedbank',\n        'Handelsbanken',\n        'Väderstad',\n    ];\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Autocomplete\"\n                value={this.value}\n                completions={this.completions}\n                required={this.required}\n                invalid={this.invalid}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    @Watch('required')\n    protected checkValidity() {\n        this.invalid = this.required && !this.value;\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-error-icon.tsx","fileName":"input-field-error-icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-error-icon","overview":"Input Field with Error Icon","usage":{},"docs":"Input Field with Error Icon","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-error-icon":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-error-icon.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\nconst MIN_LENGTH = 6;\n\n/**\n * Input Field with Error Icon\n */\n@Component({\n    tag: 'limel-example-input-field-error-icon',\n    shadow: true,\n})\nexport class InputFieldErrorIconExample {\n    @State()\n    private valueNative: string;\n\n    @State()\n    private valueConsumer: string;\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Text Field with native validation\"\n                minlength={MIN_LENGTH}\n                helperText=\"Please enter at least 6 characters!\"\n                value={this.valueNative}\n                onChange={this.onChangeNative}\n            />,\n            <limel-input-field\n                label=\"Text Field with consumer validation\"\n                type={'email'}\n                invalid={this.isInvalid()}\n                helperText=\"Please enter an email with the domain 'test.com'\"\n                value={this.valueConsumer}\n                onChange={this.onChangeConsumer}\n            />,\n        ];\n    }\n\n    private onChangeNative = (event: CustomEvent<string>) => {\n        this.valueNative = event.detail;\n    };\n\n    private onChangeConsumer = (event: CustomEvent<string>) => {\n        this.valueConsumer = event.detail;\n    };\n\n    private isInvalid = () => {\n        const substringLength = 9;\n\n        return !!(\n            this.valueConsumer &&\n            this.valueConsumer.substr(-substringLength, substringLength) !==\n                '@test.com'\n        );\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-focus.tsx","fileName":"input-field-focus.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-focus","overview":"Setting focus programmatically\n\nTo set focus programmatically, call `.focus()` on the `limel-input-field`\nelement. Note that, for this to work, the `tabindex` property must be set\non the `limel-input-field`.\n\n- `tabindex=\"0\"` means that the element should be focusable in sequential\nkeyboard navigation, after any positive tabindex values and its order is\ndefined by the document's source order.\n- A _positive value_ means the element should be focusable in sequential\nkeyboard navigation, with its order defined by the value of the number.\n\nRead more on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).","usage":{},"docs":"Setting focus programmatically\n\nTo set focus programmatically, call `.focus()` on the `limel-input-field`\nelement. Note that, for this to work, the `tabindex` property must be set\non the `limel-input-field`.\n\n- `tabindex=\"0\"` means that the element should be focusable in sequential\nkeyboard navigation, after any positive tabindex values and its order is\ndefined by the document's source order.\n- A _positive value_ means the element should be focusable in sequential\nkeyboard navigation, with its order defined by the value of the number.\n\nRead more on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-input-field"],"dependencyGraph":{"limel-example-input-field-focus":["limel-button","limel-input-field"],"limel-button":["limel-spinner","limel-icon"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-focus.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Setting focus programmatically\n *\n * To set focus programmatically, call `.focus()` on the `limel-input-field`\n * element. Note that, for this to work, the `tabindex` property must be set\n * on the `limel-input-field`.\n *\n * - `tabindex=\"0\"` means that the element should be focusable in sequential\n * keyboard navigation, after any positive tabindex values and its order is\n * defined by the document's source order.\n * - A _positive value_ means the element should be focusable in sequential\n * keyboard navigation, with its order defined by the value of the number.\n *\n * Read more on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).\n */\n@Component({\n    tag: 'limel-example-input-field-focus',\n    shadow: true,\n})\nexport class InputFieldFocusExample {\n    @State()\n    private value: string;\n\n    private inputField: HTMLLimelInputFieldElement;\n\n    public render() {\n        return [\n            <limel-button\n                onClick={this.setFocus}\n                label={'Set focus'}\n                style={{ 'margin-bottom': '1rem' }}\n            />,\n            <limel-input-field\n                label=\"Set focus on me!\"\n                value={this.value}\n                onChange={this.handleChange}\n                ref={this.getInputFieldRef}\n                tabindex=\"0\"\n            />,\n        ];\n    }\n\n    private getInputFieldRef = (input: HTMLLimelInputFieldElement) => {\n        return (this.inputField = input);\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setFocus = (event: MouseEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.inputField.focus();\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-icon-both.tsx","fileName":"input-field-icon-both.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-icon-both","overview":"Input Field with Leading and Trailing Icons & Action","usage":{},"docs":"Input Field with Leading and Trailing Icons & Action","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-icon-both":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-icon-both.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field with Leading and Trailing Icons & Action\n */\n@Component({\n    tag: 'limel-example-input-field-icon-both',\n    shadow: true,\n})\nexport class InputFieldIconBothExample {\n    @State()\n    private value;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Website\"\n                type=\"url\"\n                value={this.value}\n                leadingIcon=\"globe\"\n                trailingIcon=\"external_link\"\n                onChange={this.handleChange}\n                onAction={this.onAction}\n            />\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private onAction = () => {\n        window.open(this.value);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-icon-leading.tsx","fileName":"input-field-icon-leading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-icon-leading","overview":"Input Field with Leading Icon\n\nA leading icon can be used to visually \"decorate\" the input field. The\npurpose for adding a leading icon should be to help the user understand what\nthe field is for.\n\nIn this example, we use a map icon in addition to the \"Address\" label, to\nindicate that this field is meant for a physical address.\n\nThe example has a minimum length just to show what an invalid field looks\nlike.","usage":{},"docs":"Input Field with Leading Icon\n\nA leading icon can be used to visually \"decorate\" the input field. The\npurpose for adding a leading icon should be to help the user understand what\nthe field is for.\n\nIn this example, we use a map icon in addition to the \"Address\" label, to\nindicate that this field is meant for a physical address.\n\nThe example has a minimum length just to show what an invalid field looks\nlike.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-icon-leading":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-icon-leading.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\nconst MIN_LENGTH = 6;\n\n/**\n * Input Field with Leading Icon\n *\n * A leading icon can be used to visually \"decorate\" the input field. The\n * purpose for adding a leading icon should be to help the user understand what\n * the field is for.\n *\n * In this example, we use a map icon in addition to the \"Address\" label, to\n * indicate that this field is meant for a physical address.\n *\n * The example has a minimum length just to show what an invalid field looks\n * like.\n */\n@Component({\n    tag: 'limel-example-input-field-icon-leading',\n    shadow: true,\n})\nexport class InputFieldIconLeadingExample {\n    @State()\n    private value;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Address\"\n                value={this.value}\n                minlength={MIN_LENGTH}\n                helperText={`Please enter at least ${MIN_LENGTH} characters!`}\n                leadingIcon=\"map_marker\"\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-icon-trailing.tsx","fileName":"input-field-icon-trailing.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-icon-trailing","overview":"Input Field with Trailing Icon & Action\n\nA trailing icon can be added to input fields along with an action\nfor that trailing icon.\n:::note\nUse trailing icons only when you intend to have an action associated with them.\nTrailing icons of input fields will get an interactive visual effect when\nhovered to hint users that they are clickable.\n\nTherefore, a purely ornamental trailing icon that has this interactive effect\nwill be confusing for users.\n:::","usage":{},"docs":"Input Field with Trailing Icon & Action\n\nA trailing icon can be added to input fields along with an action\nfor that trailing icon.\n:::note\nUse trailing icons only when you intend to have an action associated with them.\nTrailing icons of input fields will get an interactive visual effect when\nhovered to hint users that they are clickable.\n\nTherefore, a purely ornamental trailing icon that has this interactive effect\nwill be confusing for users.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-icon-trailing":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-icon-trailing.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field with Trailing Icon & Action\n *\n * A trailing icon can be added to input fields along with an action\n * for that trailing icon.\n * :::note\n * Use trailing icons only when you intend to have an action associated with them.\n * Trailing icons of input fields will get an interactive visual effect when\n * hovered to hint users that they are clickable.\n *\n * Therefore, a purely ornamental trailing icon that has this interactive effect\n * will be confusing for users.\n * :::\n */\n@Component({\n    tag: 'limel-example-input-field-icon-trailing',\n    shadow: true,\n})\nexport class InputFieldIconTrailingExample {\n    @State()\n    private value;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Email address\"\n                type=\"email\"\n                value={this.value}\n                trailingIcon=\"filled_message\"\n                onChange={this.handleChange}\n                onAction={this.onAction}\n            />\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private onAction = () => {\n        console.log(`Sending email to ${this.value}`);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-number.tsx","fileName":"input-field-number.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-number","overview":"Input Field of Type Number","usage":{},"docs":"Input Field of Type Number","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-input-field-number":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-number.tsx","type":"tsx","source":"import { Component, h, State, Watch } from '@stencil/core';\n\n/**\n * Input Field of Type Number\n */\n@Component({\n    tag: 'limel-example-input-field-number',\n    shadow: true,\n})\nexport class InputFieldNumberExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private formatNumber = true;\n\n    @State()\n    private value;\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Number Field Label\"\n                value={this.value}\n                type=\"number\"\n                formatNumber={this.formatNumber}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                required={this.required}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.formatNumber}\n                    label=\"Format value\"\n                    onChange={this.setFormatNumber}\n                />\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    @Watch('required')\n    private checkValidity() {\n        this.invalid = this.required && !this.value;\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n        this.checkValidity();\n    };\n\n    private setFormatNumber = (event: CustomEvent<boolean>) => {\n        this.formatNumber = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-pattern.tsx","fileName":"input-field-pattern.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-pattern","overview":"Input Field with pattern","usage":{},"docs":"Input Field with pattern","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-pattern":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-pattern.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field with pattern\n */\n@Component({\n    tag: 'limel-example-input-field-pattern',\n    shadow: true,\n})\nexport class InputFieldPatternExample {\n    @State()\n    private value;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Personal identity number (YYYYMMDD-XXXX)\"\n                value={this.value}\n                pattern={'[0-9]{8}[-][0-9]{4}'}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-placeholder.tsx","fileName":"input-field-placeholder.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-placeholder","overview":"Input Field with a placeholder\n\nThe placeholder text is displayed inside the input field,\nwhen the field is focused and empty.\n\n:::tip\nA `placeholder` text is good for providing hints and examples about the expected input.\nWhile the `helperText` is better for providing instructions.\n:::\n\nUnlike `helperText` which is constantly visible while the user is typing\ninside the field, the `placeholder` text disappears as soon as the user has\ninput anything.\n\n:::note\nMake an informed decision when using `placeholder` instead of `helperText`!\nYou may have good intentions to reduce clutter on the user interface\nand use a placeholder text, because it will disappear after user has started typing.\nHowever, if the additional tips or instructions that you are trying to provide is\ncrucial or hard to remember, it is better to display them as helper text instead.\n\nThis is because disappearing crucial information will strains users’ short-term memory.\nIn a form with many fields, users can easily forget\nwhat each field was for. Especially if a field has validations that fail\nfor example after submitting. Instructions that are not visible anymore will make it\nhard for the user to realize what the problem is or how to solve it.\n:::\n:::warning\nIf no `label` is provided, then the placeholder text will be displayed even if the\ninput field is not focused.\n\nHowever, this does not mean that you should use this\nas a hack, to create a minimalistic and clean user interface. Not providing labels\nwill cause accessibility issues for users of assistive technologies,\nand strains users’ short-term memory as explained above.\nAdditionally, users may confuse the placeholder text, as an automatically\ninputted value, and skip filling in information.\n:::","usage":{},"docs":"Input Field with a placeholder\n\nThe placeholder text is displayed inside the input field,\nwhen the field is focused and empty.\n\n:::tip\nA `placeholder` text is good for providing hints and examples about the expected input.\nWhile the `helperText` is better for providing instructions.\n:::\n\nUnlike `helperText` which is constantly visible while the user is typing\ninside the field, the `placeholder` text disappears as soon as the user has\ninput anything.\n\n:::note\nMake an informed decision when using `placeholder` instead of `helperText`!\nYou may have good intentions to reduce clutter on the user interface\nand use a placeholder text, because it will disappear after user has started typing.\nHowever, if the additional tips or instructions that you are trying to provide is\ncrucial or hard to remember, it is better to display them as helper text instead.\n\nThis is because disappearing crucial information will strains users’ short-term memory.\nIn a form with many fields, users can easily forget\nwhat each field was for. Especially if a field has validations that fail\nfor example after submitting. Instructions that are not visible anymore will make it\nhard for the user to realize what the problem is or how to solve it.\n:::\n:::warning\nIf no `label` is provided, then the placeholder text will be displayed even if the\ninput field is not focused.\n\nHowever, this does not mean that you should use this\nas a hack, to create a minimalistic and clean user interface. Not providing labels\nwill cause accessibility issues for users of assistive technologies,\nand strains users’ short-term memory as explained above.\nAdditionally, users may confuse the placeholder text, as an automatically\ninputted value, and skip filling in information.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-placeholder":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-placeholder.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field with a placeholder\n *\n * The placeholder text is displayed inside the input field,\n * when the field is focused and empty.\n *\n * :::tip\n * A `placeholder` text is good for providing hints and examples about the expected input.\n * While the `helperText` is better for providing instructions.\n * :::\n *\n * Unlike `helperText` which is constantly visible while the user is typing\n * inside the field, the `placeholder` text disappears as soon as the user has\n * input anything.\n *\n * :::note\n * Make an informed decision when using `placeholder` instead of `helperText`!\n * You may have good intentions to reduce clutter on the user interface\n * and use a placeholder text, because it will disappear after user has started typing.\n * However, if the additional tips or instructions that you are trying to provide is\n * crucial or hard to remember, it is better to display them as helper text instead.\n *\n * This is because disappearing crucial information will strains users’ short-term memory.\n * In a form with many fields, users can easily forget\n * what each field was for. Especially if a field has validations that fail\n * for example after submitting. Instructions that are not visible anymore will make it\n * hard for the user to realize what the problem is or how to solve it.\n * :::\n * :::warning\n * If no `label` is provided, then the placeholder text will be displayed even if the\n * input field is not focused.\n *\n * However, this does not mean that you should use this\n * as a hack, to create a minimalistic and clean user interface. Not providing labels\n * will cause accessibility issues for users of assistive technologies,\n * and strains users’ short-term memory as explained above.\n * Additionally, users may confuse the placeholder text, as an automatically\n * inputted value, and skip filling in information.\n * :::\n */\n@Component({\n    tag: 'limel-example-input-field-placeholder',\n    shadow: true,\n})\nexport class InputFieldPlaceholderExample {\n    @State()\n    private value: string;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Your personal identity number\"\n                placeholder=\"example: 19990101-1234\"\n                helperText=\"Use correct format (12 digits, and a dash after your birth date)\"\n                value={this.value}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-number-prefix.tsx","fileName":"input-field-number-prefix.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-prefix","overview":"Prefix\nAn input Field with a currency symbol text displayed as prefix","usage":{},"docs":"Prefix\nAn input Field with a currency symbol text displayed as prefix","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-prefix":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-number-prefix.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Prefix\n * An input Field with a currency symbol text displayed as prefix\n */\n@Component({\n    tag: 'limel-example-input-field-prefix',\n    shadow: true,\n})\nexport class InputFieldPrefixExample {\n    @State()\n    private value = '10000';\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Price per unit\"\n                prefix=\"$\"\n                value={this.value}\n                type=\"number\"\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-search.tsx","fileName":"input-field-search.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-search","overview":"Input Field of Type Search","usage":{},"docs":"Input Field of Type Search","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-search":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-search.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field of Type Search\n */\n@Component({\n    tag: 'limel-example-input-field-search',\n    shadow: true,\n})\nexport class InputFieldSearchExample {\n    @State()\n    private value;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Search\"\n                type=\"search\"\n                leadingIcon=\"search\"\n                value={this.value}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-showlink.tsx","fileName":"input-field-showlink.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-showlink","overview":"With `showLink=true`","usage":{},"docs":"With `showLink=true`","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-input-field-showlink":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-showlink.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With `showLink=true`\n */\n@Component({\n    tag: 'limel-example-input-field-showlink',\n    shadow: true,\n    styleUrl: 'show-link.scss',\n})\nexport class InputFieldShowlinkExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private emailValue: string;\n\n    @State()\n    private telValue: string;\n\n    @State()\n    private urlValue: string;\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Email Field\"\n                value={this.emailValue}\n                required={this.required}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleEmailChange}\n                type=\"email\"\n                showLink\n            />,\n            <limel-input-field\n                label=\"Phone Field\"\n                value={this.telValue}\n                required={this.required}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleTelChange}\n                type=\"tel\"\n                showLink\n            />,\n            <limel-input-field\n                label=\"URL Field\"\n                value={this.urlValue}\n                required={this.required}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleUrlChange}\n                type=\"url\"\n                showLink\n            />,\n            <limel-input-field\n                label=\"urlAsText\"\n                value={this.urlValue}\n                required={this.required}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleUrlChange}\n                type=\"urlAsText\"\n                showLink\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.emailValue} />,\n            <limel-example-value value={this.telValue} />,\n            <limel-example-value value={this.urlValue} />,\n        ];\n    }\n\n    private handleEmailChange = (event: CustomEvent<string>) => {\n        this.emailValue = event.detail;\n    };\n\n    private handleTelChange = (event: CustomEvent<string>) => {\n        this.telValue = event.detail;\n    };\n\n    private handleUrlChange = (event: CustomEvent<string>) => {\n        this.urlValue = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"},{"filename":"show-link.scss","type":"scss","source":"limel-input-field {\n    margin-bottom: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-text-suffix.tsx","fileName":"input-field-text-suffix.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-suffix","overview":"Suffix\nAn Input Field with a unit of measurement displayed as suffix","usage":{},"docs":"Suffix\nAn Input Field with a unit of measurement displayed as suffix","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-suffix":["limel-input-field"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-text-suffix.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Suffix\n * An Input Field with a unit of measurement displayed as suffix\n */\n@Component({\n    tag: 'limel-example-input-field-suffix',\n    shadow: true,\n})\nexport class InputFieldSuffixExample {\n    @State()\n    private value = '50';\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Quantity\"\n                suffix=\"pcs\"\n                value={this.value}\n                type=\"number\"\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-text.tsx","fileName":"input-field-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-text","overview":"Input Field of Type Text","usage":{},"docs":"Input Field of Type Text","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-input-field-text":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-text.tsx","type":"tsx","source":"import { Component, h, State, Watch } from '@stencil/core';\n\n/**\n * Input Field of Type Text\n */\n@Component({\n    tag: 'limel-example-input-field-text',\n    shadow: true,\n})\nexport class InputFieldTextExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private value: string;\n\n    public render() {\n        const MAX_LENGTH = 15;\n\n        return [\n            <limel-input-field\n                label=\"Text Field\"\n                helperText=\"Please enter a useful message!\"\n                maxlength={MAX_LENGTH}\n                value={this.value}\n                required={this.required}\n                invalid={this.invalid}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    @Watch('required')\n    protected checkValidity() {\n        this.invalid = this.required && !this.value;\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples","filePath":"./src/design-guidelines/declutter/examples/input-field-text-decluttering-guidelines.tsx","fileName":"input-field-text-decluttering-guidelines.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples/usage","tag":"limel-example-input-field-text-decluttering-guidelines","overview":"Input Field of Type Text","usage":{},"docs":"Input Field of Type Text","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-input-field-text-decluttering-guidelines":["limel-input-field","limel-example-controls","limel-checkbox"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-text-decluttering-guidelines.tsx","type":"tsx","source":"import { Component, h, State, Watch } from '@stencil/core';\n\n/**\n * Input Field of Type Text\n */\n@Component({\n    tag: 'limel-example-input-field-text-decluttering-guidelines',\n    shadow: true,\n    styleUrl: 'input-field-text-decluttering-guidelines.scss',\n})\nexport class InputFieldTextExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private value: string;\n\n    public render() {\n        const MAX_LENGTH = 15;\n\n        return [\n            <limel-input-field\n                label=\"Text Field\"\n                helperText=\"Please enter a useful message!\"\n                maxlength={MAX_LENGTH}\n                value={this.value}\n                required={this.required}\n                invalid={this.invalid}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    @Watch('required')\n    protected checkValidity() {\n        this.invalid = this.required && !this.value;\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"},{"filename":"input-field-text-decluttering-guidelines.scss","type":"scss","source":":host {\n    display: block;\n    padding: 1rem;\n    border-radius: 0.25rem;\n    background-color: rgb(var(--contrast-100));\n}\nlimel-input-field {\n    margin-bottom: 1rem;\n}\n\nlimel-button {\n    margin-left: 0.5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-text-multiple.tsx","fileName":"input-field-text-multiple.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-text-multiple","overview":"Multiple Fields","usage":{},"docs":"Multiple Fields","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-checkbox"],"dependencyGraph":{"limel-example-input-field-text-multiple":["limel-input-field","limel-checkbox"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-text-multiple.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Multiple Fields\n */\n@Component({\n    tag: 'limel-example-input-field-text-multiple',\n    shadow: true,\n    styleUrl: 'input-field-text-multiple.scss',\n})\nexport class InputFieldTextExample {\n    @State()\n    private firstValue: string;\n\n    @State()\n    private secondValue: string;\n\n    @State()\n    private addDistance: boolean = false;\n\n    public render() {\n        return (\n            <div class={{ 'add-distance': this.addDistance }}>\n                <section>\n                    <limel-input-field\n                        label=\"Fields shouldn't be too close!\"\n                        value={this.firstValue}\n                        onChange={this.firstOnChange}\n                    />\n                    <limel-input-field\n                        label=\"Type something here now to see why…\"\n                        helperText=\"See how the label covers the previous field? Now add some distance 👇\"\n                        value={this.secondValue}\n                        onChange={this.secondOnChange}\n                    />\n                </section>\n                <limel-checkbox\n                    label=\"Then click this to add distance between fields\"\n                    onChange={this.toggleMode}\n                    checked={this.addDistance}\n                />\n            </div>\n        );\n    }\n\n    private firstOnChange = (event: CustomEvent<string>) => {\n        this.firstValue = event.detail;\n    };\n\n    private secondOnChange = (event: CustomEvent<string>) => {\n        this.secondValue = event.detail;\n    };\n\n    private toggleMode = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.addDistance = event.detail;\n    };\n}\n"},{"filename":"input-field-text-multiple.scss","type":"scss","source":"section {\n    display: grid;\n}\n\n.add-distance {\n    section {\n        gap: 1rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-textarea.tsx","fileName":"input-field-textarea.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-textarea","overview":"Input Field of Type Textarea","usage":{},"docs":"Input Field of Type Textarea","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-input-field-textarea":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-textarea.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field of Type Textarea\n */\n@Component({\n    tag: 'limel-example-input-field-textarea',\n    shadow: true,\n})\nexport class InputFieldTextareaExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private value: string;\n\n    public render() {\n        const MAX_LENGTH = 500;\n\n        return [\n            <limel-input-field\n                label=\"Job description\"\n                type=\"textarea\"\n                placeholder=\"What is your dream job? Describe it here...\"\n                helperText=\"This text will be displayed in your profile\"\n                maxlength={MAX_LENGTH}\n                value={this.value}\n                required={this.required}\n                onChange={this.handleChange}\n                disabled={this.disabled}\n                readonly={this.readonly}\n            />,\n            <limel-example-controls>\n                <limel-checkbox onChange={this.setDisabled} label=\"Disabled\" />\n                <limel-checkbox onChange={this.setReadonly} label=\"Readonly\" />\n                <limel-checkbox onChange={this.setRequired} label=\"Required\" />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples","filePath":"./src/components/linear-progress/examples/linear-progress.tsx","fileName":"linear-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/usage","tag":"limel-example-linear-progress","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-linear-progress"],"dependencyGraph":{"limel-example-linear-progress":["limel-input-field","limel-linear-progress"],"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"linear-progress.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\nconst FRACTION = 100;\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-linear-progress',\n})\nexport class LinearProgressExample {\n    @State()\n    private value = 0.7;\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Value\"\n                type=\"number\"\n                value={(this.value * FRACTION).toFixed(0)}\n                onChange={this.handleChange}\n            />,\n            <p>\n                <limel-linear-progress value={this.value} />\n            </p>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.value = +event.detail / FRACTION;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples","filePath":"./src/components/linear-progress/examples/linear-progress-color.tsx","fileName":"linear-progress-color.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/usage","tag":"limel-example-linear-progress-color","overview":"Setting the color","usage":{},"docs":"Setting the color","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-linear-progress","limel-select"],"dependencyGraph":{"limel-example-linear-progress-color":["limel-linear-progress","limel-select"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"linear-progress-color.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Setting the color\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-linear-progress-color',\n})\nexport class LinearProgressExampleColor {\n    @State()\n    private color = { text: 'lime-blue', value: 'lime-blue' };\n\n    private value = 0.85;\n\n    private colors = [\n        { text: 'lime-red', value: 'lime-red' },\n        { text: 'lime-orange', value: 'lime-orange' },\n        { text: 'lime-yellow', value: 'lime-yellow' },\n        { text: 'lime-green', value: 'lime-green' },\n        { text: 'lime-blue', value: 'lime-blue' },\n        { text: 'lime-magenta', value: 'lime-magenta' },\n    ];\n\n    public render() {\n        return [\n            <p>\n                <limel-linear-progress\n                    value={this.value}\n                    style={{\n                        '--lime-primary-color': `var(--${this.color.value})`,\n                    }}\n                />\n            </p>,\n            <limel-select\n                label=\"Color\"\n                options={this.colors}\n                value={this.color}\n                onChange={this.handleChange}\n            />,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.color = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples","filePath":"./src/components/linear-progress/examples/linear-progress-indeterminate.tsx","fileName":"linear-progress-indeterminate.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/usage","tag":"limel-example-linear-progress-indeterminate","overview":"Indeterminate progress bar","usage":{},"docs":"Indeterminate progress bar","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-linear-progress"],"dependencyGraph":{"limel-example-linear-progress-indeterminate":["limel-linear-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"linear-progress-indeterminate.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Indeterminate progress bar\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-linear-progress-indeterminate',\n})\nexport class LinearProgressExampleIndeterminate {\n    public render() {\n        return <limel-linear-progress indeterminate={true} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list.tsx","fileName":"list.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list","overview":"Basic list with separator","usage":{},"docs":"Basic list with separator","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list":["limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list.tsx","type":"tsx","source":"import { ListItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * Basic list with separator\n */\n@Component({\n    tag: 'limel-example-list',\n    shadow: true,\n})\nexport class ListExample {\n    private items: Array<ListItem<number> | ListSeparator> = [\n        { text: 'King of Tokyo', value: 1 },\n        { text: 'Smash Up!', value: 2 },\n        { text: 'Pandemic', value: 3 },\n        { separator: true },\n        { text: 'Catan', value: 4 },\n        { text: 'Ticket to Ride', value: 5 },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-action.tsx","fileName":"list-action.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-action","overview":"List with action menu","usage":{},"docs":"List with action menu","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-action":["limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-action.tsx","type":"tsx","source":"import { LimelListCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with action menu\n */\n@Component({\n    tag: 'limel-example-list-action',\n    shadow: true,\n})\nexport class ListActionExample {\n    private actionItems: Array<ListItem<number>> = [\n        { text: 'Go to my fab object', value: 10 },\n        { text: 'Delete object', value: 11 },\n    ];\n\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            value: 1,\n            icon: 'gorilla',\n            actions: this.actionItems,\n        },\n        { text: 'Smash Up!', value: 2, icon: 'alien' },\n        { text: 'Pandemic', value: 3, icon: 'virus' },\n        { text: 'Catan', value: 4, icon: 'wheat' },\n        { text: 'Ticket to Ride', value: 5, icon: 'steam_engine' },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} onSelect={this.onSelectAction} />;\n    }\n\n    private onSelectAction(event: LimelListCustomEvent<ListItem>) {\n        console.log('Executing action: ', event.detail);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-badge-icons.tsx","fileName":"list-badge-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-badge-icons","overview":"List with badge icons","usage":{},"docs":"List with badge icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-badge-icons":["limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-badge-icons.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with badge icons\n */\n@Component({\n    tag: 'limel-example-list-badge-icons',\n    shadow: true,\n    styleUrl: 'list-badge-icons.scss',\n})\nexport class BadgeIconsListExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            secondaryText: '2-6 players',\n            value: 1,\n            icon: 'gorilla',\n        },\n        {\n            text: 'Smash Up!',\n            secondaryText: '2-4 players',\n            value: 2,\n            icon: 'alien',\n            iconColor: 'rgb(var(--color-lime-light))',\n        },\n        {\n            text: 'Pandemic',\n            secondaryText: '2-4 players',\n            value: 3,\n            icon: 'virus',\n            iconColor: 'rgb(var(--color-red-light))',\n        },\n        {\n            text: 'Catan',\n            secondaryText: '3-4 players',\n            value: 4,\n            icon: 'wheat',\n            iconColor: 'rgb(var(--color-amber-default))',\n        },\n        {\n            text: 'Ticket to Ride',\n            secondaryText: '2-5 players',\n            value: 5,\n            icon: 'steam_engine',\n            iconColor: 'rgb(var(--color-glaucous-default))',\n        },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} badgeIcons={true} />;\n    }\n}\n"},{"filename":"list-badge-icons.scss","type":"scss","source":"limel-list {\n    // Default icon color for the list if not\n    // set by list items\n    --icon-background-color: rgb(var(--color-magenta-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-badge-icons-with-multiple-lines.tsx","fileName":"list-badge-icons-with-multiple-lines.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-badge-icons-with-multiple-lines","overview":"Multi-line versus single-line layout\nBy default, list items will always truncate the `text` line, which is displayed\neither alone, or as a primary heading (when there are both `text` and `secondaryText`)\navailable. This means users will only see one line of text which is as wides as\nthe list item, and no more. Thus, it is a good idea not to add long strings of\ntext in the heading, as on mobile phones or small containers, they will be\nchopped off and truncated.\n\nHowever, the `secondaryText` which appears as a sub-heading is not truncated\nthat quickly. By default, lists will display 3 lines of text, and then truncate\nthe rest. Nevertheless, you can increase or decrease this number by specifying\n`maxLinesSecondaryText`.\n:::note\nDo not use `0`, negative numbers, decimal numbers, or very large numbers.\n:::","usage":{},"docs":"Multi-line versus single-line layout\nBy default, list items will always truncate the `text` line, which is displayed\neither alone, or as a primary heading (when there are both `text` and `secondaryText`)\navailable. This means users will only see one line of text which is as wides as\nthe list item, and no more. Thus, it is a good idea not to add long strings of\ntext in the heading, as on mobile phones or small containers, they will be\nchopped off and truncated.\n\nHowever, the `secondaryText` which appears as a sub-heading is not truncated\nthat quickly. By default, lists will display 3 lines of text, and then truncate\nthe rest. Nevertheless, you can increase or decrease this number by specifying\n`maxLinesSecondaryText`.\n:::note\nDo not use `0`, negative numbers, decimal numbers, or very large numbers.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-badge-icons-with-multiple-lines":["limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-badge-icons-with-multiple-lines.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * Multi-line versus single-line layout\n * By default, list items will always truncate the `text` line, which is displayed\n * either alone, or as a primary heading (when there are both `text` and `secondaryText`)\n * available. This means users will only see one line of text which is as wides as\n * the list item, and no more. Thus, it is a good idea not to add long strings of\n * text in the heading, as on mobile phones or small containers, they will be\n * chopped off and truncated.\n *\n * However, the `secondaryText` which appears as a sub-heading is not truncated\n * that quickly. By default, lists will display 3 lines of text, and then truncate\n * the rest. Nevertheless, you can increase or decrease this number by specifying\n * `maxLinesSecondaryText`.\n * :::note\n * Do not use `0`, negative numbers, decimal numbers, or very large numbers.\n * :::\n */\n@Component({\n    tag: 'limel-example-list-badge-icons-with-multiple-lines',\n    shadow: true,\n})\nexport class BadgeIconsListExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'This item only has one line of primary text, and no secondary text',\n            value: 1,\n            icon: 'text_width',\n        },\n        {\n            text: 'Very long primary texts like this one will truncate and you cannot do anything about it. Just avoid having long primary texts.',\n            secondaryText: 'This is a short secondary text.',\n            value: 2,\n            icon: 'text_width',\n        },\n        {\n            text: 'This item only has one line of primary text',\n            value: 3,\n            secondaryText:\n                'The lengt of secondary text does not exceed maximum allowed number of lines (of course depending on the width of your screen), thus the lines will not truncate.',\n            icon: 'text_width',\n        },\n        {\n            text: 'This is a short primary text',\n            secondaryText:\n                'Very long secondary texts like this one will not truncate on the first line. By default, the list will render 3 lines of text and then truncates the rest. If you need more lines of text to be shown, you can simply define it in your code, and add a maximum number there. For more information regarding this, please read the documentation.',\n            value: 4,\n            icon: 'text_width',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-list\n                items={this.items}\n                badgeIcons={true}\n                maxLinesSecondaryText={4}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-checkbox.tsx","fileName":"list-checkbox.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-checkbox","overview":"List with checkboxes","usage":{},"docs":"List with checkboxes","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list","limel-example-value"],"dependencyGraph":{"limel-example-list-checkbox":["limel-list","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-checkbox.tsx","type":"tsx","source":"import {\n    LimelListCustomEvent,\n    ListItem,\n    ListSeparator,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with checkboxes\n */\n@Component({\n    tag: 'limel-example-list-checkbox',\n    shadow: true,\n})\nexport class ListCheckboxExample {\n    @State()\n    private items: Array<ListItem | ListSeparator> = [\n        { text: 'Pikachu', value: 1, selected: true },\n        { text: 'Charmander', value: 2, selected: false, disabled: true },\n        { text: 'Super Mario', value: 3, selected: false },\n        { separator: true },\n        { text: 'Yoshi', value: 4, selected: false, disabled: true },\n        { text: 'Minion', value: 6, selected: true },\n        { text: 'Pokéball', value: 5, selected: false },\n    ];\n\n    @State()\n    private selectedItems: Array<ListItem | ListSeparator> = [];\n\n    constructor() {\n        this.selectedItems = this.items.filter((item: ListItem) => {\n            return !!item.selected;\n        });\n    }\n\n    public render() {\n        return [\n            <limel-list\n                onChange={this.handleChange}\n                items={this.items}\n                type=\"checkbox\"\n            />,\n            <limel-example-value value={this.selectedItems} />,\n        ];\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem[]>) => {\n        this.selectedItems = event.detail;\n        this.items = this.items.map((item: ListItem) => {\n            const selected = !!event.detail.find((selectedItem: ListItem) => {\n                return selectedItem.value === item.value;\n            });\n\n            return { ...item, selected: selected };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-checkbox-icons.tsx","fileName":"list-checkbox-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-checkbox-icons","overview":"List with checkboxes and icons","usage":{},"docs":"List with checkboxes and icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list","limel-example-value"],"dependencyGraph":{"limel-example-list-checkbox-icons":["limel-list","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-checkbox-icons.tsx","type":"tsx","source":"import { LimelListCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with checkboxes and icons\n */\n@Component({\n    tag: 'limel-example-list-checkbox-icons',\n    shadow: true,\n})\nexport class ListCheckboxIconsExample {\n    @State()\n    private items: ListItem[] = [\n        {\n            text: 'Pikachu',\n            value: 1,\n            selected: true,\n            icon: 'pokemon',\n            iconColor: 'var(--lime-yellow)',\n        },\n        {\n            text: 'Charmander',\n            value: 2,\n            selected: false,\n            disabled: true,\n            icon: 'fire_element',\n            iconColor: 'var(--lime-red)',\n        },\n        {\n            text: 'Super Mario',\n            value: 3,\n            selected: false,\n            icon: 'super_mario',\n            iconColor: 'var(--lime-deep-red)',\n        },\n        {\n            text: 'Yoshi',\n            value: 4,\n            selected: false,\n            disabled: true,\n            icon: 'easter_egg',\n            iconColor: 'var(--lime-green)',\n        },\n        {\n            text: 'Minion',\n            value: 6,\n            selected: true,\n            icon: 'minion_1',\n            iconColor: 'var(--lime-blue)',\n        },\n        {\n            text: 'Pokéball',\n            value: 5,\n            selected: false,\n            icon: 'pokeball',\n            iconColor: 'var(--lime-magenta)',\n        },\n    ];\n\n    @State()\n    private selectedItems: ListItem[] = [];\n\n    constructor() {\n        this.selectedItems = this.items.filter((item) => {\n            return !!item.selected;\n        });\n    }\n\n    public render() {\n        return [\n            <limel-list\n                onChange={this.handleChange}\n                items={this.items}\n                type=\"checkbox\"\n            />,\n            <limel-example-value value={this.selectedItems} />,\n        ];\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem[]>) => {\n        this.selectedItems = event.detail;\n        this.items = this.items.map((item: ListItem) => {\n            const selected = !!event.detail.find((selectedItem: ListItem) => {\n                return selectedItem.value === item.value;\n            });\n\n            return { ...item, selected: selected };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/list-form.tsx","fileName":"list-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-list-form","overview":"List data","usage":{},"docs":"List data","docsTags":[{"name":"link","text":"list-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-list-form":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { schema } from './list-schema';\n\n/**\n * List data\n *\n * @link list-schema.ts\n */\n@Component({\n    tag: 'limel-example-list-form',\n    shadow: true,\n})\nexport class ListFormExample {\n    @State()\n    private formData: object = {\n        villains: ['Joker', 'Thanos', 'Green Goblin'],\n        squad: [\n            {\n                powers: ['flight'],\n                name: 'Doctor Strange',\n            },\n        ],\n    };\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"list-schema.ts","type":"ts","source":"export const schema = {\n    type: 'object',\n    properties: {\n        villains: {\n            type: 'array',\n            title: 'Villains',\n            description: 'Enter the evil villains to capture',\n            items: {\n                type: 'string',\n                title: 'Name',\n                description: 'Enter the name of an evil villain',\n                default: 'The Penguin',\n            },\n        },\n        squad: {\n            type: 'array',\n            title: 'Hero squad',\n            description: 'Enter the team of heroes to capture them',\n            items: {\n                type: 'object',\n                title: 'Hero data',\n                description: 'Name and powers of super heroes',\n                properties: {\n                    name: {\n                        type: 'string',\n                        title: 'Name',\n                        description: 'Super hero name',\n                    },\n                    powers: {\n                        type: 'array',\n                        title: 'Powers',\n                        description: 'Available, powers',\n                        uniqueItems: true,\n                        items: {\n                            anyOf: [\n                                {\n                                    type: 'string',\n                                    const: 'strength',\n                                    title: 'Super human strength',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'speed',\n                                    title: 'Lightning fast',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'invisibility',\n                                    title: 'Invisibility',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'vision',\n                                    title: 'X-Ray vision',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'flight',\n                                    title: 'Flight',\n                                },\n                            ],\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-grid.tsx","fileName":"list-grid.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-grid","overview":"List with grid layout\nTo display list items in a grid layout instead of a vertical column,\nsimply add `has-grid-layout` class to\nthe component.\n\nThis layout can be customized, using a few CSS variables.\n:::warning\n- This layout should not be used with lists that have checkboxes or radio buttons.\n- Also, it is recommended to avoid using secondary text with this layout.","usage":{},"docs":"List with grid layout\nTo display list items in a grid layout instead of a vertical column,\nsimply add `has-grid-layout` class to\nthe component.\n\nThis layout can be customized, using a few CSS variables.\n:::warning\n- This layout should not be used with lists that have checkboxes or radio buttons.\n- Also, it is recommended to avoid using secondary text with this layout.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-grid":["limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-grid.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with grid layout\n * To display list items in a grid layout instead of a vertical column,\n * simply add `has-grid-layout` class to\n * the component.\n *\n * This layout can be customized, using a few CSS variables.\n * :::warning\n * - This layout should not be used with lists that have checkboxes or radio buttons.\n * - Also, it is recommended to avoid using secondary text with this layout.\n */\n@Component({\n    tag: 'limel-example-list-grid',\n    shadow: true,\n})\nexport class ListGridExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            value: 1,\n            icon: 'gorilla',\n        },\n        {\n            text: 'Smash Up!',\n            value: 2,\n            icon: 'alien',\n            iconColor: 'rgb(var(--color-lime-light))',\n        },\n        {\n            text: 'Pandemic',\n            value: 3,\n            icon: 'virus',\n            iconColor: 'rgb(var(--color-red-light))',\n        },\n        {\n            text: 'Catan',\n            value: 4,\n            icon: 'wheat',\n            iconColor: 'rgb(var(--color-amber-default))',\n        },\n        {\n            text: 'Ticket to Ride',\n            value: 5,\n            icon: 'steam_engine',\n            iconColor: 'rgb(var(--color-glaucous-default))',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-list\n                items={this.items}\n                badgeIcons={true}\n                class=\"has-grid-layout has-interactive-items\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-icons.tsx","fileName":"list-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-icons","overview":"List with icons","usage":{},"docs":"List with icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-icons":["limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-icons.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with icons\n */\n@Component({\n    tag: 'limel-example-list-icons',\n    shadow: true,\n})\nexport class IconsListExample {\n    private items: Array<ListItem<number>> = [\n        { text: 'King of Tokyo', value: 1, icon: 'gorilla' },\n        { text: 'Smash Up!', value: 2, icon: 'alien' },\n        { text: 'Pandemic', value: 3, icon: 'virus' },\n        { text: 'Catan', value: 4, icon: 'wheat' },\n        { text: 'Ticket to Ride', value: 5, icon: 'steam_engine' },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-primary-component.tsx","fileName":"list-primary-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-primary-component","overview":"List with a primary component","usage":{},"docs":"List with a primary component","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-primary-component":["limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-primary-component.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with a primary component\n */\n@Component({\n    tag: 'limel-example-list-primary-component',\n    shadow: true,\n})\nexport class ListCircularProgressExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            secondaryText: '2 players',\n            value: 1,\n            primaryComponent: {\n                name: 'limel-circular-progress',\n                props: {\n                    value: 5,\n                    maxValue: 10,\n                    suffix: '%',\n                    displayPercentageColors: true,\n                },\n            },\n        },\n        {\n            text: 'Smash Up!',\n            secondaryText: '2-5 players',\n            value: 2,\n            primaryComponent: {\n                name: 'limel-circular-progress',\n                props: {\n                    value: 1,\n                    maxValue: 10,\n                    suffix: '%',\n                    displayPercentageColors: true,\n                },\n            },\n        },\n        {\n            text: 'Pandemic',\n            secondaryText: '2-4 players',\n            value: 3,\n            primaryComponent: {\n                name: 'limel-circular-progress',\n                props: {\n                    value: 8,\n                    maxValue: 10,\n                    suffix: '%',\n                    displayPercentageColors: true,\n                },\n            },\n        },\n        {\n            text: 'Ticket to Ride',\n            secondaryText: '1-3 players',\n            value: 5,\n            primaryComponent: {\n                name: 'limel-circular-progress',\n                props: {\n                    value: 3,\n                    maxValue: 10,\n                    suffix: '%',\n                    displayPercentageColors: true,\n                },\n            },\n        },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} class=\"has-striped-rows\" />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-radio-button.tsx","fileName":"list-radio-button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-radio-button","overview":"List with radio buttons","usage":{},"docs":"List with radio buttons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list","limel-example-value"],"dependencyGraph":{"limel-example-list-radio-button":["limel-list","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-radio-button.tsx","type":"tsx","source":"import {\n    LimelListCustomEvent,\n    ListItem,\n    ListSeparator,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with radio buttons\n */\n@Component({\n    tag: 'limel-example-list-radio-button',\n    shadow: true,\n})\nexport class ListRadioButtonExample {\n    @State()\n    private items: Array<ListItem | ListSeparator> = [\n        { text: 'Pikachu', value: 1, selected: false },\n        { text: 'Charmander', value: 2, selected: false, disabled: true },\n        { text: 'Super Mario', value: 3, selected: false },\n        { separator: true },\n        { text: 'Yoshi', value: 4, selected: false, disabled: true },\n        { text: 'Minion', value: 6, selected: true },\n        { text: 'Pokéball', value: 5, selected: false },\n    ];\n\n    @State()\n    private selectedItem: ListItem | ListSeparator;\n\n    constructor() {\n        this.selectedItem = this.items.filter((item: ListItem) => {\n            return !!item.selected;\n        })[0];\n    }\n\n    public render() {\n        return [\n            <limel-list\n                onChange={this.handleChange}\n                items={this.items}\n                type=\"radio\"\n            />,\n            <limel-example-value value={this.selectedItem} />,\n        ];\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem>) => {\n        this.selectedItem = event.detail;\n        this.items = this.items.map((item: ListItem) => {\n            if (item.value === event.detail.value) {\n                return event.detail;\n            }\n\n            return item;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-radio-button-icons.tsx","fileName":"list-radio-button-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-radio-button-icons","overview":"List with radio buttons and icons","usage":{},"docs":"List with radio buttons and icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list","limel-example-value"],"dependencyGraph":{"limel-example-list-radio-button-icons":["limel-list","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-radio-button-icons.tsx","type":"tsx","source":"import { LimelListCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with radio buttons and icons\n */\n@Component({\n    tag: 'limel-example-list-radio-button-icons',\n    shadow: true,\n})\nexport class ListRadioButtonIconsExample {\n    @State()\n    private items: ListItem[] = [\n        {\n            text: 'Pikachu',\n            value: 1,\n            selected: false,\n            icon: 'pokemon',\n            iconColor: 'var(--lime-yellow)',\n        },\n        {\n            text: 'Charmander',\n            value: 2,\n            selected: false,\n            disabled: true,\n            icon: 'fire_element',\n            iconColor: 'var(--lime-red)',\n        },\n        {\n            text: 'Super Mario',\n            value: 3,\n            selected: false,\n            icon: 'super_mario',\n            iconColor: 'var(--lime-deep-red)',\n        },\n        {\n            text: 'Yoshi',\n            value: 4,\n            selected: false,\n            disabled: true,\n            icon: 'easter_egg',\n            iconColor: 'var(--lime-green)',\n        },\n        {\n            text: 'Minion',\n            value: 6,\n            selected: true,\n            icon: 'minion_1',\n            iconColor: 'var(--lime-blue)',\n        },\n        {\n            text: 'Pokéball',\n            value: 5,\n            selected: false,\n            icon: 'pokeball',\n            iconColor: 'var(--lime-magenta)',\n        },\n    ];\n\n    @State()\n    private selectedItem: ListItem;\n\n    constructor() {\n        this.selectedItem = this.items.filter((item) => {\n            return !!item.selected;\n        })[0];\n    }\n\n    public render() {\n        return [\n            <limel-list\n                onChange={this.handleChange}\n                items={this.items}\n                type=\"radio\"\n            />,\n            <limel-example-value value={this.selectedItem} />,\n        ];\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem>) => {\n        this.selectedItem = event.detail;\n        this.items = this.items.map((item: ListItem) => {\n            if (item.value === event.detail.value) {\n                return event.detail;\n            }\n\n            return item;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-secondary.tsx","fileName":"list-secondary.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-secondary","overview":"List with secondary text","usage":{},"docs":"List with secondary text","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-secondary":["limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-secondary.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with secondary text\n */\n@Component({\n    tag: 'limel-example-list-secondary',\n    shadow: true,\n})\nexport class SecondaryTextListExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            secondaryText: '2-6 players',\n            value: 1,\n            disabled: true,\n        },\n        { text: 'Smash Up!', secondaryText: '2-4 players', value: 2 },\n        { text: 'Pandemic', secondaryText: '2-4 players', value: 3 },\n        { text: 'Memory', value: 3 },\n        { text: 'Catan', secondaryText: '3-4 players', value: 4 },\n        { text: 'Ticket to Ride', secondaryText: '2-5 players', value: 5 },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-selectable.tsx","fileName":"list-selectable.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-selectable","overview":"List with selectable items","usage":{},"docs":"List with selectable items","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-selectable":["limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-selectable.tsx","type":"tsx","source":"import {\n    LimelListCustomEvent,\n    ListItem,\n    ListSeparator,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with selectable items\n */\n@Component({\n    tag: 'limel-example-list-selectable',\n    shadow: true,\n})\nexport class SelectableListExample {\n    @State()\n    private items: Array<ListItem<number> | ListSeparator> = [\n        { text: 'King of Tokyo', value: 1 },\n        { text: 'Smash Up!', value: 2 },\n        { text: 'Pandemic', value: 3, selected: true },\n        { separator: true },\n        { text: 'Catan', value: 4 },\n        { text: 'Ticket to Ride', value: 5 },\n    ];\n\n    public render() {\n        return (\n            <limel-list\n                onChange={this.handleChange}\n                type=\"selectable\"\n                items={this.items}\n            />\n        );\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem>) => {\n        this.items = this.items.map((item: ListItem) => {\n            if (item.value === event.detail.value) {\n                return event.detail;\n            }\n\n            return item;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-striped.tsx","fileName":"list-striped.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-striped","overview":"List with custom styles\n\nAdding the `has-striped-rows` class to the list will make the items more\ndistinct by adding different background colors to even and odd rows.\n\nAlso, by taking advantage of the `has-interactive-items`, hovering on a list\nitem which is not `disabled` will display an elevated visual effect, giving\nit more affordance and a solid feeling of interactivity.\n\n| Class name              | Description                                                                                     |\n| ----------------------- | ----------------------------------------------------------------------------------------------- |\n| `has-striped-rows`      | Adds distinct styling by which every other row (list item) gets a darker background.            |\n| `has-interactive-items` | Adds more affordance by applying an elevated visual effect on list item, when they are hovered. |\n\n:::note\nto get both effects, you need to apply both of these classes.\n:::","usage":{},"docs":"List with custom styles\n\nAdding the `has-striped-rows` class to the list will make the items more\ndistinct by adding different background colors to even and odd rows.\n\nAlso, by taking advantage of the `has-interactive-items`, hovering on a list\nitem which is not `disabled` will display an elevated visual effect, giving\nit more affordance and a solid feeling of interactivity.\n\n| Class name              | Description                                                                                     |\n| ----------------------- | ----------------------------------------------------------------------------------------------- |\n| `has-striped-rows`      | Adds distinct styling by which every other row (list item) gets a darker background.            |\n| `has-interactive-items` | Adds more affordance by applying an elevated visual effect on list item, when they are hovered. |\n\n:::note\nto get both effects, you need to apply both of these classes.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-striped":["limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-striped.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with custom styles\n *\n * Adding the `has-striped-rows` class to the list will make the items more\n * distinct by adding different background colors to even and odd rows.\n *\n * Also, by taking advantage of the `has-interactive-items`, hovering on a list\n * item which is not `disabled` will display an elevated visual effect, giving\n * it more affordance and a solid feeling of interactivity.\n *\n * | Class name              | Description                                                                                     |\n * | ----------------------- | ----------------------------------------------------------------------------------------------- |\n * | `has-striped-rows`      | Adds distinct styling by which every other row (list item) gets a darker background.            |\n * | `has-interactive-items` | Adds more affordance by applying an elevated visual effect on list item, when they are hovered. |\n *\n * :::note\n * to get both effects, you need to apply both of these classes.\n * :::\n */\n@Component({\n    tag: 'limel-example-list-striped',\n    shadow: true,\n})\nexport class StripedListExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            secondaryText: '2-6 players',\n            value: 1,\n            disabled: true,\n        },\n        { text: 'Smash Up!', secondaryText: '2-4 players', value: 2 },\n        { text: 'Pandemic', secondaryText: '2-4 players', value: 3 },\n        { text: 'Catan', secondaryText: '3-4 players', value: 4 },\n        { text: 'Ticket to Ride', secondaryText: '2-5 players', value: 5 },\n    ];\n\n    public render() {\n        return (\n            <limel-list\n                items={this.items}\n                class=\"has-striped-rows has-interactive-items\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-badge-icons.tsx","fileName":"menu-badge-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-badge-icons","overview":"With badge icons","usage":{},"docs":"With badge icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button"],"dependencyGraph":{"limel-example-menu-badge-icons":["limel-menu","limel-button"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-badge-icons.tsx","type":"tsx","source":"import { MenuItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * With badge icons\n */\n@Component({\n    tag: 'limel-example-menu-badge-icons',\n    shadow: true,\n})\nexport class MenuBadgeIconsExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Copy',\n            icon: 'copy',\n            iconColor: 'rgb(var(--color-lime-light))',\n        },\n        { text: 'Cut', icon: 'cut', iconColor: 'rgb(var(--color-red-light))' },\n        { separator: true },\n        {\n            text: 'Paste',\n            icon: 'paste',\n            iconColor: 'rgb(var(--color-amber-default))',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-menu items={this.items} badgeIcons={true}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-basic.tsx","fileName":"menu-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-basic","overview":"Basic example\n\nWith a simple `onSelect` handler.","usage":{},"docs":"Basic example\n\nWith a simple `onSelect` handler.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-basic":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-basic.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n *\n * With a simple `onSelect` handler.\n */\n@Component({\n    tag: 'limel-example-menu-basic',\n    shadow: true,\n})\nexport class MenuBasicExample {\n    @State()\n    private lastSelectedItem: string;\n\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Copy' },\n        { text: 'Cut' },\n        { separator: true },\n        { text: 'Paste' },\n    ];\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-composite.tsx","fileName":"menu-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-composite","overview":"Composite\n\nA place to try different combinations of states. This example has a slightly\nmore advanced `onSelect` handler, which disables the last selected value.","usage":{},"docs":"Composite\n\nA place to try different combinations of states. This example has a slightly\nmore advanced `onSelect` handler, which disables the last selected value.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-controls","limel-form","limel-example-event-printer"],"dependencyGraph":{"limel-example-menu-composite":["limel-menu","limel-button","limel-example-controls","limel-form","limel-example-event-printer"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[{"name":"schema","type":"any","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states. This example has a slightly\n * more advanced `onSelect` handler, which disables the last selected value.\n */\n@Component({\n    tag: 'limel-example-menu-composite',\n    shadow: true,\n})\nexport class MenuCompositeExample {\n    @Prop()\n    public schema: any;\n\n    @State()\n    private props = {\n        badgeIcons: true,\n        disabled: false,\n        items: [\n            {\n                text: 'Copy',\n                icon: 'copy',\n                iconColor: 'rgb(var(--color-lime-light))',\n            },\n            {\n                text: 'Cut',\n                icon: 'cut',\n                iconColor: 'rgb(var(--color-red-light))',\n            },\n            { separator: true },\n            {\n                text: 'Paste',\n                disabled: true,\n                icon: 'paste',\n                iconColor: 'rgb(var(--color-amber-default))',\n            },\n        ],\n        open: false,\n        openDirection: 'right',\n        gridLayout: false,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema = {\n            ...this.schema,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n\n        delete this.schema.properties.label;\n    }\n\n    public render() {\n        console.log('Composite example schema:', this.schema);\n\n        return [\n            <limel-menu\n                items={this.props.items as any}\n                disabled={this.props.disabled}\n                openDirection={this.props.openDirection as any}\n                badgeIcons={this.props.badgeIcons}\n                open={this.props.open}\n                gridLayout={this.props.gridLayout}\n                onSelect={this.handleSelect}\n                onCancel={this.handleCancel}\n            >\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleChange}\n                />\n            </limel-example-controls>,\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: CustomEvent) => {\n        this.eventPrinter.writeEvent(event);\n        this.props.items = this.props.items.map((item) => {\n            if (!('separator' in item)) {\n                item.disabled = item.text === event.detail.text;\n            }\n\n            return item;\n        });\n\n        this.props = { ...this.props };\n    };\n\n    private handleCancel = (event: Event) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private handleChange = (event: CustomEvent) => {\n        this.props = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-disabled.tsx","fileName":"menu-disabled.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-disabled","overview":"Disabled\n\nNote that you don't need to disable the trigger button separately, as the\ncomponent takes care of this for you.","usage":{},"docs":"Disabled\n\nNote that you don't need to disable the trigger button separately, as the\ncomponent takes care of this for you.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button"],"dependencyGraph":{"limel-example-menu-disabled":["limel-menu","limel-button"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-disabled.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * Disabled\n *\n * Note that you don't need to disable the trigger button separately, as the\n * component takes care of this for you.\n */\n@Component({\n    tag: 'limel-example-menu-disabled',\n    shadow: true,\n})\nexport class MenuDisabledExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Copy' },\n        { text: 'Cut' },\n        { separator: true },\n        { text: 'Paste' },\n    ];\n\n    public render() {\n        return (\n            <limel-menu\n                items={this.items}\n                disabled={true}\n                onSelect={this.handleSelect}\n            >\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>\n        );\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        console.error(\n            'This should never happen, since the menu is disabled.',\n            event\n        );\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-grid.tsx","fileName":"menu-grid.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-grid","overview":"With grid layout\nTo render items of a menu in a grid layout instead of a vertical list,\nsimply setting the `gridLayout` property to `true`.\n\n:::note\nMenus with the grid layout has a responsive width by default,\nwhich will not grow wider than a certain size. However, if the default size is not\nwide enough for your use case, you can try setting another responsive width, using\nthe `--menu-surface-width` variable.\n\nTo achieve a responsive width, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(100vw, 40rem);` will output\n`width: min(100wv, 40rem);` which will tell the browser to render the menu\ncontent in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\nis larger than `40rem`.\n:::\n\n\nTo tweak the grid layout, a few other variables are available:\n- `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n- `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n- `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.","usage":{},"docs":"With grid layout\nTo render items of a menu in a grid layout instead of a vertical list,\nsimply setting the `gridLayout` property to `true`.\n\n:::note\nMenus with the grid layout has a responsive width by default,\nwhich will not grow wider than a certain size. However, if the default size is not\nwide enough for your use case, you can try setting another responsive width, using\nthe `--menu-surface-width` variable.\n\nTo achieve a responsive width, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(100vw, 40rem);` will output\n`width: min(100wv, 40rem);` which will tell the browser to render the menu\ncontent in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\nis larger than `40rem`.\n:::\n\n\nTo tweak the grid layout, a few other variables are available:\n- `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n- `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n- `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button"],"dependencyGraph":{"limel-example-menu-grid":["limel-menu","limel-button"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-grid.tsx","type":"tsx","source":"import { MenuItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * With grid layout\n * To render items of a menu in a grid layout instead of a vertical list,\n * simply setting the `gridLayout` property to `true`.\n *\n * :::note\n * Menus with the grid layout has a responsive width by default,\n * which will not grow wider than a certain size. However, if the default size is not\n * wide enough for your use case, you can try setting another responsive width, using\n * the `--menu-surface-width` variable.\n *\n * To achieve a responsive width, try using the `min()` function.\n * This function selects the smallest value from a list of comma-separated expressions\n * which are placed within the parentheses.\n *\n * For example, `--menu-surface-width: min(100vw, 40rem);` will output\n * `width: min(100wv, 40rem);` which will tell the browser to render the menu\n * content in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\n * is larger than `40rem`.\n * :::\n *\n *\n * To tweak the grid layout, a few other variables are available:\n * - `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n * - `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n * - `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.\n *\n */\n@Component({\n    tag: 'limel-example-menu-grid',\n    shadow: true,\n    styleUrl: 'menu-grid.scss',\n})\nexport class MenuGridExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Companies',\n            icon: 'organization',\n            iconColor: 'rgb(var(--color-blue-default)',\n        },\n        {\n            text: 'Deals',\n            icon: 'money',\n            iconColor: 'rgb(var(--color-green-default))',\n        },\n        {\n            text: 'Agreements',\n            icon: 'handshake',\n            iconColor: 'rgb(var(--color-pink-default))',\n        },\n        {\n            text: 'Todos',\n            icon: 'today',\n            iconColor: 'rgb(var(--color-teal-default))',\n        },\n        {\n            text: 'History',\n            icon: 'comments',\n            iconColor: 'rgb(var(--color-grey-light))',\n        },\n        { separator: true },\n        {\n            text: 'Coworkers',\n            icon: 'gender_neutral_user',\n            iconColor: 'rgb(var(--color-orange-light))',\n        },\n        {\n            text: 'Persons',\n            icon: 'user_group_man_man',\n            iconColor: 'rgb(var(--color-yellow-dark)',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-menu items={this.items} badgeIcons={true} gridLayout={true}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>\n        );\n    }\n}\n"},{"filename":"menu-grid.scss","type":"scss","source":":host {\n    --menu-surface-width: min(\n        calc(100vw - 4rem),\n        40rem\n    ); // The `min()` function selects the smallest value from a list of comma-separated expressions.\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-hotkeys.tsx","fileName":"menu-hotkeys.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-hotkeys","overview":"Menu with supporting hotkeys","usage":{},"docs":"Menu with supporting hotkeys","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-hotkeys":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-hotkeys.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Menu with supporting hotkeys\n *\n */\n@Component({\n    tag: 'limel-example-menu-hotkeys',\n    shadow: true,\n})\nexport class MenuHotkeysExample {\n    @State()\n    private lastSelectedItem: string;\n\n    private items: Array<ListSeparator | MenuItem> = [\n        { text: 'Copy', commandText: 'alt + C' },\n        { text: 'Cut', commandText: 'alt + X' },\n        { separator: true },\n        { text: 'Paste', commandText: 'alt + V' },\n    ];\n\n    public render() {\n        console.log(this.items);\n\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-icons.tsx","fileName":"menu-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-icons","overview":"With icons","usage":{},"docs":"With icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button"],"dependencyGraph":{"limel-example-menu-icons":["limel-menu","limel-button"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-icons.tsx","type":"tsx","source":"import { MenuItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * With icons\n */\n@Component({\n    tag: 'limel-example-menu-icons',\n    shadow: true,\n})\nexport class MenuIconsExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Copy', icon: 'copy' },\n        { text: 'Cut', icon: 'cut' },\n        { separator: true },\n        { text: 'Paste', icon: 'paste' },\n    ];\n\n    public render() {\n        return (\n            <limel-menu items={this.items}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-notification.tsx","fileName":"menu-notification.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-notification","overview":"With notification\n\nIt is possible to display a notification badge on each individual\nlist item inside the menu's dropdown.\n\nThese notification badges are supposed to inform the user that\nthere is something in the menu item that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\nHowever, if a number is not meaningful, it is possible to send an\nempty string (`badge: ''`), which will display a circle on the\nlist item.\n\nSince list items in the menu are hidden away, users would not\nrealize that there is something inside the menu which requires their\nattention. Which is why the trigger automatically displays a\nnotification badge on its top-right corner,\nwhen the menu contains badges.\n\nBy default, the badge is red and its text is white.\nThis is to attract users' attention. However, this is possible to override using\n[provided style variables](/#/component/limel-menu/styles/).\n\n:::warning\n- Do not negatively exploit this possibility and spam users' attention.\nCrowding the UI with too much noise _will_ negatively affect the user experience.\n- Notification badges *must* be cleared as soon as the list item is clicked by the user!\n:::","usage":{},"docs":"With notification\n\nIt is possible to display a notification badge on each individual\nlist item inside the menu's dropdown.\n\nThese notification badges are supposed to inform the user that\nthere is something in the menu item that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\nHowever, if a number is not meaningful, it is possible to send an\nempty string (`badge: ''`), which will display a circle on the\nlist item.\n\nSince list items in the menu are hidden away, users would not\nrealize that there is something inside the menu which requires their\nattention. Which is why the trigger automatically displays a\nnotification badge on its top-right corner,\nwhen the menu contains badges.\n\nBy default, the badge is red and its text is white.\nThis is to attract users' attention. However, this is possible to override using\n[provided style variables](/#/component/limel-menu/styles/).\n\n:::warning\n- Do not negatively exploit this possibility and spam users' attention.\nCrowding the UI with too much noise _will_ negatively affect the user experience.\n- Notification badges *must* be cleared as soon as the list item is clicked by the user!\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-icon-button"],"dependencyGraph":{"limel-example-menu-notification":["limel-menu","limel-icon-button"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-notification.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * With notification\n *\n * It is possible to display a notification badge on each individual\n * list item inside the menu's dropdown.\n *\n * These notification badges are supposed to inform the user that\n * there is something in the menu item that requires their attention.\n *\n * This is typically done by displaying a number, which summarizes\n * the quantity of the items that require user's attention.\n * However, if a number is not meaningful, it is possible to send an\n * empty string (`badge: ''`), which will display a circle on the\n * list item.\n *\n * Since list items in the menu are hidden away, users would not\n * realize that there is something inside the menu which requires their\n * attention. Which is why the trigger automatically displays a\n * notification badge on its top-right corner,\n * when the menu contains badges.\n *\n * By default, the badge is red and its text is white.\n * This is to attract users' attention. However, this is possible to override using\n * [provided style variables](/#/component/limel-menu/styles/).\n *\n * :::warning\n * - Do not negatively exploit this possibility and spam users' attention.\n * Crowding the UI with too much noise _will_ negatively affect the user experience.\n * - Notification badges *must* be cleared as soon as the list item is clicked by the user!\n * :::\n */\n@Component({\n    tag: 'limel-example-menu-notification',\n    shadow: true,\n})\nexport class MenuNotificationExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Profile', icon: 'cat_profile' },\n        { text: 'Settings', icon: 'horizontal_settings_mixer', badge: '' },\n        { text: 'Notifications', icon: 'bell', badge: 7 },\n        { separator: true },\n        { text: 'Log out' },\n    ];\n\n    public render() {\n        return (\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-icon-button\n                    slot=\"trigger\"\n                    icon=\"gender_neutral_user\"\n                    label=\"User Menu\"\n                    elevated={true}\n                />\n            </limel-menu>\n        );\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        console.log(event.detail.text);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-open-direction.tsx","fileName":"menu-open-direction.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-open-direction","overview":"openDirection\n\nThe value of the `openDirection` property defines how the menu content\nis aligned with its trigger element, and in which direction it opens.","usage":{},"docs":"openDirection\n\nThe value of the `openDirection` property defines how the menu content\nis aligned with its trigger element, and in which direction it opens.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-select"],"dependencyGraph":{"limel-example-menu-open-direction":["limel-menu","limel-button","limel-select"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-open-direction.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    OpenDirection,\n    Option,\n    LimelSelectCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * openDirection\n *\n * The value of the `openDirection` property defines how the menu content\n * is aligned with its trigger element, and in which direction it opens.\n */\n@Component({\n    tag: 'limel-example-menu-open-direction',\n    shadow: true,\n    styleUrl: 'menu-open-direction.scss',\n})\nexport class MenuOpenDirectionExample {\n    @State()\n    private selectedOpenDirection: Option<OpenDirection>;\n\n    private availableOpenDirections: Array<Option<OpenDirection>>;\n\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Copy' },\n        { text: 'Cut' },\n        { separator: true },\n        { text: 'Paste' },\n    ];\n\n    constructor() {\n        const openDirections: OpenDirection[] = [\n            'left-start',\n            'left',\n            'left-end',\n            'right-start',\n            'right',\n            'right-end',\n            'top-start',\n            'top',\n            'top-end',\n            'bottom-start',\n            'bottom',\n            'bottom-end',\n        ];\n        this.availableOpenDirections = openDirections.map((value) => {\n            return {\n                text: value as string,\n                value: value,\n            } as Option<OpenDirection>;\n        });\n        this.selectedOpenDirection = this.availableOpenDirections.find(\n            (v) => v.value === 'bottom-start'\n        );\n    }\n\n    public render() {\n        return [\n            <limel-menu\n                items={this.items}\n                openDirection={this.selectedOpenDirection?.value}\n            >\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-select\n                class=\"is-narrow\"\n                label=\"openDirection\"\n                options={this.availableOpenDirections}\n                value={this.selectedOpenDirection}\n                onChange={this.handleNewSelection}\n            />,\n        ];\n    }\n\n    private handleNewSelection = (\n        event: LimelSelectCustomEvent<Option<OpenDirection>>\n    ) => {\n        this.selectedOpenDirection = event.detail;\n    };\n}\n"},{"filename":"menu-open-direction.scss","type":"scss","source":":host(limel-example-menu-open-direction) {\n    display: flex;\n    justify-content: space-between;\n    gap: 1rem;\n}\n\nlimel-select {\n    min-width: 8.75rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-basic-secondary-text.tsx","fileName":"menu-basic-secondary-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-secondary-text","overview":"With `secondaryText`\n\nMenu items can display secondary text as well. By default, the secondary text\nwill be displayed in two lines, and then get truncated.\n\n:::important\nKeep in mind that a menu's drop-down surface will stretch as much as its default\nmaximum width values allow. However, if this default maximum width does not suit\nyour use case, you can override it using the `--menu-surface-width` variable.\n\nBut do not forget that menus should still behave responsively, thus assigning a fixed value\nshould be avoided. To make the width responsive, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(90vw, 40rem);` will output\n`width: min(90wv, 40rem);` which will tell the browser to render the menu\ncontent in a grid that's allowed to take up 90% of the viewport's width (`90vw`)\nup to a maximum of `40rem`.\n:::","usage":{},"docs":"With `secondaryText`\n\nMenu items can display secondary text as well. By default, the secondary text\nwill be displayed in two lines, and then get truncated.\n\n:::important\nKeep in mind that a menu's drop-down surface will stretch as much as its default\nmaximum width values allow. However, if this default maximum width does not suit\nyour use case, you can override it using the `--menu-surface-width` variable.\n\nBut do not forget that menus should still behave responsively, thus assigning a fixed value\nshould be avoided. To make the width responsive, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(90vw, 40rem);` will output\n`width: min(90wv, 40rem);` which will tell the browser to render the menu\ncontent in a grid that's allowed to take up 90% of the viewport's width (`90vw`)\nup to a maximum of `40rem`.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-secondary-text":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-basic-secondary-text.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * With `secondaryText`\n *\n * Menu items can display secondary text as well. By default, the secondary text\n * will be displayed in two lines, and then get truncated.\n *\n * :::important\n * Keep in mind that a menu's drop-down surface will stretch as much as its default\n * maximum width values allow. However, if this default maximum width does not suit\n * your use case, you can override it using the `--menu-surface-width` variable.\n *\n * But do not forget that menus should still behave responsively, thus assigning a fixed value\n * should be avoided. To make the width responsive, try using the `min()` function.\n * This function selects the smallest value from a list of comma-separated expressions\n * which are placed within the parentheses.\n *\n * For example, `--menu-surface-width: min(90vw, 40rem);` will output\n * `width: min(90wv, 40rem);` which will tell the browser to render the menu\n * content in a grid that's allowed to take up 90% of the viewport's width (`90vw`)\n * up to a maximum of `40rem`.\n * :::\n */\n@Component({\n    tag: 'limel-example-menu-secondary-text',\n    shadow: true,\n    styleUrl: 'menu-basic-secondary-text.scss',\n})\nexport class MenuBasicExample {\n    @State()\n    private lastSelectedItem: string;\n\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'This item only has one line of primary text',\n        },\n        { separator: true },\n        {\n            text: 'Very long primary texts like this one can truncate based on what you specify for `--menu-surface-width`.',\n            secondaryText: 'This is a short secondary text.',\n        },\n        {\n            text: 'This item only has one line of primary text',\n            secondaryText:\n                'The length of secondary text exceeds maximum allowed number of lines, which is two. This happens because `--menu-surface-width` specified here is not so large. Thus the lines will truncate.',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"},{"filename":"menu-basic-secondary-text.scss","type":"scss","source":":host {\n    --menu-surface-width: min(\n        calc(100vw - 4rem),\n        20rem\n    ); // The `min()` function selects the smallest value from a list of comma-separated expressions.\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/nested-form.tsx","fileName":"nested-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-nested-form","overview":"Nested data","usage":{},"docs":"Nested data","docsTags":[{"name":"link","text":"nested-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-nested-form":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"nested-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { schema } from './nested-schema';\n\n/**\n * Nested data\n *\n * @link nested-schema.ts\n */\n@Component({\n    tag: 'limel-example-nested-form',\n    shadow: true,\n})\nexport class NestedFormExample {\n    @State()\n    private formData: object = {};\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"nested-schema.ts","type":"ts","source":"export const schema = {\n    type: 'object',\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Name',\n        },\n        age: {\n            type: 'integer',\n            title: 'Age',\n        },\n        address: {\n            type: 'object',\n            title: 'Location',\n            description: 'Please enter your location',\n            properties: {\n                city: {\n                    type: 'string',\n                    title: 'City',\n                },\n                country: {\n                    type: 'string',\n                    title: 'Country',\n                    description: 'It might also be a planet',\n                },\n            },\n        },\n        data: {\n            type: 'object',\n            title: 'Data',\n            description: 'Some additional data we would like you to submit',\n            properties: {\n                eyeColor: {\n                    type: 'string',\n                    title: 'Eye color',\n                },\n                shoeSize: {\n                    type: 'integer',\n                    title: 'Shoe size',\n                },\n            },\n            lime: {\n                collapsible: true,\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-composite.tsx","fileName":"picker-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-picker-composite":["limel-picker","limel-example-event-printer","limel-example-controls","limel-form"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[{"name":"schema","type":"any","mutable":true,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\nimport { ListItem } from '@limetech/lime-elements';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-picker-composite',\n    shadow: true,\n})\nexport class PickerCompositeExample {\n    @Prop({ mutable: true })\n    public schema: any;\n\n    @State()\n    private props: {\n        value: ListItem<number | string> | Array<ListItem<number | string>>;\n        [key: string]: any;\n    } = {\n        label: 'My label',\n        searchLabel: 'My search label',\n        helperText: 'My helper text',\n        leadingIcon: 'search',\n        emptyResultMessage: 'No matches found',\n        delimiter: null,\n        value: [],\n        required: false,\n        disabled: false,\n        readonly: false,\n        loading: false,\n        multiple: true,\n        badgeIcons: true,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    private availableItems: Array<ListItem<number>> = [...this.allItems];\n\n    public componentWillLoad() {\n        const schema = {\n            ...this.schema,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n        delete schema.properties.actionPosition;\n        delete schema.properties.actionScrollBehavior;\n        delete schema.properties.actions;\n        delete schema.properties.searcher;\n        this.schema = schema;\n    }\n\n    public render() {\n        return [\n            <limel-picker\n                {...this.props}\n                searcher={this.search}\n                onChange={this.handleChange}\n                onInteract={this.handleEvent}\n            />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private search = (query: string): Promise<ListItem[]> => {\n        return new Promise((resolve) => {\n            if (query === '') {\n                return resolve(this.availableItems);\n            }\n\n            const filteredItems = this.availableItems.filter((item) => {\n                return item.text.toLowerCase().includes(query.toLowerCase());\n            });\n\n            return resolve(filteredItems);\n        });\n    };\n\n    private handleChange = (\n        event: CustomEvent<\n            ListItem<number | string> | Array<ListItem<number | string>>\n        >\n    ) => {\n        this.props = {\n            ...this.props,\n            value: event.detail as any,\n        };\n        this.updateAvailableItems();\n    };\n\n    private updateAvailableItems = () => {\n        this.availableItems = this.allItems.filter((item) => {\n            return !(this.props.value as any)?.find?.(\n                (selectedItem: ListItem<number | string>) => {\n                    return item.value === selectedItem.value;\n                }\n            );\n        });\n    };\n\n    private handleEvent = (event: CustomEvent) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-empty-suggestions.tsx","fileName":"picker-empty-suggestions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-empty-suggestions","overview":"With no suggestions and a message for empty search results\n\n:::important\nThis example simulates that searching is done on the server. Because these\nexamples do not _actually_ send requests to the server, we simulate a small\ndelay, using `setTimeout`. **Please do NOT copy that to production code!**\nSee the other examples for code that does not include this artificial delay.\n:::","usage":{},"docs":"With no suggestions and a message for empty search results\n\n:::important\nThis example simulates that searching is done on the server. Because these\nexamples do not _actually_ send requests to the server, we simulate a small\ndelay, using `setTimeout`. **Please do NOT copy that to production code!**\nSee the other examples for code that does not include this artificial delay.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-empty-suggestions":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-empty-suggestions.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\nconst NETWORK_DELAY = 500;\n\n/**\n * With no suggestions and a message for empty search results\n *\n * :::important\n * This example simulates that searching is done on the server. Because these\n * examples do not _actually_ send requests to the server, we simulate a small\n * delay, using `setTimeout`. **Please do NOT copy that to production code!**\n * See the other examples for code that does not include this artificial delay.\n * :::\n */\n@Component({\n    tag: 'limel-example-picker-empty-suggestions',\n    shadow: true,\n})\nexport class PickerExample {\n    @State()\n    private selectedItem: ListItem<number>;\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                value={this.selectedItem}\n                searcher={this.search}\n                emptyResultMessage=\"No results\"\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItem} />,\n        ];\n    }\n\n    private search = (query: string): Promise<ListItem[]> => {\n        return new Promise((resolve) => {\n            if (query === '') {\n                // Simulate some network delay\n                setTimeout(() => {\n                    resolve([]);\n                }, NETWORK_DELAY);\n            }\n\n            // Simulate some network delay\n            setTimeout(() => {\n                const filteredItems = this.allItems.filter((item) => {\n                    return item.text\n                        .toLowerCase()\n                        .includes(query.toLowerCase());\n                });\n                resolve(filteredItems);\n            }, NETWORK_DELAY);\n        });\n    };\n\n    private onChange = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        this.selectedItem = event.detail;\n    };\n\n    private onInteract = (event) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-icons.tsx","fileName":"picker-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-icons","overview":"With icons","usage":{},"docs":"With icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-icons":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-icons.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * With icons\n */\n@Component({\n    tag: 'limel-example-picker-icons',\n    shadow: true,\n})\nexport class PickerIconsExample {\n    @State()\n    private selectedItems: Array<ListItem<number>> = [];\n\n    private allItems: Array<ListItem<number>> = [\n        {\n            text: 'Admiral Swiggins',\n            secondaryText:\n                'Anchor Hook, Anchor Drop, Ink Spray, Ink Propulsion',\n            value: 1,\n            icon: 'octopus',\n            iconColor: 'var(--lime-red)',\n        },\n        {\n            text: 'Ayla',\n            secondaryText: 'Evil Eye, Rage, Chain Whack, Hop Skip',\n            value: 2,\n            icon: 'visible',\n            iconColor: 'var(--lime-magenta)',\n        },\n        {\n            text: 'Clunk',\n            secondaryText: 'Vacuum Bite, Explode, Missiles, Jet Boost',\n            value: 3,\n            icon: 'robot_3',\n            iconColor: 'var(--lime-dark-blue)',\n        },\n        {\n            text: 'Coco',\n            secondaryText: 'Ball Lightning, Blaze, Shock, Ollie',\n            value: 4,\n            icon: 'surfing',\n            iconColor: 'var(--lime-blue)',\n        },\n        {\n            text: 'Derpl',\n            secondaryText: 'Grid Trap, Siege Mode, Cat Shot, Booster Rocket',\n            value: 5,\n            icon: 'cat',\n            iconColor: 'var(--lime-green)',\n        },\n        {\n            text: 'Froggy G',\n            secondaryText:\n                'Splash Dash, Tornado Move, Bolt .45 Fish-gun, Frog Jump',\n            value: 6,\n            icon: 'frog',\n            iconColor: 'var(--lime-turquoise)',\n        },\n        {\n            text: 'Gnaw',\n            secondaryText: 'Acid Spit, Grow Weedling, Bite, Skroggle Jump',\n            value: 7,\n            icon: 'dog',\n            iconColor: 'var(--lime-orange)',\n        },\n        {\n            text: 'Lonestar',\n            secondaryText:\n                'Dynamite Throw, Summon Hyper Bull, Blaster, Double Jump',\n            value: 8,\n            icon: 'sheriff',\n            iconColor: 'var(--lime-deep-red)',\n        },\n        {\n            text: 'Leon',\n            secondaryText: 'Tounge Snatch, Cloaking Skin, Slash, Reptile Jump',\n            value: 9,\n            icon: 'croissant',\n            iconColor: 'var(--lime-yellow)',\n        },\n        {\n            text: 'Raelynn',\n            secondaryText:\n                'Timerift, Snipe, Protoblaster, Six Million Solar Human Jump',\n            value: 10,\n            icon: 'sniper_rifle',\n            iconColor: 'var(--lime-dark-grey)',\n        },\n        {\n            text: 'Skølldir',\n            secondaryText: 'Mighty Throw, Earthquake, Bash, Explosive Fart',\n            value: 11,\n            icon: 'beer',\n            iconColor: 'var(--lime-orange)',\n        },\n        {\n            text: 'Voltar',\n            secondaryText:\n                'Suicide Drones, Healbot, Techno Synaptic Wave, Hover',\n            value: 12,\n            icon: 'brain',\n            iconColor: 'var(--lime-magenta)',\n        },\n        {\n            text: 'Yuri',\n            secondaryText: 'Mine Deploying, Time Warp, Laser, Jet Pack',\n            value: 13,\n            icon: 'year_of_monkey',\n            iconColor: 'var(--lime-light-grey)',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                value={this.selectedItems}\n                searchLabel={'Search your awesomenaut'}\n                multiple={true}\n                searcher={this.search}\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItems} />,\n        ];\n    }\n\n    private search = (query: string): Promise<ListItem[]> => {\n        return new Promise((resolve) => {\n            if (query === '') {\n                resolve([]);\n            }\n\n            const filteredItems = this.allItems.filter((item) => {\n                const searchText =\n                    item.text.toLowerCase() +\n                    ' ' +\n                    item.secondaryText.toLowerCase();\n\n                return searchText.includes(query.toLowerCase());\n            });\n            resolve(filteredItems);\n        });\n    };\n\n    private onChange = (\n        event: LimelPickerCustomEvent<Array<ListItem<number>>>\n    ) => {\n        this.selectedItems = [...event.detail];\n    };\n\n    private onInteract = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-leading-icon-example.tsx","fileName":"picker-leading-icon-example.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-leading-icon","overview":"With a \"search\" leading icon","usage":{},"docs":"With a \"search\" leading icon","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker"],"dependencyGraph":{"limel-example-picker-leading-icon":["limel-picker"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-leading-icon-example.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * With a \"search\" leading icon\n */\n@Component({\n    tag: 'limel-example-picker-leading-icon',\n    shadow: true,\n})\nexport class PickerLeadingIconExample {\n    @State()\n    private selectedItem: ListItem<number>;\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                leadingIcon=\"search\"\n                value={this.selectedItem}\n                searcher={this.search}\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <p>\n                Value: <code>{JSON.stringify(this.selectedItem)}</code>\n            </p>,\n        ];\n    }\n\n    private search = (query: string): Promise<ListItem[]> => {\n        return new Promise((resolve) => {\n            if (query === '') {\n                resolve(this.allItems);\n            }\n\n            const filteredItems = this.allItems.filter((item) => {\n                return item.text.toLowerCase().includes(query.toLowerCase());\n            });\n            resolve(filteredItems);\n        });\n    };\n\n    private onChange = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        this.selectedItem = event.detail;\n    };\n\n    private onInteract = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-multiple.tsx","fileName":"picker-multiple.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-multiple","overview":"Multiple values can be picked.\n\n- \"Search\" is done locally in the frontend.\n- Already picked items are removed from the available options.","usage":{},"docs":"Multiple values can be picked.\n\n- \"Search\" is done locally in the frontend.\n- Already picked items are removed from the available options.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-multiple":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-multiple.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Multiple values can be picked.\n *\n * - \"Search\" is done locally in the frontend.\n * - Already picked items are removed from the available options.\n */\n@Component({\n    tag: 'limel-example-picker-multiple',\n    shadow: true,\n})\nexport class PickerMultipleExample {\n    @State()\n    private selectedItems: Array<ListItem<number>> = [];\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    private availableItems: Array<ListItem<number>> = [...this.allItems];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                value={this.selectedItems}\n                multiple={true}\n                searcher={this.search}\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItems} />,\n        ];\n    }\n\n    private search = (query: string): Promise<ListItem[]> => {\n        return new Promise((resolve) => {\n            if (query === '') {\n                return resolve(this.availableItems);\n            }\n\n            const filteredItems = this.availableItems.filter((item) => {\n                return item.text.toLowerCase().includes(query.toLowerCase());\n            });\n\n            return resolve(filteredItems);\n        });\n    };\n\n    private onChange = (\n        event: LimelPickerCustomEvent<Array<ListItem<number>>>\n    ) => {\n        this.selectedItems = [...event.detail];\n        this.updateAvailableItems();\n    };\n\n    private updateAvailableItems = () => {\n        this.availableItems = this.allItems.filter((item) => {\n            return !this.selectedItems.find((selectedItem) => {\n                return item.value === selectedItem.value;\n            });\n        });\n    };\n\n    private onInteract = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-single.tsx","fileName":"picker-single.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-single","overview":"Single value can be picked.\n\n- \"Search\" is done locally in the frontend.","usage":{},"docs":"Single value can be picked.\n\n- \"Search\" is done locally in the frontend.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-single":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-single.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Single value can be picked.\n *\n * - \"Search\" is done locally in the frontend.\n */\n@Component({\n    tag: 'limel-example-picker-single',\n    shadow: true,\n})\nexport class PickerSingleExample {\n    @State()\n    private selectedItem: ListItem<number>;\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                value={this.selectedItem}\n                searcher={this.search}\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItem} />,\n        ];\n    }\n\n    private search = (query: string): Promise<ListItem[]> => {\n        return new Promise((resolve) => {\n            if (query === '') {\n                return resolve(this.allItems);\n            }\n\n            const filteredItems = this.allItems.filter((item) => {\n                return item.text.toLowerCase().includes(query.toLowerCase());\n            });\n\n            return resolve(filteredItems);\n        });\n    };\n\n    private onChange = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        this.selectedItem = event.detail;\n    };\n\n    private onInteract = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-static-action.tsx","fileName":"picker-static-action.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-static-actions","overview":"With static actions\n\nStatic items can be added to the picker to enable triggering custom actions\ndirectly from the results dropdown list.\n\n:::tip\nA typical use case of such actions is scenarios in which the picker's search\nresults or suggestions list does not include what the user wants to pick. By\noffering custom actions right in the list, we can enable users to add missing\nitems.\n:::","usage":{},"docs":"With static actions\n\nStatic items can be added to the picker to enable triggering custom actions\ndirectly from the results dropdown list.\n\n:::tip\nA typical use case of such actions is scenarios in which the picker's search\nresults or suggestions list does not include what the user wants to pick. By\noffering custom actions right in the list, we can enable users to add missing\nitems.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-controls","limel-select","limel-example-value"],"dependencyGraph":{"limel-example-picker-static-actions":["limel-picker","limel-example-controls","limel-select","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-icon","limel-badge"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-static-action.tsx","type":"tsx","source":"import {\n    Action,\n    LimelPickerCustomEvent,\n    LimelSelectCustomEvent,\n    ListItem,\n    Option,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ActionScrollBehavior, ActionPosition } from '../actions.types';\n\n/**\n * With static actions\n *\n * Static items can be added to the picker to enable triggering custom actions\n * directly from the results dropdown list.\n *\n * :::tip\n * A typical use case of such actions is scenarios in which the picker's search\n * results or suggestions list does not include what the user wants to pick. By\n * offering custom actions right in the list, we can enable users to add missing\n * items.\n * :::\n */\n@Component({\n    tag: 'limel-example-picker-static-actions',\n    shadow: true,\n})\nexport class PickerStaticActionsExample {\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    private actions: Array<ListItem<Action>> = [\n        {\n            text: 'Add a dog',\n            icon: 'dog',\n            iconColor: 'rgb(var(--color-orange-default))',\n            value: { id: 'dog' },\n        },\n        {\n            text: 'Add a cat',\n            icon: 'cat',\n            iconColor: 'rgb(var(--color-green-default))',\n            value: { id: 'cat' },\n        },\n    ];\n\n    private actionPositions: Array<Option<ActionPosition>> = [\n        { text: 'Bottom', value: 'bottom' },\n        { text: 'Top', value: 'top' },\n    ];\n\n    private actionScrollBehaviors: Array<Option<ActionScrollBehavior>> = [\n        { text: 'Sticky', value: 'sticky' },\n        { text: 'Scroll', value: 'scroll' },\n    ];\n\n    @State()\n    private selectedItem: ListItem<number> = null;\n\n    @State()\n    private lastUsedAction: Action = null;\n\n    @State()\n    private actionScrollBehavior: Option<ActionScrollBehavior> =\n        this.actionScrollBehaviors[0];\n\n    @State()\n    private actionPosition: Option<ActionPosition> = this.actionPositions[0];\n\n    constructor() {\n        this.search = this.search.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onAction = this.onAction.bind(this);\n        this.setBehavior = this.setBehavior.bind(this);\n        this.setPosition = this.setPosition.bind(this);\n    }\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Select your favorite pet\"\n                value={this.selectedItem}\n                searchLabel={'Search your awesomenaut'}\n                searcher={this.search}\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n                onAction={this.onAction}\n                actions={this.actions}\n                actionScrollBehavior={this.actionScrollBehavior?.value}\n                actionPosition={this.actionPosition?.value}\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-max-columns-width': '10rem' }}\n            >\n                <limel-select\n                    class=\"is-narrow\"\n                    label=\"Action Scroll Behavior\"\n                    onChange={this.setBehavior}\n                    value={this.actionScrollBehavior}\n                    options={this.actionScrollBehaviors}\n                />\n\n                <limel-select\n                    class=\"is-narrow\"\n                    label=\"Action Position\"\n                    onChange={this.setPosition}\n                    value={this.actionPosition}\n                    options={this.actionPositions}\n                />\n            </limel-example-controls>,\n            <limel-example-value\n                label=\"Last pressed action\"\n                value={this.lastUsedAction}\n            />,\n        ];\n    }\n\n    private search(query: string): Promise<ListItem[]> {\n        return new Promise((resolve) => {\n            if (query === '') {\n                resolve(this.allItems);\n            }\n\n            const filteredItems = this.allItems.filter((item) => {\n                return item.text.toLowerCase().includes(query.toLowerCase());\n            });\n            resolve(filteredItems);\n        });\n    }\n\n    private onChange(event: LimelPickerCustomEvent<ListItem<number>>) {\n        this.selectedItem = event.detail;\n    }\n\n    private onAction(event: CustomEvent<Action>) {\n        this.lastUsedAction = event.detail;\n    }\n\n    private onInteract(event) {\n        console.log('Value interacted with:', event.detail);\n    }\n\n    private setBehavior(\n        event: LimelSelectCustomEvent<Option<ActionScrollBehavior>>\n    ) {\n        this.actionScrollBehavior = event.detail;\n    }\n\n    private setPosition(event: LimelSelectCustomEvent<Option<ActionPosition>>) {\n        this.actionPosition = event.detail;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples","filePath":"./src/components/popover/examples/popover.tsx","fileName":"popover.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples/usage","tag":"limel-example-popover","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-popover","limel-button"],"dependencyGraph":{"limel-example-popover":["limel-popover","limel-button"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"popover.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-popover',\n    shadow: true,\n    styleUrl: 'popover.scss',\n})\nexport class PopoverExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-popover open={this.isOpen} onClose={this.onPopoverClose}>\n                <limel-button\n                    slot=\"trigger\"\n                    primary={true}\n                    label=\"Click me!\"\n                    onClick={this.openPopover}\n                />\n                <p style={{ margin: '0.5rem 1rem' }} tabindex=\"0\">\n                    Content\n                </p>\n            </limel-popover>,\n        ];\n    }\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        console.log('opening');\n        this.isOpen = true;\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        console.log('closing');\n        this.isOpen = false;\n    };\n}\n"},{"filename":"popover.scss","type":"scss","source":":host(limel-example-popover) {\n    --popover-body-background-color: rgb(var(--contrast-200));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/portal/examples","filePath":"./src/components/portal/examples/portal.tsx","fileName":"portal.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/portal/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/portal/examples/usage","tag":"limel-example-portal","overview":"Disconnect test\n\nThis is an example to test that it works to remove a popover from the DOM,\nthen add it back again without breaking it","usage":{},"docs":"Disconnect test\n\nThis is an example to test that it works to remove a popover from the DOM,\nthen add it back again without breaking it","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-popover"],"dependencyGraph":{"limel-example-portal":["limel-button","limel-popover"],"limel-button":["limel-spinner","limel-icon"],"limel-popover":["limel-portal","limel-popover-surface"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"portal.tsx","type":"tsx","source":"import { Component, h, Element, State } from '@stencil/core';\n\n/**\n * Disconnect test\n *\n * This is an example to test that it works to remove a popover from the DOM,\n * then add it back again without breaking it\n */\n@Component({\n    tag: 'limel-example-portal',\n    shadow: true,\n})\nexport class PortalExample {\n    @State()\n    private isOpen = false;\n\n    @Element()\n    private host: HTMLLimelExamplePortalElement;\n\n    @State()\n    private container: HTMLElement;\n\n    public render() {\n        return (\n            <div class=\"root\">\n                <limel-button\n                    label=\"Disconnect from DOM\"\n                    disabled={!!this.container}\n                    onClick={this.handleDisconnect}\n                />\n                <limel-button\n                    label=\"Connect to DOM\"\n                    disabled={!this.container}\n                    onClick={this.handleConnect}\n                />\n                <div class=\"container\">\n                    <limel-popover\n                        open={this.isOpen}\n                        onClose={this.onPopoverClose}\n                    >\n                        <limel-button\n                            slot=\"trigger\"\n                            primary={true}\n                            label=\"Click me!\"\n                            onClick={this.openPopover}\n                        />\n                        <div>CONTENT</div>\n                    </limel-popover>\n                </div>\n            </div>\n        );\n    }\n\n    private handleDisconnect = () => {\n        if (this.container) {\n            return;\n        }\n\n        const root = this.host.shadowRoot.querySelector('.root');\n        this.container = root.querySelector('.container');\n\n        root.removeChild(this.container);\n    };\n\n    private handleConnect = () => {\n        if (!this.container) {\n            return;\n        }\n\n        const root = this.host.shadowRoot.querySelector('.root');\n        root.appendChild(this.container);\n        this.container = null;\n    };\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.isOpen = true;\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/primary-color-palette.tsx","fileName":"primary-color-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-primary-color-palette","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox"],"dependencyGraph":{"limel-example-primary-color-palette":["limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"primary-color-palette.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-primary-color-palette',\n    shadow: true,\n    styleUrl: 'primary-color-palette.scss',\n})\nexport class PaletteExample {\n    @State()\n    private brandColors: boolean = false;\n\n    private colors = [\n        'red',\n        'pink',\n        'magenta',\n        'purple',\n        'violet',\n        'indigo',\n        'blue',\n        'sky',\n        'cyan',\n        'teal',\n        'green',\n        'lime',\n        'grass',\n        'yellow',\n        'amber',\n        'orange',\n        'coral',\n        'brown',\n        'gray',\n        'glaucous',\n    ];\n\n    public render() {\n        return (\n            <div class={{ 'brand-colors': this.brandColors }}>\n                <div class=\"color-palette\">\n                    {this.renderSwatches()}\n                    <div class=\"brightness-label\">light</div>\n                    <div class=\"brightness-label\">default</div>\n                </div>\n                <limel-checkbox\n                    label=\"Highlight Lime's brand colors\"\n                    onChange={this.toggleMode}\n                    checked={this.brandColors}\n                />\n                <div class=\"brand-colors-tips\">\n                    Most of the brand colors are included in the subset for \"\n                    <b>dark mode</b>\". Switch between dark & light mode to see\n                    all of them.\n                </div>\n            </div>\n        );\n    }\n\n    private renderSwatches = (): JSX.Element[][] => {\n        return this.colors.map((color) => {\n            return [\n                <div class={`swatch --color-${color}-light`}></div>,\n                <div class={`swatch --color-${color}-default`}>·</div>,\n                <div class=\"swatch hue\">{color}</div>,\n            ];\n        });\n    };\n\n    private toggleMode = () => {\n        this.brandColors = !this.brandColors;\n    };\n}\n"},{"filename":"primary-color-palette.scss","type":"scss","source":"@use './shared-styles';\n\n.color-palette {\n    grid-template-rows: repeat(2, 1fr) auto;\n    grid-template-columns: repeat(20, 1fr) auto;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-basic.tsx","fileName":"progress-flow-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-basic","overview":"Basic Example\n\nProgress flow can visualize linear process, consisting of distinct steps.\nSometimes, this is a great alternative to use instead of `limel-select`.\nFor instance, when there are too few options available to choose from, and\nthe options have an incremental order.\n\nEach step can optionally get an icon, to help users understand its meaning\nfaster, and recognize it quicker next time.","usage":{},"docs":"Basic Example\n\nProgress flow can visualize linear process, consisting of distinct steps.\nSometimes, this is a great alternative to use instead of `limel-select`.\nFor instance, when there are too few options available to choose from, and\nthe options have an incremental order.\n\nEach step can optionally get an icon, to help users understand its meaning\nfaster, and recognize it quicker next time.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-progress-flow-basic":["limel-progress-flow","limel-example-controls","limel-checkbox","limel-example-value"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-basic.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '../progress-flow.types';\n\n/**\n * Basic Example\n *\n * Progress flow can visualize linear process, consisting of distinct steps.\n * Sometimes, this is a great alternative to use instead of `limel-select`.\n * For instance, when there are too few options available to choose from, and\n * the options have an incremental order.\n *\n * Each step can optionally get an icon, to help users understand its meaning\n * faster, and recognize it quicker next time.\n */\n@Component({\n    tag: 'limel-example-progress-flow-basic',\n    shadow: true,\n})\nexport class ProgressFlowBasicExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: '1',\n            text: 'Step 1',\n            selected: true,\n            icon: 'add_shopping_cart',\n        },\n        { value: '2', text: 'Step 2', icon: 'shopping_cart_loaded' },\n        { value: '3', text: 'Step 3', icon: 'insert_money_euro' },\n    ];\n\n    public render() {\n        return [\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n                disabled={this.disabled}\n                readonly={this.readonly}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value\n                value={this.flowItems.find((i) => i.selected)}\n            />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-colors.tsx","fileName":"progress-flow-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-colors","overview":"Using colors\n\nBy default, each step appears with a light grey background, and when\nselected, it gets the defined `--lime-primary-color` as background. Also,\npassed steps will get the same background color as selected steps by default.\n\nHowever, both of these colors can be customized by specifying color values\nfor `selectedColor` and `passedColor`.\n\nAny icons will get the same color as the text for that step, but the color of\nicons for steps which are neither selected nor passed can be specified using\nthe `iconColor` property.","usage":{},"docs":"Using colors\n\nBy default, each step appears with a light grey background, and when\nselected, it gets the defined `--lime-primary-color` as background. Also,\npassed steps will get the same background color as selected steps by default.\n\nHowever, both of these colors can be customized by specifying color values\nfor `selectedColor` and `passedColor`.\n\nAny icons will get the same color as the text for that step, but the color of\nicons for steps which are neither selected nor passed can be specified using\nthe `iconColor` property.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-colors":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-colors.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '../progress-flow.types';\n\n/**\n * Using colors\n *\n * By default, each step appears with a light grey background, and when\n * selected, it gets the defined `--lime-primary-color` as background. Also,\n * passed steps will get the same background color as selected steps by default.\n *\n * However, both of these colors can be customized by specifying color values\n * for `selectedColor` and `passedColor`.\n *\n * Any icons will get the same color as the text for that step, but the color of\n * icons for steps which are neither selected nor passed can be specified using\n * the `iconColor` property.\n */\n@Component({\n    tag: 'limel-example-progress-flow-colors',\n    shadow: true,\n})\nexport class ProgressFlowColorsExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: 'lime',\n            text: 'Magenta step',\n            selectedColor: 'rgb(var(--color-magenta-default)',\n            passedColor: 'rgb(var(--color-green-light))',\n            icon: 'roller_brush',\n            iconColor: 'rgb(var(--color-magenta-default)',\n        },\n        {\n            value: 'purple',\n            text: 'Purple step',\n            selectedColor: 'rgb(var(--color-purple-default))',\n            passedColor: 'rgb(var(--color-green-default))',\n            icon: 'brush',\n            iconColor: 'rgb(var(--color-purple-default))',\n        },\n        {\n            value: 'organge',\n            text: 'Blue step',\n            selectedColor: 'rgb(var(--color-blue-default))',\n            passedColor: 'rgb(var(--color-green-dark))',\n            icon: 'paint_brush',\n            iconColor: 'rgb(var(--color-blue-default))',\n        },\n        {\n            value: 'red',\n            text: 'Green step',\n            selectedColor: 'rgb(var(--color-green-darker))',\n            icon: 'cosmetic_brush',\n            iconColor: 'rgb(var(--color-green-darker))',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-colors-css.tsx","fileName":"progress-flow-colors-css.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-colors-css","overview":"Customizing colors further, using CSS\n\nA few CSS variables can be used to customize the look and feel of the steps.\nBut keep in mind that it is not possible to target steps individually and\nchange their colors, using these CSS variables.\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual steps!\n:::\n:::note\nMake sure that:\n- text has enough contrast with its background and is readable.\n- the `--progress-flow-step-divider-color` has the same color as the component's\ncontainer.\n:::","usage":{},"docs":"Customizing colors further, using CSS\n\nA few CSS variables can be used to customize the look and feel of the steps.\nBut keep in mind that it is not possible to target steps individually and\nchange their colors, using these CSS variables.\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual steps!\n:::\n:::note\nMake sure that:\n- text has enough contrast with its background and is readable.\n- the `--progress-flow-step-divider-color` has the same color as the component's\ncontainer.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-colors-css":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-colors-css.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '../progress-flow.types';\n\n/**\n * Customizing colors further, using CSS\n *\n * A few CSS variables can be used to customize the look and feel of the steps.\n * But keep in mind that it is not possible to target steps individually and\n * change their colors, using these CSS variables.\n * :::note\n * Using CSS variables to tweak the colors, applies the colors globally to the\n * component, not to individual steps!\n * :::\n * :::note\n * Make sure that:\n * - text has enough contrast with its background and is readable.\n * - the `--progress-flow-step-divider-color` has the same color as the component's\n * container.\n * :::\n */\n@Component({\n    tag: 'limel-example-progress-flow-colors-css',\n    shadow: true,\n    styleUrl: 'progress-flow-colors-css.scss',\n})\nexport class ProgressFlowColorsCssExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: 'first',\n            text: 'First step',\n            selected: true,\n        },\n        {\n            value: 'second',\n            text: 'Second step',\n        },\n        {\n            value: 'third',\n            text: 'Third step',\n        },\n        {\n            value: 'fourth',\n            text: 'Fourth step',\n            icon: 'finish_flag',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange(event: CustomEvent<FlowItem>) {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    }\n}\n"},{"filename":"progress-flow-colors-css.scss","type":"scss","source":":host {\n    --container-background-color: rgb(var(--contrast-1400));\n    background-color: var(--container-background-color);\n    display: block;\n    padding: 2rem;\n    border-radius: 0.6rem;\n\n    --progress-flow-step-divider-color: var(--container-background-color);\n\n    --progress-flow-step-background-color: rgb(var(--contrast-1200));\n    --progress-flow-step-background-color--selected: rgb(var(--color-sky-dark));\n    --progress-flow-step-background-color--passed: rgb(var(--contrast-700));\n\n    --progress-flow-step-text-color: rgb(var(--contrast-200));\n    --progress-flow-step-text-color--passed: rgb(var(--contrast-1100));\n\n    --progress-flow-icon-color--inactive: rgb(var(--color-lime-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-with-disabled-step.tsx","fileName":"progress-flow-with-disabled-step.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-disabled-step","overview":"Disabled steps\n\nWhile the entire component can be `disabled`,\neach step can also be `disabled` individually.\nThis enables you to ask users to provide required data to be able to continue.","usage":{},"docs":"Disabled steps\n\nWhile the entire component can be `disabled`,\neach step can also be `disabled` individually.\nThis enables you to ask users to provide required data to be able to continue.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-disabled-step":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-with-disabled-step.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '../progress-flow.types';\n\n/**\n * Disabled steps\n *\n * While the entire component can be `disabled`,\n * each step can also be `disabled` individually.\n * This enables you to ask users to provide required data to be able to continue.\n */\n@Component({\n    tag: 'limel-example-progress-flow-disabled-step',\n    shadow: true,\n})\nexport class ProgressFlowDisabledStepExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: '1',\n            text: 'Choose a user name',\n        },\n        {\n            value: '2',\n            text: 'Choose a password',\n            selected: true,\n        },\n        {\n            value: '3',\n            text: 'Enable 2-factor authentication',\n            disabled: true,\n        },\n        {\n            value: '4',\n            text: \"Let's go!\",\n            disabled: true,\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-narrow.tsx","fileName":"progress-flow-narrow.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-narrow","overview":"Compact layout\n\nFor cases where this component needs to take as little space as possible,\nwe offer an alternative layout. All you need to do is addin the `is-narrow`\nclass to the component.","usage":{},"docs":"Compact layout\n\nFor cases where this component needs to take as little space as possible,\nwe offer an alternative layout. All you need to do is addin the `is-narrow`\nclass to the component.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-narrow":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-narrow.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '../progress-flow.types';\n\n/**\n * Compact layout\n *\n * For cases where this component needs to take as little space as possible,\n * we offer an alternative layout. All you need to do is addin the `is-narrow`\n * class to the component.\n */\n@Component({\n    tag: 'limel-example-progress-flow-narrow',\n    shadow: true,\n})\nexport class ProgressNarrowExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: 'first',\n            text: 'First step',\n            selected: true,\n        },\n        {\n            value: 'second',\n            text: 'Second step',\n        },\n        {\n            value: 'third',\n            text: 'Third step',\n        },\n        {\n            value: 'fourth',\n            text: 'Fourth step',\n            icon: 'finish_flag',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n                class=\"is-narrow\"\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-off-progress-steps.tsx","fileName":"progress-flow-off-progress-steps.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-off-progress-steps","overview":"Example with off-progress steps\n\nNaturally, the Progress Flow component is used to visualize a continuous linear\nprocess. But sometimes such processes can be abrupted, despite the level of progress.\n\nAbruptions can be excluded and displayed separately (not as a part of the flow)\nusing the `isOffProgress` property.","usage":{},"docs":"Example with off-progress steps\n\nNaturally, the Progress Flow component is used to visualize a continuous linear\nprocess. But sometimes such processes can be abrupted, despite the level of progress.\n\nAbruptions can be excluded and displayed separately (not as a part of the flow)\nusing the `isOffProgress` property.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-off-progress-steps":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-off-progress-steps.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '../progress-flow.types';\n\n/**\n * Example with off-progress steps\n *\n * Naturally, the Progress Flow component is used to visualize a continuous linear\n * process. But sometimes such processes can be abrupted, despite the level of progress.\n *\n * Abruptions can be excluded and displayed separately (not as a part of the flow)\n * using the `isOffProgress` property.\n *\n */\n@Component({\n    tag: 'limel-example-progress-flow-off-progress-steps',\n    shadow: true,\n})\nexport class ProgressFlowOffProgressStepsExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: 'contact',\n            text: 'Customer contact',\n            selectedColor: 'rgb(var(--color-orange-default))',\n            selected: true,\n            icon: 'meeting',\n        },\n        {\n            value: 'requirement',\n            text: 'Demand analysis',\n            selectedColor: 'rgb(var(--color-sky-default))',\n            icon: 'combo_chart',\n        },\n        {\n            value: 'tender',\n            text: 'Quote',\n            selectedColor: 'rgb(var(--color-green-default))',\n            icon: 'paper_plane',\n        },\n        {\n            value: 'agreement',\n            text: 'Agreement',\n            selectedColor: 'rgb(var(--color-teal-default))',\n            icon: 'agreement',\n        },\n        {\n            value: 'rejected',\n            text: 'Rejected',\n            isOffProgress: true,\n            selectedColor: 'rgb(var(--color-red-dark))',\n            icon: 'do_not_disturb',\n            iconColor: 'rgb(var(--color-red-dark))',\n        },\n        {\n            value: 'onhold',\n            text: 'On hold',\n            isOffProgress: true,\n            selectedColor: 'rgb(var(--color-coral-default))',\n            icon: 'circled_pause',\n            iconColor: 'rgb(var(--color-coral-default))',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-with-secondary-text.tsx","fileName":"progress-flow-with-secondary-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-secondary-text","overview":"Example with secondary text\n\nA `secondaryText` can be used to add further information to steps.\nThis could be for instance a timestamp of when a step was activated by the user\nor an explainatory text.","usage":{},"docs":"Example with secondary text\n\nA `secondaryText` can be used to add further information to steps.\nThis could be for instance a timestamp of when a step was activated by the user\nor an explainatory text.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-secondary-text":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-with-secondary-text.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '../progress-flow.types';\n\n/**\n * Example with secondary text\n *\n * A `secondaryText` can be used to add further information to steps.\n * This could be for instance a timestamp of when a step was activated by the user\n * or an explainatory text.\n */\n@Component({\n    tag: 'limel-example-progress-flow-secondary-text',\n    shadow: true,\n})\nexport class ProgressFlowSecondaryTextExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: '1',\n            text: 'Todo',\n            icon: 'add_ticket',\n            secondaryText: 'Added: 2021-May-26',\n        },\n        {\n            value: '2',\n            text: 'Working on it',\n            icon: 'outgoing_data',\n            selected: true,\n            secondaryText: 'Started: 2021-May-27',\n        },\n        { value: '3', text: 'Done', icon: 'ok' },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/props-factory-form.tsx","fileName":"props-factory-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-props-factory-form","overview":"Using `propsFactory`","usage":{},"docs":"Using `propsFactory`","docsTags":[{"name":"link","text":"props-factory-schema.ts"},{"name":"link","text":"props-factory-picker.tsx"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-props-factory-form":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"props-factory-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { schema } from './props-factory-schema';\n\n/**\n * Using `propsFactory`\n *\n * @link props-factory-schema.ts\n * @link props-factory-picker.tsx\n */\n@Component({\n    tag: 'limel-example-props-factory-form',\n    shadow: true,\n})\nexport class PropsFactoryFormExample {\n    @State()\n    private formData: object = {\n        hero: 1001,\n    };\n\n    private anObjectToInject = {\n        someProp: 'The object was successfully injected!',\n    };\n    private aStringToInject = 'The string was successfully injected!';\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n                propsFactory={this.propsFactory}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private propsFactory = (subSchema: Record<string, any>) => {\n        if (\n            subSchema.lime?.component?.name ===\n            'limel-example-props-factory-picker'\n        ) {\n            return {\n                injectedObject: this.anObjectToInject,\n                injectedString: this.aStringToInject,\n            };\n        }\n    };\n\n    private handleFormChange = (event: CustomEvent<object>) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"props-factory-schema.ts","type":"ts","source":"export const schema = {\n    type: 'object',\n    properties: {\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'limel-example-props-factory-picker',\n                },\n            },\n        },\n    },\n};\n"},{"filename":"props-factory-picker.tsx","type":"tsx","source":"import { Component, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport { FormComponent, LimelPickerCustomEvent } from '@limetech/lime-elements';\nimport { ListItem } from '../../list/list-item.types';\n\n@Component({\n    tag: 'limel-example-props-factory-picker',\n    shadow: true,\n})\nexport class PropsFactoryPickerExample implements FormComponent<number> {\n    /**\n     * An object injected using `propsFactory`\n     */\n    @Prop()\n    public injectedObject: { someProp: string };\n\n    /**\n     * A string injected using `propsFactory`\n     */\n    @Prop()\n    public injectedString: string;\n\n    /**\n     * The value of the property\n     */\n    @Prop()\n    public value: number;\n\n    /**\n     * Label to display next to the input field\n     */\n    @Prop()\n    public label: string;\n\n    /**\n     * Set to `true` if a value is required\n     */\n    @Prop()\n    public required: boolean;\n\n    /**\n     * Set to `true` if the value is readonly\n     */\n    @Prop()\n    public readonly: boolean;\n\n    /**\n     * Set to `true` if input should be disabled\n     */\n    @Prop()\n    public disabled: boolean;\n\n    /**\n     * Emitted when the value is changed\n     */\n    @Event()\n    public change: EventEmitter<number>;\n\n    private heroes: Array<ListItem<number>> = [\n        {\n            text: 'Superman',\n            value: 1001,\n            icon: 'superman',\n            iconColor: 'var(--lime-deep-red)',\n        },\n        {\n            text: 'Squirrel Girl',\n            value: 1002,\n            icon: 'squirrel',\n            iconColor: 'var(--lime-orange)',\n        },\n        {\n            text: 'Captain America',\n            value: 1003,\n            icon: 'captain_america',\n            iconColor: 'var(--lime-blue)',\n        },\n        {\n            text: 'Black Widow',\n            value: 1004,\n            icon: 'spider',\n            iconColor: 'var(--lime-dark-grey)',\n        },\n    ];\n\n    public componentWillLoad() {\n        console.log(\n            'propsFactory-picker - this.injectedObject.someProp:',\n            this.injectedObject.someProp\n        );\n        console.log(\n            'propsFactory-picker - this.injectedString:',\n            this.injectedString\n        );\n    }\n\n    private handleChange = (\n        event: LimelPickerCustomEvent<ListItem<number>>\n    ) => {\n        event.stopPropagation();\n        this.change.emit(event.detail?.value);\n    };\n\n    private search = async (query: string): Promise<ListItem[]> => {\n        return this.heroes.filter((hero) => {\n            return hero.text.toLowerCase().includes(query.toLowerCase());\n        });\n    };\n\n    public render() {\n        const value = this.heroes.find((hero) => hero.value === this.value);\n\n        return (\n            <limel-picker\n                label={this.label}\n                value={value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                onChange={this.handleChange}\n                searcher={this.search}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/props-factory-picker.tsx","fileName":"props-factory-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-props-factory-picker","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker"],"dependencyGraph":{"limel-example-props-factory-picker":["limel-picker"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-icon","limel-badge"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"Set to `true` if input should be disabled","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"injectedObject","type":"{ someProp: string; }","mutable":false,"reflectToAttr":false,"docs":"An object injected using `propsFactory`","docsTags":[],"values":[{"type":"{ someProp: string; }"}],"optional":false,"required":false},{"name":"injectedString","type":"string","mutable":false,"attr":"injected-string","reflectToAttr":false,"docs":"A string injected using `propsFactory`","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"Label to display next to the input field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":false,"docs":"Set to `true` if the value is readonly","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":false,"docs":"Set to `true` if a value is required","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"number","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The value of the property","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"number","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the value is changed","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"props-factory-picker.tsx","type":"tsx","source":"import { Component, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport { FormComponent, LimelPickerCustomEvent } from '@limetech/lime-elements';\nimport { ListItem } from '../../list/list-item.types';\n\n@Component({\n    tag: 'limel-example-props-factory-picker',\n    shadow: true,\n})\nexport class PropsFactoryPickerExample implements FormComponent<number> {\n    /**\n     * An object injected using `propsFactory`\n     */\n    @Prop()\n    public injectedObject: { someProp: string };\n\n    /**\n     * A string injected using `propsFactory`\n     */\n    @Prop()\n    public injectedString: string;\n\n    /**\n     * The value of the property\n     */\n    @Prop()\n    public value: number;\n\n    /**\n     * Label to display next to the input field\n     */\n    @Prop()\n    public label: string;\n\n    /**\n     * Set to `true` if a value is required\n     */\n    @Prop()\n    public required: boolean;\n\n    /**\n     * Set to `true` if the value is readonly\n     */\n    @Prop()\n    public readonly: boolean;\n\n    /**\n     * Set to `true` if input should be disabled\n     */\n    @Prop()\n    public disabled: boolean;\n\n    /**\n     * Emitted when the value is changed\n     */\n    @Event()\n    public change: EventEmitter<number>;\n\n    private heroes: Array<ListItem<number>> = [\n        {\n            text: 'Superman',\n            value: 1001,\n            icon: 'superman',\n            iconColor: 'var(--lime-deep-red)',\n        },\n        {\n            text: 'Squirrel Girl',\n            value: 1002,\n            icon: 'squirrel',\n            iconColor: 'var(--lime-orange)',\n        },\n        {\n            text: 'Captain America',\n            value: 1003,\n            icon: 'captain_america',\n            iconColor: 'var(--lime-blue)',\n        },\n        {\n            text: 'Black Widow',\n            value: 1004,\n            icon: 'spider',\n            iconColor: 'var(--lime-dark-grey)',\n        },\n    ];\n\n    public componentWillLoad() {\n        console.log(\n            'propsFactory-picker - this.injectedObject.someProp:',\n            this.injectedObject.someProp\n        );\n        console.log(\n            'propsFactory-picker - this.injectedString:',\n            this.injectedString\n        );\n    }\n\n    private handleChange = (\n        event: LimelPickerCustomEvent<ListItem<number>>\n    ) => {\n        event.stopPropagation();\n        this.change.emit(event.detail?.value);\n    };\n\n    private search = async (query: string): Promise<ListItem[]> => {\n        return this.heroes.filter((hero) => {\n            return hero.text.toLowerCase().includes(query.toLowerCase());\n        });\n    };\n\n    public render() {\n        const value = this.heroes.find((hero) => hero.value === this.value);\n\n        return (\n            <limel-picker\n                label={this.label}\n                value={value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                onChange={this.handleChange}\n                searcher={this.search}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select.tsx","fileName":"select.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-select":["limel-select","limel-example-controls","limel-checkbox","limel-example-value"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select.tsx","type":"tsx","source":"import { Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-select',\n})\nexport class SelectExample {\n    @State()\n    public value: Option;\n\n    @State()\n    public disabled = false;\n\n    @State()\n    public readonly = false;\n\n    @State()\n    public required = false;\n\n    @State()\n    public invalid = false;\n\n    private options: Option[] = [\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han', disabled: true },\n        { text: 'Leia Organo', value: 'leia' },\n    ];\n\n    public render() {\n        return [\n            <limel-select\n                label=\"Favorite hero\"\n                helperText=\"May the force be with him or her\"\n                value={this.value}\n                options={this.options}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                invalid={this.invalid}\n                onChange={this.changeHandler}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private changeHandler = (event) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-change-options.tsx","fileName":"select-change-options.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-change-options","overview":"Changing Available Options","usage":{},"docs":"Changing Available Options","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-controls","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-select-change-options":["limel-select","limel-example-controls","limel-button","limel-example-value"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-change-options.tsx","type":"tsx","source":"import { Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Changing Available Options\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-change-options',\n})\nexport class SelectExample {\n    @State()\n    public value: Option;\n\n    @State()\n    public disabled = false;\n\n    @State()\n    public currentOptionGroup = 0;\n\n    private optionGroups: Option[][] = [\n        [\n            { text: 'Luke Skywalker', value: 'luke' },\n            { text: 'Han Solo', value: 'han' },\n            { text: 'Leia Organo', value: 'leia' },\n        ],\n        [\n            { text: '', value: '' },\n            { text: 'Homer Simpson', value: 'homer' },\n            { text: 'Moe Szyslak', value: 'moe' },\n            { text: 'Ned Flanders', value: 'ned' },\n        ],\n        [\n            { text: '', value: '', disabled: true },\n            { text: 'Bart Simpson', value: 'bart' },\n            { text: 'Ned Flanders', value: 'ned' },\n        ],\n        [\n            { text: 'David Tennant', value: '10' },\n            { text: 'Matt Smith', value: '11' },\n            { text: 'Peter Capaldi', value: '12' },\n            { text: 'Jodie Witthaker', value: '13' },\n        ],\n        [],\n    ];\n\n    public render() {\n        return [\n            <limel-select\n                label=\"Favorite hero\"\n                value={this.value}\n                options={this.optionGroups[this.currentOptionGroup]}\n                disabled={this.disabled}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-max-columns-width': '9rem' }}\n            >\n                <limel-button\n                    label={this.disabled ? 'Enable' : 'Disable'}\n                    onClick={this.toggleEnabled}\n                />\n                <limel-button\n                    label=\"Change Options\"\n                    onClick={this.changeOptionsGroup}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n            <limel-example-value\n                label=\"Currently showing option group\"\n                value={`${this.currentOptionGroup + 1} / ${\n                    this.optionGroups.length\n                }`}\n            />,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n\n    private changeOptionsGroup = () => {\n        this.currentOptionGroup =\n            (this.currentOptionGroup + 1) % this.optionGroups.length;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-dialog.tsx","fileName":"select-dialog.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-dialog","overview":"Select field inside a dialog","usage":{},"docs":"Select field inside a dialog","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-select","limel-icon","limel-example-value"],"dependencyGraph":{"limel-example-select-dialog":["limel-button","limel-dialog","limel-select","limel-icon","limel-example-value"],"limel-button":["limel-spinner","limel-icon"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-dialog.tsx","type":"tsx","source":"import { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Select field inside a dialog\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-dialog',\n    styleUrl: 'select-dialog.scss',\n})\nexport class SelectDialogExample {\n    @State()\n    public heroValue: Option;\n\n    @State()\n    public villainValue: Option;\n\n    @State()\n    public open = false;\n\n    private heroOptions: Option[] = [\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han' },\n        { text: 'Leia Organa', value: 'leia' },\n    ];\n\n    private villainOptions: Option[] = [\n        { text: 'BB-9E', value: 'bb-9e' },\n        { text: 'Unkar Plutt', value: 'unkar' },\n        { text: 'Zam Wessell', value: 'zam' },\n        { text: 'Greedo', value: 'greedo' },\n        { text: 'Evazan and Baba', value: 'evazan_baba' },\n        { text: 'Bossk', value: 'bossk' },\n        { text: 'Count Dooku', value: 'dooku' },\n        { text: 'Captain Phasma', value: 'phasma' },\n        { text: 'Commander Cody', value: 'cody' },\n        { text: 'DJ', value: 'dj' },\n        { text: 'Supreme Leader Snoke', value: 'snoke' },\n        { text: 'Jango Fett', value: 'jango' },\n        { text: 'General Grievous', value: 'grievous' },\n        { text: 'General Hux', value: 'hux' },\n        { text: 'Orson Krennic', value: 'orson' },\n        { text: 'Sebulba', value: 'sebulba' },\n        { text: 'Boba Fett', value: 'boba' },\n        { text: 'Watto', value: 'watto' },\n        { text: 'Jar Jar Binks', value: 'jarjar' },\n        { text: 'The Sarlacc', value: 'sarlacc' },\n        { text: 'Darth Maul', value: 'maul' },\n        { text: 'Jabba the Hutt', value: 'jabba' },\n        { text: 'Anakin Skywalker', value: 'anakin' },\n        { text: 'Grand Moff Tarkin', value: 'tarkin' },\n        { text: 'Kylo Ren', value: 'ren' },\n        { text: 'Emperor Palpatine', value: 'palpatine' },\n        { text: 'Darth Vader', value: 'vader' },\n    ];\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Select characters\"\n                primary={true}\n                onClick={this.handleButtonClick}\n            />,\n            <limel-dialog onClose={this.handleClose} open={this.open}>\n                <limel-select\n                    label=\"Favorite hero\"\n                    value={this.heroValue}\n                    options={this.heroOptions}\n                    onChange={this.handleHeroChange}\n                />\n                <limel-select\n                    label=\"Loathed villain\"\n                    value={this.villainValue}\n                    options={this.villainOptions}\n                    onChange={this.handleVillainChange}\n                />\n                <limel-icon name=\"star_wars\" />\n                <limel-button\n                    slot=\"button\"\n                    primary={true}\n                    label=\"Close\"\n                    onClick={this.handleClose}\n                />\n            </limel-dialog>,\n            <limel-example-value\n                label=\"Favorite hero\"\n                value={this.heroValue}\n            />,\n            <limel-example-value\n                label=\"Loathed villain\"\n                value={this.villainValue}\n            />,\n        ];\n    }\n\n    private handleHeroChange = (event: LimelSelectCustomEvent<Option>) => {\n        this.heroValue = event.detail;\n    };\n\n    private handleVillainChange = (event: LimelSelectCustomEvent<Option>) => {\n        this.villainValue = event.detail;\n    };\n\n    private handleButtonClick = () => {\n        this.open = true;\n    };\n\n    private handleClose = () => {\n        this.open = false;\n    };\n}\n"},{"filename":"select-dialog.scss","type":"scss","source":"limel-dialog {\n    --dialog-height: 400px;\n}\n\nlimel-select {\n    margin-bottom: 1rem;\n}\n\nlimel-icon {\n    height: 300px;\n    width: 300px;\n    color: rgb(var(--contrast-1200));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-multiple.tsx","fileName":"select-multiple.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-multiple","overview":"Select multiple values","usage":{},"docs":"Select multiple values","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-select-multiple":["limel-select","limel-example-controls","limel-checkbox","limel-example-value"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-multiple.tsx","type":"tsx","source":"import { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Select multiple values\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-multiple',\n})\nexport class SelectMultipleExample {\n    @State()\n    public value: Option[] = [];\n\n    @State()\n    public disabled = false;\n\n    @State()\n    public readonly = false;\n\n    @State()\n    public required = false;\n\n    private options: Option[] = [\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han' },\n        { text: 'Leia Organo', value: 'leia' },\n    ];\n\n    public render() {\n        return [\n            <limel-select\n                label=\"Favorite heroes\"\n                value={this.value}\n                options={this.options}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                onChange={this.handleChange}\n                multiple={true}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: LimelSelectCustomEvent<Option[]>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-narrow.tsx","fileName":"select-narrow.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-narrow","overview":"Narrow layout\nThe `limel-select` component has the same height and layout as other input types\nin Lime elements. This makes the UI nice and tidy, when elements are placed\nbeside or on top of each other; for instance in a form.\n\nHowever, sometimes you may need to render the `limel-select` component with a\nnarrower layout (smaller in height). For instance when the component is used\nin a header, or when it is placed beside a component like `limel-button-group`.\n\nFor such cases, you can simply apply the class of `is-narrow` to your component.\n:::tip\nIn such use cases, the select usually does not need a `label`. Consider having\nits first `option` pre-chosen and displayed by default instead. Also avoid using\n`helperText` if possible.\n:::","usage":{},"docs":"Narrow layout\nThe `limel-select` component has the same height and layout as other input types\nin Lime elements. This makes the UI nice and tidy, when elements are placed\nbeside or on top of each other; for instance in a form.\n\nHowever, sometimes you may need to render the `limel-select` component with a\nnarrower layout (smaller in height). For instance when the component is used\nin a header, or when it is placed beside a component like `limel-button-group`.\n\nFor such cases, you can simply apply the class of `is-narrow` to your component.\n:::tip\nIn such use cases, the select usually does not need a `label`. Consider having\nits first `option` pre-chosen and displayed by default instead. Also avoid using\n`helperText` if possible.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-select"],"dependencyGraph":{"limel-example-select-narrow":["limel-header","limel-select"],"limel-header":["limel-icon"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-narrow.tsx","type":"tsx","source":"import { Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n/**\n * Narrow layout\n * The `limel-select` component has the same height and layout as other input types\n * in Lime elements. This makes the UI nice and tidy, when elements are placed\n * beside or on top of each other; for instance in a form.\n *\n * However, sometimes you may need to render the `limel-select` component with a\n * narrower layout (smaller in height). For instance when the component is used\n * in a header, or when it is placed beside a component like `limel-button-group`.\n *\n * For such cases, you can simply apply the class of `is-narrow` to your component.\n * :::tip\n * In such use cases, the select usually does not need a `label`. Consider having\n * its first `option` pre-chosen and displayed by default instead. Also avoid using\n * `helperText` if possible.\n * :::\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-narrow',\n    styleUrl: 'select-narrow.scss',\n})\nexport class SelectExample {\n    @State()\n    public value: Option = {\n        text: 'select a colleague',\n        value: 'colleague',\n        disabled: true,\n    };\n\n    private options: Option[] = [\n        {\n            text: 'Luke Skywalker',\n            value: 'luke',\n            icon: 'businessman',\n        },\n        {\n            text: 'Han Solo',\n            value: 'han',\n            icon: 'human_head',\n        },\n        {\n            text: 'Leia Organo',\n            value: 'leia',\n            icon: 'businesswoman',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-header\n                icon=\"combo_chart\"\n                heading=\"Sale performance\"\n                subheading=\"Choose a colleague to see their statistics\"\n            >\n                <limel-select\n                    class=\"is-narrow\"\n                    value={this.value}\n                    options={this.options}\n                    onChange={this.handleChange}\n                />\n            </limel-header>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"},{"filename":"select-narrow.scss","type":"scss","source":"limel-header {\n    max-width: 35rem;\n    margin: 0 auto;\n}\n\nlimel-select {\n    min-width: 12rem;\n    margin-right: 0.25rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-preselected.tsx","fileName":"select-preselected.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-preselected","overview":"Specific Value Preselected","usage":{},"docs":"Specific Value Preselected","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-value"],"dependencyGraph":{"limel-example-select-preselected":["limel-select","limel-example-value"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-preselected.tsx","type":"tsx","source":"import { Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Specific Value Preselected\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-preselected',\n})\nexport class SelectExample {\n    @State()\n    public value: Option = { text: 'Leia Organo', value: 'leia' };\n\n    private options: Option[] = [\n        { text: '', value: '' },\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han' },\n        { text: 'Leia Organo', value: 'leia' },\n    ];\n\n    public render() {\n        return (\n            <section>\n                <limel-select\n                    label=\"Favorite hero\"\n                    value={this.value}\n                    options={this.options}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </section>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-with-empty-option.tsx","fileName":"select-with-empty-option.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-with-empty-option","overview":"With Empty Option\n\nAdding an empty option makes it possible for the user to \"unset\"\nthe value. Try selecting a value below, and then selecting the empty\noption again.\n\nIf the component is set as required, the empty option is removed.","usage":{},"docs":"With Empty Option\n\nAdding an empty option makes it possible for the user to \"unset\"\nthe value. Try selecting a value below, and then selecting the empty\noption again.\n\nIf the component is set as required, the empty option is removed.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-select-with-empty-option":["limel-select","limel-example-controls","limel-checkbox","limel-example-value"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-with-empty-option.tsx","type":"tsx","source":"import { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * With Empty Option\n *\n * Adding an empty option makes it possible for the user to \"unset\"\n * the value. Try selecting a value below, and then selecting the empty\n * option again.\n *\n * If the component is set as required, the empty option is removed.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-with-empty-option',\n})\nexport class SelectWithEmptyOptionExample {\n    @State()\n    public value: Option;\n\n    @State()\n    public required = false;\n\n    private options: Option[] = [\n        { text: '', value: '' },\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han' },\n        { text: 'Leia Organo', value: 'leia' },\n    ];\n\n    public render() {\n        return (\n            <section>\n                <limel-select\n                    label=\"Favorite hero\"\n                    value={this.value}\n                    options={this.options}\n                    required={this.required}\n                    onChange={this.handleChange}\n                />\n                <limel-example-controls>\n                    <limel-checkbox\n                        checked={this.required}\n                        label=\"Required\"\n                        onChange={this.setRequired}\n                    />\n                </limel-example-controls>\n                <limel-example-value value={this.value} />\n            </section>\n        );\n    }\n\n    private handleChange = (event: LimelSelectCustomEvent<Option<string>>) => {\n        this.value = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-with-icons.tsx","fileName":"select-with-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-with-icons","overview":"Select with icons for options","usage":{},"docs":"Select with icons for options","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-value"],"dependencyGraph":{"limel-example-select-with-icons":["limel-select","limel-example-value"],"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-with-icons.tsx","type":"tsx","source":"import { Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n/**\n * Select with icons for options\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-with-icons',\n})\nexport class SelectExample {\n    @State()\n    public value: Option;\n\n    private options: Option[] = [\n        {\n            text: 'Batman',\n            value: 'bat',\n            icon: 'batman_old',\n            iconColor: 'rgb(var(--color-black))',\n        },\n        {\n            text: 'Iron Man',\n            value: 'iron',\n            disabled: true,\n            icon: 'iron_man',\n            iconColor: 'rgb(var(--color-coral-default))',\n        },\n        {\n            text: 'Spider-Man',\n            value: 'spider',\n            icon: 'spiderman_head',\n            iconColor: 'rgb(var(--color-red-default))',\n        },\n        {\n            text: 'Superman',\n            value: 'super',\n            icon: 'superman',\n            iconColor: 'rgb(var(--color-blue-default))',\n        },\n        {\n            text: 'Wonder Woman',\n            value: 'wonder',\n            icon: 'wonder_woman',\n            iconColor: 'rgb(var(--color-yellow-darker))',\n        },\n    ];\n\n    public render() {\n        return (\n            <section>\n                <limel-select\n                    label=\"Favorite hero\"\n                    helperText=\"If you see a lack of diversity, it's our icon-provider's fault\"\n                    value={this.value}\n                    options={this.options}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </section>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/server-errors.tsx","fileName":"server-errors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-server-errors","overview":"Form with server validation","usage":{},"docs":"Form with server validation","docsTags":[{"name":"link","text":"list-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form"],"dependencyGraph":{"limel-example-server-errors":["limel-form"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"server-errors.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { ValidationError } from '../form.types';\nimport { schema } from './list-schema';\n\n/**\n * Form with server validation\n *\n * @link list-schema.ts\n */\n@Component({\n    tag: 'limel-example-server-errors',\n    shadow: true,\n})\nexport class FormErrorExample {\n    private formData: object = {\n        villains: ['Joker', 'Doctor Strange', 'Green Goblin'],\n        squad: [\n            {\n                powers: ['eating'],\n                name: 'Thanos',\n            },\n        ],\n    };\n\n    private errors: ValidationError = {\n        villains: {\n            1: ['This is not a valid villain!'],\n        },\n        squad: {\n            0: {\n                name: ['This is not a valid hero!'],\n            },\n        },\n    };\n\n    public render() {\n        return (\n            <limel-form\n                schema={schema}\n                value={this.formData}\n                errors={this.errors}\n            />\n        );\n    }\n}\n"},{"filename":"list-schema.ts","type":"ts","source":"export const schema = {\n    type: 'object',\n    properties: {\n        villains: {\n            type: 'array',\n            title: 'Villains',\n            description: 'Enter the evil villains to capture',\n            items: {\n                type: 'string',\n                title: 'Name',\n                description: 'Enter the name of an evil villain',\n                default: 'The Penguin',\n            },\n        },\n        squad: {\n            type: 'array',\n            title: 'Hero squad',\n            description: 'Enter the team of heroes to capture them',\n            items: {\n                type: 'object',\n                title: 'Hero data',\n                description: 'Name and powers of super heroes',\n                properties: {\n                    name: {\n                        type: 'string',\n                        title: 'Name',\n                        description: 'Super hero name',\n                    },\n                    powers: {\n                        type: 'array',\n                        title: 'Powers',\n                        description: 'Available, powers',\n                        uniqueItems: true,\n                        items: {\n                            anyOf: [\n                                {\n                                    type: 'string',\n                                    const: 'strength',\n                                    title: 'Super human strength',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'speed',\n                                    title: 'Lightning fast',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'invisibility',\n                                    title: 'Invisibility',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'vision',\n                                    title: 'X-Ray vision',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'flight',\n                                    title: 'Flight',\n                                },\n                            ],\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples","filePath":"./src/design-guidelines/shadows/examples/surface-shadows-bad-usage.tsx","fileName":"surface-shadows-bad-usage.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/usage","tag":"limel-example-shadows-bad-usage","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-icon"],"dependencyGraph":{"limel-example-shadows-bad-usage":["limel-header","limel-icon"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"surface-shadows-bad-usage.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-shadows-bad-usage',\n    shadow: true,\n    styleUrl: 'surface-shadows-bad-usage.scss',\n})\nexport class SurfaceShadowBadUsageExample {\n    public render() {\n        return [\n            <div class=\"do-dont-container surface-shadows-bad-usage\">\n                <div class=\"do-not\">\n                    <limel-header\n                        icon=\"brake_warning\"\n                        heading=\"Don't\"\n                    ></limel-header>\n                    <div class=\"content\">\n                        <p>\n                            Lorem Ipsum racconta una storia. Non come le altre.\n                            Un individuo che, in un giorno d'estate, s'imbatte\n                            in qualcosa di diverso dalla sua consuetudine. Egli\n                            intreccia la sua vita con quelle di altre persone\n                            del suo paese. Persone che hanno problemi di cuore,\n                            persone che, semplicemente, vorrebbero qualcuno con\n                            cui parlare.\n                        </p>\n                        <div class=\"box\">\n                            <p>To look distinct, I only use a shadow effect.</p>\n                            <p>\n                                But that makes me look like a temporary popover\n                                or some sort of message. The user might think I\n                                am covering some of the content.\n                            </p>\n                        </div>\n                        <p>\n                            Il tutto amalgamato in un viaggio introspettivo nei\n                            pensieri profondi dell'autore. Non è un romanzo.\n                            Questa storia è semplicemente la descrizione di ciò\n                            che lo scrittore si è trovato ad osservare con un\n                            taccuino tra le mani. Perché non c'è nulla di più\n                            affascinante della realtà.\n                        </p>\n                    </div>\n                </div>\n                <div class=\"do\">\n                    <limel-header icon=\"ok\" heading=\"Do\"></limel-header>\n                    <div class=\"content\">\n                        <p>\n                            Lorem Ipsum racconta una storia. Non come le altre.\n                            Un individuo che, in un giorno d'estate, s'imbatte\n                            in qualcosa di diverso dalla sua consuetudine. Egli\n                            intreccia la sua vita con quelle di altre persone\n                            del suo paese. Persone che hanno problemi di cuore,\n                            persone che, semplicemente, vorrebbero qualcuno con\n                            cui parlare.\n                        </p>\n                        <div class=\"box\">\n                            <p>\n                                <limel-icon\n                                    name=\"information\"\n                                    size=\"x-small\"\n                                    badge={true}\n                                />\n                                To look distinct,\n                            </p>\n                            <p>\n                                I use a different background color, a better\n                                layout and enough space with my surrounding\n                                content.\n                            </p>\n                        </div>\n                        <p>\n                            Il tutto amalgamato in un viaggio introspettivo nei\n                            pensieri profondi dell'autore. Non è un romanzo.\n                            Questa storia è semplicemente la descrizione di ciò\n                            che lo scrittore si è trovato ad osservare con un\n                            taccuino tra le mani. Perché non c'è nulla di più\n                            affascinante della realtà.\n                        </p>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"surface-shadows-bad-usage.scss","type":"scss","source":"@use '../../../style/functions';\n\n.surface-shadows-bad-usage {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: functions.pxToRem(40);\n    padding: functions.pxToRem(20);\n}\n\n.content {\n    padding: functions.pxToRem(8) functions.pxToRem(20);\n}\n\n.box {\n    padding: functions.pxToRem(8) functions.pxToRem(20);\n    border-radius: functions.pxToRem(8);\n}\n\n.do {\n    .box {\n        background-color: rgb(var(--contrast-400));\n        margin: functions.pxToRem(32) 0;\n        padding-top: functions.pxToRem(4);\n    }\n}\n\n.do-not {\n    .box {\n        box-shadow: var(--shadow-depth-64);\n    }\n}\n\nlimel-icon {\n    color: rgb(var(--color-white));\n    background-color: rgb(var(--color-sky-light));\n    display: inline-block;\n    margin-right: functions.pxToRem(8);\n    transform: translateY(functions.pxToRem(3));\n}\n\n@import '../../_generic-example-styles/_do-dont';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples","filePath":"./src/components/shortcut/examples/shortcut.tsx","fileName":"shortcut.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/usage","tag":"limel-example-shortcut","overview":"Basic example\n\nThis component acts as a link, and therefore comes with features\nsuch as `title` and `target`.\n\nThe `title` tag of the hyperlink can be used to\nprovide additional information about the link.\nIt improves accessibility both for users with assistive technologies,\nand sighted users. Hovering and holding the mouse cursor will\ndisplay a tooltip generated with the specified `title`.\n\nWhat the `target` does is described well in\n[mdn web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).","usage":{},"docs":"Basic example\n\nThis component acts as a link, and therefore comes with features\nsuch as `title` and `target`.\n\nThe `title` tag of the hyperlink can be used to\nprovide additional information about the link.\nIt improves accessibility both for users with assistive technologies,\nand sighted users. Hovering and holding the mouse cursor will\ndisplay a tooltip generated with the specified `title`.\n\nWhat the `target` does is described well in\n[mdn web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-shortcut"],"dependencyGraph":{"limel-example-shortcut":["limel-shortcut"],"limel-shortcut":["limel-badge","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"shortcut.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Basic example\n *\n * This component acts as a link, and therefore comes with features\n * such as `title` and `target`.\n *\n * The `title` tag of the hyperlink can be used to\n * provide additional information about the link.\n * It improves accessibility both for users with assistive technologies,\n * and sighted users. Hovering and holding the mouse cursor will\n * display a tooltip generated with the specified `title`.\n *\n * What the `target` does is described well in\n * [mdn web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).\n *\n */\n@Component({\n    tag: 'limel-example-shortcut',\n    shadow: true,\n    styleUrl: 'shortcut.scss',\n})\nexport class ShortcutExample {\n    public render() {\n        const link = {\n            href: 'https://www.wikipedia.org/',\n            title: 'Open Wikipedia in a new tab.',\n            target: '_blank',\n        };\n\n        return (\n            <limel-shortcut icon=\"wikipedia\" label=\"Wikipedia\" link={link} />\n        );\n    }\n}\n"},{"filename":"shortcut.scss","type":"scss","source":"limel-shortcut {\n    width: 20%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples","filePath":"./src/components/shortcut/examples/shortcut-notification.tsx","fileName":"shortcut-notification.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/usage","tag":"limel-example-shortcut-notification","overview":"Displaying a notification badge\n\nThe component can display a notification badge, which could either be\na `number` or a `string`. Read more about how the badge truncates\nor abbreviates the provided label [here](#/component/limel-badge/).","usage":{},"docs":"Displaying a notification badge\n\nThe component can display a notification badge, which could either be\na `number` or a `string`. Read more about how the badge truncates\nor abbreviates the provided label [here](#/component/limel-badge/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-shortcut"],"dependencyGraph":{"limel-example-shortcut-notification":["limel-shortcut"],"limel-shortcut":["limel-badge","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"shortcut-notification.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Displaying a notification badge\n *\n * The component can display a notification badge, which could either be\n * a `number` or a `string`. Read more about how the badge truncates\n * or abbreviates the provided label [here](#/component/limel-badge/).\n *\n */\n@Component({\n    tag: 'limel-example-shortcut-notification',\n    shadow: true,\n    styleUrl: 'shortcut-notification.scss',\n})\nexport class ShortcutNotificationExample {\n    private label1: number = 9951;\n    private label2: string = 'NEW';\n    private label3: string = '';\n\n    public render() {\n        return [\n            <limel-shortcut\n                icon=\"visual_studio\"\n                label=\"Visual Studio Code\"\n                badge={this.label1}\n            />,\n            <limel-shortcut\n                icon=\"skype_copyrighted\"\n                label=\"Skype\"\n                badge={this.label2}\n            />,\n            <limel-shortcut icon=\"slack\" label=\"Slack\" badge={this.label3} />,\n        ];\n    }\n}\n"},{"filename":"shortcut-notification.scss","type":"scss","source":":host(limel-example-shortcut-notification) {\n    display: grid;\n    grid-template-columns: repeat(3, 5rem);\n    align-items: center;\n    justify-content: center;\n    gap: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples","filePath":"./src/components/shortcut/examples/shortcut-styling.tsx","fileName":"shortcut-styling.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/usage","tag":"limel-example-shortcut-styling","overview":"How to style the shortcut\n\nThe component offers different CSS variables for styling\nthe color of the shortcut, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","usage":{},"docs":"How to style the shortcut\n\nThe component offers different CSS variables for styling\nthe color of the shortcut, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-shortcut"],"dependencyGraph":{"limel-example-shortcut-styling":["limel-shortcut"],"limel-shortcut":["limel-badge","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"shortcut-styling.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * How to style the shortcut\n *\n * The component offers different CSS variables for styling\n * the color of the shortcut, and it's icon; as well as\n * radius of it's rounded corners, and colors of the notification badge\n * and its text.\n */\n@Component({\n    tag: 'limel-example-shortcut-styling',\n    shadow: true,\n    styleUrl: 'shortcut-styling.scss',\n})\nexport class ShortcutStylingExample {\n    private label1: number = 9951;\n    private label2: string = '⚠️';\n\n    public render() {\n        return [\n            <limel-shortcut icon=\"visual_studio\" label=\"Visual Studio Code\" />,\n            <limel-shortcut\n                icon=\"skype_copyrighted\"\n                label=\"Skype\"\n                badge={this.label1}\n            />,\n            <limel-shortcut icon=\"slack\" label=\"Slack\" badge={this.label2} />,\n        ];\n    }\n}\n"},{"filename":"shortcut-styling.scss","type":"scss","source":":host(limel-example-shortcut-styling) {\n    display: grid;\n    grid-template-columns: repeat(3, 7rem);\n    align-items: center;\n    justify-content: center;\n    gap: 1rem;\n}\n\nlimel-shortcut {\n    --shortcut-border-radius: 0.5rem;\n\n    &:nth-of-type(1) {\n        --shortcut-icon-color: rgb(var(--color-blue-dark));\n        --shortcut-label-color: rgb(var(--color-blue-darker));\n        --shortcut-background-color: rgb(var(--color-white));\n    }\n\n    &:nth-of-type(2) {\n        --shortcut-icon-color: rgb(var(--color-white));\n        --shortcut-background-color: rgb(var(--color-blue-default));\n        --shortcut-badge-text-color: rgb(var(--contrast-200));\n        --shortcut-badge-background-color: rgb(var(--contrast-1300));\n    }\n\n    &:nth-of-type(3) {\n        --shortcut-icon-color: rgb(var(--color-cyan-lighter));\n        --shortcut-background-color: rgb(var(--color-pink-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples","filePath":"./src/components/shortcut/examples/shortcut-with-click-handler.tsx","fileName":"shortcut-with-click-handler.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/usage","tag":"limel-example-shortcut-with-click-handler","overview":"Example with click handler","usage":{},"docs":"Example with click handler","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-shortcut"],"dependencyGraph":{"limel-example-shortcut-with-click-handler":["limel-shortcut"],"limel-shortcut":["limel-badge","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"shortcut-with-click-handler.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Example with click handler\n */\n@Component({\n    tag: 'limel-example-shortcut-with-click-handler',\n    shadow: true,\n    styleUrl: 'shortcut.scss',\n})\nexport class ShortcutWithClickHandlerExample {\n    public render() {\n        const link = {\n            href: '#/component/limel-table',\n            title: 'Open the documentation for limel-table',\n        };\n\n        return (\n            <limel-shortcut\n                icon=\"pivot_table\"\n                label=\"limel-table\"\n                onClick={this.handleClick}\n                link={link}\n            />\n        );\n    }\n\n    private handleClick = (event: PointerEvent) => {\n        if (\n            !(event.altKey || event.ctrlKey || event.metaKey || event.shiftKey)\n        ) {\n            event.preventDefault();\n            alert(\n                \"No modifier key pressed. Link should open in current window, but we might want to handle the navigation with our application's router, to avoid reloading the whole application (if we're in a single page app, like Lime CRM Web Client).\\n\\nTry holding down a modifier key, like Shift, while clicking.\"\n            );\n        }\n    };\n}\n"},{"filename":"shortcut.scss","type":"scss","source":"limel-shortcut {\n    width: 20%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples","filePath":"./src/design-guidelines/size/examples/size.tsx","fileName":"size.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples/usage","tag":"limel-example-size","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox"],"dependencyGraph":{"limel-example-size":["limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"size.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-size',\n    shadow: true,\n    styleUrl: 'size.scss',\n})\nexport class SizeExample {\n    @State()\n    private visualizeSizes: boolean = false;\n\n    public render() {\n        return [\n            <div\n                id=\"size-rhythm-example\"\n                class={{ 'visualize-sizes': this.visualizeSizes }}\n            >\n                <button class=\"button one\">\n                    <div class=\"label one\">Button 1</div>\n                </button>\n                <button class=\"button two\">\n                    <div class=\"label two\">Button 2</div>\n                </button>\n                <button class=\"button three\">\n                    <div class=\"label three\">Button 3</div>\n                </button>\n            </div>,\n            <limel-checkbox\n                label=\"Visualize sizes\"\n                onChange={this.toggleMode}\n                checked={this.visualizeSizes}\n            />,\n        ];\n    }\n\n    private toggleMode = () => {\n        this.visualizeSizes = !this.visualizeSizes;\n    };\n}\n"},{"filename":"size.scss","type":"scss","source":"@use '../../../style/functions';\n\n:host {\n    display: block;\n    background-color: rgb(var(--contrast-200));\n    border-radius: functions.pxToRem(4);\n}\n\n#size-rhythm-example {\n    background-color: rgb(var(--contrast-400));\n    border-radius: functions.pxToRem(4) functions.pxToRem(4) 0 0;\n    padding: functions.pxToRem(20);\n}\n\n.button {\n    box-sizing: border-box;\n\n    display: inline-block;\n    border: none;\n    border-radius: functions.pxToRem(6);\n\n    height: functions.pxToRem(40);\n    line-height: functions.pxToRem(40);\n    padding: 0 functions.pxToRem(16);\n    margin: 0 functions.pxToRem(6);\n\n    font-size: functions.pxToRem(16);\n    background-color: rgb(var(--contrast-200));\n    box-shadow: 0 #{functions.pxToRem(1.5)} #{functions.pxToRem(3.6)} 0\n            rgba(0, 0, 0, 0.232),\n        0 #{functions.pxToRem(0.3)} #{functions.pxToRem(0.9)} 0\n            rgba(0, 0, 0, 0.208);\n\n    &:first-of-type {\n        margin-left: 0;\n    }\n\n    &:focus {\n        outline: none;\n    }\n}\n\n.label {\n    color: rgb(var(--contrast-1200));\n}\n\n// Below visualizes the sizes only, you can ignore it\n@import './partial-styles/visualize-sizes';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples","filePath":"./src/design-guidelines/size/examples/size-edge-case.tsx","fileName":"size-edge-case.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples/usage","tag":"limel-example-size-edge-case","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox"],"dependencyGraph":{"limel-example-size-edge-case":["limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"size-edge-case.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-size-edge-case',\n    shadow: true,\n    styleUrl: 'size-edge-case.scss',\n})\nexport class SizeEdgeCaseExample {\n    @State()\n    private visualizeSizes: boolean = true;\n\n    public render() {\n        return [\n            <div\n                id=\"size-rhythm-edge-case-example\"\n                class={{ 'visualize-sizes': this.visualizeSizes }}\n            >\n                <div class=\"grid\">\n                    <div class=\"row row-1\">\n                        <div class=\"cell picture\"></div>\n                        <div class=\"cell name\">Mäkelä Jehkinen</div>\n                        <div class=\"cell role\">Head of Guardians</div>\n                    </div>\n                    <div class=\"row row-2\">\n                        <div class=\"cell picture\"></div>\n                        <div class=\"cell name\">Goliham Gigantlle</div>\n                        <div class=\"cell role\">Chief Cool Stuff Officer</div>\n                    </div>\n                </div>\n            </div>,\n            <limel-checkbox\n                label=\"Visualize sizes\"\n                onChange={this.toggleMode}\n                checked={this.visualizeSizes}\n            />,\n        ];\n    }\n\n    private toggleMode = () => {\n        this.visualizeSizes = !this.visualizeSizes;\n    };\n}\n"},{"filename":"size-edge-case.scss","type":"scss","source":"@use '../../../style/functions';\n\n$scale-factor: 3.5;\n\n:host {\n    display: block;\n    background-color: rgb(var(--contrast-200));\n    border-radius: functions.pxToRem(4);\n}\n\n* {\n    box-sizing: border-box;\n}\n\n#size-rhythm-edge-case-example {\n    position: relative;\n    background-color: rgb(var(--contrast-400));\n    color: rgb(var(--contrast-1100));\n    padding: functions.pxToRem(40) 0 functions.pxToRem(40) functions.pxToRem(80);\n\n    &:after {\n        content: '';\n        position: absolute;\n        z-index: 1;\n        top: 0;\n        bottom: 0;\n        right: 0;\n        width: 50%;\n        background-image: linear-gradient(\n            to right,\n            rgba(var(--contrast-300), 0),\n            rgb(var(--contrast-300))\n        );\n    }\n}\n\n.grid {\n    display: grid;\n    grid-auto-flow: row;\n    border-radius: functions.pxToRem(12) 0 0 functions.pxToRem(12);\n    overflow: hidden;\n    border: 1px solid rgb(var(--contrast-500));\n}\n\n.row {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns:\n        functions.pxToRem(12 * $scale-factor) functions.pxToRem(\n            48 * $scale-factor\n        )\n        auto;\n    gap: functions.pxToRem(8 * $scale-factor);\n\n    background-color: rgb(var(--contrast-200));\n    padding: functions.pxToRem(6 * $scale-factor);\n\n    &:not(first-of-type) {\n        border-bottom: 1px solid rgb(var(--contrast-500));\n    }\n}\n\n.cell {\n    font-size: functions.pxToRem(20);\n    line-height: functions.pxToRem(12 * $scale-factor);\n    white-space: nowrap;\n\n    &.picture {\n        background-color: rgb(var(--contrast-400));\n        border-radius: functions.pxToRem(6);\n        width: functions.pxToRem(12 * $scale-factor);\n        height: functions.pxToRem(12 * $scale-factor);\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n\n        .row-1 & {\n            background-image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' clip-rule='evenodd' viewBox='0 0 512 512'><defs/><path fill='rgb(255, 87, 34)' fill-rule='nonzero' d='M414.784 512.09H97.218v-63.14c-.06-60.442 38.812-114.482 96.134-133.646 1.911-.693 123.387-.658 125.298.035 57.322 19.165 96.195 73.204 96.134 133.646v63.104z'/><path fill='rgb(255, 204, 188)' fill-rule='nonzero' d='M256.001 369.652a88.178 88.178 0 01-56.38-20.315c-44.608-36.998-69.596-92.69-67.575-150.61l.688-19.474c2.228-66.055 57.175-119.18 123.267-119.18s121.04 53.125 123.267 119.18l.689 19.474c2.02 57.92-22.968 113.612-67.576 150.61A88.178 88.178 0 01256 369.652z'/></svg>\");\n        }\n\n        .row-2 & {\n            background-image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' clip-rule='evenodd' viewBox='0 0 512 512'><defs/><path fill='rgb(139, 195, 74)' fill-rule='nonzero' d='M414.784 512.09H97.218v-63.14c-.06-60.442 38.812-114.482 96.134-133.646 1.911-.693 123.387-.658 125.298.035 57.322 19.165 96.195 73.204 96.134 133.646v63.104z'/><path fill='rgb(255, 204, 188)' fill-rule='nonzero' d='M256.001 369.652a88.178 88.178 0 01-56.38-20.315c-44.608-36.998-69.596-92.69-67.575-150.61l.688-19.474c2.228-66.055 57.175-119.18 123.267-119.18s121.04 53.125 123.267 119.18l.689 19.474c2.02 57.92-22.968 113.612-67.576 150.61A88.178 88.178 0 01256 369.652z'/></svg>\");\n        }\n    }\n}\n\n#size-rhythm-edge-case-example,\n.row,\n.cell {\n    position: relative;\n    &:before,\n    &:after {\n        transition: opacity 0.4s ease;\n        z-index: 1;\n        position: absolute;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        font-size: functions.pxToRem(12);\n        color: rgb(var(--contrast-1100));\n        box-sizing: border-box;\n        opacity: 0;\n    }\n}\n\n#size-rhythm-edge-case-example {\n    &:before {\n        content: '24';\n        height: functions.pxToRem(24 * $scale-factor);\n        width: functions.pxToRem(20);\n        top: functions.pxToRem(40);\n        left: functions.pxToRem(52);\n        background-color: rgba(var(--color-gray-dark), 0.7);\n        color: rgb(var(--color-gray-lighter));\n    }\n}\n\n.row-2 {\n    &:before {\n        content: '6';\n        background-color: rgba(var(--color-cyan-light), 0.5);\n        left: functions.pxToRem(1);\n        top: 0;\n        bottom: 0;\n        margin: auto;\n        width: functions.pxToRem(20);\n        height: functions.pxToRem(6 * $scale-factor);\n        transition-delay: 0.2s;\n    }\n\n    .picture {\n        &:before,\n        &:after {\n            content: '6';\n            background-color: rgba(var(--color-cyan-light), 0.5);\n            left: 0;\n            right: 0;\n            margin: auto;\n            width: functions.pxToRem(20);\n            height: functions.pxToRem(6 * $scale-factor);\n            transition-delay: 0.2s;\n        }\n\n        &:before {\n            top: functions.pxToRem(-21);\n        }\n\n        &:after {\n            bottom: functions.pxToRem(-21);\n        }\n    }\n}\n\n.row-1 {\n    .picture,\n    .name {\n        &:after {\n            content: '12';\n            height: functions.pxToRem(12 * $scale-factor);\n            right: functions.pxToRem(-20);\n            top: 0;\n            background-color: rgba(var(--color-orange-default), 0.5);\n            transition-delay: 0.1s;\n        }\n    }\n}\n\n.visualize-sizes {\n    .row,\n    .cell {\n        &:before,\n        &:after {\n            opacity: 1;\n        }\n    }\n    &#size-rhythm-edge-case-example {\n        &:before {\n            opacity: 1;\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples","filePath":"./src/components/slider/examples/slider.tsx","fileName":"slider.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/usage","tag":"limel-example-slider","overview":"Basic example","usage":{},"docs":"Basic example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-slider","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-slider":["limel-slider","limel-example-controls","limel-checkbox","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"slider.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n */\n@Component({\n    tag: 'limel-example-slider',\n    shadow: true,\n})\nexport class SliderExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private value = 25;\n\n    private minValue = 15;\n    private maxValue = 75;\n\n    public render() {\n        return [\n            <limel-slider\n                label=\"Basic slider\"\n                unit=\" %\"\n                value={this.value}\n                valuemax={this.maxValue}\n                valuemin={this.minValue}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<number>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples","filePath":"./src/components/slider/examples/slider-composite.tsx","fileName":"slider-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/usage","tag":"limel-example-slider-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-controls","limel-form","limel-slider","limel-example-event-printer"],"dependencyGraph":{"limel-example-slider-composite":["limel-example-controls","limel-form","limel-slider","limel-example-event-printer"]},"props":[{"name":"schema","type":"any","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"slider-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-slider-composite',\n    shadow: true,\n})\nexport class SliderCompositeExample {\n    @Prop()\n    public schema: any;\n\n    @State()\n    private props = {\n        disabled: false,\n        factor: 1,\n        label: 'Slider',\n        readonly: false,\n        unit: '%',\n        value: 25,\n        valuemin: 0,\n        valuemax: 100,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-slider {...this.props} onChange={this.handleSliderChange} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private handleSliderChange = (event: CustomEvent<number>) => {\n        this.eventPrinter.writeEvent(event);\n        this.props = { ...this.props, value: event.detail };\n    };\n\n    private renderForm = () => {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    };\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples","filePath":"./src/components/slider/examples/slider-multiplier.tsx","fileName":"slider-multiplier.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/usage","tag":"limel-example-slider-multiplier","overview":"With multiplier and step\n\nWhen step is configured and the initial value is not a multiple of the step\nvalue, the slider will round the value to the nearest step when it is changed\nfor the first time. After a valid value has been set, only discrete valid\nvalues will be possible to pick.","usage":{},"docs":"With multiplier and step\n\nWhen step is configured and the initial value is not a multiple of the step\nvalue, the slider will round the value to the nearest step when it is changed\nfor the first time. After a valid value has been set, only discrete valid\nvalues will be possible to pick.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-slider","limel-example-value"],"dependencyGraph":{"limel-example-slider-multiplier":["limel-slider","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"slider-multiplier.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With multiplier and step\n *\n * When step is configured and the initial value is not a multiple of the step\n * value, the slider will round the value to the nearest step when it is changed\n * for the first time. After a valid value has been set, only discrete valid\n * values will be possible to pick.\n */\n@Component({\n    tag: 'limel-example-slider-multiplier',\n    shadow: true,\n})\nexport class SliderMultiplierExample {\n    @State()\n    private value = 0.25;\n\n    private factor = 100;\n    private minValue = 0;\n    private maxValue = 1;\n    private step = 0.1;\n\n    public render() {\n        return (\n            <section>\n                <limel-slider\n                    label=\"Slider with multiplier\"\n                    unit=\" %\"\n                    value={this.value}\n                    factor={this.factor}\n                    step={this.step}\n                    valuemax={this.maxValue}\n                    valuemin={this.minValue}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </section>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<number>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples","filePath":"./src/components/slider/examples/slider-multiplier-percentage-colors.tsx","fileName":"slider-multiplier-percentage-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/usage","tag":"limel-example-slider-multiplier-percentage-colors","overview":"With percentage colors\nYou can add the `displays-percentage-colors` class to your slider component\nand it will automatically visualize current percentage colors in real-time.\n\nThe colors change with intervals of 10 as users drags the slider pin.\nThe color spectrum is not modifiable, and looks like red → orange → yellow\n→ green → teal.","usage":{},"docs":"With percentage colors\nYou can add the `displays-percentage-colors` class to your slider component\nand it will automatically visualize current percentage colors in real-time.\n\nThe colors change with intervals of 10 as users drags the slider pin.\nThe color spectrum is not modifiable, and looks like red → orange → yellow\n→ green → teal.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-slider","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-slider-multiplier-percentage-colors":["limel-slider","limel-example-controls","limel-checkbox","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"slider-multiplier-percentage-colors.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With percentage colors\n * You can add the `displays-percentage-colors` class to your slider component\n * and it will automatically visualize current percentage colors in real-time.\n *\n * The colors change with intervals of 10 as users drags the slider pin.\n * The color spectrum is not modifiable, and looks like red → orange → yellow\n * → green → teal.\n */\n@Component({\n    tag: 'limel-example-slider-multiplier-percentage-colors',\n    shadow: true,\n})\nexport class SliderMultiplierPercentageColorsExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private value = 0.25;\n\n    private factor = 100;\n    private minValue = 0;\n    private maxValue = 1;\n\n    public render() {\n        return [\n            <limel-slider\n                class=\"displays-percentage-colors\"\n                label=\"Slider with percentage colors\"\n                unit=\" %\"\n                value={this.value}\n                factor={this.factor}\n                valuemax={this.maxValue}\n                valuemin={this.minValue}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.changeHandler}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private changeHandler = (event: CustomEvent<number>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples","filePath":"./src/components/snackbar/examples/snackbar.tsx","fileName":"snackbar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/usage","tag":"limel-example-snackbar","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-example-controls","limel-checkbox","limel-snackbar"],"dependencyGraph":{"limel-example-snackbar":["limel-button","limel-example-controls","limel-checkbox","limel-snackbar"],"limel-button":["limel-spinner","limel-icon"],"limel-snackbar":["limel-button","limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"snackbar.tsx","type":"tsx","source":"import { Component, Element, h, State } from '@stencil/core';\n\nconst SNACKBAR_TIMEOUT = 5000;\n\n@Component({\n    tag: 'limel-example-snackbar',\n    shadow: true,\n    styleUrl: 'snackbar.scss',\n})\nexport class SnackbarExample {\n    @Element()\n    private host: HTMLLimelExampleSnackbarElement;\n\n    @State()\n    private dismissible = false;\n\n    private snackbarWithChangingMessage: HTMLLimelSnackbarElement;\n\n    private triggerSnackbarWithoutAction: (event: MouseEvent) => void;\n    private triggerSnackbarWithAction: (event: MouseEvent) => void;\n\n    constructor() {\n        this.triggerSnackbarWithoutAction = this.triggerSnackbar.bind(\n            this,\n            'limel-snackbar'\n        );\n        this.triggerSnackbarWithAction = this.triggerSnackbar.bind(\n            this,\n            'limel-snackbar:last-child'\n        );\n        this.triggerSnackbarWithChangingMessage =\n            this.triggerSnackbarWithChangingMessage.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    public render() {\n        return [\n            <section>\n                <limel-button\n                    primary={true}\n                    label=\"Show snackbar\"\n                    onClick={this.triggerSnackbarWithoutAction}\n                />\n                <limel-button\n                    primary={true}\n                    label=\"Show snackbar with action\"\n                    onClick={this.triggerSnackbarWithAction}\n                />\n                <limel-button\n                    primary={true}\n                    label=\"Show snackbar with changing message\"\n                    onClick={this.triggerSnackbarWithChangingMessage}\n                />\n            </section>,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Dismissible\"\n                    checked={this.dismissible}\n                    onChange={this.onChange}\n                />\n            </limel-example-controls>,\n            <limel-snackbar\n                message=\"Please do not leave your luggage unattended! It might be taken away!\"\n                timeout={SNACKBAR_TIMEOUT}\n                dismissible={this.dismissible}\n                onHide={this.snackbarWithoutActionOnHide}\n            />,\n            <limel-snackbar\n                timeout={4000}\n                dismissible={this.dismissible}\n                ref={(el) =>\n                    (this.snackbarWithChangingMessage =\n                        el as HTMLLimelSnackbarElement)\n                }\n            />,\n            <limel-snackbar\n                message=\"Your luggage has been taken away!\"\n                actionText=\"Reclaim\"\n                dismissible={this.dismissible}\n                onAction={this.snackbarOnAction}\n                onHide={this.snackbarWithActionOnHide}\n            />,\n        ];\n    }\n\n    private triggerSnackbar(selector) {\n        const snackbar: HTMLLimelSnackbarElement =\n            this.host.shadowRoot.querySelector(selector);\n        snackbar.show();\n    }\n\n    private triggerSnackbarWithChangingMessage() {\n        const trigger = (message, timeoutMs) => {\n            setTimeout(() => {\n                this.snackbarWithChangingMessage.message = message;\n                this.snackbarWithChangingMessage.show();\n            }, timeoutMs);\n        };\n\n        trigger('Your luggage will be taken away in 15 seconds', 0);\n        trigger('Your luggage will be taken away in 10 seconds', 5000);\n        trigger('Your luggage will be taken away in 5 seconds', 10000);\n        trigger('Your luggage has been taken away!', 15000);\n    }\n\n    private snackbarWithoutActionOnHide() {\n        console.log('It will soon be taken away!');\n    }\n\n    private snackbarOnAction() {\n        console.log('You claimed your luggage!');\n    }\n\n    private snackbarWithActionOnHide() {\n        console.log('You were too late. Your luggage has been destroyed!');\n    }\n\n    private onChange(event: CustomEvent<boolean>) {\n        this.dismissible = event.detail;\n    }\n}\n"},{"filename":"snackbar.scss","type":"scss","source":"section {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples","filePath":"./src/components/spinner/examples/spinner.tsx","fileName":"spinner.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/usage","tag":"limel-example-spinner","overview":"With a generic design or branded for Lime Technologies\nThe `limel-spinner` makes the boring waiting times slightly more cheerful by\ncycling through nine delightful colors.\n\nBy default spinner's shape represents Lime Technologies' logo, as it is used\nprimarily in our own products.\n\nHowever, it is easy render the spinner as a generic circle by specifying\n`limeBranded={false}`, which may be useful for instance when the\nspinner is used on a small component like a button.","usage":{},"docs":"With a generic design or branded for Lime Technologies\nThe `limel-spinner` makes the boring waiting times slightly more cheerful by\ncycling through nine delightful colors.\n\nBy default spinner's shape represents Lime Technologies' logo, as it is used\nprimarily in our own products.\n\nHowever, it is easy render the spinner as a generic circle by specifying\n`limeBranded={false}`, which may be useful for instance when the\nspinner is used on a small component like a button.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-spinner","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-spinner":["limel-spinner","limel-example-controls","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"spinner.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n/**\n * With a generic design or branded for Lime Technologies\n * The `limel-spinner` makes the boring waiting times slightly more cheerful by\n * cycling through nine delightful colors.\n *\n * By default spinner's shape represents Lime Technologies' logo, as it is used\n * primarily in our own products.\n *\n * However, it is easy render the spinner as a generic circle by specifying\n * `limeBranded={false}`, which may be useful for instance when the\n * spinner is used on a small component like a button.\n */\n@Component({\n    tag: 'limel-example-spinner',\n    shadow: true,\n})\nexport class SpinnerExample {\n    @State()\n    private limeBranded = true;\n\n    public render() {\n        return [\n            <limel-spinner size=\"medium\" limeBranded={this.limeBranded} />,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-checkbox\n                    checked={this.limeBranded}\n                    label=\"Lime branded (default design)\"\n                    onChange={this.renderBranded}\n                />\n            </limel-example-controls>,\n        ];\n    }\n    private renderBranded = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.limeBranded = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples","filePath":"./src/components/spinner/examples/spinner-color.tsx","fileName":"spinner-color.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/usage","tag":"limel-example-spinner-color","overview":"With custom colors\nThe `limel-spinner` is designed to cycle through ten colors which are all\nfrom Lime Technologies' brand colors.\n\nIt is of course possible to override these colors.","usage":{},"docs":"With custom colors\nThe `limel-spinner` is designed to cycle through ten colors which are all\nfrom Lime Technologies' brand colors.\n\nIt is of course possible to override these colors.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-spinner","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-spinner-color":["limel-spinner","limel-example-controls","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"spinner-color.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n/**\n * With custom colors\n * The `limel-spinner` is designed to cycle through ten colors which are all\n * from Lime Technologies' brand colors.\n *\n * It is of course possible to override these colors.\n */\n@Component({\n    tag: 'limel-example-spinner-color',\n    shadow: true,\n    styleUrl: 'spinner-color.scss',\n})\nexport class SpinnerColorExample {\n    @State()\n    private limeBranded = false;\n\n    public render() {\n        return [\n            <limel-spinner size=\"medium\" limeBranded={this.limeBranded} />,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-checkbox\n                    checked={this.limeBranded}\n                    label=\"Lime branded (default design)\"\n                    onChange={this.renderBranded}\n                />\n            </limel-example-controls>,\n        ];\n    }\n    private renderBranded = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.limeBranded = event.detail;\n    };\n}\n"},{"filename":"spinner-color.scss","type":"scss","source":":host {\n    --spinner-color-1: rgb(var(--color-cyan-darker));\n    --spinner-color-2: rgb(var(--color-cyan-dark));\n    --spinner-color-3: rgb(var(--color-cyan-default));\n    --spinner-color-4: rgb(var(--color-cyan-light));\n    --spinner-color-4: rgb(var(--color-cyan-lighter));\n    --spinner-color-5: rgb(var(--color-gray-lighter));\n    --spinner-color-6: rgb(var(--color-cyan-lighter));\n    --spinner-color-7: rgb(var(--color-cyan-light));\n    --spinner-color-8: rgb(var(--color-cyan-default));\n    --spinner-color-9: rgb(var(--color-cyan-dark));\n    --spinner-color-10: rgb(var(--color-cyan-darker));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples","filePath":"./src/components/spinner/examples/spinner-size.tsx","fileName":"spinner-size.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/usage","tag":"limel-example-spinner-size","overview":"Spinner sizes","usage":{},"docs":"Spinner sizes","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-spinner"],"dependencyGraph":{"limel-example-spinner-size":["limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"spinner-size.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Spinner sizes\n */\n@Component({\n    tag: 'limel-example-spinner-size',\n    shadow: true,\n    styleUrl: 'spinner.scss',\n})\nexport class SpinnerSizeExample {\n    public render() {\n        return [\n            <div class=\"spinner-sizes\">\n                <limel-spinner />\n                <limel-spinner size=\"mini\" />\n                <limel-spinner size=\"x-small\" />\n                <limel-spinner size=\"small\" />\n                <limel-spinner size=\"medium\" />\n                <limel-spinner size=\"large\" />\n            </div>,\n        ];\n    }\n}\n"},{"filename":"spinner.scss","type":"scss","source":".spinner-sizes {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples","filePath":"./src/components/split-button/examples/split-button-basic.tsx","fileName":"split-button-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples/usage","tag":"limel-example-split-button-basic","overview":"Basic Example\n\nWhen used correctly, a split button reduces visual complexity of the user interface\nby grouping similar commands together.\n\n:::important\nCommands which are included in the menu must be variations of the default command,\nor be very relevant to it.\n:::","usage":{},"docs":"Basic Example\n\nWhen used correctly, a split button reduces visual complexity of the user interface\nby grouping similar commands together.\n\n:::important\nCommands which are included in the menu must be variations of the default command,\nor be very relevant to it.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-split-button"],"dependencyGraph":{"limel-example-split-button-basic":["limel-split-button"],"limel-split-button":["limel-menu","limel-button"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"split-button-basic.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { ListSeparator, MenuItem } from '@limetech/lime-elements';\n\n/**\n * Basic Example\n *\n * When used correctly, a split button reduces visual complexity of the user interface\n * by grouping similar commands together.\n *\n * :::important\n * Commands which are included in the menu must be variations of the default command,\n * or be very relevant to it.\n * :::\n */\n@Component({\n    tag: 'limel-example-split-button-basic',\n    shadow: true,\n})\nexport class SplitButtonBasicExample {\n    private items: Array<ListSeparator | MenuItem> = [\n        { text: 'Later today', secondaryText: 'at 16:45' },\n        { text: 'Tomorrow', secondaryText: 'at 08:00' },\n        { separator: true },\n        { text: 'Custom time', icon: 'calendar' },\n    ];\n\n    public render() {\n        return (\n            <limel-split-button\n                label=\"Send\"\n                icon=\"send\"\n                items={this.items}\n                onClick={this.onClick}\n                onSelect={this.handleSelect}\n            />\n        );\n    }\n\n    private onClick = () => {\n        console.log('Button clicked.');\n    };\n\n    private handleSelect = (event: CustomEvent<MenuItem>) => {\n        console.log('Menu item chosen', event.detail.text);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples","filePath":"./src/components/split-button/examples/split-button-repeat-default-command.tsx","fileName":"split-button-repeat-default-command.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples/usage","tag":"limel-example-split-button-repeat-default-command","overview":"Repeating the default command in the menu\n\nThe default command must be the most commonly used action.\nSuch actions typically have a very short label.\n\nHowever, sometimes it could be useful to repeat the default command again\nin the list of commands, using a more descriptive label which\nclarifies the default action.\n\n:::tip\n- **Limit the overall number of choices** within the menu to less than 10\n- **Order the items within the menu by popularity** and put the most popular ones on top.\n:::","usage":{},"docs":"Repeating the default command in the menu\n\nThe default command must be the most commonly used action.\nSuch actions typically have a very short label.\n\nHowever, sometimes it could be useful to repeat the default command again\nin the list of commands, using a more descriptive label which\nclarifies the default action.\n\n:::tip\n- **Limit the overall number of choices** within the menu to less than 10\n- **Order the items within the menu by popularity** and put the most popular ones on top.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-split-button"],"dependencyGraph":{"limel-example-split-button-repeat-default-command":["limel-split-button"],"limel-split-button":["limel-menu","limel-button"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"split-button-repeat-default-command.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { ListSeparator, MenuItem } from '@limetech/lime-elements';\n\n/**\n * Repeating the default command in the menu\n *\n * The default command must be the most commonly used action.\n * Such actions typically have a very short label.\n *\n * However, sometimes it could be useful to repeat the default command again\n * in the list of commands, using a more descriptive label which\n * clarifies the default action.\n *\n * :::tip\n * - **Limit the overall number of choices** within the menu to less than 10\n * - **Order the items within the menu by popularity** and put the most popular ones on top.\n * :::\n */\n@Component({\n    tag: 'limel-example-split-button-repeat-default-command',\n    shadow: true,\n})\nexport class SplitButtonRepeatDefaultCommandExample {\n    private items: Array<ListSeparator | MenuItem> = [\n        {\n            text: 'Save',\n            secondaryText: 'and update this file',\n            commandText: '⌘ + S',\n        },\n        { text: 'Save as a new file', commandText: '⌘ + ⌥ + S' },\n    ];\n\n    public render() {\n        return (\n            <limel-split-button\n                label=\"Save\"\n                icon=\"save\"\n                primary={true}\n                items={this.items}\n                onClick={this.onClick}\n                onSelect={this.handleSelect}\n            />\n        );\n    }\n\n    private onClick = () => {\n        console.log('Button clicked.');\n    };\n\n    private handleSelect = (event: CustomEvent<MenuItem>) => {\n        console.log('Menu item chosen', event.detail.text);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples","filePath":"./src/design-guidelines/shadows/examples/surface-shadows.tsx","fileName":"surface-shadows.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/usage","tag":"limel-example-surface-shadows","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"surface-shadows.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-surface-shadows',\n    shadow: true,\n    styleUrl: 'shadow-examples.scss',\n})\nexport class SurfaceShadowExample {\n    public render() {\n        return [\n            <div class=\"shadow-example-grid\">\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-8\">\n                        <div class=\"label\">Depth 8</div>\n                    </div>\n                    <code>--shadow-depth-8</code>\n                    <p>\n                        suitable for command bars, command dropdowns, context\n                        menus\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-16\">\n                        <div class=\"label two\">Depth 16</div>\n                    </div>\n                    <code>--shadow-depth-16</code>\n                    <p>\n                        suitable for callouts, search result dropdowns, cards,\n                        or tooltips\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-16\">\n                        <div class=\"label two\">Depth 64</div>\n                    </div>\n                    <code>--shadow-depth-64</code>\n                    <p>suitable for modals, dialogs, or pop overs.</p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-8-reversed\">\n                        <div class=\"label two\">Depth 8 · Reversed</div>\n                    </div>\n                    <code>--shadow-depth-8-reversed</code>\n                    <p>\n                        Same as `--shadow-depth-8`, but the light source is\n                        below the element. Good to use on bars when they are\n                        placed at the bottom edge of the screen.\n                    </p>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"shadow-examples.scss","type":"scss","source":"@use '../../../style/functions';\n@use './button-shadows';\n@use './surface-shadows';\n@use './surface-shadows-inflated';\n\n.shadow-example-grid {\n    display: grid;\n    gap: functions.pxToRem(28);\n    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));\n    padding: functions.pxToRem(20) 0;\n}\n\n.visualization {\n    display: flex;\n    flex-direction: column;\n\n    code {\n        font-size: functions.pxToRem(12);\n        background-color: rgb(var(--kompendium-contrast-500));\n        color: rgb(var(--kompendium-contrast-1100));\n        padding: 0 functions.pxToRem(4);\n        border-radius: functions.pxToRem(3);\n        margin-top: functions.pxToRem(12);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples","filePath":"./src/design-guidelines/shadows/examples/surface-shadows-inflated.tsx","fileName":"surface-shadows-inflated.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/usage","tag":"limel-example-surface-shadows-inflated","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"surface-shadows-inflated.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-surface-shadows-inflated',\n    shadow: true,\n    styleUrl: 'shadow-examples.scss',\n})\nexport class SurfaceShadowInflatedExample {\n    public render() {\n        return [\n            <div class=\"shadow-example-grid inflated-examples\">\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-inflated-8\">\n                        <div class=\"label\">Inflated 8</div>\n                    </div>\n                    <code>--shadow-inflated-8</code>\n                    <p></p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-inflated-16\">\n                        <div class=\"label two\">Inflated 16</div>\n                    </div>\n                    <code>--shadow-inflated-16</code>\n                    <p></p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-inflated-64\">\n                        <div class=\"label two\">Inflated 64</div>\n                    </div>\n                    <code>--shadow-inflated-64</code>\n                    <p></p>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"shadow-examples.scss","type":"scss","source":"@use '../../../style/functions';\n@use './button-shadows';\n@use './surface-shadows';\n@use './surface-shadows-inflated';\n\n.shadow-example-grid {\n    display: grid;\n    gap: functions.pxToRem(28);\n    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));\n    padding: functions.pxToRem(20) 0;\n}\n\n.visualization {\n    display: flex;\n    flex-direction: column;\n\n    code {\n        font-size: functions.pxToRem(12);\n        background-color: rgb(var(--kompendium-contrast-500));\n        color: rgb(var(--kompendium-contrast-1100));\n        padding: 0 functions.pxToRem(4);\n        border-radius: functions.pxToRem(3);\n        margin-top: functions.pxToRem(12);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples","filePath":"./src/design-guidelines/shadows/examples/surface-shadows-states.tsx","fileName":"surface-shadows-states.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/usage","tag":"limel-example-surface-shadows-states","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"surface-shadows-states.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-surface-shadows-states',\n    shadow: true,\n    styleUrl: 'shadow-examples.scss',\n})\nexport class SurfaceShadowStateExample {\n    public render() {\n        return [\n            <div class=\"shadow-example-grid\">\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-8-focused\">\n                        <div class=\"label\">Depth 8 · Focused</div>\n                    </div>\n                    <code>--shadow-depth-8-focused</code>\n                    <p>\n                        Can be used for elements that have `--shadow-depth-8`,\n                        when visualizing element focus, e.g. due to keyboard\n                        navigation.\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-16-focused\">\n                        <div class=\"label two\">Depth 16 · Focused</div>\n                    </div>\n                    <code>--shadow-depth-16-focused</code>\n                    <p>\n                        Can be used for elements that have `--shadow-depth-16`,\n                        when visualizing element focus, e.g. due to keyboard\n                        navigation.\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-64-focused\">\n                        <div class=\"label two\">Depth 64 · Focused</div>\n                    </div>\n                    <code>--shadow-depth-64-focused</code>\n                    <p>\n                        Can be used for elements that have `--shadow-depth-64`,\n                        when visualizing element focus, e.g. due to keyboard\n                        navigation.\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-8-error\">\n                        <div class=\"label\">Depth 8 · Error</div>\n                    </div>\n                    <code>--shadow-depth-8-error</code>\n                    <p>\n                        Can be used for elements that have `--shadow-depth-8`,\n                        when visualizing that the element requires attention,\n                        e.g. due to errors.\n                    </p>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"shadow-examples.scss","type":"scss","source":"@use '../../../style/functions';\n@use './button-shadows';\n@use './surface-shadows';\n@use './surface-shadows-inflated';\n\n.shadow-example-grid {\n    display: grid;\n    gap: functions.pxToRem(28);\n    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));\n    padding: functions.pxToRem(20) 0;\n}\n\n.visualization {\n    display: flex;\n    flex-direction: column;\n\n    code {\n        font-size: functions.pxToRem(12);\n        background-color: rgb(var(--kompendium-contrast-500));\n        color: rgb(var(--kompendium-contrast-1100));\n        padding: 0 functions.pxToRem(4);\n        border-radius: functions.pxToRem(3);\n        margin-top: functions.pxToRem(12);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples","filePath":"./src/components/switch/examples/switch.tsx","fileName":"switch.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples/usage","tag":"limel-example-switch","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-switch","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-switch":["limel-switch","limel-example-controls","limel-checkbox","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"switch.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-switch',\n})\nexport class SwitchExample {\n    @State()\n    private value = true;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    public render() {\n        return [\n            <limel-switch\n                label={`Current value: ${this.value.toString()}`}\n                value={this.value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.changeHandler}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Selected\"\n                    onChange={this.setChecked}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private changeHandler = (event: CustomEvent<boolean>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples","filePath":"./src/components/tab-bar/examples/tab-bar.tsx","fileName":"tab-bar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/usage","tag":"limel-example-tab-bar","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-tab-bar","limel-example-value"],"dependencyGraph":{"limel-example-tab-bar":["limel-tab-bar","limel-example-value"],"limel-tab-bar":["limel-icon-button","limel-icon","limel-badge"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tab-bar.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Tab } from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-tab-bar',\n    shadow: true,\n})\nexport class TabBarExample {\n    @State()\n    private text: string = 'Joker';\n\n    @State()\n    private tabs: Tab[] = [\n        {\n            id: 1,\n            text: 'Joker',\n            icon: 'joker',\n            active: true,\n            iconColor: 'var(--lime-green)',\n        },\n        {\n            id: 2,\n            text: 'Parasite',\n            icon: 'insect',\n            iconColor: 'var(--lime-magenta)',\n            badge: 999,\n        },\n        {\n            id: 3,\n            text: 'Harriet',\n            icon: 'administrator_female',\n            iconColor: 'var(--lime-orange)',\n            badge: 99940,\n        },\n        {\n            id: 4,\n            text: 'Bombshell',\n            icon: 'surprised',\n            iconColor: 'var(--lime-blue)',\n            badge: 999990,\n        },\n        {\n            id: 5,\n            text: 'Judy',\n            icon: 'female',\n            iconColor: 'var(--lime-deep-red)',\n            badge: 940000,\n        },\n        {\n            id: 6,\n            text: 'Friends',\n            icon: 'friends',\n            iconColor: 'var(--lime-yellow)',\n            badge: 1290000,\n        },\n        {\n            id: 7,\n            text: 'Little Women',\n            icon: 'female',\n            iconColor: 'var(--lime-deep-red)',\n            badge: 4,\n        },\n        {\n            id: 8,\n            text: 'Inception',\n            badge: 'NEW',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-tab-bar tabs={this.tabs} onChangeTab={this.handleChange} />,\n            <limel-example-value label=\"Tab\" value={this.text} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<Tab>) => {\n        this.text = event.detail.text;\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples","filePath":"./src/components/tab-bar/examples/tab-bar-with-dynamic-tab-width.tsx","fileName":"tab-bar-with-dynamic-tab-width.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/usage","tag":"limel-example-tab-bar-with-dynamic-tab-width","overview":"Default UI of Tab bars\nBy default, tabs dynamically adjust their width to their own content, which\nmeans a tab with a larger label will be bigger than one with a shorter one.\nThis is the preferred layout for tabs.","usage":{},"docs":"Default UI of Tab bars\nBy default, tabs dynamically adjust their width to their own content, which\nmeans a tab with a larger label will be bigger than one with a shorter one.\nThis is the preferred layout for tabs.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-tab-bar","limel-example-value"],"dependencyGraph":{"limel-example-tab-bar-with-dynamic-tab-width":["limel-tab-bar","limel-example-value"],"limel-tab-bar":["limel-icon-button","limel-icon","limel-badge"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tab-bar-with-dynamic-tab-width.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Tab } from '@limetech/lime-elements';\n\n/**\n * Default UI of Tab bars\n * By default, tabs dynamically adjust their width to their own content, which\n * means a tab with a larger label will be bigger than one with a shorter one.\n * This is the preferred layout for tabs.\n */\n@Component({\n    tag: 'limel-example-tab-bar-with-dynamic-tab-width',\n    shadow: true,\n})\nexport class TabBarExample {\n    @State()\n    private text: string = 'cats';\n\n    @State()\n    private tabs: Tab[] = [\n        {\n            id: 1,\n            text: 'Cats',\n            icon: 'black_cat',\n            active: true,\n            iconColor: 'var(--lime-dark-grey)',\n        },\n        {\n            id: 2,\n            text: 'Dogs',\n            icon: 'dog',\n            iconColor: 'var(--lime-blue)',\n        },\n        {\n            id: 3,\n            text: 'Birds',\n            icon: 'bird',\n            iconColor: 'var(--lime-red)',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-tab-bar tabs={this.tabs} onChangeTab={this.handleChange} />,\n            <limel-example-value label=\"Tab\" value={this.text} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<Tab>) => {\n        this.text = event.detail.text;\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples","filePath":"./src/components/tab-bar/examples/tab-bar-with-equal-tab-width.tsx","fileName":"tab-bar-with-equal-tab-width.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/usage","tag":"limel-example-tab-bar-with-equal-tab-width","overview":"Tab bars with custom styles\nIn some situations and for the sake of UI design, you may want to have tabs\nthat equally share the available screen width and stretch. To get such a\nresult, you can add the `has-tabs-with-equal-width` class to the tab bar.","usage":{},"docs":"Tab bars with custom styles\nIn some situations and for the sake of UI design, you may want to have tabs\nthat equally share the available screen width and stretch. To get such a\nresult, you can add the `has-tabs-with-equal-width` class to the tab bar.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-tab-bar","limel-example-value"],"dependencyGraph":{"limel-example-tab-bar-with-equal-tab-width":["limel-tab-bar","limel-example-value"],"limel-tab-bar":["limel-icon-button","limel-icon","limel-badge"],"limel-icon-button":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tab-bar-with-equal-tab-width.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Tab } from '@limetech/lime-elements';\n\n/**\n * Tab bars with custom styles\n * In some situations and for the sake of UI design, you may want to have tabs\n * that equally share the available screen width and stretch. To get such a\n * result, you can add the `has-tabs-with-equal-width` class to the tab bar.\n */\n@Component({\n    tag: 'limel-example-tab-bar-with-equal-tab-width',\n    shadow: true,\n})\nexport class TabBarExample {\n    @State()\n    private text: string = 'cats';\n\n    @State()\n    private tabs: Tab[] = [\n        {\n            id: 1,\n            text: 'Cats',\n            icon: 'black_cat',\n            active: true,\n            iconColor: 'var(--lime-dark-grey)',\n        },\n        {\n            id: 2,\n            text: 'Dogs',\n            icon: 'dog',\n            iconColor: 'var(--lime-blue)',\n        },\n        {\n            id: 3,\n            text: 'Birds',\n            icon: 'bird',\n            iconColor: 'var(--lime-red)',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-tab-bar\n                tabs={this.tabs}\n                onChangeTab={this.handleChange}\n                class=\"has-tabs-with-equal-width\"\n            />,\n            <limel-example-value label=\"Tab\" value={this.text} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<Tab>) => {\n        this.text = event.detail.text;\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples","filePath":"./src/components/tab-panel/examples/tab-panel.tsx","fileName":"tab-panel.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples/usage","tag":"limel-example-tab-panel","overview":"This example illustrates how to add custom components inside the `limel-tab-panel`.\n\nEach component will simulate loading the data it needs once the tab has been\nactivated and then display the actual content. If the button is pressed, the\ncomponent will emit the `changeTab` event to change the badge inside the\ncorresponding tab.","usage":{},"docs":"This example illustrates how to add custom components inside the `limel-tab-panel`.\n\nEach component will simulate loading the data it needs once the tab has been\nactivated and then display the actual content. If the button is pressed, the\ncomponent will emit the `changeTab` event to change the badge inside the\ncorresponding tab.","docsTags":[{"name":"link","text":"tab-panel-content.tsx"},{"name":"link","text":"tab-panel-content.scss"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-tab-panel","limel-example-tab-panel-content"],"dependencyGraph":{"limel-example-tab-panel":["limel-tab-panel","limel-example-tab-panel-content"],"limel-tab-panel":["limel-tab-bar"],"limel-tab-bar":["limel-icon-button","limel-icon","limel-badge"],"limel-icon-button":["limel-icon"],"limel-example-tab-panel-content":["limel-spinner","limel-icon","limel-button"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tab-panel.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Tab } from '@limetech/lime-elements';\n\n/**\n * This example illustrates how to add custom components inside the `limel-tab-panel`.\n *\n * Each component will simulate loading the data it needs once the tab has been\n * activated and then display the actual content. If the button is pressed, the\n * component will emit the `changeTab` event to change the badge inside the\n * corresponding tab.\n *\n * @link tab-panel-content.tsx\n * @link tab-panel-content.scss\n */\n@Component({\n    tag: 'limel-example-tab-panel',\n    shadow: true,\n    styleUrl: 'tab-panel.scss',\n})\nexport class TabPanelExample {\n    @State()\n    private tabs: Tab[] = [\n        {\n            id: 'joker',\n            text: 'Joker',\n            icon: 'joker',\n            active: true,\n            iconColor: 'var(--lime-green)',\n        },\n        {\n            id: 'parasite',\n            text: 'Parasite',\n            icon: 'insect',\n            iconColor: 'var(--lime-magenta)',\n        },\n        {\n            id: 'harriet',\n            text: 'Harriet',\n            icon: 'administrator_female',\n            iconColor: 'var(--lime-orange)',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-tab-panel\n                tabs={this.tabs}\n                onChangeTab={this.handleChangeTab}\n            >\n                <limel-example-tab-panel-content id=\"joker\" />\n                <limel-example-tab-panel-content id=\"parasite\" />\n                <limel-example-tab-panel-content id=\"harriet\" />\n            </limel-tab-panel>,\n        ];\n    }\n\n    private handleChangeTab = (event: CustomEvent<Tab>) => {\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n    };\n}\n"},{"filename":"tab-panel.scss","type":"scss","source":"limel-tab-panel {\n    height: 20rem;\n}\n\nlimel-example-tab-panel-content {\n    display: flex;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n}\n"},{"filename":"tab-panel-content.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    EventEmitter,\n    Event,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { Tab, TabPanelComponent } from '@limetech/lime-elements';\n\nconst LOAD_TIME = 1000;\n\n@Component({\n    tag: 'limel-example-tab-panel-content',\n    shadow: true,\n    styleUrl: 'tab-panel-content.scss',\n})\nexport class TabPanelContentExample implements TabPanelComponent {\n    /**\n     * The tab that this component belongs to\n     */\n    @Prop()\n    public tab: Tab;\n\n    /**\n     * Emitted when the vote button is clicked to update the badge in the tab\n     */\n    @Event()\n    public changeTab: EventEmitter<Tab>;\n\n    @State()\n    private votes = 0;\n\n    @State()\n    private loaded = false;\n\n    public render() {\n        if (!this.loaded) {\n            return <limel-spinner />;\n        }\n\n        const style = {\n            backgroundColor: this.tab.iconColor,\n            color: 'white',\n        };\n\n        return (\n            <div class=\"container\">\n                <div class=\"text\">\n                    <limel-icon\n                        badge={true}\n                        size=\"large\"\n                        name={this.tab.icon}\n                        style={style}\n                    />\n                    <p>\n                        {this.tab.text} has received {this.votes} votes!\n                    </p>\n                </div>\n                <limel-button\n                    outlined={true}\n                    icon=\"star\"\n                    label=\"Vote\"\n                    onClick={this.vote}\n                />\n            </div>\n        );\n    }\n\n    /**\n     * Load the tab contents the first time the tab is activated\n     */\n    @Watch('tab')\n    protected watchTab() {\n        if (!this.loaded && this.tab.active) {\n            this.loadTabContent();\n        }\n    }\n\n    /**\n     * Simulate loading the tab content\n     */\n    private loadTabContent() {\n        setTimeout(() => {\n            this.loaded = true;\n        }, LOAD_TIME);\n    }\n\n    private vote = () => {\n        this.votes++;\n        this.changeTab.emit({\n            ...this.tab,\n            badge: this.votes,\n        });\n    };\n}\n"},{"filename":"tab-panel-content.scss","type":"scss","source":".text {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.container {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n}\n\np {\n    margin: 0;\n}\n\nlimel-icon {\n    margin-right: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples","filePath":"./src/components/tab-panel/examples/tab-panel-content.tsx","fileName":"tab-panel-content.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples/usage","tag":"limel-example-tab-panel-content","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":["limel-example-tab-panel"],"dependencies":["limel-spinner","limel-icon","limel-button"],"dependencyGraph":{"limel-example-tab-panel-content":["limel-spinner","limel-icon","limel-button"],"limel-button":["limel-spinner","limel-icon"],"limel-example-tab-panel":["limel-example-tab-panel-content"]},"props":[{"name":"tab","type":"Tab","mutable":false,"reflectToAttr":false,"docs":"The tab that this component belongs to","docsTags":[],"values":[{"type":"Tab"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"changeTab","detail":"Tab","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the vote button is clicked to update the badge in the tab","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tab-panel-content.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    EventEmitter,\n    Event,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { Tab, TabPanelComponent } from '@limetech/lime-elements';\n\nconst LOAD_TIME = 1000;\n\n@Component({\n    tag: 'limel-example-tab-panel-content',\n    shadow: true,\n    styleUrl: 'tab-panel-content.scss',\n})\nexport class TabPanelContentExample implements TabPanelComponent {\n    /**\n     * The tab that this component belongs to\n     */\n    @Prop()\n    public tab: Tab;\n\n    /**\n     * Emitted when the vote button is clicked to update the badge in the tab\n     */\n    @Event()\n    public changeTab: EventEmitter<Tab>;\n\n    @State()\n    private votes = 0;\n\n    @State()\n    private loaded = false;\n\n    public render() {\n        if (!this.loaded) {\n            return <limel-spinner />;\n        }\n\n        const style = {\n            backgroundColor: this.tab.iconColor,\n            color: 'white',\n        };\n\n        return (\n            <div class=\"container\">\n                <div class=\"text\">\n                    <limel-icon\n                        badge={true}\n                        size=\"large\"\n                        name={this.tab.icon}\n                        style={style}\n                    />\n                    <p>\n                        {this.tab.text} has received {this.votes} votes!\n                    </p>\n                </div>\n                <limel-button\n                    outlined={true}\n                    icon=\"star\"\n                    label=\"Vote\"\n                    onClick={this.vote}\n                />\n            </div>\n        );\n    }\n\n    /**\n     * Load the tab contents the first time the tab is activated\n     */\n    @Watch('tab')\n    protected watchTab() {\n        if (!this.loaded && this.tab.active) {\n            this.loadTabContent();\n        }\n    }\n\n    /**\n     * Simulate loading the tab content\n     */\n    private loadTabContent() {\n        setTimeout(() => {\n            this.loaded = true;\n        }, LOAD_TIME);\n    }\n\n    private vote = () => {\n        this.votes++;\n        this.changeTab.emit({\n            ...this.tab,\n            badge: this.votes,\n        });\n    };\n}\n"},{"filename":"tab-panel-content.scss","type":"scss","source":".text {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.container {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n}\n\np {\n    margin: 0;\n}\n\nlimel-icon {\n    margin-right: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table.tsx","fileName":"table.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table","overview":"","usage":{},"docs":"","docsTags":[{"name":"link","text":"persons.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '../table.types';\nimport { Person, persons } from './persons';\n\n/**\n *\n * @link persons.ts\n */\n@Component({\n    tag: 'limel-example-table',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExample {\n    @State()\n    private tableData: Person[] = persons;\n\n    @State()\n    private columns: Column[] = [\n        { title: 'Name', field: 'name' },\n        { title: 'Age', field: 'age', horizontalAlign: 'right' },\n        { title: 'Kind', field: 'kind' },\n        { title: 'Height', field: 'height', horizontalAlign: 'right' },\n        { title: 'Stamina', field: 'stamina' },\n        { title: 'Place of Birth', field: 'placeOfBirth' },\n        { title: 'Sign', field: 'sign' },\n        { title: 'Date of Birth', field: 'dateOfBirth' },\n        { title: 'Role', field: 'role' },\n    ];\n\n    render() {\n        return <limel-table data={this.tableData} columns={this.columns} />;\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"persons.ts","type":"ts","source":"export interface Person {\n    id: number;\n    name: string;\n    age: number;\n    kind: string;\n    height: number;\n    placeOfBirth: string;\n    stamina: string;\n    sign: string;\n    dateOfBirth: string;\n    role: string;\n}\n\nexport const persons: Person[] = [\n    {\n        id: 1,\n        name: 'Fauji Sheladia',\n        age: 29,\n        kind: 'Angel',\n        height: 95,\n        placeOfBirth: 'Palight',\n        stamina: '40%',\n        sign: '🧚‍♂️',\n        dateOfBirth: '14/05/1991',\n        role: 'The Big Boss',\n    },\n    {\n        id: 2,\n        name: 'Mäkelä Jehkinen',\n        age: 42,\n        kind: 'Dragon',\n        height: 1800,\n        stamina: '96%',\n        placeOfBirth: 'Ekudshire',\n        sign: '🐉',\n        dateOfBirth: '30/07/1987',\n        role: 'Head of Guardians',\n    },\n    {\n        id: 3,\n        name: 'Helrover Shgrover Ohmslmer',\n        age: 723,\n        kind: 'Elf',\n        height: 186,\n        stamina: '84%',\n        placeOfBirth: 'Blarc',\n        sign: '🧝‍♂️',\n        dateOfBirth: '29/10/1297',\n        role: 'Head of External Politics',\n    },\n    {\n        id: 4,\n        name: 'Goliham Gigantlle',\n        age: 350,\n        kind: 'Yeti',\n        height: 325,\n        stamina: '95%',\n        placeOfBirth: 'Kamond',\n        sign: '❄️',\n        dateOfBirth: '23/07/1670',\n        role: 'Chief Cool Stuff Officer',\n    },\n    {\n        id: 5,\n        name: 'Eloise Sullivan',\n        age: 35,\n        kind: 'Vampire',\n        height: 170,\n        stamina: '47%',\n        placeOfBirth: 'Blodholm',\n        sign: '🧛‍♀️',\n        dateOfBirth: '10/11/1985',\n        role: 'Bloodline Quality Controller',\n    },\n    {\n        id: 6,\n        name: 'Gladys E. Fyffe',\n        age: 36,\n        kind: 'Werewolf',\n        height: 176,\n        stamina: '83%',\n        placeOfBirth: 'Wuacross',\n        sign: '🐺',\n        dateOfBirth: '06/06/1984',\n        role: 'Head Hunter',\n    },\n    {\n        id: 7,\n        name: 'Cunninghamarms',\n        age: 44,\n        kind: 'Ork',\n        height: 176,\n        stamina: '74%',\n        placeOfBirth: 'Bruhgnathal',\n        sign: '🐗',\n        dateOfBirth: '26/01/1976',\n        role: 'Head of Security',\n    },\n    {\n        id: 8,\n        name: 'Agalle Cunningpower',\n        age: 75,\n        kind: 'Wizard',\n        height: 176,\n        stamina: '40%',\n        placeOfBirth: 'Orasas',\n        sign: '🔮',\n        dateOfBirth: '05/10/1945',\n        role: 'Chief Entertainment Officer',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-activate-row.tsx","fileName":"table-activate-row.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-activate-row","overview":"Activate a row","usage":{},"docs":"Activate a row","docsTags":[{"name":"link","text":"persons.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table","limel-example-value"],"dependencyGraph":{"limel-example-table-activate-row":["limel-table","limel-example-value"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-activate-row.tsx","type":"tsx","source":"import { LimelTableCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { Column } from '../table.types';\nimport { persons, Person } from './persons';\n\n/**\n * Activate a row\n *\n * @link persons.ts\n */\n@Component({\n    tag: 'limel-example-table-activate-row',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleActivateRow {\n    @State()\n    private activeRow: Person;\n\n    private tableData: Person[] = persons;\n    private columns: Column[] = [\n        { title: 'Name', field: 'name' },\n        { title: 'Age', field: 'age', horizontalAlign: 'right' },\n        { title: 'Kind', field: 'kind' },\n        { title: 'Height', field: 'height', horizontalAlign: 'right' },\n        { title: 'Stamina', field: 'stamina' },\n        { title: 'Place of Birth', field: 'placeOfBirth' },\n        { title: 'Sign', field: 'sign' },\n        { title: 'Date of Birth', field: 'dateOfBirth' },\n        { title: 'Role', field: 'role' },\n    ];\n\n    public render() {\n        return [\n            <limel-table\n                data={this.tableData}\n                activeRow={this.activeRow}\n                columns={this.columns}\n                onActivate={this.onActivateRow}\n                class=\"has-interactive-rows\"\n            />,\n            <limel-example-value label=\"Active row\" value={this.activeRow} />,\n        ];\n    }\n\n    private onActivateRow = (event: LimelTableCustomEvent<Person>) => {\n        this.activeRow = event.detail;\n    };\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"persons.ts","type":"ts","source":"export interface Person {\n    id: number;\n    name: string;\n    age: number;\n    kind: string;\n    height: number;\n    placeOfBirth: string;\n    stamina: string;\n    sign: string;\n    dateOfBirth: string;\n    role: string;\n}\n\nexport const persons: Person[] = [\n    {\n        id: 1,\n        name: 'Fauji Sheladia',\n        age: 29,\n        kind: 'Angel',\n        height: 95,\n        placeOfBirth: 'Palight',\n        stamina: '40%',\n        sign: '🧚‍♂️',\n        dateOfBirth: '14/05/1991',\n        role: 'The Big Boss',\n    },\n    {\n        id: 2,\n        name: 'Mäkelä Jehkinen',\n        age: 42,\n        kind: 'Dragon',\n        height: 1800,\n        stamina: '96%',\n        placeOfBirth: 'Ekudshire',\n        sign: '🐉',\n        dateOfBirth: '30/07/1987',\n        role: 'Head of Guardians',\n    },\n    {\n        id: 3,\n        name: 'Helrover Shgrover Ohmslmer',\n        age: 723,\n        kind: 'Elf',\n        height: 186,\n        stamina: '84%',\n        placeOfBirth: 'Blarc',\n        sign: '🧝‍♂️',\n        dateOfBirth: '29/10/1297',\n        role: 'Head of External Politics',\n    },\n    {\n        id: 4,\n        name: 'Goliham Gigantlle',\n        age: 350,\n        kind: 'Yeti',\n        height: 325,\n        stamina: '95%',\n        placeOfBirth: 'Kamond',\n        sign: '❄️',\n        dateOfBirth: '23/07/1670',\n        role: 'Chief Cool Stuff Officer',\n    },\n    {\n        id: 5,\n        name: 'Eloise Sullivan',\n        age: 35,\n        kind: 'Vampire',\n        height: 170,\n        stamina: '47%',\n        placeOfBirth: 'Blodholm',\n        sign: '🧛‍♀️',\n        dateOfBirth: '10/11/1985',\n        role: 'Bloodline Quality Controller',\n    },\n    {\n        id: 6,\n        name: 'Gladys E. Fyffe',\n        age: 36,\n        kind: 'Werewolf',\n        height: 176,\n        stamina: '83%',\n        placeOfBirth: 'Wuacross',\n        sign: '🐺',\n        dateOfBirth: '06/06/1984',\n        role: 'Head Hunter',\n    },\n    {\n        id: 7,\n        name: 'Cunninghamarms',\n        age: 44,\n        kind: 'Ork',\n        height: 176,\n        stamina: '74%',\n        placeOfBirth: 'Bruhgnathal',\n        sign: '🐗',\n        dateOfBirth: '26/01/1976',\n        role: 'Head of Security',\n    },\n    {\n        id: 8,\n        name: 'Agalle Cunningpower',\n        age: 75,\n        kind: 'Wizard',\n        height: 176,\n        stamina: '40%',\n        placeOfBirth: 'Orasas',\n        sign: '🔮',\n        dateOfBirth: '05/10/1945',\n        role: 'Chief Entertainment Officer',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-custom-components.tsx","fileName":"table-custom-components.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-custom-components","overview":"Custom components\n\nYou can specify a custom component to use for any column in your table. This\nis done under the `component` key in the schema, following the\n[TableComponentDefinition](#/type/TableComponentDefinition/) specification,\nfor example:\n\n```ts\nconst columns = [\n    {\n        title: 'Food',\n        field: 'food',\n        component: { name: 'my-fancy-food-displayer' },\n    },\n];\n```\n\nWhile you can, in principle, use any component in a table, your custom table\ncomponents should implement the [TableComponent](#/type/TableComponent/)\ninterface.","usage":{},"docs":"Custom components\n\nYou can specify a custom component to use for any column in your table. This\nis done under the `component` key in the schema, following the\n[TableComponentDefinition](#/type/TableComponentDefinition/) specification,\nfor example:\n\n```ts\nconst columns = [\n    {\n        title: 'Food',\n        field: 'food',\n        component: { name: 'my-fancy-food-displayer' },\n    },\n];\n```\n\nWhile you can, in principle, use any component in a table, your custom table\ncomponents should implement the [TableComponent](#/type/TableComponent/)\ninterface.","docsTags":[{"name":"link","text":"birds.ts"},{"name":"link","text":"table-food.tsx"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-custom-components":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-custom-components.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { Column } from '../table.types';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Custom components\n *\n * You can specify a custom component to use for any column in your table. This\n * is done under the `component` key in the schema, following the\n * [TableComponentDefinition](#/type/TableComponentDefinition/) specification,\n * for example:\n *\n * ```ts\n * const columns = [\n *     {\n *         title: 'Food',\n *         field: 'food',\n *         component: { name: 'my-fancy-food-displayer' },\n *     },\n * ];\n * ```\n *\n * While you can, in principle, use any component in a table, your custom table\n * components should implement the [TableComponent](#/type/TableComponent/)\n * interface.\n *\n * @link birds.ts\n * @link table-food.tsx\n */\n@Component({\n    tag: 'limel-example-table-custom-components',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleCustomComponents {\n    private columns: Array<Column<Bird>> = [];\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            {\n                title: 'Food',\n                field: 'food',\n                component: { name: 'limel-example-table-food' },\n            },\n            {\n                title: 'Habitat',\n                field: 'habitat',\n                formatter: this.capitalizeStrings,\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                field: 'eggs',\n                horizontalAlign: 'right',\n            },\n            { title: 'Origin', field: 'origin' },\n        ];\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n\n    private capitalizeStrings(value: string | string[]) {\n        if (typeof value === 'string') {\n            return capitalize(value);\n        }\n\n        if (Array.isArray(value)) {\n            return value.map((v) => capitalize(v)).join(', ');\n        }\n\n        return value;\n    }\n\n    public render() {\n        return <limel-table data={data} columns={this.columns} />;\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"birds.ts","type":"ts","source":"export interface Bird {\n    name: string;\n    binominalName: string;\n    wingspan: number;\n    habitat: Habitat | Habitat[];\n    food: Food | Food[];\n    nest: Nest;\n    eggs: number;\n    origin: string | string[];\n}\n\nexport type Habitat = 'forest' | 'grassland' | 'wetland';\nexport type Food = 'invertebrate' | 'seed' | 'fruit' | 'fish' | 'rodent';\nexport type Nest = 'bowl' | 'cavity' | 'ground' | 'platform';\n\nexport const data: Bird[] = [\n    {\n        name: 'Greater Roadrunner',\n        binominalName: 'Geococcyx californianus',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'American Bittern',\n        binominalName: 'Botaurus lentiginosus',\n        wingspan: 107,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'Bobolink',\n        binominalName: 'Dolichonyx oryzivorus',\n        wingspan: 30,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Northern Cardinal',\n        binominalName: 'Cardinalis cardinalis',\n        wingspan: 30,\n        habitat: 'forest',\n        food: ['seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 4,\n        origin: 'North America',\n    },\n    {\n        name: 'Ruddy Duck',\n        binominalName: 'Oxyura jamaicensis',\n        wingspan: 48,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'platform',\n        eggs: 15,\n        origin: 'America',\n    },\n    {\n        name: 'White Wagtail',\n        binominalName: 'Motacilla alba',\n        wingspan: 28,\n        habitat: ['grassland', 'wetland'],\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 8,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Short-toed Treecreeper',\n        binominalName: 'Certhia brachydactyla',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'Europe',\n    },\n    {\n        name: 'Ruff',\n        binominalName: 'Calidris pugnax',\n        wingspan: 56,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'fruit', 'fish', 'rodent', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Common Chiffchaff',\n        binominalName: 'Phylloscopus collybita',\n        wingspan: 20,\n        habitat: ['wetland', 'forest'],\n        food: ['invertebrate', 'fruit', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Africa'],\n    },\n    {\n        name: 'Common Little Bittern',\n        binominalName: 'Ixobrychus minutus',\n        wingspan: 49,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Willet',\n        binominalName: 'Tringa semipalmata',\n        wingspan: 66,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Yellow-Rumped Warbler',\n        binominalName: 'Setophaga coronata',\n        wingspan: 23,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Eurasian Magpie',\n        binominalName: 'Pica pica',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'fruit', 'seed', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dunnock',\n        binominalName: 'Prunella modularis',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: \"Wilson's Snipe\",\n        binominalName: 'Gallinago delicata',\n        wingspan: 41,\n        habitat: 'wetland',\n        food: 'invertebrate',\n        nest: 'ground',\n        eggs: 3,\n        origin: 'America',\n    },\n    {\n        name: 'Little Bustard',\n        binominalName: 'Tetrax tetrax',\n        wingspan: 110,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dickcissel',\n        binominalName: 'Spiza americana',\n        wingspan: 25,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Prothonotary Warbler',\n        binominalName: 'Protonotaria citrea',\n        wingspan: 23,\n        habitat: ['forest', 'wetland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Killdeer',\n        binominalName: 'Charadrius vociferus',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Tufted Titmouse',\n        binominalName: 'Baeolophus bicolor',\n        wingspan: 25,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Black-Tailed Godwit',\n        binominalName: 'Limosa limosa',\n        wingspan: 76,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa', 'Australia'],\n    },\n    {\n        name: 'Yellow-Breasted Chat',\n        binominalName: 'Icteria virens',\n        wingspan: 25,\n        habitat: ['wetland', 'grassland', 'forest'],\n        food: ['invertebrate', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Purple Martin',\n        binominalName: 'Progne subis',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: 'invertebrate',\n        nest: 'cavity',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Goldcrest',\n        binominalName: 'Regulus regulus',\n        wingspan: 15,\n        habitat: 'forest',\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 11,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'King Rail',\n        binominalName: 'Rallus elegans',\n        wingspan: 51,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'fruit', 'seed', 'rodent'],\n        nest: 'platform',\n        eggs: 14,\n        origin: 'North America',\n    },\n];\n"},{"filename":"table-food.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { TableComponent } from '@limetech/lime-elements';\nimport { Bird, Food } from './birds';\nimport { capitalize } from 'lodash-es';\n\n@Component({\n    tag: 'limel-example-table-food',\n    styleUrl: 'table-food.scss',\n    shadow: true,\n})\nexport class TableFood implements TableComponent<Bird> {\n    /**\n     * Name of the field for the column\n     */\n    @Prop()\n    public field: string;\n\n    /**\n     * The value to display in the table cell\n     */\n    @Prop()\n    public value: any;\n\n    /**\n     * Data for the whole row\n     */\n    @Prop()\n    public data: Bird;\n\n    public render() {\n        let value: string[] = this.value;\n        if (!Array.isArray(value)) {\n            value = [value];\n        }\n\n        return value.map(this.renderIcon);\n    }\n\n    private renderIcon(value: Food) {\n        const nameMap: Record<Food, string> = {\n            fruit: 'cherry',\n            invertebrate: 'caterpillar',\n            rodent: 'rabbit',\n            seed: 'wheat',\n            fish: 'fish',\n        };\n\n        return (\n            <limel-icon\n                title={capitalize(value)}\n                badge={true}\n                name={nameMap[value]}\n                size=\"x-small\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-default-sorted.tsx","fileName":"table-default-sorted.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-default-sorted","overview":"Default sorted columns\n\nIn this example, the table is sorted on *two* columns. Primary sorting is\ndone on the \"Eggs per clutch\" column, and secondary sorting is done on the\n\"Name\" column. The result is that within each \"group\" of birds that have the\nsame number of eggs per clutch, the birds are sorted by name.","usage":{},"docs":"Default sorted columns\n\nIn this example, the table is sorted on *two* columns. Primary sorting is\ndone on the \"Eggs per clutch\" column, and secondary sorting is done on the\n\"Name\" column. The result is that within each \"group\" of birds that have the\nsame number of eggs per clutch, the birds are sorted by name.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-default-sorted":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-default-sorted.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column, ColumnSorter } from '../table.types';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Default sorted columns\n *\n * In this example, the table is sorted on *two* columns. Primary sorting is\n * done on the \"Eggs per clutch\" column, and secondary sorting is done on the\n * \"Name\" column. The result is that within each \"group\" of birds that have the\n * same number of eggs per clutch, the birds are sorted by name.\n */\n@Component({\n    tag: 'limel-example-table-default-sorted',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleDefaultSorted {\n    @State()\n    private columns: Array<Column<Bird>> = [];\n\n    private tableData: Bird[] = data;\n    private sortedColumns: ColumnSorter[] = [];\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                field: 'eggs',\n                horizontalAlign: 'right',\n            },\n            {\n                title: 'Origin',\n                field: 'origin',\n                horizontalAlign: 'right',\n            },\n        ];\n\n        this.sortedColumns = [\n            { column: this.columns[0], direction: 'ASC' },\n            { column: this.columns[4], direction: 'ASC' },\n        ];\n    }\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                sorting={this.sortedColumns}\n            />\n        );\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-food.tsx","fileName":"table-food.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-food","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon"],"dependencyGraph":{"limel-example-table-food":["limel-icon"]},"props":[{"name":"data","type":"Bird","mutable":false,"reflectToAttr":false,"docs":"Data for the whole row","docsTags":[],"values":[{"type":"Bird"}],"optional":false,"required":false},{"name":"field","type":"string","mutable":false,"attr":"field","reflectToAttr":false,"docs":"Name of the field for the column","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"any","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The value to display in the table cell","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-food.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { TableComponent } from '@limetech/lime-elements';\nimport { Bird, Food } from './birds';\nimport { capitalize } from 'lodash-es';\n\n@Component({\n    tag: 'limel-example-table-food',\n    styleUrl: 'table-food.scss',\n    shadow: true,\n})\nexport class TableFood implements TableComponent<Bird> {\n    /**\n     * Name of the field for the column\n     */\n    @Prop()\n    public field: string;\n\n    /**\n     * The value to display in the table cell\n     */\n    @Prop()\n    public value: any;\n\n    /**\n     * Data for the whole row\n     */\n    @Prop()\n    public data: Bird;\n\n    public render() {\n        let value: string[] = this.value;\n        if (!Array.isArray(value)) {\n            value = [value];\n        }\n\n        return value.map(this.renderIcon);\n    }\n\n    private renderIcon(value: Food) {\n        const nameMap: Record<Food, string> = {\n            fruit: 'cherry',\n            invertebrate: 'caterpillar',\n            rodent: 'rabbit',\n            seed: 'wheat',\n            fish: 'fish',\n        };\n\n        return (\n            <limel-icon\n                title={capitalize(value)}\n                badge={true}\n                name={nameMap[value]}\n                size=\"x-small\"\n            />\n        );\n    }\n}\n"},{"filename":"table-food.scss","type":"scss","source":"limel-icon {\n    color: white;\n}\nlimel-icon[name='cherry'] {\n    background-color: var(--lime-deep-red);\n}\nlimel-icon[name='fish'] {\n    background-color: var(--lime-blue);\n}\nlimel-icon[name='caterpillar'] {\n    background-color: var(--lime-green);\n}\nlimel-icon[name='wheat'] {\n    background-color: var(--lime-orange);\n}\nlimel-icon[name='rabbit'] {\n    background-color: var(--lime-light-grey);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-header-menu.tsx","fileName":"table-header-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-header-menu","overview":"Column header menu\n\nYou can also add custom components to the header cell of a column. In\ncontrast to custom components used elsewhere in the table, custom components\nused in the header do not replace the entire content of the cell. Instead,\nthey appear in a slot next to the column sorting icon.","usage":{},"docs":"Column header menu\n\nYou can also add custom components to the header cell of a column. In\ncontrast to custom components used elsewhere in the table, custom components\nused in the header do not replace the entire content of the cell. Instead,\nthey appear in a slot next to the column sorting icon.","docsTags":[{"name":"link","text":"persons.ts"},{"name":"link","text":"header-menu.tsx"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-header-menu":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-header-menu.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { Column } from '../table.types';\nimport { persons, Person } from './persons';\n\n/**\n * Column header menu\n *\n * You can also add custom components to the header cell of a column. In\n * contrast to custom components used elsewhere in the table, custom components\n * used in the header do not replace the entire content of the cell. Instead,\n * they appear in a slot next to the column sorting icon.\n *\n * @link persons.ts\n * @link header-menu.tsx\n */\n@Component({\n    tag: 'limel-example-table-header-menu',\n    shadow: true,\n    styleUrl: 'table.scss',\n})\nexport class TableExampleHeadermenu {\n    private tableData: Person[] = persons;\n    private columns: Column[] = [\n        {\n            title: 'Name',\n            field: 'name',\n            headerComponent: {\n                name: 'limel-example-header-menu',\n                props: {\n                    icon: 'menu',\n                    items: [\n                        { text: 'All' },\n                        { text: 'Me' },\n                        { text: 'Contains' },\n                        { text: 'Equals' },\n                        { text: 'Not equals' },\n                    ],\n                },\n            },\n        },\n        {\n            title: 'Age',\n            field: 'age',\n            horizontalAlign: 'right',\n        },\n        {\n            title: 'Kind',\n            field: 'kind',\n        },\n        {\n            title: 'Height',\n            field: 'height',\n            horizontalAlign: 'right',\n        },\n        {\n            title: 'Stamina',\n            field: 'stamina',\n        },\n        {\n            title: 'Place of Birth',\n            field: 'placeOfBirth',\n        },\n        {\n            title: 'Sign',\n            field: 'sign',\n        },\n        {\n            title: 'Date of Birth',\n            field: 'dateOfBirth',\n        },\n        {\n            title: 'Role',\n            field: 'role',\n        },\n    ];\n\n    public render() {\n        return [<limel-table data={this.tableData} columns={this.columns} />];\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"persons.ts","type":"ts","source":"export interface Person {\n    id: number;\n    name: string;\n    age: number;\n    kind: string;\n    height: number;\n    placeOfBirth: string;\n    stamina: string;\n    sign: string;\n    dateOfBirth: string;\n    role: string;\n}\n\nexport const persons: Person[] = [\n    {\n        id: 1,\n        name: 'Fauji Sheladia',\n        age: 29,\n        kind: 'Angel',\n        height: 95,\n        placeOfBirth: 'Palight',\n        stamina: '40%',\n        sign: '🧚‍♂️',\n        dateOfBirth: '14/05/1991',\n        role: 'The Big Boss',\n    },\n    {\n        id: 2,\n        name: 'Mäkelä Jehkinen',\n        age: 42,\n        kind: 'Dragon',\n        height: 1800,\n        stamina: '96%',\n        placeOfBirth: 'Ekudshire',\n        sign: '🐉',\n        dateOfBirth: '30/07/1987',\n        role: 'Head of Guardians',\n    },\n    {\n        id: 3,\n        name: 'Helrover Shgrover Ohmslmer',\n        age: 723,\n        kind: 'Elf',\n        height: 186,\n        stamina: '84%',\n        placeOfBirth: 'Blarc',\n        sign: '🧝‍♂️',\n        dateOfBirth: '29/10/1297',\n        role: 'Head of External Politics',\n    },\n    {\n        id: 4,\n        name: 'Goliham Gigantlle',\n        age: 350,\n        kind: 'Yeti',\n        height: 325,\n        stamina: '95%',\n        placeOfBirth: 'Kamond',\n        sign: '❄️',\n        dateOfBirth: '23/07/1670',\n        role: 'Chief Cool Stuff Officer',\n    },\n    {\n        id: 5,\n        name: 'Eloise Sullivan',\n        age: 35,\n        kind: 'Vampire',\n        height: 170,\n        stamina: '47%',\n        placeOfBirth: 'Blodholm',\n        sign: '🧛‍♀️',\n        dateOfBirth: '10/11/1985',\n        role: 'Bloodline Quality Controller',\n    },\n    {\n        id: 6,\n        name: 'Gladys E. Fyffe',\n        age: 36,\n        kind: 'Werewolf',\n        height: 176,\n        stamina: '83%',\n        placeOfBirth: 'Wuacross',\n        sign: '🐺',\n        dateOfBirth: '06/06/1984',\n        role: 'Head Hunter',\n    },\n    {\n        id: 7,\n        name: 'Cunninghamarms',\n        age: 44,\n        kind: 'Ork',\n        height: 176,\n        stamina: '74%',\n        placeOfBirth: 'Bruhgnathal',\n        sign: '🐗',\n        dateOfBirth: '26/01/1976',\n        role: 'Head of Security',\n    },\n    {\n        id: 8,\n        name: 'Agalle Cunningpower',\n        age: 75,\n        kind: 'Wizard',\n        height: 176,\n        stamina: '40%',\n        placeOfBirth: 'Orasas',\n        sign: '🔮',\n        dateOfBirth: '05/10/1945',\n        role: 'Chief Entertainment Officer',\n    },\n];\n"},{"filename":"header-menu.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { ListItem } from '../../list/list-item.types';\n\n@Component({\n    tag: 'limel-example-header-menu',\n    shadow: true,\n    styleUrl: 'header-menu.scss',\n})\nexport class HeaderMenu {\n    @Prop()\n    public items: ListItem[];\n\n    @Prop()\n    public icon: string;\n\n    private menuOpen = true;\n\n    public render() {\n        return (\n            <limel-menu items={this.items} open={this.menuOpen}>\n                <limel-icon slot=\"trigger\" name={this.icon} size=\"x-small\" />\n            </limel-menu>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-low-clickable-rows.tsx","fileName":"table-low-clickable-rows.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-interactive-rows","overview":"Visualizing clickable rows better\nBy taking advantage of the `has-interactive-rows` class, hovering on a row\nwill display an elevated visual effect, giving it more affordance and a solid\nfeeling of interactivity.\n\n:::note usage notes\n- Only use this class when clicking on an entire row triggers a reaction in\nthe system, for example a card or a modal is opened to show further details.\n:::","usage":{},"docs":"Visualizing clickable rows better\nBy taking advantage of the `has-interactive-rows` class, hovering on a row\nwill display an elevated visual effect, giving it more affordance and a solid\nfeeling of interactivity.\n\n:::note usage notes\n- Only use this class when clicking on an entire row triggers a reaction in\nthe system, for example a card or a modal is opened to show further details.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-interactive-rows":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-low-clickable-rows.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '../table.types';\n\n/**\n * Visualizing clickable rows better\n * By taking advantage of the `has-interactive-rows` class, hovering on a row\n * will display an elevated visual effect, giving it more affordance and a solid\n * feeling of interactivity.\n *\n * :::note usage notes\n * - Only use this class when clicking on an entire row triggers a reaction in\n * the system, for example a card or a modal is opened to show further details.\n *:::\n */\n@Component({\n    tag: 'limel-example-table-interactive-rows',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExample {\n    @State()\n    public tableData: any[] = [\n        {\n            id: 1,\n            invoiceNumber: '15467',\n            clientNumber: '98457',\n            vat: '5,325',\n            amount: '21,300',\n            invoiceDate: '02/10/2020',\n            referencePerson: 'Fauji Sheladia',\n        },\n        {\n            id: 2,\n            invoiceNumber: '15433',\n            clientNumber: '43256',\n            vat: '2,292',\n            amount: '9,169',\n            invoiceDate: '03/06/2020',\n            referencePerson: 'Mäkelä Jehkinen',\n        },\n        {\n            id: 3,\n            invoiceNumber: '34326',\n            clientNumber: '12456',\n            vat: '234',\n            amount: '1,295',\n            invoiceDate: '30/03/2021',\n            referencePerson: 'Helrover Shgrover',\n        },\n        {\n            id: 4,\n            invoiceNumber: '12357',\n            clientNumber: '22334',\n            vat: '2,867',\n            amount: '11,468',\n            invoiceDate: '14/09/2020',\n            referencePerson: 'Goliham Gigantlle',\n        },\n        {\n            id: 5,\n            invoiceNumber: '12467',\n            clientNumber: '54555',\n            vat: '625',\n            amount: '2,500',\n            invoiceDate: '07/08/2020',\n            referencePerson: 'Eloise Sullivan',\n        },\n        {\n            id: 6,\n            invoiceNumber: '12653',\n            clientNumber: '45365',\n            vat: '1,300',\n            amount: '5,201',\n            invoiceDate: '01/01/2021',\n            referencePerson: 'Gladys Fyffe',\n        },\n        {\n            id: 7,\n            invoiceNumber: '12655',\n            clientNumber: '76476',\n            vat: '1,295',\n            amount: '5,180',\n            invoiceDate: '01/01/2021',\n            referencePerson: 'Cunninghamarms',\n        },\n        {\n            id: 8,\n            invoiceNumber: '12622',\n            clientNumber: '65345',\n            vat: '4,550',\n            amount: '18,200',\n            invoiceDate: '23/12/2020',\n            referencePerson: 'Agalle Cunningpower',\n        },\n    ];\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Client no.', field: 'clientNumber' },\n        { title: 'VAT', field: 'vat', horizontalAlign: 'right' },\n        { title: 'Amount', field: 'amount', horizontalAlign: 'right' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        { title: 'Reference Person', field: 'referencePerson' },\n    ] as any;\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                class=\"has-interactive-rows\"\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-layout-default.tsx","fileName":"table-layout-default.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-layout-default","overview":"Layout\nColumns and their content can be decisive factors in how a table is\npreferred to rendered in the user interface. To set your preferred\nrendering, choose one of the available `layout` properties.\n\n\n````tsx\nlayout=\"default\"\n````\nThe default layout resizes the table's columns,\nin a way that each column becomes as wide as the data it holds.\n\n:::important\nNote that be default, table columns have a maximum width of `40rem`.\nThis means, they can never grow wider than that, unless you specify\nanother size using the `--table-max-column-width` CSS variable.\n\nThis applies to all other layouts presented further down as well!\n:::\n\nIf there is additional space available on the right side of the last column,\nrows will stretch to fill the space and look visually as wide as the table.\n\n:::note\nWhile scrolling, new rows get lazy-loaded. Since the new data may have wider\nlength, it might affect rendering of the layout in real-time.\nThis means columns can get resized while user is scrolling down.\n:::\n\n:::tip\nIt is also possible to affect internal layout of each column, by specifying\n`horizontalAlign` on the column headers, to `left` (default), `center`,\nor `right`. This basically defines the text-alignment for all the cells in that column.\n:::","usage":{},"docs":"Layout\nColumns and their content can be decisive factors in how a table is\npreferred to rendered in the user interface. To set your preferred\nrendering, choose one of the available `layout` properties.\n\n\n````tsx\nlayout=\"default\"\n````\nThe default layout resizes the table's columns,\nin a way that each column becomes as wide as the data it holds.\n\n:::important\nNote that be default, table columns have a maximum width of `40rem`.\nThis means, they can never grow wider than that, unless you specify\nanother size using the `--table-max-column-width` CSS variable.\n\nThis applies to all other layouts presented further down as well!\n:::\n\nIf there is additional space available on the right side of the last column,\nrows will stretch to fill the space and look visually as wide as the table.\n\n:::note\nWhile scrolling, new rows get lazy-loaded. Since the new data may have wider\nlength, it might affect rendering of the layout in real-time.\nThis means columns can get resized while user is scrolling down.\n:::\n\n:::tip\nIt is also possible to affect internal layout of each column, by specifying\n`horizontalAlign` on the column headers, to `left` (default), `center`,\nor `right`. This basically defines the text-alignment for all the cells in that column.\n:::","docsTags":[{"name":"link","text":"invoices.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-layout-default":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-layout-default.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '../table.types';\nimport { invoices, Invoice } from './invoices';\n\n/**\n * Layout\n * Columns and their content can be decisive factors in how a table is\n * preferred to rendered in the user interface. To set your preferred\n * rendering, choose one of the available `layout` properties.\n *\n *\n * ````tsx\n * layout=\"default\"\n * ````\n * The default layout resizes the table's columns,\n * in a way that each column becomes as wide as the data it holds.\n *\n * :::important\n * Note that be default, table columns have a maximum width of `40rem`.\n * This means, they can never grow wider than that, unless you specify\n * another size using the `--table-max-column-width` CSS variable.\n *\n * This applies to all other layouts presented further down as well!\n * :::\n *\n * If there is additional space available on the right side of the last column,\n * rows will stretch to fill the space and look visually as wide as the table.\n *\n * :::note\n * While scrolling, new rows get lazy-loaded. Since the new data may have wider\n * length, it might affect rendering of the layout in real-time.\n * This means columns can get resized while user is scrolling down.\n * :::\n *\n * :::tip\n * It is also possible to affect internal layout of each column, by specifying\n * `horizontalAlign` on the column headers, to `left` (default), `center`,\n * or `right`. This basically defines the text-alignment for all the cells in that column.\n * :::\n *\n * @link invoices.ts\n */\n@Component({\n    tag: 'limel-example-table-layout-default',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLayoutDefault {\n    @State()\n    private tableData: Invoice[] = invoices;\n\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        { title: 'Reference Person', field: 'referencePerson' },\n        {\n            title: 'Amount',\n            field: 'amount',\n            horizontalAlign: 'right',\n        },\n    ];\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                layout=\"default\"\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"invoices.ts","type":"ts","source":"export interface Invoice {\n    id: number;\n    invoiceNumber: number;\n    invoiceDate: string;\n    referencePerson: string;\n    amount: number;\n}\n\nexport const invoices: Invoice[] = [\n    {\n        id: 1,\n        invoiceNumber: 15467,\n        invoiceDate: '02/10/2020',\n        referencePerson: 'Fauji Sheladia',\n        amount: 21.328,\n    },\n    {\n        id: 2,\n        invoiceNumber: 15433,\n        invoiceDate: '03/06/2020',\n        referencePerson: 'Mäkelä Jehkinen',\n        amount: 9.169,\n    },\n    {\n        id: 3,\n        invoiceNumber: 34326,\n        invoiceDate: '30/03/2021',\n        referencePerson: 'Helrover Shgrover',\n        amount: 1.295,\n    },\n    {\n        id: 4,\n        invoiceNumber: 12357,\n        invoiceDate: '14/09/2020',\n        referencePerson: 'Goliham Gigantlle',\n        amount: 11.468,\n    },\n    {\n        id: 5,\n        invoiceNumber: 12467,\n        invoiceDate: '07/08/2020',\n        referencePerson: 'Eloise Sullivan',\n        amount: 2.583,\n    },\n    {\n        id: 6,\n        invoiceNumber: 12653,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Gladys Fyffe',\n        amount: 5.201,\n    },\n    {\n        id: 7,\n        invoiceNumber: 12655,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Cunninghamarms',\n        amount: 5.181,\n    },\n    {\n        id: 8,\n        invoiceNumber: 12622,\n        invoiceDate: '23/12/2020',\n        referencePerson: 'Agalle Cunningpower',\n        amount: 18.257,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-layout-lowDensity.tsx","fileName":"table-layout-lowDensity.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-layout-low-density","overview":"\n````tsx\nlayout=\"lowDensity\"\n````\nBy using this layout option, you can easily convert the table into an airy list of items.\n\nThis type of UI is suitable for generating minimalist lists of items with\nonly a few properties on each. Especially when the property values are not\nself-explanatory (such as an email address) and require a bit of extra help\nto know what they are.\n\nUsing this UI, you can take advantage of the sticky header of the table which\nexplains what each cell is about, and also enjoy sorting possibilities it\noffers.\n\n:::note usage notes\n- In this low-density UI, all cells will get a fixed height, which may affect\nthe layout of custom components that you place inside them.\n- This UI is not preferred for data intensive views, in which the user's main\ntask is processing the presented data and making sense of it. For such views,\nuse the table component with its normal density.\n:::","usage":{},"docs":"\n````tsx\nlayout=\"lowDensity\"\n````\nBy using this layout option, you can easily convert the table into an airy list of items.\n\nThis type of UI is suitable for generating minimalist lists of items with\nonly a few properties on each. Especially when the property values are not\nself-explanatory (such as an email address) and require a bit of extra help\nto know what they are.\n\nUsing this UI, you can take advantage of the sticky header of the table which\nexplains what each cell is about, and also enjoy sorting possibilities it\noffers.\n\n:::note usage notes\n- In this low-density UI, all cells will get a fixed height, which may affect\nthe layout of custom components that you place inside them.\n- This UI is not preferred for data intensive views, in which the user's main\ntask is processing the presented data and making sense of it. For such views,\nuse the table component with its normal density.\n:::","docsTags":[{"name":"link","text":"invoices.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-layout-low-density":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-layout-lowDensity.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '../table.types';\nimport { invoices, Invoice } from './invoices';\n\n/**\n *\n * ````tsx\n * layout=\"lowDensity\"\n * ````\n * By using this layout option, you can easily convert the table into an airy list of items.\n *\n * This type of UI is suitable for generating minimalist lists of items with\n * only a few properties on each. Especially when the property values are not\n * self-explanatory (such as an email address) and require a bit of extra help\n * to know what they are.\n *\n * Using this UI, you can take advantage of the sticky header of the table which\n * explains what each cell is about, and also enjoy sorting possibilities it\n * offers.\n *\n * :::note usage notes\n * - In this low-density UI, all cells will get a fixed height, which may affect\n * the layout of custom components that you place inside them.\n * - This UI is not preferred for data intensive views, in which the user's main\n * task is processing the presented data and making sense of it. For such views,\n * use the table component with its normal density.\n *:::\n *\n * @link invoices.ts\n */\n@Component({\n    tag: 'limel-example-table-layout-low-density',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLayoutLowDensity {\n    @State()\n    private tableData: Invoice[] = invoices;\n\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        { title: 'Reference Person', field: 'referencePerson' },\n        { title: 'Amount', field: 'amount', horizontalAlign: 'right' },\n    ];\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                layout=\"lowDensity\"\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"invoices.ts","type":"ts","source":"export interface Invoice {\n    id: number;\n    invoiceNumber: number;\n    invoiceDate: string;\n    referencePerson: string;\n    amount: number;\n}\n\nexport const invoices: Invoice[] = [\n    {\n        id: 1,\n        invoiceNumber: 15467,\n        invoiceDate: '02/10/2020',\n        referencePerson: 'Fauji Sheladia',\n        amount: 21.328,\n    },\n    {\n        id: 2,\n        invoiceNumber: 15433,\n        invoiceDate: '03/06/2020',\n        referencePerson: 'Mäkelä Jehkinen',\n        amount: 9.169,\n    },\n    {\n        id: 3,\n        invoiceNumber: 34326,\n        invoiceDate: '30/03/2021',\n        referencePerson: 'Helrover Shgrover',\n        amount: 1.295,\n    },\n    {\n        id: 4,\n        invoiceNumber: 12357,\n        invoiceDate: '14/09/2020',\n        referencePerson: 'Goliham Gigantlle',\n        amount: 11.468,\n    },\n    {\n        id: 5,\n        invoiceNumber: 12467,\n        invoiceDate: '07/08/2020',\n        referencePerson: 'Eloise Sullivan',\n        amount: 2.583,\n    },\n    {\n        id: 6,\n        invoiceNumber: 12653,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Gladys Fyffe',\n        amount: 5.201,\n    },\n    {\n        id: 7,\n        invoiceNumber: 12655,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Cunninghamarms',\n        amount: 5.181,\n    },\n    {\n        id: 8,\n        invoiceNumber: 12622,\n        invoiceDate: '23/12/2020',\n        referencePerson: 'Agalle Cunningpower',\n        amount: 18.257,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-layout-stretchColumns.tsx","fileName":"table-layout-stretchColumns.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-layout-stretch-columns","overview":"\n````tsx\nlayout=\"stretchColumns\"\n````\n\nWith this layout, the table stretches columns so that all\nfit perfectly in the table container, when extra space is available.\nIf all columns cannot fit within the available width,\nthen a horizontal scrollbar will appear.","usage":{},"docs":"\n````tsx\nlayout=\"stretchColumns\"\n````\n\nWith this layout, the table stretches columns so that all\nfit perfectly in the table container, when extra space is available.\nIf all columns cannot fit within the available width,\nthen a horizontal scrollbar will appear.","docsTags":[{"name":"link","text":"invoices.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-layout-stretch-columns":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-layout-stretchColumns.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '../table.types';\nimport { invoices, Invoice } from './invoices';\n\n/**\n *\n * ````tsx\n * layout=\"stretchColumns\"\n * ````\n *\n * With this layout, the table stretches columns so that all\n * fit perfectly in the table container, when extra space is available.\n * If all columns cannot fit within the available width,\n * then a horizontal scrollbar will appear.\n *\n * @link invoices.ts\n */\n@Component({\n    tag: 'limel-example-table-layout-stretch-columns',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLayoutStretchColumns {\n    @State()\n    private tableData: Invoice[] = invoices;\n\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        { title: 'Reference Person', field: 'referencePerson' },\n        { title: 'Amount', field: 'amount', horizontalAlign: 'right' },\n    ];\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                layout=\"stretchColumns\"\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"invoices.ts","type":"ts","source":"export interface Invoice {\n    id: number;\n    invoiceNumber: number;\n    invoiceDate: string;\n    referencePerson: string;\n    amount: number;\n}\n\nexport const invoices: Invoice[] = [\n    {\n        id: 1,\n        invoiceNumber: 15467,\n        invoiceDate: '02/10/2020',\n        referencePerson: 'Fauji Sheladia',\n        amount: 21.328,\n    },\n    {\n        id: 2,\n        invoiceNumber: 15433,\n        invoiceDate: '03/06/2020',\n        referencePerson: 'Mäkelä Jehkinen',\n        amount: 9.169,\n    },\n    {\n        id: 3,\n        invoiceNumber: 34326,\n        invoiceDate: '30/03/2021',\n        referencePerson: 'Helrover Shgrover',\n        amount: 1.295,\n    },\n    {\n        id: 4,\n        invoiceNumber: 12357,\n        invoiceDate: '14/09/2020',\n        referencePerson: 'Goliham Gigantlle',\n        amount: 11.468,\n    },\n    {\n        id: 5,\n        invoiceNumber: 12467,\n        invoiceDate: '07/08/2020',\n        referencePerson: 'Eloise Sullivan',\n        amount: 2.583,\n    },\n    {\n        id: 6,\n        invoiceNumber: 12653,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Gladys Fyffe',\n        amount: 5.201,\n    },\n    {\n        id: 7,\n        invoiceNumber: 12655,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Cunninghamarms',\n        amount: 5.181,\n    },\n    {\n        id: 8,\n        invoiceNumber: 12622,\n        invoiceDate: '23/12/2020',\n        referencePerson: 'Agalle Cunningpower',\n        amount: 18.257,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-layout-stretchLastColumn.tsx","fileName":"table-layout-stretchLastColumn.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-layout-stretch-last-column","overview":"\n````tsx\nlayout=\"stretchLastColumn\"\n````\n\nWorks just like `default`, but unlike the default layout\nwhich resulted in having an empty last column, in this layout\nthe last existing column will stretch out to fill up the remaining table width.","usage":{},"docs":"\n````tsx\nlayout=\"stretchLastColumn\"\n````\n\nWorks just like `default`, but unlike the default layout\nwhich resulted in having an empty last column, in this layout\nthe last existing column will stretch out to fill up the remaining table width.","docsTags":[{"name":"link","text":"invoices.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-layout-stretch-last-column":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-layout-stretchLastColumn.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '../table.types';\nimport { invoices, Invoice } from './invoices';\n\n/**\n *\n * ````tsx\n * layout=\"stretchLastColumn\"\n * ````\n *\n * Works just like `default`, but unlike the default layout\n * which resulted in having an empty last column, in this layout\n * the last existing column will stretch out to fill up the remaining table width.\n *\n * @link invoices.ts\n */\n@Component({\n    tag: 'limel-example-table-layout-stretch-last-column',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLayoutStretchLastColumn {\n    @State()\n    private tableData: Invoice[] = invoices;\n\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        { title: 'Reference Person', field: 'referencePerson' },\n        { title: 'Amount', field: 'amount', horizontalAlign: 'right' },\n    ];\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                layout=\"stretchLastColumn\"\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"invoices.ts","type":"ts","source":"export interface Invoice {\n    id: number;\n    invoiceNumber: number;\n    invoiceDate: string;\n    referencePerson: string;\n    amount: number;\n}\n\nexport const invoices: Invoice[] = [\n    {\n        id: 1,\n        invoiceNumber: 15467,\n        invoiceDate: '02/10/2020',\n        referencePerson: 'Fauji Sheladia',\n        amount: 21.328,\n    },\n    {\n        id: 2,\n        invoiceNumber: 15433,\n        invoiceDate: '03/06/2020',\n        referencePerson: 'Mäkelä Jehkinen',\n        amount: 9.169,\n    },\n    {\n        id: 3,\n        invoiceNumber: 34326,\n        invoiceDate: '30/03/2021',\n        referencePerson: 'Helrover Shgrover',\n        amount: 1.295,\n    },\n    {\n        id: 4,\n        invoiceNumber: 12357,\n        invoiceDate: '14/09/2020',\n        referencePerson: 'Goliham Gigantlle',\n        amount: 11.468,\n    },\n    {\n        id: 5,\n        invoiceNumber: 12467,\n        invoiceDate: '07/08/2020',\n        referencePerson: 'Eloise Sullivan',\n        amount: 2.583,\n    },\n    {\n        id: 6,\n        invoiceNumber: 12653,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Gladys Fyffe',\n        amount: 5.201,\n    },\n    {\n        id: 7,\n        invoiceNumber: 12655,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Cunninghamarms',\n        amount: 5.181,\n    },\n    {\n        id: 8,\n        invoiceNumber: 12622,\n        invoiceDate: '23/12/2020',\n        referencePerson: 'Agalle Cunningpower',\n        amount: 18.257,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-local.tsx","fileName":"table-local.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-local","overview":"Local sorting and pagination","usage":{},"docs":"Local sorting and pagination","docsTags":[{"name":"link","text":"birds.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table","limel-example-value"],"dependencyGraph":{"limel-example-table-local":["limel-table","limel-example-value"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-local.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column, ColumnSorter, ColumnAggregatorType } from '../table.types';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Local sorting and pagination\n *\n * @link birds.ts\n */\n@Component({\n    tag: 'limel-example-table-local',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLocal {\n    private columns: Array<Column<Bird>> = [];\n\n    @State()\n    private currentPage: number = 1;\n\n    @State()\n    private currentSorting: string = 'None';\n\n    private pageSize = 10;\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                field: 'eggs',\n                aggregator: ColumnAggregatorType.Average,\n                horizontalAlign: 'right',\n            },\n            { title: 'Origin', field: 'origin' },\n        ];\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n\n    private handleChangePage = (event: CustomEvent<number>) => {\n        this.currentPage = event.detail;\n    };\n\n    private handleSort = (event: CustomEvent<ColumnSorter[]>) => {\n        this.currentSorting = event.detail[0].column.title;\n    };\n\n    public render() {\n        return [\n            <limel-table\n                data={data}\n                columns={this.columns}\n                pageSize={this.pageSize}\n                onChangePage={this.handleChangePage}\n                onSort={this.handleSort}\n            />,\n            <limel-example-value\n                label=\"Current page is\"\n                value={this.currentPage}\n            />,\n            <limel-example-value\n                label=\"Currently sorting on\"\n                value={this.currentSorting}\n            />,\n        ];\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"birds.ts","type":"ts","source":"export interface Bird {\n    name: string;\n    binominalName: string;\n    wingspan: number;\n    habitat: Habitat | Habitat[];\n    food: Food | Food[];\n    nest: Nest;\n    eggs: number;\n    origin: string | string[];\n}\n\nexport type Habitat = 'forest' | 'grassland' | 'wetland';\nexport type Food = 'invertebrate' | 'seed' | 'fruit' | 'fish' | 'rodent';\nexport type Nest = 'bowl' | 'cavity' | 'ground' | 'platform';\n\nexport const data: Bird[] = [\n    {\n        name: 'Greater Roadrunner',\n        binominalName: 'Geococcyx californianus',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'American Bittern',\n        binominalName: 'Botaurus lentiginosus',\n        wingspan: 107,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'Bobolink',\n        binominalName: 'Dolichonyx oryzivorus',\n        wingspan: 30,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Northern Cardinal',\n        binominalName: 'Cardinalis cardinalis',\n        wingspan: 30,\n        habitat: 'forest',\n        food: ['seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 4,\n        origin: 'North America',\n    },\n    {\n        name: 'Ruddy Duck',\n        binominalName: 'Oxyura jamaicensis',\n        wingspan: 48,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'platform',\n        eggs: 15,\n        origin: 'America',\n    },\n    {\n        name: 'White Wagtail',\n        binominalName: 'Motacilla alba',\n        wingspan: 28,\n        habitat: ['grassland', 'wetland'],\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 8,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Short-toed Treecreeper',\n        binominalName: 'Certhia brachydactyla',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'Europe',\n    },\n    {\n        name: 'Ruff',\n        binominalName: 'Calidris pugnax',\n        wingspan: 56,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'fruit', 'fish', 'rodent', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Common Chiffchaff',\n        binominalName: 'Phylloscopus collybita',\n        wingspan: 20,\n        habitat: ['wetland', 'forest'],\n        food: ['invertebrate', 'fruit', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Africa'],\n    },\n    {\n        name: 'Common Little Bittern',\n        binominalName: 'Ixobrychus minutus',\n        wingspan: 49,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Willet',\n        binominalName: 'Tringa semipalmata',\n        wingspan: 66,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Yellow-Rumped Warbler',\n        binominalName: 'Setophaga coronata',\n        wingspan: 23,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Eurasian Magpie',\n        binominalName: 'Pica pica',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'fruit', 'seed', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dunnock',\n        binominalName: 'Prunella modularis',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: \"Wilson's Snipe\",\n        binominalName: 'Gallinago delicata',\n        wingspan: 41,\n        habitat: 'wetland',\n        food: 'invertebrate',\n        nest: 'ground',\n        eggs: 3,\n        origin: 'America',\n    },\n    {\n        name: 'Little Bustard',\n        binominalName: 'Tetrax tetrax',\n        wingspan: 110,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dickcissel',\n        binominalName: 'Spiza americana',\n        wingspan: 25,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Prothonotary Warbler',\n        binominalName: 'Protonotaria citrea',\n        wingspan: 23,\n        habitat: ['forest', 'wetland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Killdeer',\n        binominalName: 'Charadrius vociferus',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Tufted Titmouse',\n        binominalName: 'Baeolophus bicolor',\n        wingspan: 25,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Black-Tailed Godwit',\n        binominalName: 'Limosa limosa',\n        wingspan: 76,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa', 'Australia'],\n    },\n    {\n        name: 'Yellow-Breasted Chat',\n        binominalName: 'Icteria virens',\n        wingspan: 25,\n        habitat: ['wetland', 'grassland', 'forest'],\n        food: ['invertebrate', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Purple Martin',\n        binominalName: 'Progne subis',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: 'invertebrate',\n        nest: 'cavity',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Goldcrest',\n        binominalName: 'Regulus regulus',\n        wingspan: 15,\n        habitat: 'forest',\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 11,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'King Rail',\n        binominalName: 'Rallus elegans',\n        wingspan: 51,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'fruit', 'seed', 'rodent'],\n        nest: 'platform',\n        eggs: 14,\n        origin: 'North America',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-movable-columns.tsx","fileName":"table-movable-columns.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-movable-columns","overview":"Movable columns","usage":{},"docs":"Movable columns","docsTags":[{"name":"link","text":"birds.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table","limel-example-value"],"dependencyGraph":{"limel-example-table-movable-columns":["limel-table","limel-example-value"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-movable-columns.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '../table.types';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Movable columns\n *\n * @link birds.ts\n */\n@Component({\n    tag: 'limel-example-table-movable-columns',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLocal {\n    @State()\n    private columns: Array<Column<Bird>> = [\n        { title: 'Name', field: 'name' },\n        { title: 'Binominal name', field: 'binominalName' },\n        { title: 'Nest type', field: 'nest', formatter: capitalize },\n        { title: 'Eggs per clutch', field: 'eggs', horizontalAlign: 'right' },\n        { title: 'Origin', field: 'origin' },\n    ];\n\n    private handleChangeColumns = (event: CustomEvent<Column[]>) => {\n        this.columns = event.detail;\n    };\n\n    public render() {\n        const columnOrder = this.columns.map((column) => column.title);\n\n        return [\n            <limel-table\n                data={data}\n                columns={this.columns}\n                movableColumns={true}\n                onChangeColumns={this.handleChangeColumns}\n            />,\n            <limel-example-value\n                label=\"Current column order is\"\n                value={columnOrder}\n            />,\n        ];\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"birds.ts","type":"ts","source":"export interface Bird {\n    name: string;\n    binominalName: string;\n    wingspan: number;\n    habitat: Habitat | Habitat[];\n    food: Food | Food[];\n    nest: Nest;\n    eggs: number;\n    origin: string | string[];\n}\n\nexport type Habitat = 'forest' | 'grassland' | 'wetland';\nexport type Food = 'invertebrate' | 'seed' | 'fruit' | 'fish' | 'rodent';\nexport type Nest = 'bowl' | 'cavity' | 'ground' | 'platform';\n\nexport const data: Bird[] = [\n    {\n        name: 'Greater Roadrunner',\n        binominalName: 'Geococcyx californianus',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'American Bittern',\n        binominalName: 'Botaurus lentiginosus',\n        wingspan: 107,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'Bobolink',\n        binominalName: 'Dolichonyx oryzivorus',\n        wingspan: 30,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Northern Cardinal',\n        binominalName: 'Cardinalis cardinalis',\n        wingspan: 30,\n        habitat: 'forest',\n        food: ['seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 4,\n        origin: 'North America',\n    },\n    {\n        name: 'Ruddy Duck',\n        binominalName: 'Oxyura jamaicensis',\n        wingspan: 48,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'platform',\n        eggs: 15,\n        origin: 'America',\n    },\n    {\n        name: 'White Wagtail',\n        binominalName: 'Motacilla alba',\n        wingspan: 28,\n        habitat: ['grassland', 'wetland'],\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 8,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Short-toed Treecreeper',\n        binominalName: 'Certhia brachydactyla',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'Europe',\n    },\n    {\n        name: 'Ruff',\n        binominalName: 'Calidris pugnax',\n        wingspan: 56,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'fruit', 'fish', 'rodent', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Common Chiffchaff',\n        binominalName: 'Phylloscopus collybita',\n        wingspan: 20,\n        habitat: ['wetland', 'forest'],\n        food: ['invertebrate', 'fruit', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Africa'],\n    },\n    {\n        name: 'Common Little Bittern',\n        binominalName: 'Ixobrychus minutus',\n        wingspan: 49,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Willet',\n        binominalName: 'Tringa semipalmata',\n        wingspan: 66,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Yellow-Rumped Warbler',\n        binominalName: 'Setophaga coronata',\n        wingspan: 23,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Eurasian Magpie',\n        binominalName: 'Pica pica',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'fruit', 'seed', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dunnock',\n        binominalName: 'Prunella modularis',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: \"Wilson's Snipe\",\n        binominalName: 'Gallinago delicata',\n        wingspan: 41,\n        habitat: 'wetland',\n        food: 'invertebrate',\n        nest: 'ground',\n        eggs: 3,\n        origin: 'America',\n    },\n    {\n        name: 'Little Bustard',\n        binominalName: 'Tetrax tetrax',\n        wingspan: 110,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dickcissel',\n        binominalName: 'Spiza americana',\n        wingspan: 25,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Prothonotary Warbler',\n        binominalName: 'Protonotaria citrea',\n        wingspan: 23,\n        habitat: ['forest', 'wetland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Killdeer',\n        binominalName: 'Charadrius vociferus',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Tufted Titmouse',\n        binominalName: 'Baeolophus bicolor',\n        wingspan: 25,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Black-Tailed Godwit',\n        binominalName: 'Limosa limosa',\n        wingspan: 76,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa', 'Australia'],\n    },\n    {\n        name: 'Yellow-Breasted Chat',\n        binominalName: 'Icteria virens',\n        wingspan: 25,\n        habitat: ['wetland', 'grassland', 'forest'],\n        food: ['invertebrate', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Purple Martin',\n        binominalName: 'Progne subis',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: 'invertebrate',\n        nest: 'cavity',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Goldcrest',\n        binominalName: 'Regulus regulus',\n        wingspan: 15,\n        habitat: 'forest',\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 11,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'King Rail',\n        binominalName: 'Rallus elegans',\n        wingspan: 51,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'fruit', 'seed', 'rodent'],\n        nest: 'platform',\n        eggs: 14,\n        origin: 'North America',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-remote.tsx","fileName":"table-remote.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-remote","overview":"Remote sorting and pagination","usage":{},"docs":"Remote sorting and pagination","docsTags":[{"name":"link","text":"birds.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-remote":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-remote.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column, TableParams, ColumnSorter } from '../table.types';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\nconst NETWORK_DELAY = 500;\n\n/**\n * Remote sorting and pagination\n *\n * @link birds.ts\n */\n@Component({\n    tag: 'limel-example-table-remote',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleRemote {\n    private columns: Array<Column<Bird>> = [];\n\n    @State()\n    private currentData: object[] = [];\n\n    private allData: object[] = data;\n\n    private pageSize = 10;\n\n    private currentPage: number;\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                horizontalAlign: 'right',\n                field: 'eggs',\n                aggregator: this.calculateAverage,\n            },\n            { title: 'Origin', field: 'origin' },\n        ];\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n\n    private handleLoad = (event: CustomEvent<TableParams>) => {\n        console.log('Loading new data', event.detail);\n        const sorter = event.detail.sorters[0];\n\n        this.currentPage = event.detail.page;\n        if (sorter) {\n            this.allData = [...data].sort(this.compareBy(sorter));\n        }\n\n        this.loadData();\n    };\n\n    /**\n     * This will only handle how to compare strings. This means the two number\n     * columns in the example will not be sorted in the correct way\n     */\n    private compareBy = (sorter: ColumnSorter) => (a: Bird, b: Bird) => {\n        const column = sorter.column;\n        const fieldA = a[column.field];\n        const fieldB = b[column.field];\n\n        if (sorter.direction === 'ASC') {\n            return String(fieldA).localeCompare(String(fieldB));\n        }\n\n        return String(fieldB).localeCompare(String(fieldA));\n    };\n\n    /**\n     * Calculate the average value for a column for all the available data\n     *\n     * `values` and `rowsData` are not needed in this example since they only\n     * contain the values for the data that is currently loaded in the table\n     */\n    private calculateAverage(column: Column, values: any[], rowsData: Bird[]) {\n        console.log(values, rowsData);\n\n        const total = data.reduce((sum: number, value: Bird) => {\n            return sum + value[column.field];\n        }, 0);\n\n        return total / data.length;\n    }\n\n    /**\n     * Simulate some network delay, like loading data from a server\n     */\n    private loadData() {\n        setTimeout(() => {\n            const start = (this.currentPage - 1) * this.pageSize;\n            const end = start + this.pageSize;\n            this.currentData = this.allData.slice(start, end);\n        }, NETWORK_DELAY);\n    }\n\n    public render() {\n        return (\n            <limel-table\n                mode=\"remote\"\n                data={this.currentData}\n                columns={this.columns}\n                pageSize={this.pageSize}\n                totalRows={data.length}\n                onLoad={this.handleLoad}\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"birds.ts","type":"ts","source":"export interface Bird {\n    name: string;\n    binominalName: string;\n    wingspan: number;\n    habitat: Habitat | Habitat[];\n    food: Food | Food[];\n    nest: Nest;\n    eggs: number;\n    origin: string | string[];\n}\n\nexport type Habitat = 'forest' | 'grassland' | 'wetland';\nexport type Food = 'invertebrate' | 'seed' | 'fruit' | 'fish' | 'rodent';\nexport type Nest = 'bowl' | 'cavity' | 'ground' | 'platform';\n\nexport const data: Bird[] = [\n    {\n        name: 'Greater Roadrunner',\n        binominalName: 'Geococcyx californianus',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'American Bittern',\n        binominalName: 'Botaurus lentiginosus',\n        wingspan: 107,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'Bobolink',\n        binominalName: 'Dolichonyx oryzivorus',\n        wingspan: 30,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Northern Cardinal',\n        binominalName: 'Cardinalis cardinalis',\n        wingspan: 30,\n        habitat: 'forest',\n        food: ['seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 4,\n        origin: 'North America',\n    },\n    {\n        name: 'Ruddy Duck',\n        binominalName: 'Oxyura jamaicensis',\n        wingspan: 48,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'platform',\n        eggs: 15,\n        origin: 'America',\n    },\n    {\n        name: 'White Wagtail',\n        binominalName: 'Motacilla alba',\n        wingspan: 28,\n        habitat: ['grassland', 'wetland'],\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 8,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Short-toed Treecreeper',\n        binominalName: 'Certhia brachydactyla',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'Europe',\n    },\n    {\n        name: 'Ruff',\n        binominalName: 'Calidris pugnax',\n        wingspan: 56,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'fruit', 'fish', 'rodent', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Common Chiffchaff',\n        binominalName: 'Phylloscopus collybita',\n        wingspan: 20,\n        habitat: ['wetland', 'forest'],\n        food: ['invertebrate', 'fruit', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Africa'],\n    },\n    {\n        name: 'Common Little Bittern',\n        binominalName: 'Ixobrychus minutus',\n        wingspan: 49,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Willet',\n        binominalName: 'Tringa semipalmata',\n        wingspan: 66,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Yellow-Rumped Warbler',\n        binominalName: 'Setophaga coronata',\n        wingspan: 23,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Eurasian Magpie',\n        binominalName: 'Pica pica',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'fruit', 'seed', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dunnock',\n        binominalName: 'Prunella modularis',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: \"Wilson's Snipe\",\n        binominalName: 'Gallinago delicata',\n        wingspan: 41,\n        habitat: 'wetland',\n        food: 'invertebrate',\n        nest: 'ground',\n        eggs: 3,\n        origin: 'America',\n    },\n    {\n        name: 'Little Bustard',\n        binominalName: 'Tetrax tetrax',\n        wingspan: 110,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dickcissel',\n        binominalName: 'Spiza americana',\n        wingspan: 25,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Prothonotary Warbler',\n        binominalName: 'Protonotaria citrea',\n        wingspan: 23,\n        habitat: ['forest', 'wetland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Killdeer',\n        binominalName: 'Charadrius vociferus',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Tufted Titmouse',\n        binominalName: 'Baeolophus bicolor',\n        wingspan: 25,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Black-Tailed Godwit',\n        binominalName: 'Limosa limosa',\n        wingspan: 76,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa', 'Australia'],\n    },\n    {\n        name: 'Yellow-Breasted Chat',\n        binominalName: 'Icteria virens',\n        wingspan: 25,\n        habitat: ['wetland', 'grassland', 'forest'],\n        food: ['invertebrate', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Purple Martin',\n        binominalName: 'Progne subis',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: 'invertebrate',\n        nest: 'cavity',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Goldcrest',\n        binominalName: 'Regulus regulus',\n        wingspan: 15,\n        habitat: 'forest',\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 11,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'King Rail',\n        binominalName: 'Rallus elegans',\n        wingspan: 51,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'fruit', 'seed', 'rodent'],\n        nest: 'platform',\n        eggs: 14,\n        origin: 'North America',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-selectable-rows.tsx","fileName":"table-selectable-rows.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-selectable-rows","overview":"Selectable rows with updating aggregates","usage":{},"docs":"Selectable rows with updating aggregates","docsTags":[{"name":"link","text":"persons.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table","limel-example-controls","limel-button","limel-example-value","limel-example-event-printer"],"dependencyGraph":{"limel-example-table-selectable-rows":["limel-table","limel-example-controls","limel-button","limel-example-value","limel-example-event-printer"],"limel-table":["limel-spinner","limel-checkbox"],"limel-button":["limel-spinner","limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-selectable-rows.tsx","type":"tsx","source":"import { LimelTableCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { Column, ColumnAggregate } from '../table.types';\nimport { persons, Person } from './persons';\n\n/**\n * Selectable rows with updating aggregates\n *\n * @link persons.ts\n */\n@Component({\n    tag: 'limel-example-table-selectable-rows',\n    styleUrl: 'table-selectable-rows.scss',\n    shadow: true,\n})\nexport class TableExampleSelectableRows {\n    @State()\n    private activeRow: Person;\n    @State()\n    private selection: Person[];\n    @State()\n    private aggregates: ColumnAggregate[];\n\n    private tableData: Person[] = persons;\n    private defaultSelection = [persons[0], persons[2]];\n\n    private columns: Column[] = [\n        {\n            title: 'Name',\n            field: 'name',\n        },\n        {\n            title: 'Age',\n            field: 'age',\n            horizontalAlign: 'right',\n        },\n        { title: 'Kind', field: 'kind' },\n        {\n            title: 'Height',\n            field: 'height',\n            horizontalAlign: 'right',\n        },\n        { title: 'Stamina', field: 'stamina' },\n        { title: 'Place of Birth', field: 'placeOfBirth' },\n        { title: 'Sign', field: 'sign' },\n        { title: 'Date of Birth', field: 'dateOfBirth' },\n        { title: 'Role', field: 'role' },\n    ];\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    constructor() {\n        this.selection = [...this.defaultSelection];\n        this.updateAggregates();\n    }\n\n    public render() {\n        return [\n            <limel-table\n                data={this.tableData}\n                activeRow={this.activeRow}\n                selectable={true}\n                selection={this.selection}\n                aggregates={this.aggregates}\n                columns={this.columns}\n                onActivate={this.onActivateRow}\n                onSelect={this.onSelect}\n                onSelectAll={this.onSelectAll}\n                pageSize={5}\n                mode=\"local\"\n                totalRows={persons.length}\n                movableColumns={true}\n                class=\"has-interactive-rows\"\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-max-columns-width': '10rem' }}\n            >\n                <limel-button label=\"Select all\" onClick={this.selectAll} />\n                <limel-button\n                    label=\"Clear selection\"\n                    onClick={this.clearSelection}\n                />\n                <limel-button label=\"Reset\" onClick={this.resetSelection} />\n            </limel-example-controls>,\n            <limel-example-value label=\"Active row\" value={this.activeRow} />,\n            <limel-example-value\n                label={`Selected rows: (${this.selection?.length || 0})`}\n                value={this.selection}\n            />,\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private onActivateRow = (event: LimelTableCustomEvent<Person>) => {\n        this.activeRow = event.detail;\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private onSelect = (event: LimelTableCustomEvent<Person[]>) => {\n        this.selection = event.detail;\n        this.updateAggregates();\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private onSelectAll = (event: CustomEvent<boolean>) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private selectAll = () => {\n        this.selection = [...this.tableData];\n        this.updateAggregates();\n    };\n\n    private clearSelection = () => {\n        this.selection = [];\n        this.updateAggregates();\n    };\n\n    private resetSelection = () => {\n        this.selection = [...this.defaultSelection];\n        this.updateAggregates();\n    };\n\n    private updateAggregates = () => {\n        this.aggregates = [\n            this.getNameAggregate(),\n            this.getHeightAggregate(),\n            this.getAgeAggregate(),\n            this.getStaminaAggregate(),\n        ];\n    };\n\n    private getNameAggregate = () => {\n        const selected = this.selection.length;\n        const count = this.tableData.length;\n        const value = selected ? `Selected: ${selected}` : `Count: ${count}`;\n\n        return {\n            field: 'name',\n            value: value,\n        };\n    };\n\n    private getStaminaAggregate = () => {\n        const items = this.selection.length ? this.selection : this.tableData;\n        const stamina = items.map((d) => Number.parseInt(d.stamina, 10));\n        const minStamina = Math.min(...stamina);\n        const maxStamina = Math.max(...stamina);\n        let value = `${minStamina}%`;\n        if (minStamina !== maxStamina) {\n            value = `${minStamina}% - ${maxStamina}%`;\n        }\n\n        return {\n            field: 'stamina',\n            value: value,\n        };\n    };\n\n    private sumProperty = (\n        items: Person[],\n        valueProvider: (person: Person) => number\n    ) => {\n        return items.reduce((s, person) => s + valueProvider(person), 0);\n    };\n\n    private getAgeAggregate = () => {\n        const items = this.selection.length ? this.selection : this.tableData;\n        const sum = this.sumProperty(items, (p) => p.age);\n        const avg = sum / items.length || 0;\n\n        return {\n            field: 'age',\n            value: `Avg: ${Math.round(avg * 100) / 100}`,\n        };\n    };\n\n    private getHeightAggregate = () => {\n        const items = this.selection.length ? this.selection : this.tableData;\n        const sum = this.sumProperty(items, (p) => p.height);\n\n        return {\n            field: 'height',\n            value: `${sum} cm`,\n        };\n    };\n}\n"},{"filename":"table-selectable-rows.scss","type":"scss","source":"@use './table.scss';\n"},{"filename":"persons.ts","type":"ts","source":"export interface Person {\n    id: number;\n    name: string;\n    age: number;\n    kind: string;\n    height: number;\n    placeOfBirth: string;\n    stamina: string;\n    sign: string;\n    dateOfBirth: string;\n    role: string;\n}\n\nexport const persons: Person[] = [\n    {\n        id: 1,\n        name: 'Fauji Sheladia',\n        age: 29,\n        kind: 'Angel',\n        height: 95,\n        placeOfBirth: 'Palight',\n        stamina: '40%',\n        sign: '🧚‍♂️',\n        dateOfBirth: '14/05/1991',\n        role: 'The Big Boss',\n    },\n    {\n        id: 2,\n        name: 'Mäkelä Jehkinen',\n        age: 42,\n        kind: 'Dragon',\n        height: 1800,\n        stamina: '96%',\n        placeOfBirth: 'Ekudshire',\n        sign: '🐉',\n        dateOfBirth: '30/07/1987',\n        role: 'Head of Guardians',\n    },\n    {\n        id: 3,\n        name: 'Helrover Shgrover Ohmslmer',\n        age: 723,\n        kind: 'Elf',\n        height: 186,\n        stamina: '84%',\n        placeOfBirth: 'Blarc',\n        sign: '🧝‍♂️',\n        dateOfBirth: '29/10/1297',\n        role: 'Head of External Politics',\n    },\n    {\n        id: 4,\n        name: 'Goliham Gigantlle',\n        age: 350,\n        kind: 'Yeti',\n        height: 325,\n        stamina: '95%',\n        placeOfBirth: 'Kamond',\n        sign: '❄️',\n        dateOfBirth: '23/07/1670',\n        role: 'Chief Cool Stuff Officer',\n    },\n    {\n        id: 5,\n        name: 'Eloise Sullivan',\n        age: 35,\n        kind: 'Vampire',\n        height: 170,\n        stamina: '47%',\n        placeOfBirth: 'Blodholm',\n        sign: '🧛‍♀️',\n        dateOfBirth: '10/11/1985',\n        role: 'Bloodline Quality Controller',\n    },\n    {\n        id: 6,\n        name: 'Gladys E. Fyffe',\n        age: 36,\n        kind: 'Werewolf',\n        height: 176,\n        stamina: '83%',\n        placeOfBirth: 'Wuacross',\n        sign: '🐺',\n        dateOfBirth: '06/06/1984',\n        role: 'Head Hunter',\n    },\n    {\n        id: 7,\n        name: 'Cunninghamarms',\n        age: 44,\n        kind: 'Ork',\n        height: 176,\n        stamina: '74%',\n        placeOfBirth: 'Bruhgnathal',\n        sign: '🐗',\n        dateOfBirth: '26/01/1976',\n        role: 'Head of Security',\n    },\n    {\n        id: 8,\n        name: 'Agalle Cunningpower',\n        age: 75,\n        kind: 'Wizard',\n        height: 176,\n        stamina: '40%',\n        placeOfBirth: 'Orasas',\n        sign: '🔮',\n        dateOfBirth: '05/10/1945',\n        role: 'Chief Entertainment Officer',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-sorting-disabled.tsx","fileName":"table-sorting-disabled.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-sorting-disabled","overview":"Disable column sorting\n\nBy default, all columns can be sorted by end-users, if they click on\na column header. An arrow icon on the header visualizes the\ndirection of sorting, when a column is sorted.\n\nHowever, you can disable the sorting possibility in individual columns,\nby setting the `headerSort` to `false`.","usage":{},"docs":"Disable column sorting\n\nBy default, all columns can be sorted by end-users, if they click on\na column header. An arrow icon on the header visualizes the\ndirection of sorting, when a column is sorted.\n\nHowever, you can disable the sorting possibility in individual columns,\nby setting the `headerSort` to `false`.","docsTags":[{"name":"link","text":"invoices.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-sorting-disabled":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-sorting-disabled.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '../table.types';\nimport { invoices, Invoice } from './invoices';\n\n/**\n * Disable column sorting\n *\n * By default, all columns can be sorted by end-users, if they click on\n * a column header. An arrow icon on the header visualizes the\n * direction of sorting, when a column is sorted.\n *\n * However, you can disable the sorting possibility in individual columns,\n * by setting the `headerSort` to `false`.\n *\n * @link invoices.ts\n */\n@Component({\n    tag: 'limel-example-table-sorting-disabled',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleSortingDisabled {\n    @State()\n    private tableData: Invoice[] = invoices;\n\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        {\n            title: 'Reference Person',\n            field: 'referencePerson',\n            headerSort: false,\n        },\n        { title: 'Amount', field: 'amount', horizontalAlign: 'right' },\n    ];\n\n    render() {\n        return <limel-table data={this.tableData} columns={this.columns} />;\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"invoices.ts","type":"ts","source":"export interface Invoice {\n    id: number;\n    invoiceNumber: number;\n    invoiceDate: string;\n    referencePerson: string;\n    amount: number;\n}\n\nexport const invoices: Invoice[] = [\n    {\n        id: 1,\n        invoiceNumber: 15467,\n        invoiceDate: '02/10/2020',\n        referencePerson: 'Fauji Sheladia',\n        amount: 21.328,\n    },\n    {\n        id: 2,\n        invoiceNumber: 15433,\n        invoiceDate: '03/06/2020',\n        referencePerson: 'Mäkelä Jehkinen',\n        amount: 9.169,\n    },\n    {\n        id: 3,\n        invoiceNumber: 34326,\n        invoiceDate: '30/03/2021',\n        referencePerson: 'Helrover Shgrover',\n        amount: 1.295,\n    },\n    {\n        id: 4,\n        invoiceNumber: 12357,\n        invoiceDate: '14/09/2020',\n        referencePerson: 'Goliham Gigantlle',\n        amount: 11.468,\n    },\n    {\n        id: 5,\n        invoiceNumber: 12467,\n        invoiceDate: '07/08/2020',\n        referencePerson: 'Eloise Sullivan',\n        amount: 2.583,\n    },\n    {\n        id: 6,\n        invoiceNumber: 12653,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Gladys Fyffe',\n        amount: 5.201,\n    },\n    {\n        id: 7,\n        invoiceNumber: 12655,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Cunninghamarms',\n        amount: 5.181,\n    },\n    {\n        id: 8,\n        invoiceNumber: 12622,\n        invoiceDate: '23/12/2020',\n        referencePerson: 'Agalle Cunningpower',\n        amount: 18.257,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples","filePath":"./src/components/tooltip/examples/tooltip.tsx","fileName":"tooltip.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/usage","tag":"limel-example-tooltip","overview":"Basic example","usage":{},"docs":"Basic example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-tooltip"],"dependencyGraph":{"limel-example-tooltip":["limel-button","limel-tooltip"],"limel-button":["limel-spinner","limel-icon"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic example\n */\n@Component({\n    tag: 'limel-example-tooltip',\n    shadow: true,\n})\nexport class TooltipExample {\n    public render() {\n        return [\n            <limel-button icon=\"search\" id=\"tooltip-example\" />,\n            <limel-tooltip\n                label=\"Search\"\n                helperLabel=\"alt + F\"\n                elementId=\"tooltip-example\"\n            />,\n        ];\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples","filePath":"./src/components/tooltip/examples/tooltip-composite.tsx","fileName":"tooltip-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/usage","tag":"limel-example-tooltip-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-tooltip","limel-collapsible-section","limel-form"],"dependencyGraph":{"limel-example-tooltip-composite":["limel-button","limel-tooltip","limel-collapsible-section","limel-form"],"limel-button":["limel-spinner","limel-icon"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-collapsible-section":["limel-icon-button"],"limel-icon-button":["limel-icon"]},"props":[{"name":"schema","type":"any","mutable":true,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-tooltip-composite',\n    shadow: true,\n})\nexport class TooltipCompositeExample {\n    @Prop({ mutable: true })\n    public schema: any;\n\n    @State()\n    private props = {\n        label: 'Search',\n        helperLabel: 'alt + F',\n        maxlength: 50,\n    };\n\n    public componentWillLoad() {\n        this.schema = {\n            ...this.schema,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n        delete this.schema.properties.elementId;\n    }\n\n    public render() {\n        return [\n            <limel-button icon=\"search\" id=\"tooltip-example\" />,\n            <limel-tooltip {...this.props} elementId=\"tooltip-example\" />,\n            this.renderForm(),\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-collapsible-section header=\"Settings\">\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleChange}\n                />\n            </limel-collapsible-section>\n        );\n    }\n\n    private handleChange = (event: CustomEvent) => {\n        this.props = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples","filePath":"./src/design-guidelines/declutter/examples/tooltip-declutter.tsx","fileName":"tooltip-declutter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples/usage","tag":"limel-example-tooltip-declutter","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-button","limel-tooltip"],"dependencyGraph":{"limel-example-tooltip-declutter":["limel-header","limel-button","limel-tooltip"],"limel-header":["limel-icon"],"limel-button":["limel-spinner","limel-icon"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip-declutter.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-tooltip-declutter',\n    shadow: true,\n    styleUrl: 'tooltip-declutter.scss',\n})\nexport class TooltipUsageExample {\n    public render() {\n        return [\n            <div class=\"do-dont-container action-buttons-examples\">\n                <div class=\"do-not\">\n                    <limel-header\n                        icon=\"brake_warning\"\n                        heading=\"Don't\"\n                    ></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <p>Schedule this task?</p>\n                            <p>\n                                Scheduled tasks will be run at night between\n                                01:00 to 02:00.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" />\n                                <limel-button label=\"Schedule\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"do\">\n                    <limel-header icon=\"ok\" heading=\"Do\"></limel-header>\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                <span\n                                    class=\"tooltip-trigger\"\n                                    id=\"tooltip-example\"\n                                >\n                                    ?\n                                </span>\n                                Schedule this task?\n                                <limel-tooltip\n                                    label=\"Scheduled tasks will be run at night\"\n                                    helperLabel=\"between 01:00 to 02:00\"\n                                    elementId=\"tooltip-example\"\n                                />\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" />\n                                <limel-button label=\"Schedule\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"tooltip-declutter.scss","type":"scss","source":"@import '../../action-buttons/examples/action-buttons';\n\n.tooltip-trigger {\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    aspect-ratio: 1 / 1;\n    height: 1rem;\n    border-radius: 50%;\n    margin-right: 0.5rem;\n\n    font-size: 80%;\n\n    color: rgb(var(--contrast-100));\n    background-color: rgb(var(--contrast-1300));\n\n    cursor: pointer;\n\n    transition: box-shadow 0.2s ease;\n\n    &:hover {\n        box-shadow: var(--shadow-depth-8-focused);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples","filePath":"./src/components/tooltip/examples/tooltip-max-character.tsx","fileName":"tooltip-max-character.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/usage","tag":"limel-example-tooltip-max-character","overview":"Using 'maxlength' property\nTo present an easy to read content, the tooltip's maximum text\nlength is set to 50 characters, including spaces.\nWhen this threshold is reached, content will be rendered with line breaks.\nHowever, it is possible to override this value by specifying `maxlength`.\n\n:::note\nTooltips are intended to display very brief information.\nTry not to place large amount of text in them.\n:::","usage":{},"docs":"Using 'maxlength' property\nTo present an easy to read content, the tooltip's maximum text\nlength is set to 50 characters, including spaces.\nWhen this threshold is reached, content will be rendered with line breaks.\nHowever, it is possible to override this value by specifying `maxlength`.\n\n:::note\nTooltips are intended to display very brief information.\nTry not to place large amount of text in them.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button","limel-tooltip"],"dependencyGraph":{"limel-example-tooltip-max-character":["limel-icon-button","limel-tooltip"],"limel-icon-button":["limel-icon"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip-max-character.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Using 'maxlength' property\n * To present an easy to read content, the tooltip's maximum text\n * length is set to 50 characters, including spaces.\n * When this threshold is reached, content will be rendered with line breaks.\n * However, it is possible to override this value by specifying `maxlength`.\n *\n * :::note\n * Tooltips are intended to display very brief information.\n * Try not to place large amount of text in them.\n * :::\n */\n@Component({\n    tag: 'limel-example-tooltip-max-character',\n    shadow: true,\n    styleUrl: 'tooltip-max-character.scss',\n})\nexport class TooltipExample {\n    public render() {\n        return [\n            <limel-icon-button icon=\"info\" id=\"tooltip1\" />,\n            <limel-tooltip\n                label=\"Short text\"\n                helperLabel=\"less than 25ch\"\n                elementId=\"tooltip1\"\n                maxlength={25}\n            />,\n            <limel-icon-button icon=\"info\" id=\"tooltip2\" />,\n            <limel-tooltip\n                label=\"Long text\"\n                helperLabel=\"The total amount of characters is more than 25\"\n                elementId=\"tooltip2\"\n                maxlength={25}\n            />,\n            <limel-icon-button icon=\"info\" id=\"tooltip3\" />,\n            <limel-tooltip\n                label=\"Very long text\"\n                helperLabel=\"The total amount of characters is more than default max character length, which is 50ch. Note that there is no max character length specified here.\"\n                elementId=\"tooltip3\"\n            />,\n        ];\n    }\n}\n"},{"filename":"tooltip-max-character.scss","type":"scss","source":":host(limel-example-tooltip-max-character) {\n    display: flex;\n    flex-direction: column;\n    align-content: flex-start;\n    column-gap: 1rem;\n    flex-wrap: wrap;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/ui-color-palette.tsx","fileName":"ui-color-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-ui-color-palette","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"ui-color-palette.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-ui-color-palette',\n    shadow: true,\n    styleUrl: 'ui-color-palette.scss',\n})\nexport class PaletteExample {\n    public render() {\n        return (\n            <div class=\"color-palette\">\n                <div class=\"swatch --color-red-light\"></div>\n                <div class=\"swatch --color-red-default\">·</div>\n                <div class=\"swatch hue\">red</div>\n                <div class=\"usage\">\n                    <ul>\n                        <li>danger</li>\n                        <li>irreversible change</li>\n                        <li>delete</li>\n                        <li>failed</li>\n                        <li>serious error</li>\n                        <li>stop</li>\n                        <li>negative feedback</li>\n                    </ul>\n                </div>\n                <div class=\"swatch --color-blue-light\"></div>\n                <div class=\"swatch --color-blue-default\">·</div>\n                <div class=\"swatch hue\">blue</div>\n                <div class=\"usage\">\n                    <ul>\n                        <li>success</li>\n                        <li>external links</li>\n                        <li>information</li>\n                        <li>help</li>\n                        <li>accented (generic)</li>\n                        <li>positive feedback</li>\n                    </ul>\n                </div>\n                <div class=\"swatch --color-green-light\"></div>\n                <div class=\"swatch --color-green-default\">·</div>\n                <div class=\"swatch hue\">green</div>\n                <div class=\"usage\">\n                    <ul>\n                        <li>ok</li>\n                        <li>safe</li>\n                        <li>turned on</li>\n                        <li>ongoing</li>\n                        <li>new</li>\n                        <li>restore</li>\n                        <li>continue</li>\n                    </ul>\n                </div>\n                <div class=\"swatch --color-amber-light\"></div>\n                <div class=\"swatch --color-amber-default\">·</div>\n                <div class=\"swatch hue\">amber</div>\n                <div class=\"usage\">\n                    <ul>\n                        <li>caution</li>\n                        <li>attention</li>\n                        <li>paused</li>\n                    </ul>\n                </div>\n                <div class=\"swatch --color-orange-light\"></div>\n                <div class=\"swatch --color-orange-default\">·</div>\n                <div class=\"swatch hue\">orange</div>\n                <div class=\"usage\">\n                    <ul>\n                        <li>warning</li>\n                        <li>moderate error</li>\n                    </ul>\n                </div>\n                <div class=\"brightness-label\">light</div>\n                <div class=\"brightness-label\">default</div>\n            </div>\n        );\n    }\n}\n"},{"filename":"ui-color-palette.scss","type":"scss","source":"@use '../../../style/functions';\n@use './shared-styles';\n\n.color-palette {\n    grid-template-rows: repeat(3, 1fr) auto;\n    grid-template-columns: repeat(5, 1fr) auto;\n}\n\n.swatch {\n    max-height: functions.pxToRem(32);\n\n    &.hue {\n        writing-mode: initial;\n        padding-top: 0;\n    }\n}\n\n.usage {\n    ul {\n        padding-inline-start: functions.pxToRem(16);\n        font-size: functions.pxToRem(14);\n        color: rgb(var(--contrast-1300));\n        margin: 0 0 functions.pxToRem(16) 0;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/examples","filePath":"./src/examples/example-value.tsx","fileName":"example-value.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/examples/usage","tag":"limel-example-value","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"none","dependents":["limel-example-checkbox","limel-example-chip-set-input","limel-example-custom-component-form","limel-example-date-picker-custom-formatter","limel-example-date-picker-date","limel-example-date-picker-datetime","limel-example-date-picker-formatted","limel-example-date-picker-month","limel-example-date-picker-programmatic-change","limel-example-date-picker-quarter","limel-example-date-picker-time","limel-example-date-picker-week","limel-example-date-picker-year","limel-example-dynamic-form","limel-example-file","limel-example-file-custom-icon","limel-example-form","limel-example-input-field-autocomplete","limel-example-input-field-number","limel-example-input-field-showlink","limel-example-input-field-text","limel-example-input-field-textarea","limel-example-list-checkbox","limel-example-list-checkbox-icons","limel-example-list-form","limel-example-list-radio-button","limel-example-list-radio-button-icons","limel-example-menu-basic","limel-example-menu-hotkeys","limel-example-menu-secondary-text","limel-example-nested-form","limel-example-picker-empty-suggestions","limel-example-picker-icons","limel-example-picker-multiple","limel-example-picker-single","limel-example-picker-static-actions","limel-example-progress-flow-basic","limel-example-props-factory-form","limel-example-select","limel-example-select-change-options","limel-example-select-dialog","limel-example-select-multiple","limel-example-select-preselected","limel-example-select-with-empty-option","limel-example-select-with-icons","limel-example-slider","limel-example-slider-multiplier","limel-example-slider-multiplier-percentage-colors","limel-example-switch","limel-example-tab-bar","limel-example-tab-bar-with-dynamic-tab-width","limel-example-tab-bar-with-equal-tab-width","limel-example-table-activate-row","limel-example-table-local","limel-example-table-movable-columns","limel-example-table-selectable-rows"],"dependencies":[],"dependencyGraph":{"limel-example-checkbox":["limel-example-value"],"limel-example-chip-set-input":["limel-example-value"],"limel-example-custom-component-form":["limel-example-value"],"limel-example-date-picker-custom-formatter":["limel-example-value"],"limel-example-date-picker-date":["limel-example-value"],"limel-example-date-picker-datetime":["limel-example-value"],"limel-example-date-picker-formatted":["limel-example-value"],"limel-example-date-picker-month":["limel-example-value"],"limel-example-date-picker-programmatic-change":["limel-example-value"],"limel-example-date-picker-quarter":["limel-example-value"],"limel-example-date-picker-time":["limel-example-value"],"limel-example-date-picker-week":["limel-example-value"],"limel-example-date-picker-year":["limel-example-value"],"limel-example-dynamic-form":["limel-example-value"],"limel-example-file":["limel-example-value"],"limel-example-file-custom-icon":["limel-example-value"],"limel-example-form":["limel-example-value"],"limel-example-input-field-autocomplete":["limel-example-value"],"limel-example-input-field-number":["limel-example-value"],"limel-example-input-field-showlink":["limel-example-value"],"limel-example-input-field-text":["limel-example-value"],"limel-example-input-field-textarea":["limel-example-value"],"limel-example-list-checkbox":["limel-example-value"],"limel-example-list-checkbox-icons":["limel-example-value"],"limel-example-list-form":["limel-example-value"],"limel-example-list-radio-button":["limel-example-value"],"limel-example-list-radio-button-icons":["limel-example-value"],"limel-example-menu-basic":["limel-example-value"],"limel-example-menu-hotkeys":["limel-example-value"],"limel-example-menu-secondary-text":["limel-example-value"],"limel-example-nested-form":["limel-example-value"],"limel-example-picker-empty-suggestions":["limel-example-value"],"limel-example-picker-icons":["limel-example-value"],"limel-example-picker-multiple":["limel-example-value"],"limel-example-picker-single":["limel-example-value"],"limel-example-picker-static-actions":["limel-example-value"],"limel-example-progress-flow-basic":["limel-example-value"],"limel-example-props-factory-form":["limel-example-value"],"limel-example-select":["limel-example-value"],"limel-example-select-change-options":["limel-example-value"],"limel-example-select-dialog":["limel-example-value"],"limel-example-select-multiple":["limel-example-value"],"limel-example-select-preselected":["limel-example-value"],"limel-example-select-with-empty-option":["limel-example-value"],"limel-example-select-with-icons":["limel-example-value"],"limel-example-slider":["limel-example-value"],"limel-example-slider-multiplier":["limel-example-value"],"limel-example-slider-multiplier-percentage-colors":["limel-example-value"],"limel-example-switch":["limel-example-value"],"limel-example-tab-bar":["limel-example-value"],"limel-example-tab-bar-with-dynamic-tab-width":["limel-example-value"],"limel-example-tab-bar-with-equal-tab-width":["limel-example-value"],"limel-example-table-activate-row":["limel-example-value"],"limel-example-table-local":["limel-example-value"],"limel-example-table-movable-columns":["limel-example-value"],"limel-example-table-selectable-rows":["limel-example-value"]},"props":[{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"A label describing the value.","docsTags":[],"default":"'Value'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"any","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The value that should be displayed.","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"example-value.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { isDate, isObject, isArray, isUndefined } from 'lodash-es';\n\n@Component({\n    tag: 'limel-example-value',\n    styleUrl: 'example-value.scss',\n})\nexport class ExampleValue {\n    /**\n     * A label describing the value.\n     */\n    @Prop({ reflect: true })\n    public label: string = 'Value';\n\n    /**\n     * The value that should be displayed.\n     */\n    @Prop()\n    public value: any;\n\n    public render() {\n        return (\n            <p>\n                {this.label}: {this.format(this.value)}\n            </p>\n        );\n    }\n\n    private format(val: any) {\n        if (isUndefined(val)) {\n            return <code>undefined</code>;\n        }\n\n        if (isDate(val)) {\n            return <code>{val.toString()}</code>;\n        }\n\n        if (isObject(val) || isArray(val)) {\n            return (\n                <pre>\n                    <code>{JSON.stringify(val, null, 2)}</code>\n                </pre>\n            );\n        }\n\n        return <code>{JSON.stringify(val, null, 2)}</code>;\n    }\n}\n"},{"filename":"example-value.scss","type":"scss","source":"@use '../style/functions';\n\ncode {\n    font-family: 'Source Code Pro', monospace;\n    font-size: functions.pxToRem(12);\n\n    -moz-tab-size: 4;\n    -o-tab-size: 4;\n    tab-size: 4;\n\n    -webkit-hyphens: none;\n    -moz-hyphens: none;\n    -ms-hyphens: none;\n    hyphens: none;\n\n    display: inline-block;\n    border-radius: functions.pxToRem(3);\n    padding: functions.pxToRem(1) functions.pxToRem(5);\n    color: rgb(var(--kompendium-contrast-1300));\n    background-color: rgb(var(--kompendium-contrast-600));\n}\n\npre > code {\n    display: block;\n    border-radius: functions.pxToRem(8);\n    margin: functions.pxToRem(8) 0;\n    padding: functions.pxToRem(16);\n    overflow: auto;\n    white-space: pre-wrap;\n\n    color: rgb(var(--kompendium-contrast-800));\n    background-color: rgb(var(--kompendium-contrast-1600));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file","filePath":"./src/components/file/file.tsx","fileName":"file.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/usage","tag":"limel-file","overview":"This component lets end-users select a *single* file from their device\nstorage. Regardless of the user's device or operating system, this component\nopens up a file picker dialog that allows the user to choose a file.\n\n## Using correct labels\n\nThis file picker can be used in different contexts. The component's distinct\nvisual design including the upload icon hints end-users that this is not a\nnormal input field like other fields in the form for example.\n\n:::important\nyou need to use a descriptive `label` that clarifies the\nfunctionality of the file picker, and/or provides users with clear\ninstructions.\n\nDepending on the context, you may need to avoid labels such as:\n- File\n- Document\n\nand instead consider using labels like:\n- Attach a file\n- Upload a file\n- Choose a document\n- Choose a file\n\nand similar phrases...\n:::","usage":{},"docs":"This component lets end-users select a *single* file from their device\nstorage. Regardless of the user's device or operating system, this component\nopens up a file picker dialog that allows the user to choose a file.\n\n## Using correct labels\n\nThis file picker can be used in different contexts. The component's distinct\nvisual design including the upload icon hints end-users that this is not a\nnormal input field like other fields in the form for example.\n\n:::important\nyou need to use a descriptive `label` that clarifies the\nfunctionality of the file picker, and/or provides users with clear\ninstructions.\n\nDepending on the context, you may need to avoid labels such as:\n- File\n- Document\n\nand instead consider using labels like:\n- Attach a file\n- Upload a file\n- Choose a document\n- Choose a file\n\nand similar phrases...\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-file"},{"name":"exampleComponent","text":"limel-example-file-custom-icon"},{"name":"exampleComponent","text":"limel-example-file-accepted-types"},{"name":"exampleComponent","text":"limel-example-file-composite"}],"encapsulation":"shadow","dependents":["limel-example-file","limel-example-file-accepted-types","limel-example-file-composite","limel-example-file-custom-icon"],"dependencies":["limel-chip-set"],"dependencyGraph":{"limel-file":["limel-chip-set"],"limel-chip-set":["limel-icon","limel-badge"],"limel-example-file":["limel-file"],"limel-example-file-accepted-types":["limel-file"],"limel-example-file-composite":["limel-file"],"limel-example-file-custom-icon":["limel-file"]},"props":[{"name":"accept","type":"string","mutable":false,"attr":"accept","reflectToAttr":true,"docs":"The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)","docsTags":[],"default":"'*'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"True if the input should be disabled","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The input label.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"Defines the localisation for translations.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to disable adding and removing files, but allow interaction\nwith any already existing file.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` to indicate that the field is required.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"FileInfo","mutable":false,"reflectToAttr":false,"docs":"The selected file.","docsTags":[],"values":[{"type":"FileInfo"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"FileInfo","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a file is selected/deselected","docsTags":[]},{"event":"interact","detail":"number | string","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when clicking on a chip","docsTags":[]}],"styles":[{"name":"--icon-background-color","annotation":"prop","docs":"Background color of the icon. Defaults to `--contrast-400`."},{"name":"--icon-color","annotation":"prop","docs":"Color of the icon. Defaults to `--contrast-1100`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file.tsx","type":"tsx","source":"import translate from '../../global/translations';\nimport { Chip, FileInfo, Languages } from '@limetech/lime-elements';\nimport { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport {\n    getFileBackgroundColor,\n    getFileColor,\n    getFileExtensionTitle,\n    getFileIcon,\n} from './file-metadata';\n\nconst CHIP_SET_TAG_NAME = 'limel-chip-set';\nconst DEFAULT_FILE_CHIP: Chip = {\n    id: null,\n    text: null,\n    removable: true,\n};\n\n/**\n * This component lets end-users select a *single* file from their device\n * storage. Regardless of the user's device or operating system, this component\n * opens up a file picker dialog that allows the user to choose a file.\n *\n * ## Using correct labels\n *\n * This file picker can be used in different contexts. The component's distinct\n * visual design including the upload icon hints end-users that this is not a\n * normal input field like other fields in the form for example.\n *\n *:::important\n * you need to use a descriptive `label` that clarifies the\n * functionality of the file picker, and/or provides users with clear\n * instructions.\n *\n * Depending on the context, you may need to avoid labels such as:\n * - File\n * - Document\n *\n * and instead consider using labels like:\n * - Attach a file\n * - Upload a file\n * - Choose a document\n * - Choose a file\n *\n * and similar phrases...\n *:::\n *\n * @exampleComponent limel-example-file\n * @exampleComponent limel-example-file-custom-icon\n * @exampleComponent limel-example-file-accepted-types\n * @exampleComponent limel-example-file-composite\n */\n@Component({\n    tag: 'limel-file',\n    shadow: true,\n    styleUrl: 'file.scss',\n})\nexport class File {\n    /**\n     * The selected file.\n     */\n    @Prop()\n    public value: FileInfo;\n\n    /**\n     * The input label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    /**\n     * True if the input should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to disable adding and removing files, but allow interaction\n     * with any already existing file.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Defines the localisation for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Dispatched when a file is selected/deselected\n     */\n    @Event()\n    private change: EventEmitter<FileInfo>;\n\n    /**\n     * Dispatched when clicking on a chip\n     */\n    @Event()\n    private interact: EventEmitter<number | string>;\n\n    @Element()\n    private element: HTMLLimelFileElement;\n\n    @State()\n    private isDraggingOverDropZone = false;\n\n    private fileInput: HTMLInputElement;\n    private fileInputId = createRandomString();\n    private chipSet;\n    private mdcTextField;\n\n    constructor() {\n        this.handleFileSelection = this.handleFileSelection.bind(this);\n        this.handleFileChange = this.handleFileChange.bind(this);\n        this.handleChipSetChange = this.handleChipSetChange.bind(this);\n        this.handleFileDrop = this.handleFileDrop.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.handleChipInteract = this.handleChipInteract.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.fileInput = this.element.shadowRoot.getElementById(\n            this.fileInputId\n        ) as HTMLInputElement;\n        this.chipSet = this.element.shadowRoot.querySelector(CHIP_SET_TAG_NAME);\n        this.initialize();\n    }\n\n    private initialize() {\n        if (!this.chipSet) {\n            return;\n        }\n\n        this.mdcTextField = new MDCTextField(\n            this.chipSet.shadowRoot.querySelector('.mdc-text-field')\n        );\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n    }\n\n    public render() {\n        return [\n            <input\n                hidden={true}\n                id={this.fileInputId}\n                onChange={this.handleFileChange}\n                type=\"file\"\n                accept={this.accept}\n                disabled={this.disabled || this.readonly}\n            />,\n            <limel-chip-set\n                class={{\n                    'is-file-picker': true,\n                    'shows-dropzone': true,\n                    'highlight-dropzone': this.isDraggingOverDropZone,\n                }}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                label={this.label}\n                leadingIcon=\"upload_to_cloud\"\n                language={this.language}\n                onChange={this.handleChipSetChange}\n                onClick={this.handleFileSelection}\n                onInteract={this.handleChipInteract}\n                onKeyDown={this.handleKeyDown}\n                onKeyUp={this.handleKeyUp}\n                required={this.required}\n                type=\"input\"\n                value={this.chipArray}\n                title={this.getTranslation('drag-and-drop-tips')}\n                onDragEnter={this.handleDragEnter}\n                onDragOver={this.preventAndStop}\n                onDragLeave={this.handleDragLeave}\n                onDrop={this.handleFileDrop}\n            />,\n        ];\n    }\n\n    private handleDragEnter = (event: DragEvent) => {\n        this.isDraggingOverDropZone = true;\n        this.preventAndStop(event);\n    };\n\n    private handleDragLeave = () => {\n        this.isDraggingOverDropZone = false;\n    };\n\n    private handleFileDrop = (event: DragEvent) => {\n        this.preventAndStop(event);\n        this.isDraggingOverDropZone = false;\n        const dataTransfer = event.dataTransfer;\n        this.handleFile(dataTransfer.files[0]);\n    };\n\n    private get chipArray() {\n        if (!this.value) {\n            return [];\n        }\n\n        return [\n            {\n                ...DEFAULT_FILE_CHIP,\n                text: this.value.filename,\n                id: this.value.id,\n                icon: getFileIcon(this.value),\n                iconFillColor: getFileColor(this.value),\n                iconBackgroundColor: getFileBackgroundColor(this.value),\n                href: this.value.href,\n                iconTitle: getFileExtensionTitle(this.value),\n            },\n        ];\n    }\n\n    private handleKeyDown(event: KeyboardEvent) {\n        if (\n            event.code === 'Tab' ||\n            event.code === 'Backspace' ||\n            event.code === 'Enter'\n        ) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    private handleKeyUp(event: KeyboardEvent) {\n        if (event.code === 'Enter' && !this.value) {\n            this.fileInput.click();\n        }\n    }\n\n    private handleFileSelection(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        if (!this.value) {\n            this.fileInput.click();\n        }\n    }\n\n    private handleFileChange(event: Event) {\n        if (this.fileInput.files.length > 0) {\n            event.stopPropagation();\n            this.handleFile(this.fileInput.files[0]);\n        }\n    }\n\n    private handleFile(file) {\n        const limeFile: FileInfo = {\n            id: createRandomString(),\n            filename: file.name,\n            contentType: file.type,\n            size: file.size,\n            fileContent: file,\n        };\n        this.change.emit(limeFile);\n        this.chipSet.blur();\n        this.mdcTextField.valid = true;\n    }\n\n    private handleChipSetChange(event: CustomEvent) {\n        event.stopPropagation();\n        const file = !event.detail.length ? event.detail[0] : null;\n        this.chipSet.blur();\n        if (!file) {\n            this.fileInput.value = '';\n            this.change.emit(file);\n            if (this.required) {\n                this.mdcTextField.valid = false;\n            }\n        }\n    }\n\n    private handleChipInteract(event: CustomEvent<Chip>) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.interact.emit(event.detail.id);\n    }\n\n    private preventAndStop(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    private getTranslation(key: string) {\n        return translate.get(`file.${key}`, this.language);\n    }\n}\n"},{"filename":"file.scss","type":"scss","source":"/**\n * @prop --icon-background-color: Background color of the icon. Defaults to `--contrast-400`.\n * @prop --icon-color: Color of the icon. Defaults to `--contrast-1100`.\n */\n\n:host {\n    --icon-background-color: rgb(var(--contrast-400));\n    --icon-color: rgb(var(--contrast-1100));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/flatpickr-adapter","filePath":"./src/components/date-picker/flatpickr-adapter/flatpickr-adapter.tsx","fileName":"flatpickr-adapter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/flatpickr-adapter/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/flatpickr-adapter/usage","tag":"limel-flatpickr-adapter","overview":"This component is internal and only supposed to be used by\nthe limel-date-picker. This component is needed in order for us\nto render the flatpickr calendar in a portal.","usage":{},"docs":"This component is internal and only supposed to be used by\nthe limel-date-picker. This component is needed in order for us\nto render the flatpickr calendar in a portal.","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-date-picker"],"dependencies":[],"dependencyGraph":{"limel-date-picker":["limel-flatpickr-adapter"]},"props":[{"name":"format","type":"string","mutable":false,"attr":"format","reflectToAttr":false,"docs":"Format to display the selected date in.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"formatter","type":"(date: Date) => string","mutable":false,"reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"(date: Date) => string"}],"optional":false,"required":true},{"name":"inputElement","type":"HTMLElement","mutable":false,"reflectToAttr":false,"docs":"The native input element to use with flatpickr.","docsTags":[],"values":[{"type":"HTMLElement"}],"optional":false,"required":false},{"name":"isOpen","type":"boolean","mutable":false,"attr":"is-open","reflectToAttr":false,"docs":"Set to `true` if the calendar should be open.","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"type","type":"\"date\" | \"datetime\" | \"month\" | \"quarter\" | \"time\" | \"week\" | \"year\"","mutable":false,"attr":"type","reflectToAttr":false,"docs":"Type of date picker.","docsTags":[],"default":"'datetime'","values":[{"value":"date","type":"string"},{"value":"datetime","type":"string"},{"value":"month","type":"string"},{"value":"quarter","type":"string"},{"value":"time","type":"string"},{"value":"week","type":"string"},{"value":"year","type":"string"}],"optional":false,"required":false},{"name":"value","type":"Date","mutable":false,"reflectToAttr":false,"docs":"The value of the field.","docsTags":[],"values":[{"type":"Date"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"Date","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the date picker value is changed.","docsTags":[]}],"styles":[{"name":"--today-label","annotation":"prop","docs":"Tooltip label for \"today\"."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"flatpickr-adapter.tsx","type":"tsx","source":"import { Component, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport { DateType, Languages } from '@limetech/lime-elements';\nimport translate from '../../../global/translations';\nimport { DatePicker as DateOnlyPicker } from '../pickers/DatePicker';\nimport { DatetimePicker } from '../pickers/DatetimePicker';\nimport { MonthPicker } from '../pickers/MonthPicker';\nimport { Picker } from '../pickers/Picker';\nimport { QuarterPicker } from '../pickers/QuarterPicker';\nimport { TimePicker } from '../pickers/TimePicker';\nimport { WeekPicker } from '../pickers/WeekPicker';\nimport { YearPicker } from '../pickers/YearPicker';\n\n/**\n * This component is internal and only supposed to be used by\n * the limel-date-picker. This component is needed in order for us\n * to render the flatpickr calendar in a portal.\n *\n * @private\n */\n@Component({\n    tag: 'limel-flatpickr-adapter',\n    shadow: true,\n    styleUrl: 'flatpickr-adapter.scss',\n})\nexport class DatePickerCalendar {\n    /**\n     * The value of the field.\n     */\n    @Prop()\n    public value: Date;\n\n    /**\n     * Type of date picker.\n     */\n    @Prop()\n    public type: DateType = 'datetime';\n\n    /**\n     * Format to display the selected date in.\n     */\n    @Prop()\n    public format: string;\n\n    /**\n     * Set to `true` if the calendar should be open.\n     */\n    @Prop()\n    public isOpen: boolean;\n\n    /**\n     * The native input element to use with flatpickr.\n     */\n    @Prop()\n    public inputElement: HTMLElement;\n\n    /**\n     * Defines the localisation for translations and date formatting.\n     * Property `format` customizes the localized date format.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    @Prop()\n    public formatter!: (date: Date) => string;\n\n    /**\n     * Emitted when the date picker value is changed.\n     */\n    @Event()\n    public change: EventEmitter<Date>;\n\n    private picker: Picker;\n    private flatPickrCreated: boolean = false;\n\n    private container: HTMLElement;\n\n    public componentWillLoad() {\n        switch (this.type) {\n            case 'date':\n                this.picker = new DateOnlyPicker(\n                    this.format,\n                    this.language,\n                    this.change\n                );\n                break;\n\n            case 'time':\n                this.picker = new TimePicker(\n                    this.format,\n                    this.language,\n                    this.change\n                );\n                break;\n\n            case 'week':\n                this.picker = new WeekPicker(\n                    this.format,\n                    this.language,\n                    this.change\n                );\n                break;\n\n            case 'month':\n                this.picker = new MonthPicker(\n                    this.format,\n                    this.language,\n                    this.change,\n                    translate\n                );\n                break;\n\n            case 'quarter':\n                this.picker = new QuarterPicker(\n                    this.format,\n                    this.language,\n                    this.change,\n                    translate\n                );\n                break;\n            case 'year':\n                this.picker = new YearPicker(\n                    this.format,\n                    this.language,\n                    this.change,\n                    translate\n                );\n                break;\n\n            case 'datetime':\n            default:\n                this.picker = new DatetimePicker(\n                    this.format,\n                    this.language,\n                    this.change\n                );\n                break;\n        }\n\n        this.picker.formatDate = this.formatter;\n    }\n\n    public componentDidUpdate() {\n        if (this.flatPickrCreated) {\n            this.redrawFlatpickr();\n        } else {\n            this.createFlatpickr();\n        }\n\n        this.tryFixConfusingWidthBug();\n    }\n\n    private tryFixConfusingWidthBug() {\n        // Sometimes the datepickr renders with the width set to 1px.\n        // We've not been able to understand why but believe it has\n        // to do with the internal implementation of flatpickr.\n        // The fix below is an ugly fix that seems to solve this\n        // issue for us.\n        const ONE_SECOND = 1000;\n        const TEN_PIXELS = 10;\n        if (this.isOpen) {\n            setTimeout(() => {\n                if (this.isOpen) {\n                    const flatpickrElement = this.container.querySelector(\n                        'div.flatpickr-calendar'\n                    );\n                    const { width } = flatpickrElement.getBoundingClientRect();\n                    if (width < TEN_PIXELS) {\n                        this.destroyFlatpickr();\n                        this.createFlatpickr();\n                    }\n                }\n            }, ONE_SECOND);\n        }\n    }\n\n    private createFlatpickr() {\n        if (!this.inputElement) {\n            // The input element is programatically set on this element\n            // after its been rendered.\n            return;\n        }\n\n        this.picker.init(this.inputElement, this.container, this.value);\n        this.flatPickrCreated = true;\n    }\n\n    private redrawFlatpickr() {\n        this.picker.redraw();\n    }\n\n    private destroyFlatpickr() {\n        this.picker.destroy();\n    }\n\n    public disconnectedCallback() {\n        this.picker.destroy();\n    }\n\n    public render() {\n        return (\n            <div\n                class=\"container\"\n                ref={(el) => (this.container = el)}\n                style={{\n                    '--today-label': `\"${translate.get('date-picker.today')}\"`,\n                }}\n            />\n        );\n    }\n}\n"},{"filename":"flatpickr-adapter.scss","type":"scss","source":"@use '../../../style/internal/lime-theme';\n@use '../../../style/functions';\n@use '../../../style/mixins';\n\n@use '@material/theme/mdc-theme';\n@import '_flatpickr.scss';\n\n/**\n * @prop --today-label: Tooltip label for \"today\".\n */\n\n:host(limel-flatpickr-adapter) {\n    --calendar-text-color: rgb(var(--contrast-1400));\n    color: --calendar-text-color;\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Roboto';\n    }\n}\n\nsvg {\n    fill: var(--calendar-text-color) !important;\n}\n\n.flatpickr-calendar {\n    isolation: isolate;\n    border-radius: 0.25rem;\n    background-color: var(--lime-elevated-surface-background-color);\n    box-shadow: var(--shadow-depth-16);\n}\n\n.flatpickr-weekwrapper {\n    .flatpickr-day,\n    .flatpickr-weekday {\n        color: rgb(var(--contrast-700));\n    }\n}\n\n.flatpickr-weeks {\n    padding: 0 0.5rem;\n    box-shadow: 1px 0 0 rgb(var(--contrast-300));\n}\n\n.flatpickr-weekdaycontainer,\n.dayContainer {\n    flex-grow: 1;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n}\n\n.flatpickr-day {\n    .dayContainer & {\n        @include mixins.is-flat-clickable();\n    }\n    position: relative;\n    cursor: pointer;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: var(--calendar-text-color);\n\n    border: 1px solid transparent;\n    border-radius: 2.5rem;\n    width: 2.5rem;\n    height: 2.5rem;\n    line-height: 2.5rem;\n\n    &:hover {\n        z-index: 1;\n    }\n\n    &.prevMonthDay,\n    &.nextMonthDay {\n        color: rgb(var(--contrast-800));\n\n        &.inRange {\n            opacity: 0.6;\n        }\n    }\n\n    &.selected,\n    &.startRange,\n    &.endRange,\n    &.inRange,\n    &.selected:hover {\n        border-color: var(--mdc-theme-primary);\n        color: var(--mdc-theme-on-primary);\n        background: var(--mdc-theme-primary);\n    }\n\n    &.today {\n        border-color: var(--mdc-theme-on-primary);\n        box-shadow: 0 0 0 0.125rem var(--mdc-theme-primary);\n\n        &:hover {\n            &:not(.selected) {\n                background-color: transparent;\n                color: var(--mdc-theme-primary);\n            }\n            &:before {\n                top: -60%;\n                opacity: 1;\n            }\n        }\n\n        &:before {\n            transition: opacity 0.2s ease, top 0.2s ease;\n\n            pointer-events: none;\n            content: var(--today-label);\n            display: inline-block;\n            position: absolute;\n            inset: auto;\n            top: -50%;\n\n            height: 1.25rem;\n            line-height: 1.25rem;\n            font-size: 0.75rem;\n\n            color: rgb(var(--contrast-1100));\n            border-radius: 1rem;\n            padding: 0.125rem 0.5rem;\n\n            background-color: rgb(var(--contrast-100), 0.9);\n            box-shadow: var(--shadow-depth-16);\n            opacity: 0;\n        }\n    }\n\n    &.inRange {\n        transition-duration: 0s;\n    }\n}\n\n.flatpickr-time {\n    border-top: 1px solid rgb(var(--contrast-400));\n\n    input {\n        color: var(--mdc-theme-on-surface);\n    }\n\n    input,\n    .flatpickr-am-pm {\n        &:hover,\n        &:focus {\n            background: rgb(var(--contrast-100));\n        }\n    }\n}\n\n.flatpickr-weekdays {\n    background-color: rgb(var(--contrast-300));\n}\n\n// top bar of month view\n.flatpickr-months {\n    justify-items: center;\n    padding: 0.125rem;\n    color: var(--calendar-text-color) !important;\n    border-bottom: 1px solid rgb(var(--contrast-300));\n\n    svg {\n        height: 0.75rem;\n        width: 0.75rem;\n    }\n\n    .flatpickr-month {\n        display: flex;\n        align-items: stretch;\n    }\n\n    .flatpickr-current-month {\n        display: flex;\n        justify-content: space-evenly;\n        align-items: stretch;\n        gap: 1rem;\n        inset: 0;\n\n        height: unset;\n        width: 100%;\n\n        padding: 0.25rem;\n\n        .numInputWrapper {\n            width: 4rem;\n            border-radius: 0.25rem;\n\n            &:hover {\n                background-color: rgb(var(--contrast-300));\n            }\n        }\n\n        input {\n            height: 100%;\n        }\n    }\n\n    .flatpickr-prev-month,\n    .flatpickr-next-month {\n        position: relative;\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        width: 2rem;\n    }\n}\n\n.flatpickr-monthDropdown-months,\n.flatpickr-prev-month,\n.flatpickr-next-month,\n.arrowUp,\n.arrowDown {\n    @include mixins.is-flat-clickable;\n    border-radius: 0.25rem;\n}\n\n.arrowUp {\n    border-radius: 0 0.25rem 0 0;\n}\n\n.arrowDown {\n    border-radius: 0 0 0.25rem 0;\n}\n\n.numInputWrapper {\n    border-radius: 0.25rem;\n\n    span {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 1rem;\n\n        &.arrowUp:after {\n            border-bottom-color: rgb(var(--contrast-1400));\n        }\n\n        &.arrowDown:after {\n            border-top-color: rgb(var(--contrast-1400));\n        }\n    }\n}\n\n// ***************************\n\n.datepicker-months-container,\n.datepicker-quarters-container,\n.datepicker-years-container {\n    display: grid;\n    gap: 0.5rem;\n    padding: 0.5rem;\n}\n\n.datepicker-months-container {\n    grid-template-columns: repeat(6, 1fr);\n}\n.datepicker-quarters-container {\n    grid-template-columns: repeat(4, 1fr);\n}\n.datepicker-years-container {\n    grid-template-columns: repeat(5, 1fr);\n}\n\n.datepicker-month,\n.datepicker-quarter,\n.datepicker-year {\n    @include mixins.is-flat-clickable;\n    cursor: pointer;\n    min-width: 0;\n    text-align: center;\n\n    &.selected {\n        color: var(--mdc-theme-on-primary);\n        background: var(--mdc-theme-primary);\n    }\n}\n\n.datepicker-month-heading,\n.datepicker-quarter-heading,\n.datepicker-year-heading {\n    align-self: center;\n}\n\n.datepicker-month {\n    padding: 0.125rem 0.5rem;\n    border-radius: 2rem;\n}\n.datepicker-quarter {\n    padding: 0.75rem 0;\n    border-radius: 1rem;\n}\n.datepicker-year {\n    padding: 0.125rem 0.25rem;\n    border-radius: 2rem;\n}\n\n.datepicker-quarter {\n    font-weight: bold;\n    font-size: 1rem;\n}\n\n.datepicker-month-in-quarter {\n    opacity: 0.7;\n    display: block;\n    font-size: 0.75rem;\n    font-weight: normal;\n\n    &:first-of-type {\n        margin-top: 0.5rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/flex-container","filePath":"./src/components/flex-container/flex-container.tsx","fileName":"flex-container.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/flex-container/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/flex-container/usage","tag":"limel-flex-container","overview":"This component is deprecated and will be removed in a future version of\nLime Elements. Please use CSS for your flexible container needs 🙂\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox","usage":{},"docs":"This component is deprecated and will be removed in a future version of\nLime Elements. Please use CSS for your flexible container needs 🙂\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox","docsTags":[{"name":"deprecated"},{"name":"private"},{"name":"slot","text":"- Container content"}],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"deprecation":"","props":[{"name":"align","type":"\"center\" | \"end\" | \"start\" | \"stretch\"","mutable":false,"attr":"align","reflectToAttr":true,"docs":"Specify how items are aligned along the cross axis","docsTags":[],"default":"'center'","values":[{"value":"center","type":"string"},{"value":"end","type":"string"},{"value":"start","type":"string"},{"value":"stretch","type":"string"}],"optional":false,"required":false},{"name":"direction","type":"\"horizontal\" | \"vertical\"","mutable":false,"attr":"direction","reflectToAttr":true,"docs":"Direction of the main axis","docsTags":[],"default":"'horizontal'","values":[{"value":"horizontal","type":"string"},{"value":"vertical","type":"string"}],"optional":false,"required":false},{"name":"justify","type":"\"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\" | \"start\"","mutable":false,"attr":"justify","reflectToAttr":true,"docs":"Specify how items are aligned along the main axis","docsTags":[],"default":"'space-between'","values":[{"value":"center","type":"string"},{"value":"end","type":"string"},{"value":"space-around","type":"string"},{"value":"space-between","type":"string"},{"value":"space-evenly","type":"string"},{"value":"start","type":"string"}],"optional":false,"required":false},{"name":"reverse","type":"boolean","mutable":false,"attr":"reverse","reflectToAttr":true,"docs":"Reverse the order of the items","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[{"name":"","docs":"Container content"}],"parts":[],"listeners":[],"sources":[{"filename":"flex-container.tsx","type":"tsx","source":"import {\n    FlexContainerAlign,\n    FlexContainerDirection,\n    FlexContainerJustify,\n} from '@limetech/lime-elements';\nimport { Component, h, Prop } from '@stencil/core';\n\n/**\n * This component is deprecated and will be removed in a future version of\n * Lime Elements. Please use CSS for your flexible container needs 🙂\n * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox\n *\n * @deprecated\n * @private\n * @slot - Container content\n */\n@Component({\n    tag: 'limel-flex-container',\n    shadow: true,\n    styleUrl: 'flex-container.scss',\n})\nexport class FlexContainer {\n    /**\n     * Direction of the main axis\n     */\n    @Prop({ reflect: true })\n    public direction: FlexContainerDirection = 'horizontal';\n\n    /**\n     * Specify how items are aligned along the main axis\n     */\n    @Prop({ reflect: true })\n    public justify: FlexContainerJustify = 'space-between';\n\n    /**\n     * Specify how items are aligned along the cross axis\n     */\n    @Prop({ reflect: true })\n    public align: FlexContainerAlign = 'center';\n\n    /**\n     * Reverse the order of the items\n     */\n    @Prop({ reflect: true })\n    public reverse = false;\n\n    public componentWillLoad() {\n        /* eslint-disable-next-line no-console */\n        console.warn(\n            'limel-flex-container is deprecated, please use CSS instead: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox'\n        );\n    }\n\n    public render() {\n        return <slot />;\n    }\n}\n"},{"filename":"flex-container.scss","type":"scss","source":":host(limel-flex-container) {\n    display: flex;\n}\n:host(limel-flex-container[hidden]) {\n    display: none;\n}\n:host(limel-flex-container[direction='horizontal']) {\n    flex-direction: row;\n}\n:host(limel-flex-container[direction='horizontal'][reverse]) {\n    flex-direction: row-reverse;\n}\n:host(limel-flex-container[direction='vertical']) {\n    flex-direction: column;\n}\n:host(limel-flex-container[direction='vertical'][reverse]) {\n    flex-direction: column-reverse;\n}\n:host(limel-flex-container[align='start']) {\n    align-items: flex-start;\n}\n:host(limel-flex-container[align='end']) {\n    align-items: flex-end;\n}\n:host(limel-flex-container[align='center']) {\n    align-items: center;\n}\n:host(limel-flex-container[align='stretch']) {\n    align-items: stretch;\n}\n:host(limel-flex-container[justify='start']) {\n    justify-content: flex-start;\n}\n:host(limel-flex-container[justify='end']) {\n    justify-content: flex-end;\n}\n:host(limel-flex-container[justify='center']) {\n    justify-content: center;\n}\n:host(limel-flex-container[justify='space-between']) {\n    justify-content: space-between;\n}\n:host(limel-flex-container[justify='space-around']) {\n    justify-content: space-around;\n}\n:host(limel-flex-container[justify='space-evenly']) {\n    justify-content: space-evenly;\n}\n\n// Since consumers often copy/paste from examples of `limel-dialog` from the\n// documentations, they often put their buttons in a `limel-flex-container`\n// which is used in the footer slot of those examples with buttons.\n// So to prevent unwanted layout problems of buttons having no distance, we use\n// below code to target `limel-flex-container`s in those slots.\n:host(limel-flex-container[slot='button']) {\n    gap: 0.5rem; // Makes sure buttons get some default distance\n    width: 100%;\n    justify-content: flex-end;\n}\n:host(limel-flex-container[slot='button'][direction='horizontal'][reverse]) {\n    justify-content: flex-start;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form","filePath":"./src/components/form/form.tsx","fileName":"form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/usage","tag":"limel-form","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-form"},{"name":"exampleComponent","text":"limel-example-nested-form"},{"name":"exampleComponent","text":"limel-example-list-form"},{"name":"exampleComponent","text":"limel-example-dynamic-form"},{"name":"exampleComponent","text":"limel-example-custom-component-form"},{"name":"exampleComponent","text":"limel-example-props-factory-form"},{"name":"exampleComponent","text":"limel-example-form-layout"},{"name":"exampleComponent","text":"limel-example-form-span-fields"},{"name":"exampleComponent","text":"limel-example-custom-error-message"},{"name":"exampleComponent","text":"limel-example-server-errors"},{"name":"exampleComponent","text":"limel-example-form-row-layout"}],"encapsulation":"shadow","dependents":["limel-example-button-composite","limel-example-button-group-composite","limel-example-chip-set-composite","limel-example-custom-component-form","limel-example-custom-error-message","limel-example-date-picker-composite","limel-example-dynamic-form","limel-example-file-composite","limel-example-form","limel-example-form-layout","limel-example-form-row-layout","limel-example-form-span-fields","limel-example-list-form","limel-example-menu-composite","limel-example-nested-form","limel-example-picker-composite","limel-example-props-factory-form","limel-example-server-errors","limel-example-slider-composite","limel-example-tooltip-composite"],"dependencies":[],"dependencyGraph":{"limel-example-button-composite":["limel-form"],"limel-example-button-group-composite":["limel-form"],"limel-example-chip-set-composite":["limel-form"],"limel-example-custom-component-form":["limel-form"],"limel-example-custom-error-message":["limel-form"],"limel-example-date-picker-composite":["limel-form"],"limel-example-dynamic-form":["limel-form"],"limel-example-file-composite":["limel-form"],"limel-example-form":["limel-form"],"limel-example-form-layout":["limel-form"],"limel-example-form-row-layout":["limel-form"],"limel-example-form-span-fields":["limel-form"],"limel-example-list-form":["limel-form"],"limel-example-menu-composite":["limel-form"],"limel-example-nested-form":["limel-form"],"limel-example-picker-composite":["limel-form"],"limel-example-props-factory-form":["limel-form"],"limel-example-server-errors":["limel-form"],"limel-example-slider-composite":["limel-form"],"limel-example-tooltip-composite":["limel-form"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"Set to `true` to disable the whole form.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"errors","type":"{ [key: string]: ValidationError | string[]; }","mutable":false,"reflectToAttr":false,"docs":"Extra errors to display in the form. Typical use case is asynchronous\nerrors generated server side.","docsTags":[],"values":[{"type":"{ [key: string]: ValidationError"},{"type":"string[]; }"}],"optional":false,"required":false},{"name":"propsFactory","type":"(schema: Record<string, any>) => Record<string, any>","mutable":false,"reflectToAttr":false,"docs":"Factory for creating properties for custom form components\n\nWhen using custom components in the form some properties might have to be\nset dynamically. If this factory is set, it will be called with the\ncurrent schema for the field for each custom component in the form. The\nfactory must return an object where each key is the name of the property\nthat should be set, along with its value.","docsTags":[],"values":[{"type":"(schema: Record<string, any>) => Record<string, any>"}],"optional":true,"required":false},{"name":"schema","type":"{ [key: string]: any; id?: string; }","mutable":false,"reflectToAttr":false,"docs":"The schema used to render the form","docsTags":[],"default":"{}","values":[{"type":"{ [key: string]: any; id?: string; }"}],"optional":false,"required":false},{"name":"transformErrors","type":"(errors: FormError[]) => FormError[]","mutable":false,"reflectToAttr":false,"docs":"Custom function to customize the default error messages","docsTags":[],"values":[{"type":"(errors: FormError[]) => FormError[]"}],"optional":true,"required":false},{"name":"value","type":"object","mutable":false,"reflectToAttr":false,"docs":"Value of the form","docsTags":[],"values":[{"type":"object"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"object","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a change is made within the form","docsTags":[]},{"event":"validate","detail":"ValidationStatus","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the validity of the form changes, or when\na change is made to an invalid form","docsTags":[]}],"styles":[{"name":"--form-background-color-of-even-rows","annotation":"prop","docs":"Background of even rows in the form, when layout type is `row`. Defaults to `transparent`."},{"name":"--form-background-color-of-odd-rows","annotation":"prop","docs":"Background of odd rows in the form, when layout type is `row`. Defaults to `--contrast-200`."},{"name":"--form-body-padding","annotation":"prop","docs":"space around content of the form"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"form.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport React from 'react';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport JSONSchemaForm, { AjvError } from '@rjsf/core';\nimport retargetEvents from 'react-shadow-dom-retarget-events';\nimport { FormError, ValidationError, ValidationStatus } from './form.types';\nimport {\n    ArrayFieldTemplate,\n    FieldTemplate,\n    ObjectFieldTemplate,\n} from './templates';\nimport { SchemaField as CustomSchemaField } from './fields/schema-field';\nimport { ArrayField as CustomArrayField } from './fields/array-field';\nimport { ObjectField as CustomObjectField } from './fields/object-field';\nimport { widgets } from './widgets';\nimport { createRandomString } from '../../util/random-string';\nimport Ajv, { RequiredParams } from 'ajv';\nimport { isInteger } from './validators';\nimport { mapValues } from 'lodash-es';\n\n/**\n * @exampleComponent limel-example-form\n * @exampleComponent limel-example-nested-form\n * @exampleComponent limel-example-list-form\n * @exampleComponent limel-example-dynamic-form\n * @exampleComponent limel-example-custom-component-form\n * @exampleComponent limel-example-props-factory-form\n * @exampleComponent limel-example-form-layout\n * @exampleComponent limel-example-form-span-fields\n * @exampleComponent limel-example-custom-error-message\n * @exampleComponent limel-example-server-errors\n * @exampleComponent limel-example-form-row-layout\n */\n@Component({\n    tag: 'limel-form',\n    shadow: true,\n    styleUrl: 'form.scss',\n})\nexport class Form {\n    /**\n     * The schema used to render the form\n     */\n    @Prop()\n    public schema: {\n        id?: string;\n        [key: string]: any;\n    } = {};\n\n    /**\n     * Value of the form\n     */\n    @Prop()\n    public value: object;\n\n    /**\n     * Set to `true` to disable the whole form.\n     */\n    @Prop()\n    public disabled = false;\n\n    /**\n     * Factory for creating properties for custom form components\n     *\n     * When using custom components in the form some properties might have to be\n     * set dynamically. If this factory is set, it will be called with the\n     * current schema for the field for each custom component in the form. The\n     * factory must return an object where each key is the name of the property\n     * that should be set, along with its value.\n     */\n    @Prop()\n    public propsFactory?: (schema: Record<string, any>) => Record<string, any>;\n\n    /**\n     * Custom function to customize the default error messages\n     */\n    @Prop()\n    public transformErrors?: (errors: FormError[]) => FormError[];\n\n    /**\n     * Extra errors to display in the form. Typical use case is asynchronous\n     * errors generated server side.\n     */\n    @Prop()\n    public errors: ValidationError;\n\n    /**\n     * Emitted when a change is made within the form\n     */\n    @Event()\n    public change: EventEmitter<object>;\n\n    /**\n     * Emitted when the validity of the form changes, or when\n     * a change is made to an invalid form\n     */\n    @Event()\n    public validate: EventEmitter<ValidationStatus>;\n\n    @Element()\n    private host: HTMLLimelFormElement;\n\n    private isValid = true;\n    private modifiedSchema: object;\n    private validator: Ajv.ValidateFunction;\n\n    public constructor() {\n        this.handleChange = this.handleChange.bind(this);\n        this.getCustomErrorMessages = this.getCustomErrorMessages.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentWillLoad() {\n        this.setSchemaId();\n        this.createValidator();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        if (!this.host.shadowRoot.querySelector('.root')) {\n            return;\n        }\n\n        this.reactRender();\n        retargetEvents(this.host.shadowRoot);\n        this.validateForm(this.value);\n    }\n\n    public componentDidUpdate() {\n        this.reactRender();\n        this.validateForm(this.value);\n    }\n\n    public disconnectedCallback() {\n        const rootElement = this.host.shadowRoot.querySelector('.root');\n        if (rootElement) {\n            unmountComponentAtNode(rootElement);\n        }\n    }\n\n    public render() {\n        return <div class=\"root\" />;\n    }\n\n    private reactRender() {\n        const rootElement = this.host.shadowRoot.querySelector('.root');\n\n        render(\n            React.createElement(\n                JSONSchemaForm,\n                {\n                    schema: this.modifiedSchema,\n                    formData: this.value,\n                    onChange: this.handleChange,\n                    widgets: widgets,\n                    liveValidate: true,\n                    showErrorList: false,\n                    extraErrors: this.getExtraErrors(this.errors),\n                    FieldTemplate: FieldTemplate,\n                    ArrayFieldTemplate: ArrayFieldTemplate as any,\n                    ObjectFieldTemplate: ObjectFieldTemplate,\n                    disabled: this.disabled,\n                    transformErrors: this.getCustomErrorMessages,\n                    formContext: {\n                        schema: this.modifiedSchema,\n                        rootValue: this.value,\n                        propsFactory: this.propsFactory,\n                    },\n                    fields: {\n                        SchemaField: CustomSchemaField as any,\n                        ArrayField: CustomArrayField as any,\n                        ObjectField: CustomObjectField as any,\n                    },\n                },\n                []\n            ),\n            rootElement\n        );\n    }\n\n    private handleChange(event: any) {\n        this.change.emit(event.formData);\n    }\n\n    private validateForm(value: object) {\n        const isValid = this.validator(value) === true;\n        const errors: FormError[] = this.getValidationErrors();\n        const status: ValidationStatus = {\n            valid: isValid,\n            errors: errors,\n        };\n\n        if (this.isValid !== status.valid || !status.valid) {\n            this.validate.emit(status);\n        }\n\n        this.isValid = status.valid;\n    }\n\n    @Watch('schema')\n    public setSchema() {\n        this.setSchemaId();\n        this.createValidator();\n    }\n\n    private setSchemaId() {\n        // Due to a bug in react-jsonschema-form, validation will stop working if the schema is updated.\n        // A workaround at the moment is to always give it a unique ID\n        // https://github.com/rjsf-team/react-jsonschema-form/issues/1563\n        const id = `${this.schema.$id}-${createRandomString()}`;\n        this.modifiedSchema = {\n            ...this.schema,\n            id: id,\n            $id: id,\n        };\n    }\n\n    private createValidator() {\n        const validator = new Ajv({\n            unknownFormats: 'ignore',\n            allErrors: true,\n            multipleOfPrecision: 2,\n        }).addFormat('integer', isInteger);\n        this.validator = validator.compile(this.schema);\n    }\n\n    private getValidationErrors(): FormError[] {\n        const errors = this.validator.errors || [];\n\n        return errors.map((error: Ajv.ErrorObject): FormError => {\n            let property = error.dataPath;\n            if (error.keyword === 'required') {\n                property = (error.params as RequiredParams).missingProperty;\n            }\n\n            return {\n                name: error.keyword,\n                property: property,\n                message: error.message,\n                schemaPath: error.schemaPath,\n            };\n        });\n    }\n\n    private getExtraErrors(errors: ValidationError): ExtraError | undefined {\n        if (!errors) {\n            return;\n        }\n\n        return mapValues(errors, (error) => {\n            if (Array.isArray(error)) {\n                return { __errors: error };\n            }\n\n            return this.getExtraErrors(error);\n        });\n    }\n\n    private getCustomErrorMessages(originalErrors: AjvError[]): AjvError[] {\n        if (!this.transformErrors) {\n            return originalErrors;\n        }\n\n        const errors: FormError[] = originalErrors.map((error: AjvError) => {\n            return {\n                name: error.name,\n                params: error.params,\n                property: error.property,\n                message: error.message,\n                // For some reason 'schemaPath' is missing from the AjvError type definition:\n                // https://github.com/rjsf-team/react-jsonschema-form/issues/2140\n                // eslint-disable-next-line @typescript-eslint/dot-notation\n                schemaPath: error['schemaPath'],\n            };\n        });\n\n        // Use `.call({}, …)` here to bind `this` to an empty object to prevent\n        // the consumer submitted `transformErrors` from getting access to our\n        // component's internals. /Ads\n        return this.transformErrors\n            .call({}, errors)\n            .map((transformedError: FormError) => {\n                const originalError = originalErrors.find((error: AjvError) => {\n                    return transformedError.property === error.property;\n                });\n\n                return {\n                    ...originalError,\n                    message: transformedError.message,\n                };\n            });\n    }\n}\n\ninterface ExtraError {\n    [key: string]:\n        | ExtraError\n        | {\n              __errors: string[];\n          };\n}\n"},{"filename":"form.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/internal/lime-theme';\n@use '../../style/internal/lime-typography';\n\n/**\n * @prop --form-body-padding: space around content of the form\n * @prop --form-background-color-of-even-rows: Background of even rows in the form, when layout type is `row`. Defaults to `transparent`.\n * @prop --form-background-color-of-odd-rows:Background of odd rows in the form, when layout type is `row`. Defaults to `--contrast-200`.\n */\n\n@include lime-typography.core-styles;\n\n.limel-form-array-item--simple {\n    display: flex;\n    align-items: center;\n    margin-right: functions.pxToRem(10);\n\n    *:first-child {\n        flex-grow: 1;\n    }\n}\n\n.limel-form-array-item--object {\n    margin-bottom: 0.25rem;\n}\n\n.limel-form-layout--default {\n    --gap: 1rem;\n    display: grid;\n    gap: var(--gap);\n    padding: var(--form-body-padding, functions.pxToRem(16));\n}\n\n.limel-form-layout--grid {\n    --gap: 1rem;\n    --min-height-of-one-row: 4.71rem;\n    display: grid;\n    gap: var(--gap);\n    padding: var(--form-body-padding, functions.pxToRem(16));\n\n    // Using `minmax(0, 1fr)` below, instead of just `1fr` ensures that\n    // components that are wider than their column don't make the column grow\n    // wider and squash the other columns. /Ads\n    grid-template-columns: repeat(var(--number-of-columns), minmax(0, 1fr));\n\n    &.auto-reorder-to-avoid-empty-cells {\n        grid-auto-flow: dense;\n    }\n\n    &.layout-1-columns {\n        .limel-form-layout-colspan--1,\n        .limel-form-layout-colspan--2,\n        .limel-form-layout-colspan--3,\n        .limel-form-layout-colspan--4,\n        .limel-form-layout-colspan--5 {\n            grid-column: span 1;\n        }\n    }\n\n    &.layout-2-columns {\n        .limel-form-layout-colspan--1 {\n            grid-column: span 1;\n        }\n        .limel-form-layout-colspan--2,\n        .limel-form-layout-colspan--3,\n        .limel-form-layout-colspan--4,\n        .limel-form-layout-colspan--5 {\n            grid-column: span 2;\n        }\n    }\n\n    &.layout-3-columns {\n        .limel-form-layout-colspan--1 {\n            grid-column: span 1;\n        }\n        .limel-form-layout-colspan--2 {\n            grid-column: span 2;\n        }\n        .limel-form-layout-colspan--3,\n        .limel-form-layout-colspan--4,\n        .limel-form-layout-colspan--5 {\n            grid-column: span 3;\n        }\n    }\n\n    &.layout-4-columns {\n        .limel-form-layout-colspan--1 {\n            grid-column: span 1;\n        }\n        .limel-form-layout-colspan--2 {\n            grid-column: span 2;\n        }\n        .limel-form-layout-colspan--3 {\n            grid-column: span 3;\n        }\n        .limel-form-layout-colspan--4,\n        .limel-form-layout-colspan--5 {\n            grid-column: span 4;\n        }\n    }\n\n    &.layout-5-columns {\n        .limel-form-layout-colspan--1 {\n            grid-column: span 1;\n        }\n        .limel-form-layout-colspan--2 {\n            grid-column: span 2;\n        }\n        .limel-form-layout-colspan--3 {\n            grid-column: span 3;\n        }\n        .limel-form-layout-colspan--4 {\n            grid-column: span 4;\n        }\n        .limel-form-layout-colspan--5 {\n            grid-column: span 5;\n        }\n    }\n\n    .limel-form-layout-colspan--all {\n        grid-column: 1/-1;\n    }\n}\n\n.limel-form-layout--grid {\n    limel-checkbox,\n    limel-switch {\n        // This is because we have to align these items to top and\n        // make sure they align correctly even in one-columned layouts\n        min-height: calc(\n            var(--min-height-of-one-row) - #{shared_input-select-picker.$height-of-mdc-helper-text-block}\n        );\n    }\n    limel-checkbox {\n        margin-top: functions.pxToRem(8);\n        display: block;\n    }\n    limel-switch {\n        margin-left: functions.pxToRem(8);\n    }\n}\n\n.form-error {\n    color: var(--mdc-theme-error, #b00020);\n    font-size: 0.6875rem;\n    line-height: 1.5;\n    visibility: inherit;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    padding-top: 0.25rem;\n}\n\n.button-add-new {\n    margin-top: 0.5rem;\n    width: 100%;\n}\n\n.mdc-typography--headline1 {\n    position: relative;\n}\n\n.form-group {\n    .mdc-typography--headline1,\n    .mdc-typography--body1 {\n        color: rgb(var(--contrast-1100));\n    }\n\n    .mdc-typography--headline1 {\n        --mdc-typography-headline1-font-size: 2rem;\n        --mdc-typography-headline1-line-height: 2.25rem;\n        --mdc-typography-headline1-letter-spacing: -0.0625rem;\n        --mdc-typography-headline1-font-weight: 400;\n        margin-top: 1.5rem;\n        margin-bottom: 0.5rem;\n    }\n\n    .form-group {\n        .mdc-typography--headline1,\n        .mdc-typography--body1 {\n            color: rgb(var(--contrast-1200));\n        }\n\n        .mdc-typography--headline1 {\n            --mdc-typography-headline1-font-size: 1.625rem;\n            --mdc-typography-headline1-line-height: 1.25rem;\n            --mdc-typography-headline1-font-weight: 300;\n            margin-top: 1.25rem;\n            margin-bottom: 0.5rem;\n\n            &:before {\n                content: '';\n                display: block;\n                position: absolute;\n                top: 0;\n                bottom: 0;\n                margin: auto;\n                left: functions.pxToRem(-12);\n\n                background-color: var(--mdc-theme-primary);\n                width: functions.pxToRem(2);\n                height: var(--mdc-typography-headline1-line-height);\n                border-radius: functions.pxToRem(2);\n\n                opacity: 0.6;\n            }\n        }\n\n        .form-group {\n            .mdc-typography--headline1,\n            .mdc-typography--body1 {\n                color: rgb(var(--contrast-1300));\n            }\n\n            .mdc-typography--headline1 {\n                --mdc-typography-headline1-font-size: 1.375rem;\n                --mdc-typography-headline1-line-height: 1.5rem;\n                --mdc-typography-headline1-font-weight: 300;\n                margin-top: 1rem;\n                margin-bottom: 0.5rem;\n\n                &:before {\n                    display: none;\n                }\n            }\n\n            .form-group {\n                .mdc-typography--headline1,\n                .mdc-typography--body1 {\n                    color: rgb(var(--contrast-1400));\n                }\n\n                .mdc-typography--headline1 {\n                    --mdc-typography-headline1-font-size: 1.25rem;\n                    --mdc-typography-headline1-line-height: 1.25rem;\n                    --mdc-typography-headline1-font-weight: 300;\n                    margin-top: 1rem;\n                    margin-bottom: 0.5rem;\n\n                    &:before {\n                        display: none;\n                    }\n                }\n            }\n        }\n    }\n}\n\n@import './row/row.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/grid","filePath":"./src/components/grid/grid.tsx","fileName":"grid.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/grid/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/grid/usage","tag":"limel-grid","overview":"The `limel-grid` component creates a grid which can be used to control the\nlayout of other components. It uses CSS [grid-template-areas](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\nto enable easy configuration of its child-elements.","usage":{},"docs":"The `limel-grid` component creates a grid which can be used to control the\nlayout of other components. It uses CSS [grid-template-areas](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\nto enable easy configuration of its child-elements.","docsTags":[{"name":"exampleComponent","text":"limel-example-grid"},{"name":"slot","text":"- Grid content"}],"encapsulation":"shadow","dependents":["limel-example-grid"],"dependencies":[],"dependencyGraph":{"limel-example-grid":["limel-grid"]},"props":[],"methods":[],"events":[],"styles":[{"name":"--lime-grid-area","annotation":"prop","docs":"Grid layout"},{"name":"--lime-grid-cell-height","annotation":"prop","docs":"Height of grid cells, defaults to `2.5rem` (40px)"},{"name":"--lime-grid-columns","annotation":"prop","docs":"Number of columns in the grid, defaults to 4"},{"name":"--lime-grid-gutter","annotation":"prop","docs":"width of the gutter between columns and rows, defaults to `1rem` (16px) - see https://material.io/design/layout/responsive-layout-grid.html#breakpoints for guidelines"}],"slots":[{"name":"","docs":"Grid content"}],"parts":[],"listeners":[],"sources":[{"filename":"grid.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * The `limel-grid` component creates a grid which can be used to control the\n * layout of other components. It uses CSS [grid-template-areas](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\n * to enable easy configuration of its child-elements.\n *\n * @exampleComponent limel-example-grid\n * @slot - Grid content\n */\n@Component({\n    tag: 'limel-grid',\n    shadow: true,\n    styleUrl: 'grid.scss',\n})\nexport class Grid {\n    public render() {\n        return <slot />;\n    }\n}\n"},{"filename":"grid.scss","type":"scss","source":"@use '../../style/functions';\n\n/**\n * @prop --lime-grid-area: Grid layout\n * @prop --lime-grid-columns: Number of columns in the grid, defaults to 4\n * @prop --lime-grid-cell-height: Height of grid cells, defaults to `2.5rem` (40px)\n * @prop --lime-grid-gutter: width of the gutter between columns and rows, defaults to `1rem` (16px) - see https://material.io/design/layout/responsive-layout-grid.html#breakpoints for guidelines\n */\n\n:host {\n    display: block;\n    position: relative;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\nslot {\n    display: grid;\n    grid-template-areas: var(--lime-grid-area, '');\n    grid-template-columns: repeat(var(--lime-grid-columns, 4), minmax(0, 1fr));\n    gap: var(--lime-grid-gutter, functions.pxToRem(16));\n    grid-auto-flow: row dense;\n    grid-auto-rows: var(--lime-grid-cell-height, functions.pxToRem(40));\n    margin: 0;\n    height: 100%;\n    width: 100%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header","filePath":"./src/components/header/header.tsx","fileName":"header.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/usage","tag":"limel-header","overview":"A header is the top most visual element in a component, page, card, or a view.\n\n## Usage\nA header is the first thing that clarifies a context for users.\nDue to their positions in the UI hierarchy, headers are the most\nprominent elements of a user interface; and because of that, they carry both\nvital information and fundamental controls for the area of the interface\nthey represent.\n\nFor example, when a header is placed on top of a card, it should quickly\nexplain the card to the user. When placed on top of a modal, it should easily\nclarify what the modal is about. When displayed on top of a fullscreen view,\nit should indicate where in the system users are, and what part of the app\nthey are looking at.\n\n\n## Layout\nThe vital information in a header is usually manifested in form of an icon,\nand a heading. A subheading also could be added to provide supplementary\ninformation. There is also a third place for displaying supplementary information\nor \"supporting text\", which will be rendered as a part of the subheading.\nAlong with this information, headers can also include actions, controls, or\nmenus.\n\n:::important\nSuch actions or menus must affect the entire section of the interface\nwhich the header is representing. For example, a _Delete_ button on a card\nheader must delete that entire card and its respective contents all together,\nnot for example a selected item which is visible in the content of that card.\n:::\n\n\n:::warning\nDo not user background color on icons in the headers. It is much better and\nmuch easier for the eye if your icon itself has a color.\nBackground colors behind icons make them look like \"call to action\" buttons\nand take a lot of attention from users.\n:::","usage":{},"docs":"A header is the top most visual element in a component, page, card, or a view.\n\n## Usage\nA header is the first thing that clarifies a context for users.\nDue to their positions in the UI hierarchy, headers are the most\nprominent elements of a user interface; and because of that, they carry both\nvital information and fundamental controls for the area of the interface\nthey represent.\n\nFor example, when a header is placed on top of a card, it should quickly\nexplain the card to the user. When placed on top of a modal, it should easily\nclarify what the modal is about. When displayed on top of a fullscreen view,\nit should indicate where in the system users are, and what part of the app\nthey are looking at.\n\n\n## Layout\nThe vital information in a header is usually manifested in form of an icon,\nand a heading. A subheading also could be added to provide supplementary\ninformation. There is also a third place for displaying supplementary information\nor \"supporting text\", which will be rendered as a part of the subheading.\nAlong with this information, headers can also include actions, controls, or\nmenus.\n\n:::important\nSuch actions or menus must affect the entire section of the interface\nwhich the header is representing. For example, a _Delete_ button on a card\nheader must delete that entire card and its respective contents all together,\nnot for example a selected item which is visible in the content of that card.\n:::\n\n\n:::warning\nDo not user background color on icons in the headers. It is much better and\nmuch easier for the eye if your icon itself has a color.\nBackground colors behind icons make them look like \"call to action\" buttons\nand take a lot of attention from users.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-header"},{"name":"exampleComponent","text":"limel-example-header-colors"},{"name":"exampleComponent","text":"limel-example-header-responsive"},{"name":"exampleComponent","text":"limel-example-header-narrow"},{"name":"slot","text":"actions - Content (actions) to be put inside the far right surface of\nthe header"},{"name":"slot","text":"[no name] - DEPRECATED. The `actions` slot used to be unnamed. This\nbehavior has been deprecated, and support will be dropped in a future\nversion. Please add `slot=\"actions\"` to your elements to ensure your code\nwill continue to work with future versions of Lime Elements."}],"encapsulation":"shadow","dependents":["limel-dialog","limel-example-action-buttons-choosing-explicit-labels","limel-example-action-buttons-choosing-labels","limel-example-action-buttons-colors-do-dont","limel-example-action-buttons-icon-color","limel-example-action-buttons-primary-secondary-reversed","limel-example-action-buttons-primary-secondary-reversed-colors","limel-example-action-buttons-third-alternative","limel-example-header","limel-example-header-colors","limel-example-header-narrow","limel-example-header-responsive","limel-example-select-narrow","limel-example-shadows-bad-usage","limel-example-tooltip-declutter","my-custom-menu","my-custom-menu-with-notifications"],"dependencies":["limel-icon"],"dependencyGraph":{"limel-header":["limel-icon"],"limel-dialog":["limel-header"],"limel-example-action-buttons-choosing-explicit-labels":["limel-header"],"limel-example-action-buttons-choosing-labels":["limel-header"],"limel-example-action-buttons-colors-do-dont":["limel-header"],"limel-example-action-buttons-icon-color":["limel-header"],"limel-example-action-buttons-primary-secondary-reversed":["limel-header"],"limel-example-action-buttons-primary-secondary-reversed-colors":["limel-header"],"limel-example-action-buttons-third-alternative":["limel-header"],"limel-example-header":["limel-header"],"limel-example-header-colors":["limel-header"],"limel-example-header-narrow":["limel-header"],"limel-example-header-responsive":["limel-header"],"limel-example-select-narrow":["limel-header"],"limel-example-shadows-bad-usage":["limel-header"],"limel-example-tooltip-declutter":["limel-header"],"my-custom-menu":["limel-header"],"my-custom-menu-with-notifications":["limel-header"]},"props":[{"name":"heading","type":"string","mutable":false,"attr":"heading","reflectToAttr":false,"docs":"Title to display","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"Icon to display","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"subheading","type":"string","mutable":false,"attr":"subheading","reflectToAttr":false,"docs":"Subheading to display","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"supportingText","type":"string","mutable":false,"attr":"supporting-text","reflectToAttr":false,"docs":"An extra string of text to display along with with the Subheading","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--header-background-color","annotation":"prop","docs":"Background color of header, defaults to `--contrast-300`."},{"name":"--header-heading-color","annotation":"prop","docs":"Color of heading text, defaults to `--contrast-1100`."},{"name":"--header-icon-background-color","annotation":"prop","docs":"Background color of header icon, defaults to `transparent`."},{"name":"--header-icon-color","annotation":"prop","docs":"Color of header icon, defaults to `--contrast-1100`."},{"name":"--header-responsive-breakpoint","annotation":"prop","docs":"Defines the minimum allowed `width` of both information and actions areas in the header, defaults to `22rem`."},{"name":"--header-subheading-color","annotation":"prop","docs":"Color of subheading text, defaults to `--contrast-900`."},{"name":"--header-supporting-text-color","annotation":"prop","docs":"Color of supporting text in subheading, defaults to `--header-subheading-color`."},{"name":"--header-top-right-left-border-radius","annotation":"prop","docs":"Top-left and top-right border radius of header, defaults to `0.75rem`."}],"slots":[{"name":"[no name]","docs":"DEPRECATED. The `actions` slot used to be unnamed. This\nbehavior has been deprecated, and support will be dropped in a future\nversion. Please add `slot=\"actions\"` to your elements to ensure your code\nwill continue to work with future versions of Lime Elements."},{"name":"actions","docs":"Content (actions) to be put inside the far right surface of\nthe header"}],"parts":[],"listeners":[],"sources":[{"filename":"header.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\n\n/**\n * A header is the top most visual element in a component, page, card, or a view.\n *\n * ## Usage\n * A header is the first thing that clarifies a context for users.\n * Due to their positions in the UI hierarchy, headers are the most\n * prominent elements of a user interface; and because of that, they carry both\n * vital information and fundamental controls for the area of the interface\n * they represent.\n *\n * For example, when a header is placed on top of a card, it should quickly\n * explain the card to the user. When placed on top of a modal, it should easily\n * clarify what the modal is about. When displayed on top of a fullscreen view,\n * it should indicate where in the system users are, and what part of the app\n * they are looking at.\n *\n *\n * ## Layout\n * The vital information in a header is usually manifested in form of an icon,\n * and a heading. A subheading also could be added to provide supplementary\n * information. There is also a third place for displaying supplementary information\n * or \"supporting text\", which will be rendered as a part of the subheading.\n * Along with this information, headers can also include actions, controls, or\n * menus.\n *\n * :::important\n * Such actions or menus must affect the entire section of the interface\n * which the header is representing. For example, a _Delete_ button on a card\n * header must delete that entire card and its respective contents all together,\n * not for example a selected item which is visible in the content of that card.\n * :::\n *\n *\n * :::warning\n * Do not user background color on icons in the headers. It is much better and\n * much easier for the eye if your icon itself has a color.\n * Background colors behind icons make them look like \"call to action\" buttons\n * and take a lot of attention from users.\n * :::\n *\n * @exampleComponent limel-example-header\n * @exampleComponent limel-example-header-colors\n * @exampleComponent limel-example-header-responsive\n * @exampleComponent limel-example-header-narrow\n * @slot actions - Content (actions) to be put inside the far right surface of\n * the header\n * @slot [no name] - DEPRECATED. The `actions` slot used to be unnamed. This\n * behavior has been deprecated, and support will be dropped in a future\n * version. Please add `slot=\"actions\"` to your elements to ensure your code\n * will continue to work with future versions of Lime Elements.\n */\n@Component({\n    tag: 'limel-header',\n    shadow: true,\n    styleUrl: 'header.scss',\n})\nexport class Header {\n    /**\n     * Icon to display\n     */\n    @Prop()\n    public icon: string;\n\n    /**\n     * Title to display\n     */\n    @Prop()\n    public heading: string;\n\n    /**\n     * Subheading to display\n     */\n    @Prop()\n    public subheading: string;\n\n    /**\n     * An extra string of text to display along with with the Subheading\n     */\n    @Prop()\n    public supportingText: string;\n\n    public render() {\n        return [\n            <div class=\"information\">\n                {this.renderIcon()}\n                <div class=\"headings\">\n                    <h1 class=\"heading\" title={this.heading}>\n                        {this.heading}\n                    </h1>\n                    <h2 class=\"subheading\" title={this.subheading}>\n                        {this.subheading}\n                        {this.renderSupportingText()}\n                    </h2>\n                </div>\n            </div>,\n            <slot name=\"actions\">\n                <slot />\n            </slot>,\n        ];\n    }\n\n    private renderIcon() {\n        if (!this.icon) {\n            return;\n        }\n\n        return <limel-icon class=\"icon\" badge={true} name={this.icon} />;\n    }\n\n    private renderSupportingText() {\n        if (!this.supportingText) {\n            return;\n        }\n\n        return (\n            <span class=\"information__headings__subheading__supporting-text\">\n                <span>·</span> {this.supportingText}\n            </span>\n        );\n    }\n}\n"},{"filename":"header.scss","type":"scss","source":"@use '../../style/mixins.scss';\n@use '../../style/functions.scss';\n\n/**\n * @prop --header-background-color: Background color of header, defaults to `--contrast-300`.\n * @prop --header-heading-color: Color of heading text, defaults to `--contrast-1100`.\n * @prop --header-subheading-color: Color of subheading text, defaults to `--contrast-900`.\n * @prop --header-supporting-text-color: Color of supporting text in subheading, defaults to `--header-subheading-color`.\n * @prop --header-icon-color: Color of header icon, defaults to `--contrast-1100`.\n * @prop --header-icon-background-color: Background color of header icon, defaults to `transparent`.\n * @prop --header-top-right-left-border-radius: Top-left and top-right border radius of header, defaults to `0.75rem`.\n * @prop --header-responsive-breakpoint: Defines the minimum allowed `width` of both information and actions areas in the header, defaults to `22rem`.\n */\n\n:host(limel-header) {\n    display: flex;\n    align-items: center;\n    box-sizing: border-box;\n    width: 100%;\n    background-color: var(--header-background-color, rgb(var(--contrast-300)));\n    border-top-left-radius: var(\n        --header-top-right-left-border-radius,\n        functions.pxToRem(12)\n    );\n    border-top-right-radius: var(\n        --header-top-right-left-border-radius,\n        functions.pxToRem(12)\n    );\n    padding: functions.pxToRem(4);\n}\n\n.information {\n    display: flex;\n    flex-grow: 1;\n    align-items: center;\n    min-width: 0;\n}\n\n.icon {\n    flex-shrink: 0;\n    color: var(--header-icon-color, rgb(var(--contrast-1100)));\n    background-color: var(--header-icon-background-color, transparent);\n    width: functions.pxToRem(28);\n    margin: 0 functions.pxToRem(8);\n}\n\n.headings {\n    min-width: 0;\n    margin-left: functions.pxToRem(4);\n}\n\n.heading,\n.subheading {\n    @include mixins.truncate-text;\n    margin: 0;\n    padding: 0;\n}\n\n.heading {\n    color: var(--header-heading-color, rgb(var(--contrast-1100)));\n    font-size: functions.pxToRem(17);\n}\n\n.subheading {\n    color: var(--header-subheading-color, rgb(var(--contrast-900)));\n    font-size: functions.pxToRem(14);\n    font-weight: lighter;\n}\n\n.subheading__supporting-text {\n    color: var(--header-supporting-text-color, var(--header-subheading-color));\n    span {\n        margin: 0 functions.pxToRem(8);\n        font-weight: bold;\n    }\n}\n\nslot[name='actions'] {\n    flex-shrink: 0;\n}\n\n:host(limel-header.is-narrow) {\n    padding: functions.pxToRem(2) functions.pxToRem(4);\n\n    .icon {\n        margin-right: functions.pxToRem(2);\n        width: functions.pxToRem(20);\n    }\n    .heading {\n        font-size: functions.pxToRem(15);\n    }\n}\n\n:host(limel-header.has-responsive-layout) {\n    display: grid;\n    grid-template-columns: repeat(\n        auto-fit,\n        minmax(\n            clamp(\n                50%,\n                var(--header-responsive-breakpoint, functions.pxToRem(352)),\n                100%\n            ),\n            1fr\n        )\n    );\n    .headings {\n        padding-right: functions.pxToRem(8);\n    }\n    slot[name='actions'] {\n        display: flex;\n        justify-content: flex-end;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon","filePath":"./src/components/icon/icon.tsx","fileName":"icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon/usage","tag":"limel-icon","overview":"The recommended icon library for use with Lime Elements is the Windows 10 set\nfrom Icons8 (https://icons8.com/icons/windows). This set is included in the\nrelevant Lime products. If you are using Lime Elements in a non-Lime product,\nyou will have to supply your own icons.\n\nThe size and color of the icon is set in CSS, however there are a few\nstandard sizes defined that can be used with the `size` property.\n\n### Setup\nTo use **@lundalogik/lime-icons8**, the `/assets` folder from\n__@lundalogik/lime-icons8__ must be made available on the webserver.\nTo use a different icon set, the icons must be placed in a folder structure\nthat looks like this: `assets/icons/<name-of-icon>.svg`\n\nIf `assets` is placed in the root, no other setup is needed. The icons will\nbe fetched with a relative URL from `/assets/icons/<name-of-icon>.svg`.\n\nIf `assets` is placed in a sub-folder somewhere, the easiest way to make the\nicons available is to use the HTML `base` element:\n\n```\n<base href=\"/my/parent/path/\">\n```\n\nIf this is not enough, or if the `base` element is already in use for\nsomething else, a global icon path can be configured with the `limel-config`\nelement:\n```\n<limel-config config={{iconPath: '/my/parent/path/'}} />\n```\n\n### Lime icons\nThere are icons included in the **@lundalogik/lime-icons8** package which are\ndesigned by our designers at Lime.\nThe names of these icons start with `-lime-`, which makes them easy to\nfind using the Icon Finder tool below.\n:::note\nSome of the `-lime-` icons have multiple colors and use our own CSS variables\ninstead of HEX or RGB values to visualize their colors. Thus, you must import\nour color palette css files into your project to render the icons properly.\nRead more about our [Color System](#/DesignGuidelines/color-system.md/)\nand how to do this.\n:::\n\n### Icon Finder\n\nSearch for an icon and **click on it to copy its name to clipboard**.\n\n<limel-example-icon-finder />","usage":{},"docs":"The recommended icon library for use with Lime Elements is the Windows 10 set\nfrom Icons8 (https://icons8.com/icons/windows). This set is included in the\nrelevant Lime products. If you are using Lime Elements in a non-Lime product,\nyou will have to supply your own icons.\n\nThe size and color of the icon is set in CSS, however there are a few\nstandard sizes defined that can be used with the `size` property.\n\n### Setup\nTo use **@lundalogik/lime-icons8**, the `/assets` folder from\n__@lundalogik/lime-icons8__ must be made available on the webserver.\nTo use a different icon set, the icons must be placed in a folder structure\nthat looks like this: `assets/icons/<name-of-icon>.svg`\n\nIf `assets` is placed in the root, no other setup is needed. The icons will\nbe fetched with a relative URL from `/assets/icons/<name-of-icon>.svg`.\n\nIf `assets` is placed in a sub-folder somewhere, the easiest way to make the\nicons available is to use the HTML `base` element:\n\n```\n<base href=\"/my/parent/path/\">\n```\n\nIf this is not enough, or if the `base` element is already in use for\nsomething else, a global icon path can be configured with the `limel-config`\nelement:\n```\n<limel-config config={{iconPath: '/my/parent/path/'}} />\n```\n\n### Lime icons\nThere are icons included in the **@lundalogik/lime-icons8** package which are\ndesigned by our designers at Lime.\nThe names of these icons start with `-lime-`, which makes them easy to\nfind using the Icon Finder tool below.\n:::note\nSome of the `-lime-` icons have multiple colors and use our own CSS variables\ninstead of HEX or RGB values to visualize their colors. Thus, you must import\nour color palette css files into your project to render the icons properly.\nRead more about our [Color System](#/DesignGuidelines/color-system.md/)\nand how to do this.\n:::\n\n### Icon Finder\n\nSearch for an icon and **click on it to copy its name to clipboard**.\n\n<limel-example-icon-finder />","docsTags":[{"name":"exampleComponent","text":"limel-example-icon"},{"name":"exampleComponent","text":"limel-example-icon-background"}],"encapsulation":"shadow","dependents":["limel-banner","limel-button","limel-button-group","limel-chip-set","limel-dock","limel-dock-button","limel-example-collapsible-section-actions","limel-example-header-menu","limel-example-icon","limel-example-icon-background","limel-example-select-dialog","limel-example-shadows-bad-usage","limel-example-tab-panel-content","limel-example-table-food","limel-header","limel-icon-button","limel-info-tile","limel-input-field","limel-progress-flow-item","limel-select","limel-shortcut","limel-tab-bar"],"dependencies":[],"dependencyGraph":{"limel-banner":["limel-icon"],"limel-button":["limel-icon"],"limel-button-group":["limel-icon"],"limel-chip-set":["limel-icon"],"limel-dock":["limel-icon"],"limel-dock-button":["limel-icon"],"limel-example-collapsible-section-actions":["limel-icon"],"limel-example-header-menu":["limel-icon"],"limel-example-icon":["limel-icon"],"limel-example-icon-background":["limel-icon"],"limel-example-select-dialog":["limel-icon"],"limel-example-shadows-bad-usage":["limel-icon"],"limel-example-tab-panel-content":["limel-icon"],"limel-example-table-food":["limel-icon"],"limel-header":["limel-icon"],"limel-icon-button":["limel-icon"],"limel-info-tile":["limel-icon"],"limel-input-field":["limel-icon"],"limel-progress-flow-item":["limel-icon"],"limel-select":["limel-icon"],"limel-shortcut":["limel-icon"],"limel-tab-bar":["limel-icon"]},"props":[{"name":"badge","type":"boolean","mutable":false,"attr":"badge","reflectToAttr":true,"docs":"Set to `true` to give the icon a round background with some padding.\nOnly works when the `size` attribute is also set.","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"name","type":"string","mutable":false,"attr":"name","reflectToAttr":true,"docs":"Name of the icon","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"size","type":"\"large\" | \"medium\" | \"small\" | \"x-small\"","mutable":false,"attr":"size","reflectToAttr":true,"docs":"Size of the icon","docsTags":[],"values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"small","type":"string"},{"value":"x-small","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--icon-background-color","annotation":"prop","docs":"Background color when attribute `badge` is set to `true`. Defaults to `transparent`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon.tsx","type":"tsx","source":"import { Component, Element, h, Prop, Watch } from '@stencil/core';\nimport config from '../../global/config';\nimport iconCache from '../../global/icon-cache';\nimport { IconSize } from './icon.types';\n\n/**\n * The recommended icon library for use with Lime Elements is the Windows 10 set\n * from Icons8 (https://icons8.com/icons/windows). This set is included in the\n * relevant Lime products. If you are using Lime Elements in a non-Lime product,\n * you will have to supply your own icons.\n *\n * The size and color of the icon is set in CSS, however there are a few\n * standard sizes defined that can be used with the `size` property.\n *\n * ### Setup\n * To use **@lundalogik/lime-icons8**, the `/assets` folder from\n * __@lundalogik/lime-icons8__ must be made available on the webserver.\n * To use a different icon set, the icons must be placed in a folder structure\n * that looks like this: `assets/icons/<name-of-icon>.svg`\n *\n * If `assets` is placed in the root, no other setup is needed. The icons will\n * be fetched with a relative URL from `/assets/icons/<name-of-icon>.svg`.\n *\n * If `assets` is placed in a sub-folder somewhere, the easiest way to make the\n * icons available is to use the HTML `base` element:\n *\n * ```\n * <base href=\"/my/parent/path/\">\n * ```\n *\n * If this is not enough, or if the `base` element is already in use for\n * something else, a global icon path can be configured with the `limel-config`\n * element:\n * ```\n * <limel-config config={{iconPath: '/my/parent/path/'}} />\n * ```\n *\n * ### Lime icons\n * There are icons included in the **@lundalogik/lime-icons8** package which are\n * designed by our designers at Lime.\n * The names of these icons start with `-lime-`, which makes them easy to\n * find using the Icon Finder tool below.\n * :::note\n * Some of the `-lime-` icons have multiple colors and use our own CSS variables\n * instead of HEX or RGB values to visualize their colors. Thus, you must import\n * our color palette css files into your project to render the icons properly.\n * Read more about our [Color System](#/DesignGuidelines/color-system.md/)\n * and how to do this.\n * :::\n *\n * ### Icon Finder\n *\n * Search for an icon and **click on it to copy its name to clipboard**.\n *\n * <limel-example-icon-finder />\n *\n * @exampleComponent limel-example-icon\n * @exampleComponent limel-example-icon-background\n */\n@Component({\n    tag: 'limel-icon',\n    shadow: true,\n    styleUrl: 'icon.scss',\n})\nexport class Icon {\n    /**\n     * Size of the icon\n     */\n    @Prop({ reflect: true })\n    public size: IconSize;\n\n    /**\n     * Name of the icon\n     */\n    @Prop({ reflect: true })\n    public name: string;\n\n    /**\n     * Set to `true` to give the icon a round background with some padding.\n     * Only works when the `size` attribute is also set.\n     */\n    @Prop({ reflect: true })\n    public badge: boolean;\n\n    @Element()\n    private host: HTMLLimelIconElement;\n\n    public componentDidLoad() {\n        this.loadIcon(this.name);\n    }\n\n    public render() {\n        return <div class=\"container\" />;\n    }\n\n    @Watch('name')\n    protected async loadIcon(name: string) {\n        if (name === undefined || name === '') {\n            return;\n        }\n\n        const svgData = await this.loadSvg(name);\n        this.renderSvg(svgData);\n    }\n\n    /**\n     * Load the SVG data for the icon from the icon cache\n     *\n     * @param {string} name name of the icon\n     * @returns {string} the icon SVG data\n     */\n    private loadSvg(name: string) {\n        return iconCache.get(name, config.iconPath);\n    }\n\n    /*\n     * There is no way to style external SVG files with CSS, i.e. SVGs loaded\n     * with <img src=\"file.svg\" /> or <object data=\"file.svg\" type=\"image/svg+xml\" />\n     * will remain the way they look in the file.\n     * Therefore we inject the svg as inline markup instead.\n     */\n    private renderSvg(svgData: string) {\n        const container = this.host.shadowRoot.querySelector('div.container');\n        if (container) {\n            container.innerHTML = svgData;\n        }\n    }\n}\n"},{"filename":"icon.scss","type":"scss","source":"@use '../../style/functions';\n\n/**\n * @prop --icon-background-color: Background color when attribute `badge` is set to `true`. Defaults to `transparent`.\n */\n\n:host {\n    background-color: var(--icon-background-color, transparent);\n    border-radius: 50%;\n    display: inline-block;\n    line-height: 0;\n    box-sizing: border-box;\n\n    svg {\n        fill: currentColor;\n        height: 100%;\n        pointer-events: none;\n        width: 100%;\n    }\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([size='x-small']) {\n    height: functions.pxToRem(15) !important;\n    width: functions.pxToRem(15) !important;\n}\n:host([size='small']) {\n    height: functions.pxToRem(20) !important;\n    width: functions.pxToRem(20) !important;\n}\n:host([size='medium']) {\n    height: functions.pxToRem(25) !important;\n    width: functions.pxToRem(25) !important;\n}\n:host([size='large']) {\n    height: functions.pxToRem(30) !important;\n    width: functions.pxToRem(30) !important;\n}\n\n:host([badge][size='x-small']) {\n    height: functions.pxToRem(23) !important;\n    width: functions.pxToRem(23) !important;\n\n    > div {\n        margin: functions.pxToRem(4);\n    }\n}\n:host([badge][size='small']) {\n    height: functions.pxToRem(30) !important;\n    width: functions.pxToRem(30) !important;\n\n    > div {\n        margin: functions.pxToRem(5);\n    }\n}\n:host([badge][size='medium']) {\n    height: functions.pxToRem(40) !important;\n    width: functions.pxToRem(40) !important;\n\n    > div {\n        margin: functions.pxToRem(8);\n    }\n}\n:host([badge][size='large']) {\n    height: functions.pxToRem(46) !important;\n    width: functions.pxToRem(46) !important;\n\n    > div {\n        margin: functions.pxToRem(8);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button","filePath":"./src/components/icon-button/icon-button.tsx","fileName":"icon-button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/usage","tag":"limel-icon-button","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-icon-button-basic"},{"name":"exampleComponent","text":"limel-example-icon-button-disabled"},{"name":"exampleComponent","text":"limel-example-icon-button-elevated"},{"name":"exampleComponent","text":"limel-example-icon-button-toggle-state"},{"name":"exampleComponent","text":"limel-example-icon-button-composite"}],"encapsulation":"shadow","dependents":["limel-collapsible-section","limel-example-header","limel-example-header-colors","limel-example-header-responsive","limel-example-icon-button-basic","limel-example-icon-button-composite","limel-example-icon-button-disabled","limel-example-icon-button-elevated","limel-example-icon-button-toggle-state","limel-example-icon-finder","limel-example-menu-notification","limel-example-tooltip-max-character","limel-snackbar","limel-tab-bar"],"dependencies":["limel-icon"],"dependencyGraph":{"limel-icon-button":["limel-icon"],"limel-collapsible-section":["limel-icon-button"],"limel-example-header":["limel-icon-button"],"limel-example-header-colors":["limel-icon-button"],"limel-example-header-responsive":["limel-icon-button"],"limel-example-icon-button-basic":["limel-icon-button"],"limel-example-icon-button-composite":["limel-icon-button"],"limel-example-icon-button-disabled":["limel-icon-button"],"limel-example-icon-button-elevated":["limel-icon-button"],"limel-example-icon-button-toggle-state":["limel-icon-button"],"limel-example-icon-finder":["limel-icon-button"],"limel-example-menu-notification":["limel-icon-button"],"limel-example-tooltip-max-character":["limel-icon-button"],"limel-snackbar":["limel-icon-button"],"limel-tab-bar":["limel-icon-button"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the button.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"elevated","type":"boolean","mutable":false,"attr":"elevated","reflectToAttr":true,"docs":"Set to `true` to give the button our standard \"elevated\" look, lifting\nit off the flat layout.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"The icon to display.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The text to show to screenreaders and other assistive tech.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--icon-background-color","annotation":"prop","docs":"Background color of the button."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button.tsx","type":"tsx","source":"import { Component, Element, h, Prop } from '@stencil/core';\n\n/**\n * @exampleComponent limel-example-icon-button-basic\n * @exampleComponent limel-example-icon-button-disabled\n * @exampleComponent limel-example-icon-button-elevated\n * @exampleComponent limel-example-icon-button-toggle-state\n * @exampleComponent limel-example-icon-button-composite\n */\n@Component({\n    tag: 'limel-icon-button',\n    shadow: true,\n    styleUrl: 'icon-button.scss',\n})\nexport class IconButton {\n    /**\n     * The icon to display.\n     */\n    @Prop({ reflect: true })\n    public icon: string;\n\n    /**\n     * Set to `true` to give the button our standard \"elevated\" look, lifting\n     * it off the flat layout.\n     */\n    @Prop({ reflect: true })\n    public elevated = false;\n\n    /**\n     * The text to show to screenreaders and other assistive tech.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Set to `true` to disable the button.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    @Element()\n    private host: HTMLLimelIconButtonElement;\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const element = this.host.shadowRoot.querySelector('.mdc-icon-button');\n        if (!element) {\n            return;\n        }\n    }\n\n    public render() {\n        const buttonAttributes: { tabindex?: string } = {};\n        if (this.host.hasAttribute('tabindex')) {\n            buttonAttributes.tabindex = this.host.getAttribute('tabindex');\n        }\n\n        return (\n            <button\n                class=\"mdc-icon-button\"\n                disabled={this.disabled}\n                aria-label={this.label}\n                title={this.label}\n                {...buttonAttributes}\n            >\n                <limel-icon name={this.icon} badge={true} />\n            </button>\n        );\n    }\n}\n"},{"filename":"icon-button.scss","type":"scss","source":"@use '../../style/mixins';\n@use '../../style/functions';\n@use '@material/icon-button/styles';\n\n/**\n * @prop --icon-background-color: Background color of the button.\n */\n\n$height-of-limel-button: functions.pxToRem(36);\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([disabled]) {\n    pointer-events: none;\n}\n\n.mdc-icon-button {\n    @include mixins.is-flat-clickable(\n        $background-color: var(--icon-background-color, transparent)\n    );\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    height: $height-of-limel-button;\n    width: $height-of-limel-button;\n    padding: functions.pxToRem(2);\n    border-radius: 50%;\n\n    :host([elevated]) & {\n        &:not(:hover):not(:active):not(:focus-visible) {\n            box-shadow: var(--button-shadow-normal);\n        }\n    }\n\n    &:disabled {\n        color: var(--mdc-theme-text-disabled-on-background);\n    }\n\n    &:focus-visible {\n        // only when non-pointer input is being used,\n        // e.g. tabbed into using keyboard\n        box-shadow: var(--shadow-depth-8-focused);\n        border-radius: 50%;\n    }\n}\n\nlimel-icon {\n    width: functions.pxToRem(20);\n    height: functions.pxToRem(20);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile","filePath":"./src/components/info-tile/info-tile.tsx","fileName":"info-tile.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/usage","tag":"limel-info-tile","overview":"This component can be used on places such as a start page or a dashboard.\nIt offers features for visualizing aggregated data along with supplementary\ninformation.\n\nIf clicking on the component should navigate the user to\na new screen or web page, you need to provide a URL,\nusing the `link` property.","usage":{},"docs":"This component can be used on places such as a start page or a dashboard.\nIt offers features for visualizing aggregated data along with supplementary\ninformation.\n\nIf clicking on the component should navigate the user to\na new screen or web page, you need to provide a URL,\nusing the `link` property.","docsTags":[{"name":"exampleComponent","text":"limel-example-info-tile"},{"name":"exampleComponent","text":"limel-example-info-tile-badge"},{"name":"exampleComponent","text":"limel-example-info-tile-progress"},{"name":"exampleComponent","text":"limel-example-info-tile-loading"},{"name":"exampleComponent","text":"limel-example-info-tile-styling"}],"encapsulation":"shadow","dependents":["limel-example-info-tile","limel-example-info-tile-badge","limel-example-info-tile-loading","limel-example-info-tile-progress","limel-example-info-tile-styling"],"dependencies":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress"],"dependencyGraph":{"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress"],"limel-example-info-tile":["limel-info-tile"],"limel-example-info-tile-badge":["limel-info-tile"],"limel-example-info-tile-loading":["limel-info-tile"],"limel-example-info-tile-progress":["limel-info-tile"],"limel-example-info-tile-styling":["limel-info-tile"]},"props":[{"name":"badge","type":"number | string","mutable":false,"attr":"badge","reflectToAttr":true,"docs":"If supplied, the info tile will display a notification badge.","docsTags":[],"values":[{"type":"number"},{"type":"string"}],"optional":true,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` if info tile is disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"Name of icon for the info tile.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The text to show below the info tile. Long labels will be truncated.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":true,"required":false},{"name":"link","type":"Link","mutable":false,"reflectToAttr":false,"docs":"If supplied, the info tile will be a clickable link.\n\nSupplying a value also adds an elevated effect using a shadow,\nas well as `cursor: pointer`, which appears on hover.\nWhile we strongly recommend supplying a link whenever the\ncomponent should act as a link, if this is not possible, and\nyou need to provide interaction through a click handler,\nyou can still get the correct styling by supplying a `Link`\nobject with the `href` property set to `'#'`.","docsTags":[],"values":[{"type":"Link"}],"optional":true,"required":false},{"name":"loading","type":"boolean","mutable":false,"attr":"loading","reflectToAttr":true,"docs":"Set to `true` to put the component in the `loading` state.\nThis does _not_ disable the link. To do so, the\n`disabled` property should be set to `true` as well.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"prefix","type":"string","mutable":false,"attr":"prefix","reflectToAttr":true,"docs":"A string of text that is visually placed before the value.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"progress","type":"InfoTileProgress","mutable":false,"reflectToAttr":false,"docs":"Properties of the optional circular progress bar.\n\nDefaults:\n- `maxValue`: 100\n- `suffix`: %\n- `percentageColors`: false\n\nColors change with intervals of 10 %.","docsTags":[],"values":[{"type":"InfoTileProgress"}],"optional":true,"required":false},{"name":"suffix","type":"string","mutable":false,"attr":"suffix","reflectToAttr":true,"docs":"A string of text that is visually placed after the value.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"value","type":"number | string","mutable":false,"attr":"value","reflectToAttr":true,"docs":"A piece of text or number that is the main piece of information\nwhich the component is intended to visualize.","docsTags":[],"values":[{"type":"number"},{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--info-tile-background-color","annotation":"prop","docs":"defines the backgrounds color of the info-tile icon. Defaults to `--contrast-100`"},{"name":"--info-tile-badge-background-color","annotation":"prop","docs":"Background color of the notification badge. Defaults to `--color-red-default`"},{"name":"--info-tile-badge-text-color","annotation":"prop","docs":"Text color of the notification badge. Defaults to `--color-white`"},{"name":"--info-tile-border-radius","annotation":"prop","docs":"defines the radius of corners of the info-tile. Defaults to `1rem`"},{"name":"--info-tile-icon-color","annotation":"prop","docs":"defines the fill color of the info-tile icon. Defaults to `--contrast-1000`"},{"name":"--info-tile-progress-background-color","annotation":"prop","docs":"Determines the background color of the central section of the progress bar. Defaults to `--info-tile-background-color`."},{"name":"--info-tile-progress-fill-color","annotation":"prop","docs":"Determines the color of the progressed section. Defaults to `--lime-primary-color`."},{"name":"--info-tile-progress-prefix-color","annotation":"prop","docs":"Determines the color of the progress suffix. Defaults to `--contrast-1000`."},{"name":"--info-tile-progress-suffix-color","annotation":"prop","docs":"Determines the color of the progress prefix. Defaults to `--contrast-1000`."},{"name":"--info-tile-progress-text-color","annotation":"prop","docs":"Determines the color of the progress value. Defaults to `--info-tile-text-color`."},{"name":"--info-tile-text-color","annotation":"prop","docs":"defines the color of the info-tile label. Defaults to `--contrast-1100`"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile.tsx","type":"tsx","source":"import { Component, Prop, h } from '@stencil/core';\nimport { InfoTileProgress } from './info-tile.types';\nimport { Link } from '@limetech/lime-elements';\n\n/**\n * This component can be used on places such as a start page or a dashboard.\n * It offers features for visualizing aggregated data along with supplementary\n * information.\n *\n * If clicking on the component should navigate the user to\n * a new screen or web page, you need to provide a URL,\n * using the `link` property.\n *\n * @exampleComponent limel-example-info-tile\n * @exampleComponent limel-example-info-tile-badge\n * @exampleComponent limel-example-info-tile-progress\n * @exampleComponent limel-example-info-tile-loading\n * @exampleComponent limel-example-info-tile-styling\n */\n@Component({\n    tag: 'limel-info-tile',\n    shadow: true,\n    styleUrl: 'info-tile.scss',\n})\nexport class InfoTile {\n    /**\n     * A piece of text or number that is the main piece of information\n     * which the component is intended to visualize.\n     */\n    @Prop({ reflect: true })\n    public value: number | string;\n\n    /**\n     * Name of icon for the info tile.\n     */\n    @Prop()\n    public icon?: string;\n\n    /**\n     * The text to show below the info tile. Long labels will be truncated.\n     */\n    @Prop({ reflect: true })\n    public label?: string = null;\n\n    /**\n     * A string of text that is visually placed before the value.\n     */\n    @Prop({ reflect: true })\n    public prefix?: string;\n\n    /**\n     * A string of text that is visually placed after the value.\n     */\n    @Prop({ reflect: true })\n    public suffix?: string;\n\n    /**\n     * Set to `true` if info tile is disabled.\n     */\n    @Prop({ reflect: true })\n    public disabled? = false;\n\n    /**\n     * If supplied, the info tile will display a notification badge.\n     */\n    @Prop({ reflect: true })\n    public badge?: number | string;\n\n    /**\n     * Set to `true` to put the component in the `loading` state.\n     * This does _not_ disable the link. To do so, the\n     * `disabled` property should be set to `true` as well.\n     */\n    @Prop({ reflect: true })\n    public loading? = false;\n\n    /**\n     * If supplied, the info tile will be a clickable link.\n     *\n     * Supplying a value also adds an elevated effect using a shadow,\n     * as well as `cursor: pointer`, which appears on hover.\n     * While we strongly recommend supplying a link whenever the\n     * component should act as a link, if this is not possible, and\n     * you need to provide interaction through a click handler,\n     * you can still get the correct styling by supplying a `Link`\n     * object with the `href` property set to `'#'`.\n     */\n    @Prop()\n    public link?: Link;\n\n    /**\n     * Properties of the optional circular progress bar.\n     *\n     * Defaults:\n     * - `maxValue`: 100\n     * - `suffix`: %\n     * - `percentageColors`: false\n     *\n     * Colors change with intervals of 10 %.\n     */\n    @Prop()\n    public progress?: InfoTileProgress;\n\n    public render() {\n        const extendedAriaLabel =\n            this.checkProps(this?.prefix) +\n            this.value +\n            ' ' +\n            this.checkProps(this?.suffix) +\n            this.checkProps(this?.label) +\n            '. ' +\n            this.checkProps(this?.progress?.prefix) +\n            this.checkProps(this?.progress?.value) +\n            this.checkProps(this?.progress?.suffix) +\n            this.checkProps(this?.link?.title);\n\n        const link = !this.disabled ? this.link?.href : '#';\n\n        return [\n            <a\n                title={this.link?.title}\n                href={link}\n                target={this.link?.target}\n                tabindex=\"0\"\n                aria-label={extendedAriaLabel}\n                aria-disabled={this.disabled}\n                class={{\n                    'is-clickable': !!this.link?.href && !this.disabled,\n                    'has-circular-progress':\n                        !!this.progress?.value || this.progress?.value === 0,\n                }}\n            >\n                {this.renderIcon()}\n                {this.renderProgress()}\n                <div class=\"value-group\">\n                    {this.renderPrefix()}\n                    <div class=\"value-and-suffix\">\n                        {this.renderValue()}\n                        {this.renderSuffix()}\n                    </div>\n                    {this.renderSpinner()}\n                </div>\n                {this.renderLabel()}\n            </a>,\n            this.renderNotification(),\n        ];\n    }\n\n    private checkProps(propValue) {\n        return !propValue ? '' : propValue + ' ';\n    }\n\n    private renderPrefix = () => {\n        if (this.prefix) {\n            return <span class=\"prefix\">{this.prefix}</span>;\n        }\n    };\n\n    private renderValue = () => {\n        const characterCount = (this.value ?? '').toString().length;\n\n        if (!this.value && this.loading) {\n            return <span class=\"value\">···</span>;\n        }\n\n        if (this.value) {\n            return (\n                <span\n                    class={{\n                        value: true,\n                        [`ch-${characterCount}`]: true,\n                    }}\n                >\n                    {this.value}\n                </span>\n            );\n        }\n    };\n\n    private renderSuffix = () => {\n        if (this.suffix) {\n            return <span class=\"suffix\">{this.suffix}</span>;\n        }\n    };\n\n    private renderIcon = () => {\n        if (this.icon) {\n            return <limel-icon class=\"icon\" name={this.icon} />;\n        }\n    };\n\n    private renderProgress = () => {\n        if (this.progress?.value || this.progress?.value === 0) {\n            return (\n                <limel-circular-progress\n                    class=\"progress\"\n                    prefix={this.progress.prefix}\n                    value={this.progress.value}\n                    suffix={this.progress.suffix}\n                    maxValue={this.progress.maxValue}\n                    displayPercentageColors={\n                        this.progress.displayPercentageColors\n                    }\n                />\n            );\n        }\n    };\n\n    private renderLabel = () => {\n        if (this.label) {\n            return <span class=\"label\">{this.label}</span>;\n        }\n    };\n\n    private renderNotification = () => {\n        if (this.badge) {\n            return <limel-badge label={this.badge} />;\n        }\n    };\n\n    private renderSpinner = () => {\n        if (this.loading) {\n            return <limel-linear-progress indeterminate={true} />;\n        }\n    };\n}\n"},{"filename":"info-tile.scss","type":"scss","source":"/**\n* @prop --info-tile-border-radius: defines the radius of corners of the info-tile. Defaults to `1rem`\n* @prop --info-tile-icon-color: defines the fill color of the info-tile icon. Defaults to `--contrast-1000`\n* @prop --info-tile-text-color: defines the color of the info-tile label. Defaults to `--contrast-1100`\n* @prop --info-tile-background-color: defines the backgrounds color of the info-tile icon. Defaults to `--contrast-100`\n* @prop --info-tile-badge-text-color: Text color of the notification badge. Defaults to `--color-white`\n* @prop --info-tile-badge-background-color: Background color of the notification badge. Defaults to `--color-red-default`\n* @prop --info-tile-progress-fill-color: Determines the color of the progressed section. Defaults to `--lime-primary-color`.\n* @prop --info-tile-progress-background-color: Determines the background color of the central section of the progress bar. Defaults to `--info-tile-background-color`.\n* @prop --info-tile-progress-suffix-color: Determines the color of the progress prefix. Defaults to `--contrast-1000`.\n * @prop --info-tile-progress-text-color: Determines the color of the progress value. Defaults to `--info-tile-text-color`.\n * @prop --info-tile-progress-prefix-color: Determines the color of the progress suffix. Defaults to `--contrast-1000`.\n*/\n\n@use '../../style/mixins';\n\n:host(limel-info-tile) {\n    --badge-text-color: var(\n        --info-tile-badge-text-color,\n        rgb(var(--color-white))\n    );\n    --badge-background-color: var(\n        --info-tile-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n\n    --circular-progress-text-color: var(\n        --info-tile-progress-text-color,\n        var(--info-tile-text-color)\n    );\n    --circular-progress-suffix-color: var(--info-tile-progress-suffix-color);\n    --circular-progress-prefix-color: var(--info-tile-progress-prefix-color);\n    --circular-progress-track-color: rgb(var(--contrast-800), 0.3);\n    --circular-progress-fill-color: var(--info-tile-progress-fill-color);\n    --circular-progress-background-color: var(\n        --info-tile-progress-background-color,\n        var(--info-tile-background-color)\n    );\n\n    --label-min-size: 0.75rem;\n    --label-preferred-size: 6cqw;\n    --label-max-size: 1rem;\n\n    --value-min-size: 1rem;\n    --value-preferred-size: 20cqw;\n    --value-max-size: 4rem;\n\n    --suffix-prefix-min-size: 0.75rem;\n    --suffix-prefix-preferred-size: 8cqw;\n    --suffix-prefix-max-size: 1.5rem;\n\n    --icon-min-size: 2rem;\n    --icon-preferred-size: 60cqh;\n    --icon-max-size: calc(100cqw - 0.5rem);\n\n    isolation: isolate;\n    container-type: size;\n    position: relative;\n    display: flex;\n\n    width: 100%;\n    height: 100%;\n\n    * {\n        box-sizing: border-box;\n    }\n}\n\n:host(limel-info-tile[disabled]) {\n    a {\n        opacity: 0.5;\n        cursor: not-allowed;\n    }\n}\n\na {\n    all: unset;\n    overflow: hidden;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    align-items: flex-start;\n\n    height: 100%;\n    width: 100%;\n    flex-grow: 1;\n\n    padding: 0.25rem 1rem 0.5rem 1rem;\n    border-radius: var(--info-tile-border-radius, 1rem);\n    background-color: var(\n        --info-tile-background-color,\n        var(--lime-elevated-surface-background-color)\n    );\n\n    &.is-clickable {\n        @include mixins.is-elevated-clickable(\n            $background-color:\n                var(\n                    --info-tile-background-color,\n                    var(--lime-elevated-surface-background-color)\n                ),\n            $background-color--hovered:\n                var(\n                    --info-tile-background-color,\n                    var(--lime-elevated-surface-background-color)\n                )\n        );\n        @include mixins.visualize-keyboard-focus;\n        cursor: pointer;\n    }\n}\n\n.icon {\n    z-index: 1;\n    position: absolute;\n    top: 0.5rem;\n    right: 0.75rem;\n    padding: 0.25rem;\n\n    aspect-ratio: 1/1;\n\n    color: var(--info-tile-icon-color, rgb(var(--contrast-1000)));\n\n    border-radius: 0;\n    height: clamp(\n        var(--icon-min-size),\n        var(--icon-preferred-size),\n        var(--icon-max-size)\n    );\n\n    @supports not (container-type: size) {\n        width: max(10%, 3rem);\n    }\n\n    .has-circular-progress & {\n        top: unset;\n        bottom: 0.5rem;\n        --icon-min-size: 1.5rem;\n        --icon-preferred-size: 20cqh;\n    }\n}\n\n.progress {\n    position: absolute;\n    top: 0.75rem;\n    right: 0.75rem;\n\n    --circular-progress-size: min(\n        var(--icon-preferred-size),\n        var(--icon-max-size)\n    );\n    @supports not (container-type: size) {\n        --circular-progress-size: initial;\n    }\n}\n\n.label {\n    z-index: 1;\n    color: var(--info-tile-text-color, rgb(var(--contrast-1100)));\n\n    line-height: 1.2;\n    font-size: clamp(\n        var(--label-min-size),\n        var(--label-preferred-size),\n        var(--label-max-size)\n    );\n    @supports not (container-type: size) {\n        font-size: 0.875rem;\n    }\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.5rem;\n    right: -0.5rem;\n}\n\nlimel-linear-progress {\n    --lime-primary-color: var(--info-tile-text-color);\n    position: absolute;\n    inset: auto 0 0 0;\n    border-radius: 1rem;\n    overflow: hidden;\n}\n\n.value-group {\n    position: relative;\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    color: var(--info-tile-text-color, rgb(var(--contrast-1100)));\n}\n\n.value-and-suffix,\n.label {\n    text-shadow: 0 0 0.5rem\n            var(--info-tile-background-color, rgb(var(--contrast-100))),\n        0 0 0.25rem var(--info-tile-background-color, rgb(var(--contrast-100)));\n}\n\n.value-and-suffix {\n    display: flex;\n}\n\n.prefix,\n.suffix {\n    font-size: clamp(\n        var(--suffix-prefix-min-size),\n        var(--suffix-prefix-preferred-size),\n        var(--suffix-prefix-max-size)\n    );\n    opacity: 0.7;\n\n    @supports not (container-type: size) {\n        font-size: 0.75rem;\n    }\n}\n\n.prefix {\n    align-self: flex-start;\n    line-height: normal;\n    transform: translateY(40%);\n}\n\n.value {\n    transition: opacity 0.2s ease,\n        transform 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.95);\n    transform-origin: left;\n    transform: translate3d(0, 0, 0) scale(1);\n\n    @include mixins.truncate-text;\n    font-weight: bold;\n    line-height: normal;\n\n    font-size: clamp(\n        var(--value-min-size),\n        var(--value-preferred-size),\n        var(--value-max-size)\n    );\n    @supports not (container-type: size) {\n        font-size: 1.5rem;\n    }\n\n    :host(limel-info-tile[loading]) & {\n        opacity: 0.3;\n        transform: translate3d(0, 0, 0) scale(0.9);\n    }\n}\n\n.suffix {\n    transform: translateY(10%);\n}\n\n$xs: 8rem; //128px:\n$s: 18.75rem; //300px\n$m: 40.5rem; //648px\n$l: 62.5rem; //1000px\n\n@container (width < #{$xs}) {\n    .progress {\n        top: 0.25rem;\n        right: 0.25rem;\n    }\n    a {\n        padding: 0.375rem;\n        gap: 0.125rem;\n    }\n}\n\n@container (width < #{$s}) {\n    .progress {\n        top: 0.5rem;\n        right: 0.5rem;\n    }\n    .icon {\n        top: 0.25rem;\n        right: 0.5rem;\n        .has-circular-progress & {\n            right: 0.25rem;\n            bottom: 0.25rem;\n        }\n    }\n}\n\n@container (width < #{$m}) {\n    .value {\n        &.ch-1,\n        &.ch-2,\n        &.ch-3,\n        &.ch-4 {\n            --value-preferred-size: 20cqw;\n        }\n        &.ch-5 {\n            --value-preferred-size: 18cqw;\n        }\n        &.ch-6 {\n            --value-preferred-size: 17cqw;\n        }\n        &.ch-7 {\n            --value-preferred-size: 16cqw;\n        }\n        &.ch-8 {\n            --value-preferred-size: 15cqw;\n        }\n        &.ch-9 {\n            --value-preferred-size: 14cqw;\n        }\n        --value-preferred-size: 13cqw;\n    }\n}\n\n@container (height > #{$xs}) {\n    a {\n        padding-top: 0.75rem;\n        padding-bottom: 1rem;\n    }\n}\n\n@container (height < #{$xs}) and (width > #{$xs}) {\n    .value {\n        --value-preferred-size: 32cqh !important;\n    }\n    .suffix,\n    .prefix {\n        --suffix-prefix-preferred-size: 16cqh !important;\n    }\n}\n\n@container (height > #{$s}) {\n    .progress,\n    .icon {\n        position: relative;\n        top: unset;\n        right: unset;\n    }\n    a {\n        align-items: center;\n        justify-content: center;\n    }\n    .label {\n        text-align: center;\n        // -webkit-line-clamp: 3;\n    }\n    .has-circular-progress {\n        .icon {\n            position: absolute;\n            top: 0.5rem;\n            right: 0.5rem;\n            --icon-max-size: 3rem;\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field","filePath":"./src/components/input-field/input-field.tsx","fileName":"input-field.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/usage","tag":"limel-input-field","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-input-field-text"},{"name":"exampleComponent","text":"limel-example-input-field-placeholder"},{"name":"exampleComponent","text":"limel-example-input-field-text-multiple"},{"name":"exampleComponent","text":"limel-example-input-field-number"},{"name":"exampleComponent","text":"limel-example-input-field-autocomplete"},{"name":"exampleComponent","text":"limel-example-input-field-icon-leading"},{"name":"exampleComponent","text":"limel-example-input-field-icon-trailing"},{"name":"exampleComponent","text":"limel-example-input-field-icon-both"},{"name":"exampleComponent","text":"limel-example-input-field-showlink"},{"name":"exampleComponent","text":"limel-example-input-field-error-icon"},{"name":"exampleComponent","text":"limel-example-input-field-textarea"},{"name":"exampleComponent","text":"limel-example-input-field-suffix"},{"name":"exampleComponent","text":"limel-example-input-field-prefix"},{"name":"exampleComponent","text":"limel-example-input-field-search"},{"name":"exampleComponent","text":"limel-example-input-field-pattern"},{"name":"exampleComponent","text":"limel-example-input-field-focus"}],"encapsulation":"shadow","dependents":["limel-color-picker","limel-color-picker-palette","limel-date-picker","limel-example-chip-set-input","limel-example-circular-progress","limel-example-circular-progress-percentage-colors","limel-example-dialog-form","limel-example-dialog-heading","limel-example-info-tile-progress","limel-example-input-field-autocomplete","limel-example-input-field-error-icon","limel-example-input-field-focus","limel-example-input-field-icon-both","limel-example-input-field-icon-leading","limel-example-input-field-icon-trailing","limel-example-input-field-number","limel-example-input-field-pattern","limel-example-input-field-placeholder","limel-example-input-field-prefix","limel-example-input-field-search","limel-example-input-field-showlink","limel-example-input-field-suffix","limel-example-input-field-text","limel-example-input-field-text-decluttering-guidelines","limel-example-input-field-text-multiple","limel-example-input-field-textarea","limel-example-linear-progress"],"dependencies":["limel-icon","limel-portal","limel-menu-surface","limel-list"],"dependencyGraph":{"limel-input-field":["limel-icon","limel-portal","limel-menu-surface","limel-list"],"limel-color-picker":["limel-input-field"],"limel-color-picker-palette":["limel-input-field"],"limel-date-picker":["limel-input-field"],"limel-example-chip-set-input":["limel-input-field"],"limel-example-circular-progress":["limel-input-field"],"limel-example-circular-progress-percentage-colors":["limel-input-field"],"limel-example-dialog-form":["limel-input-field"],"limel-example-dialog-heading":["limel-input-field"],"limel-example-info-tile-progress":["limel-input-field"],"limel-example-input-field-autocomplete":["limel-input-field"],"limel-example-input-field-error-icon":["limel-input-field"],"limel-example-input-field-focus":["limel-input-field"],"limel-example-input-field-icon-both":["limel-input-field"],"limel-example-input-field-icon-leading":["limel-input-field"],"limel-example-input-field-icon-trailing":["limel-input-field"],"limel-example-input-field-number":["limel-input-field"],"limel-example-input-field-pattern":["limel-input-field"],"limel-example-input-field-placeholder":["limel-input-field"],"limel-example-input-field-prefix":["limel-input-field"],"limel-example-input-field-search":["limel-input-field"],"limel-example-input-field-showlink":["limel-input-field"],"limel-example-input-field-suffix":["limel-input-field"],"limel-example-input-field-text":["limel-input-field"],"limel-example-input-field-text-decluttering-guidelines":["limel-input-field"],"limel-example-input-field-text-multiple":["limel-input-field"],"limel-example-input-field-textarea":["limel-input-field"],"limel-example-linear-progress":["limel-input-field"]},"props":[{"name":"completions","type":"string[]","mutable":false,"reflectToAttr":false,"docs":"list of suggestions `value` can autocomplete to.","docsTags":[],"default":"[]","values":[{"type":"string[]"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"formatNumber","type":"boolean","mutable":false,"attr":"format-number","reflectToAttr":true,"docs":"Set to `true` to format the current value of the input field only\nif the field is of type number.\nThe number format is determined by the current language of the browser.","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the input field when it has focus","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the input field is\ninvalid.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The input label.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"leadingIcon","type":"string","mutable":false,"attr":"leading-icon","reflectToAttr":true,"docs":"Leading icon to show to the far left in the field.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"max","type":"number","mutable":false,"attr":"max","reflectToAttr":true,"docs":"Maximum allowed value if input type is `number`.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"maxlength","type":"number","mutable":false,"attr":"maxlength","reflectToAttr":true,"docs":"Maximum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"min","type":"number","mutable":false,"attr":"min","reflectToAttr":true,"docs":"Minimum allowed value if input type is `number`.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"minlength","type":"number","mutable":false,"attr":"minlength","reflectToAttr":true,"docs":"Minimum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"pattern","type":"string","mutable":false,"attr":"pattern","reflectToAttr":true,"docs":"Regular expression that the current value of the input field must match.\nNo forward slashes should be specified around the pattern.\nOnly used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n`password`, or `search`.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"placeholder","type":"string","mutable":false,"attr":"placeholder","reflectToAttr":true,"docs":"The placeholder text shown inside the input field, when the field is focused and empty.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"prefix","type":"string","mutable":false,"attr":"prefix","reflectToAttr":true,"docs":"A short piece of text to display before the value inside the input field.\nDisplayed for all types except `textarea`.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` to indicate that the field is required.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"showLink","type":"boolean","mutable":false,"attr":"show-link","reflectToAttr":true,"docs":"For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n`true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\nrespectively. The default icon can be overridden using the `trailingIcon`\nproperty.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"step","type":"\"any\" | number","mutable":false,"attr":"step","reflectToAttr":true,"docs":"Incremental values that are valid if the field type is `number`.","docsTags":[],"default":"'any'","values":[{"value":"any","type":"string"},{"type":"number"}],"optional":false,"required":false},{"name":"suffix","type":"string","mutable":false,"attr":"suffix","reflectToAttr":true,"docs":"A short piece of text to display after the value inside the input field.\nDisplayed for all types except `textarea`.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"trailingIcon","type":"string","mutable":false,"attr":"trailing-icon","reflectToAttr":true,"docs":"Trailing icon to show to the far right in the field.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"type","type":"\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"urlAsText\" | \"week\"","mutable":false,"attr":"type","reflectToAttr":true,"docs":"Type of input.\n\nNote** regarding type `url`: `limel-input` uses the native validation\nbuilt into the browser for many types of input fields. The native\nvalidation for `url` is very strict, and does not allow relative urls,\nnor any other formats that are not a \"fully qualified\" url. To allow\nsuch urls, use the type `urlAsText` instead. `urlAsText` works exactly\nlike `text` in all regards, except that it enables use of the `showLink`\nproperty.","docsTags":[],"default":"'text'","values":[{"value":"date","type":"string"},{"value":"datetime-local","type":"string"},{"value":"email","type":"string"},{"value":"month","type":"string"},{"value":"number","type":"string"},{"value":"password","type":"string"},{"value":"search","type":"string"},{"value":"tel","type":"string"},{"value":"text","type":"string"},{"value":"textarea","type":"string"},{"value":"time","type":"string"},{"value":"url","type":"string"},{"value":"urlAsText","type":"string"},{"value":"week","type":"string"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":true,"docs":"The value of the field.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"action","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when `trailingIcon` or `leadingIcon` is set\nand the icon is interacted with.","docsTags":[]},{"event":"change","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the input value is changed.","docsTags":[]}],"styles":[{"name":"--textarea-height","annotation":"prop","docs":"Height of the field when type is set to `textarea`"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field.tsx","type":"tsx","source":"import { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { debounce } from 'lodash-es';\nimport {\n    ARROW_DOWN,\n    ARROW_DOWN_KEY_CODE,\n    ARROW_UP,\n    ARROW_UP_KEY_CODE,\n    ENTER,\n    ENTER_KEY_CODE,\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    SPACE,\n    SPACE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\nimport { InputType } from './input-field.types';\nimport { LimelListCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { getHref, getTarget } from '../../util/link-helper';\nimport { JSXBase } from '@stencil/core/internal';\nimport { createRandomString } from '../../util/random-string';\n\ninterface LinkProperties {\n    href: string;\n    target?: string;\n}\n\nconst helperTextId = 'tf-helper-text';\n\n/**\n * @exampleComponent limel-example-input-field-text\n * @exampleComponent limel-example-input-field-placeholder\n * @exampleComponent limel-example-input-field-text-multiple\n * @exampleComponent limel-example-input-field-number\n * @exampleComponent limel-example-input-field-autocomplete\n * @exampleComponent limel-example-input-field-icon-leading\n * @exampleComponent limel-example-input-field-icon-trailing\n * @exampleComponent limel-example-input-field-icon-both\n * @exampleComponent limel-example-input-field-showlink\n * @exampleComponent limel-example-input-field-error-icon\n * @exampleComponent limel-example-input-field-textarea\n * @exampleComponent limel-example-input-field-suffix\n * @exampleComponent limel-example-input-field-prefix\n * @exampleComponent limel-example-input-field-search\n * @exampleComponent limel-example-input-field-pattern\n * @exampleComponent limel-example-input-field-focus\n */\n@Component({\n    tag: 'limel-input-field',\n    shadow: true,\n    styleUrl: 'input-field.scss',\n})\nexport class InputField {\n    /**\n     * Set to `true` to disable the field.\n     * Use `disabled` to indicate that the field can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to make the field read-only.\n     * Use `readonly` when the field is only there to present the data it holds,\n     * and will not become possible for the current user to edit.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * The input label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The placeholder text shown inside the input field, when the field is focused and empty.\n     */\n    @Prop({ reflect: true })\n    public placeholder: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * A short piece of text to display before the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public prefix: string;\n\n    /**\n     * A short piece of text to display after the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public suffix: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * The value of the field.\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * Trailing icon to show to the far right in the field.\n     */\n    @Prop({ reflect: true })\n    public trailingIcon: string;\n\n    /**\n     * Leading icon to show to the far left in the field.\n     */\n    @Prop({ reflect: true })\n    public leadingIcon: string;\n\n    /**\n     * Regular expression that the current value of the input field must match.\n     * No forward slashes should be specified around the pattern.\n     * Only used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n     * `password`, or `search`.\n     */\n    @Prop({ reflect: true })\n    public pattern: string;\n\n    /**\n     * Type of input.\n     *\n     * Note** regarding type `url`: `limel-input` uses the native validation\n     * built into the browser for many types of input fields. The native\n     * validation for `url` is very strict, and does not allow relative urls,\n     * nor any other formats that are not a \"fully qualified\" url. To allow\n     * such urls, use the type `urlAsText` instead. `urlAsText` works exactly\n     * like `text` in all regards, except that it enables use of the `showLink`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public type: InputType = 'text';\n\n    /**\n     * Set to `true` to format the current value of the input field only\n     * if the field is of type number.\n     * The number format is determined by the current language of the browser.\n     */\n    @Prop({ reflect: true })\n    public formatNumber = true;\n\n    /**\n     * Incremental values that are valid if the field type is `number`.\n     */\n    @Prop({ reflect: true })\n    public step: number | 'any' = 'any';\n\n    /**\n     * Maximum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public max: number;\n\n    /**\n     * Minimum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public min: number;\n\n    /**\n     * Maximum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public maxlength: number;\n\n    /**\n     * Minimum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public minlength: number;\n\n    /**\n     * list of suggestions `value` can autocomplete to.\n     */\n    @Prop()\n    public completions: string[] = [];\n\n    /**\n     * For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n     * `true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\n     * respectively. The default icon can be overridden using the `trailingIcon`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public showLink = false;\n\n    /**\n     * Emitted when the input value is changed.\n     */\n    @Event()\n    private change: EventEmitter<string>;\n\n    /**\n     * Emitted when `trailingIcon` or `leadingIcon` is set\n     * and the icon is interacted with.\n     */\n    @Event()\n    private action: EventEmitter<void>;\n\n    @Element()\n    private limelInputField: HTMLLimelInputFieldElement;\n\n    @State()\n    private isFocused: boolean = false;\n\n    @State()\n    private isModified: boolean = false;\n\n    @State()\n    public showCompletions: boolean = false;\n\n    private mdcTextField: MDCTextField;\n    private completionsList: ListItem[] = [];\n    private portalId: string;\n\n    constructor() {\n        const debounceTimeout = 300;\n        this.changeEmitter = debounce(this.changeEmitter, debounceTimeout);\n\n        this.portalId = createRandomString();\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n\n        window.removeEventListener('resize', this.layout);\n        this.limelInputField.removeEventListener('focus', this.setFocus);\n    }\n\n    public componentDidUpdate() {\n        if (this.invalid) {\n            this.mdcTextField.valid = false;\n        }\n    }\n\n    public render() {\n        const labelId = 'tf-input-label';\n        const properties = this.getAdditionalProps();\n        properties['aria-labelledby'] = labelId;\n        properties.class = 'mdc-text-field__input';\n        properties.onInput = this.handleChange;\n        properties.onFocus = this.onFocus;\n        properties.onBlur = this.onBlur;\n        properties.required = this.required;\n        properties.readonly = this.readonly;\n        properties.disabled = this.disabled || this.readonly;\n\n        if (this.hasHelperText()) {\n            properties['aria-controls'] = helperTextId;\n            properties['aria-describedby'] = helperTextId;\n        }\n\n        return [\n            <label class={this.getContainerClassList()}>\n                <span class=\"mdc-notched-outline\" tabindex=\"-1\">\n                    <span class=\"mdc-notched-outline__leading\"></span>\n                    {this.renderLabel(labelId)}\n                    <span class=\"mdc-notched-outline__trailing\"></span>\n                </span>\n                {this.renderLeadingIcon()}\n                {this.renderEmptyValueForReadonly()}\n                {this.renderPrefix()}\n                {this.renderFormattedNumber()}\n                {this.renderInput(properties)}\n                {this.renderSuffix()}\n                {this.renderTextarea(properties)}\n                {this.renderTrailingLinkOrButton()}\n            </label>,\n            this.renderHelperLine(),\n            this.renderAutocompleteList(),\n        ];\n    }\n\n    @Watch('value')\n    protected valueWatcher(newValue: string) {\n        if (!this.mdcTextField) {\n            return;\n        }\n\n        if (newValue !== this.mdcTextField.value) {\n            this.mdcTextField.value = newValue || '';\n        }\n    }\n\n    private initialize = () => {\n        const element =\n            this.limelInputField.shadowRoot.querySelector('.mdc-text-field');\n        if (!element) {\n            return;\n        }\n\n        this.mdcTextField = new MDCTextField(element);\n\n        this.completionsList = [...this.completions].map((item) => {\n            return { text: item };\n        });\n\n        window.addEventListener('resize', this.layout, { passive: true });\n        this.limelInputField.addEventListener('focus', this.setFocus);\n    };\n\n    private setFocus = () => {\n        this.mdcTextField.focus();\n    };\n\n    private getContainerClassList = () => {\n        const classList = {\n            'mdc-text-field': true,\n            'mdc-text-field--no-label': !this.label,\n            'mdc-text-field--outlined': true,\n            'mdc-text-field--invalid': this.isInvalid(),\n            'mdc-text-field--disabled': this.disabled || this.readonly,\n            'lime-text-field--readonly': this.readonly,\n            'mdc-text-field--required': this.required,\n            'lime-text-field--empty': !this.value,\n            'lime-has-prefix': this.hasPrefix(),\n            'lime-has-suffix': this.hasSuffix(),\n        };\n\n        if (this.type === 'textarea') {\n            classList['mdc-text-field--textarea'] = true;\n            classList['has-helper-line'] =\n                !!this.helperText || !!this.maxlength;\n        } else {\n            classList['mdc-text-field--with-leading-icon'] = !!this.leadingIcon;\n            classList['mdc-text-field--with-trailing-icon'] =\n                !!this.getTrailingIcon();\n        }\n\n        return classList;\n    };\n\n    private renderInput = (\n        properties: JSXBase.InputHTMLAttributes<HTMLInputElement>\n    ) => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const type = this.type === 'urlAsText' ? 'text' : this.type;\n\n        return (\n            <input\n                {...properties}\n                type={type}\n                pattern={this.pattern}\n                onWheel={this.handleWheel}\n                onKeyDown={this.onKeyDown}\n                value={this.value}\n                placeholder={this.placeholder}\n            />\n        );\n    };\n\n    private renderTextarea = (\n        properties: JSXBase.TextareaHTMLAttributes<HTMLTextAreaElement>\n    ) => {\n        if (this.type !== 'textarea') {\n            return;\n        }\n\n        return (\n            <span class=\"mdc-text-field__resizer\">\n                <textarea {...properties} placeholder={this.placeholder}>\n                    {this.value}\n                </textarea>\n            </span>\n        );\n    };\n\n    private layout = () => {\n        this.mdcTextField?.layout();\n    };\n\n    private getAdditionalProps = () => {\n        const props: any = {};\n\n        if (this.type === 'number') {\n            props.step = this.step;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.min)) {\n            props.min = this.min;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.max)) {\n            props.max = this.max;\n        }\n\n        if (this.minlength) {\n            props.minlength = this.minlength;\n        }\n\n        if (this.maxlength) {\n            props.maxlength = this.maxlength;\n        }\n\n        return props;\n    };\n\n    private onFocus = () => {\n        this.isFocused = true;\n        this.showCompletions = true;\n    };\n\n    private onBlur = () => {\n        this.isFocused = false;\n        this.isModified = true;\n    };\n\n    private renderHelperLine = () => {\n        if (!this.maxlength && !this.hasHelperText()) {\n            return;\n        }\n\n        return (\n            <div tabIndex={-1} class=\"mdc-text-field-helper-line\">\n                {this.renderHelperText()}\n                {this.renderCharacterCounter()}\n            </div>\n        );\n    };\n\n    private renderEmptyValueForReadonly = () => {\n        if (this.readonly && !this.value) {\n            return (\n                <span class=\"lime-empty-value-for-readonly lime-looks-like-input-value\">\n                    –\n                </span>\n            );\n        }\n    };\n\n    private renderHelperText = () => {\n        if (!this.hasHelperText()) {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field-helper-text': true,\n            'mdc-text-field-helper-text--validation-msg': this.isInvalid(),\n        };\n\n        return (\n            <p class={classList} id={helperTextId}>\n                {this.helperText}\n            </p>\n        );\n    };\n\n    private hasHelperText = () => {\n        return this.helperText !== null && this.helperText !== undefined;\n    };\n\n    private renderSuffix = () => {\n        if (!this.hasSuffix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--suffix': true,\n        };\n\n        return <span class={classList}>{this.suffix}</span>;\n    };\n\n    private hasSuffix = () => {\n        return this.suffix !== null && this.suffix !== undefined;\n    };\n\n    private renderPrefix = () => {\n        if (!this.hasPrefix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--prefix': true,\n        };\n\n        return <span class={classList}>{this.prefix}</span>;\n    };\n\n    private hasPrefix = () => {\n        return this.prefix !== null && this.prefix !== undefined;\n    };\n\n    private renderCharacterCounter = () => {\n        if (!this.maxlength || this.type === 'number') {\n            return;\n        }\n\n        const text: string = this.value || '';\n        const label = `${text.length} / ${this.maxlength}`;\n\n        return <div class=\"mdc-text-field-character-counter\">{label}</div>;\n    };\n\n    private isInvalid = () => {\n        if (this.readonly) {\n            // A readonly field can never be invalid.\n            return false;\n        }\n\n        if (this.invalid) {\n            // `this.invalid` is set by the consumer. If the consumer explicitly\n            // told us to consider the field invalid, we consider it invalid\n            // regardless of what our internal validation thinks, and regardless\n            // of whether the field has been modified.\n            return true;\n        }\n\n        if (!this.isModified) {\n            return false;\n        }\n\n        const element = this.getInputElement();\n\n        return !(element && element.checkValidity());\n    };\n\n    private getInputElement = (): HTMLInputElement | HTMLTextAreaElement => {\n        let elementName = 'input';\n        if (this.type === 'textarea') {\n            elementName = 'textarea';\n        }\n\n        return this.limelInputField.shadowRoot.querySelector(elementName);\n    };\n\n    private renderLabel = (labelId: string) => {\n        const labelClassList = {\n            'mdc-floating-label': true,\n            'mdc-floating-label--float-above':\n                !!this.value || this.isFocused || this.readonly,\n        };\n\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <span class=\"mdc-notched-outline__notch\">\n                <span class={labelClassList} id={labelId}>\n                    {this.label}\n                </span>\n            </span>\n        );\n    };\n\n    private renderLeadingIcon = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        if (this.leadingIcon) {\n            return (\n                <i class=\"material-icons mdc-text-field__icon mdc-text-field__icon--leading\">\n                    <limel-icon name={this.leadingIcon} />\n                </i>\n            );\n        }\n    };\n\n    private renderTrailingLinkOrButton = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const html = [];\n\n        const trailingIcon = this.getTrailingIcon();\n\n        if (!this.isInvalid() && this.hasLink()) {\n            html.push(this.renderLinkIcon(this.getLink(), trailingIcon));\n        } else if (trailingIcon) {\n            html.push(this.renderTrailingIcon(trailingIcon));\n        }\n\n        return html;\n    };\n\n    private hasLink = () => {\n        return (\n            this.showLink &&\n            ['email', 'tel', 'url', 'urlAsText'].includes(this.type)\n        );\n    };\n\n    private getLink = () => {\n        const props: LinkProperties = { href: '' };\n        switch (this.type) {\n            case 'email':\n                props.href = `mailto:${this.value}`;\n                break;\n            case 'tel':\n                props.href = `tel:${this.value}`;\n                break;\n            default:\n                props.href = getHref(this.value);\n                props.target = getTarget(this.value);\n        }\n\n        return props;\n    };\n\n    private renderLinkIcon = (linkProps: LinkProperties, icon: string) => {\n        // If the trailing icon uses the class `mdc-text-field__icon--trailing`,\n        // MDC attaches a click handler to it, which apparently runs\n        // `preventDefault()` on the event. For links, we don't want that,\n        // so instead of `mdc-text-field__icon--trailing`, we use our own class\n        // `lime-trailing-icon-for-link`, which uses all the same styling. /Ads\n        return (\n            <a\n                {...linkProps}\n                class=\"material-icons mdc-text-field__icon lime-trailing-icon-for-link\"\n                tabindex={this.disabled || !this.value ? '-1' : '0'}\n                role=\"button\"\n            >\n                <limel-icon name={icon} />\n            </a>\n        );\n    };\n\n    private renderTrailingIcon = (icon: string) => {\n        const props: any = {\n            tabIndex: this.isInvalid() ? '-1' : '0',\n        };\n        if (!this.isInvalid()) {\n            props.onKeyPress = this.handleIconKeyPress;\n            props.onClick = this.handleIconClick;\n            props.role = 'button';\n        }\n\n        return (\n            <i\n                class=\"material-icons mdc-text-field__icon mdc-text-field__icon--trailing\"\n                {...props}\n            >\n                <limel-icon name={icon} />\n            </i>\n        );\n    };\n\n    private getTrailingIcon = () => {\n        if (this.isInvalid()) {\n            return 'high_importance';\n        }\n\n        if (this.trailingIcon) {\n            return this.trailingIcon;\n        }\n\n        if (this.showLink && this.type === 'email') {\n            return 'filled_message';\n        }\n\n        if (this.showLink && this.type === 'tel') {\n            return 'phone';\n        }\n\n        if (\n            this.showLink &&\n            (this.type === 'url' || this.type === 'urlAsText')\n        ) {\n            return 'external_link';\n        }\n    };\n\n    private renderFormattedNumber = () => {\n        if (this.type !== 'number') {\n            return;\n        }\n\n        let renderValue = this.value;\n        if (this.formatNumber && this.value) {\n            renderValue = new Intl.NumberFormat(navigator.language).format(\n                Number(this.value)\n            );\n        }\n\n        return (\n            <span class=\"lime-formatted-input lime-looks-like-input-value\">\n                {renderValue}\n            </span>\n        );\n    };\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     *\n     * @param {KeyboardEvent} event event\n     * @returns {void}\n     */\n\n    private onKeyDown = (event: KeyboardEvent): void => {\n        this.showCompletions = true;\n        const isForwardTab =\n            (event.key === TAB || event.keyCode === TAB_KEY_CODE) &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp =\n            event.key === ARROW_UP || event.keyCode === ARROW_UP_KEY_CODE;\n        const isDown =\n            event.key === ARROW_DOWN || event.keyCode === ARROW_DOWN_KEY_CODE;\n\n        if (event.keyCode === TAB_KEY_CODE && event.shiftKey) {\n            this.showCompletions = false;\n        }\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child'\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child'\n            );\n            listElement.focus();\n        }\n    };\n\n    private handleCompletionChange = (\n        event: LimelListCustomEvent<ListItem>\n    ) => {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.showCompletions = false;\n\n        /*\n         This change event doesn't need to be debounced in itself, but we want\n         to make absolutely sure that an earlier change event that *has* been\n         debounced doesn't emit after this one. Therefore, we run this through\n         the same debounced emitter function. /Ads\n         */\n        this.changeEmitter(event.detail.text);\n    };\n\n    private renderAutocompleteList = () => {\n        if (this.type === 'textarea' || !this.completions.length) {\n            return;\n        }\n\n        return this.renderDropdown();\n    };\n\n    private renderPortal = (content = null) => {\n        const dropdownZIndex = getComputedStyle(\n            this.limelInputField\n        ).getPropertyValue('--dropdown-z-index');\n\n        return (\n            <limel-portal\n                visible={this.showCompletions}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={this.showCompletions}\n                    allowClicksElement={this.limelInputField}\n                    style={{\n                        '--mdc-menu-min-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {content}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    };\n\n    private renderDropdown = () => {\n        const content = this.renderListResult();\n\n        return this.renderPortal(content);\n    };\n\n    private renderListResult = () => {\n        const filteredCompletions: ListItem[] = this.filterCompletions(\n            this.value\n        );\n        if (!filteredCompletions || filteredCompletions.length === 0) {\n            return null;\n        }\n\n        return (\n            <limel-list\n                onChange={this.handleCompletionChange}\n                onKeyDown={this.handleKeyDownInDropdown}\n                type=\"selectable\"\n                items={filteredCompletions}\n            />\n        );\n    };\n\n    private handleKeyDownInDropdown = (event: KeyboardEvent) => {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        const keyCodeFound = [\n            TAB_KEY_CODE,\n            ESCAPE_KEY_CODE,\n            ENTER_KEY_CODE,\n        ].includes(event.keyCode);\n        if (keyFound || keyCodeFound) {\n            this.setFocus();\n        }\n    };\n\n    private handleCloseMenu = () => {\n        this.showCompletions = false;\n    };\n\n    private filterCompletions = (filter: string) => {\n        if (!filter) {\n            return this.completionsList;\n        }\n\n        return this.completionsList.filter(\n            (completion) =>\n                completion.text.toLowerCase().indexOf(filter.toLowerCase()) > -1\n        );\n    };\n\n    private handleChange = (event) => {\n        event.stopPropagation();\n        let value = event.target.value;\n\n        if (this.type === 'number') {\n            if (!value && event.data) {\n                event.stopPropagation();\n\n                return;\n            }\n\n            if (value) {\n                value = Number(value);\n            }\n        }\n\n        this.changeEmitter(value);\n    };\n\n    private changeEmitter = (value: string) => {\n        this.change.emit(value);\n    };\n\n    private handleIconClick = () => {\n        if (!this.isInvalid()) {\n            this.action.emit();\n        }\n    };\n\n    private handleIconKeyPress = (event: KeyboardEvent) => {\n        const isEnter = event.key === ENTER || event.keyCode === ENTER_KEY_CODE;\n        const isSpace = event.key === SPACE || event.keyCode === SPACE_KEY_CODE;\n\n        if ((isSpace || isEnter) && !this.isInvalid()) {\n            this.action.emit();\n        }\n    };\n\n    private handleWheel = () => {\n        // This empty event handler is here to circumvent a bug.\n        // In some browsers (Chrome for example), hovering the input with\n        // the input focused, and scrolling, will both change the value\n        // AND scroll the page. We would prefer to never change the value\n        // on scroll, instead always scrolling the page, but since we\n        // haven't found a way to do that, this is the next best thing, as\n        // it prevents the page from being scrolled, but only in the\n        // circumstances when the value is changed by the scrolling.\n        // Please test THOROUGHLY if you remove this event handler 😄\n    };\n}\n"},{"filename":"input-field.scss","type":"scss","source":"@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/textfield';\n@use '@material/textfield/icon';\n@use '@material/notched-outline/mdc-notched-outline';\n@use '@material/floating-label';\n@use '@material/floating-label/mdc-floating-label';\n@use '@material/ripple';\n@use '@material/list';\n@use '@material/elevation';\n@use '@material/menu-surface';\n\n/**\n * @prop --textarea-height: Height of the field when type is set to `textarea`\n */\n\n:host {\n    position: relative;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([type='textarea']) {\n    height: var(--textarea-height, 100%);\n\n    .mdc-text-field.mdc-text-field--textarea {\n        height: var(--textarea-height, 100%);\n\n        .mdc-text-field__input {\n            margin-top: functions.pxToRem(8);\n            margin-bottom: 0;\n        }\n\n        &.has-helper-line {\n            --heightOfHelperText: 0.9375rem;\n            height: calc(\n                var(--textarea-height, 100%) - var(--heightOfHelperText)\n            );\n        }\n    }\n}\n\n@include textfield.core-styles;\n@include icon.icon-core-styles;\n\n@include shared_input-select-picker.outlined-style-overrides;\n@include shared_input-select-picker.readonly-overrides;\n@include shared_input-select-picker.cropped-label-hack;\n@include shared_input-select-picker.disabled-overrides;\n@include shared_input-select-picker.leading-icon;\n@include shared_input-select-picker.trailing-icon;\n@include shared_input-select-picker.floating-label-overrides;\n@include shared_input-select-picker.helper-text-color;\n\n.mdc-text-field--with-trailing-icon {\n    .mdc-text-field__icon--trailing {\n        margin-right: functions.pxToRem(8);\n    }\n}\n\n.lime-text-field--empty {\n    .mdc-text-field__icon--trailing {\n        @include shared_input-select-picker.looks-disabled;\n        box-shadow: none !important;\n    }\n}\n\n.mdc-text-field {\n    width: 100%;\n\n    &:not(.mdc-text-field--disabled) {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-900));\n        }\n    }\n    &.mdc-text-field--disabled {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-700));\n        }\n    }\n}\n\n.lime-empty-value-for-readonly {\n    z-index: z-index.$input-field--formatted-value;\n    position: absolute;\n    top: 0.875rem; // 14px\n    left: 1rem;\n}\n\n.lime-looks-like-input-value {\n    @include shared_input-select-picker.looks-like-input-value;\n\n    .mdc-text-field--disabled & {\n        @include shared_input-select-picker.looks-disabled;\n    }\n}\n\n.lime-formatted-input {\n    display: none;\n    width: calc(100% - #{functions.pxToRem(20)});\n    z-index: z-index.$input-field--formatted-value;\n\n    pointer-events: none;\n\n    :not(.mdc-text-field--focused):not(.mdc-text-field--invalid) & {\n        display: block;\n    }\n\n    + .mdc-text-field__input {\n        z-index: z-index.$input-field--input-with-formatted-value;\n    }\n}\n\n:not(.mdc-text-field--focused):not(.mdc-text-field--invalid) {\n    .mdc-text-field__input[type='number'] {\n        color: transparent;\n        -webkit-text-fill-color: transparent;\n    }\n\n    &.lime-text-field--readonly {\n        .mdc-text-field__input[type='number'] {\n            visibility: hidden;\n            // Not having `visibility: hidden;` makes the unformatted\n            // value selectable; which is not so nice when users\n            // click drag to select content on the screen.\n            // The reason to have it only on `readonly` mode is\n            // 1. This is the use case where it makes most sense\n            // 2. We don't want to repeat the same thing in the\n            // accessibility tree, and make it readable for assistive\n            // technologies.\n            // 3. When not readonly, clicking on the `<input />`\n            // element sets the focus and activates the edit mode.\n            // So we cannot always have it `hidden` on.\n            // which is why we have instead\n            // `color: transparent` a few lines before this.\n        }\n    }\n}\n\n.autocomplete-list-container {\n    position: relative;\n}\n\n.autocomplete-list {\n    background-color: var(--lime-elevated-surface-background-color);\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    max-height: functions.pxToRem(200);\n    overflow-y: auto;\n}\n\n.mdc-deprecated-list-item {\n    cursor: pointer;\n}\n\ninput.mdc-text-field__input {\n    @include shared_input-select-picker.input-field-placeholder;\n\n    &::-webkit-search-cancel-button {\n        @include mixins.clear-all-button;\n\n        -webkit-appearance: none;\n\n        position: absolute;\n        right: functions.pxToRem(8);\n        top: 0;\n        bottom: 0;\n        margin: auto;\n\n        &:active {\n            transform: none; //Makes the \"clear-all button\" work\n        }\n    }\n}\n\n.mdc-text-field-character-counter {\n    transition: opacity 0.2s ease;\n    opacity: 0;\n\n    .mdc-text-field--focused + .mdc-text-field-helper-line & {\n        opacity: 1;\n    }\n\n    &:before {\n        height: shared_input-select-picker.$height-of-helper-text-pseudo-before;\n    }\n}\n\n.mdc-text-field-helper-text {\n    &:before {\n        height: shared_input-select-picker.$height-of-helper-text-pseudo-before;\n    }\n}\n\n@import './partial-styles/trailing-icon.scss';\n@import './partial-styles/readonly';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress","filePath":"./src/components/linear-progress/linear-progress.tsx","fileName":"linear-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/usage","tag":"limel-linear-progress","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-linear-progress"},{"name":"exampleComponent","text":"limel-example-linear-progress-color"},{"name":"exampleComponent","text":"limel-example-linear-progress-indeterminate"}],"encapsulation":"shadow","dependents":["limel-example-colors-in-components","limel-example-linear-progress","limel-example-linear-progress-color","limel-example-linear-progress-indeterminate","limel-info-tile"],"dependencies":[],"dependencyGraph":{"limel-example-colors-in-components":["limel-linear-progress"],"limel-example-linear-progress":["limel-linear-progress"],"limel-example-linear-progress-color":["limel-linear-progress"],"limel-example-linear-progress-indeterminate":["limel-linear-progress"],"limel-info-tile":["limel-linear-progress"]},"props":[{"name":"indeterminate","type":"boolean","mutable":false,"attr":"indeterminate","reflectToAttr":false,"docs":"Puts the progress bar in an indeterminate state","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"number","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The value of the progress bar. Should be between `0` and `1`.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--background-color","annotation":"prop","docs":"Color to use for progress-bar track."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"linear-progress.tsx","type":"tsx","source":"import { MDCLinearProgress } from '@material/linear-progress';\nimport { Component, Element, h, Prop, Watch } from '@stencil/core';\n\n/**\n * @exampleComponent limel-example-linear-progress\n * @exampleComponent limel-example-linear-progress-color\n * @exampleComponent limel-example-linear-progress-indeterminate\n */\n@Component({\n    tag: 'limel-linear-progress',\n    shadow: true,\n    styleUrl: 'linear-progress.scss',\n})\nexport class LinearProgress {\n    /**\n     * The value of the progress bar. Should be between `0` and `1`.\n     */\n    @Prop()\n    public value: number = 0;\n\n    /**\n     * Puts the progress bar in an indeterminate state\n     */\n    @Prop()\n    public indeterminate: boolean = false;\n\n    @Element()\n    private host: HTMLLimelLinearProgressElement;\n\n    private mdcLinearProgress: MDCLinearProgress;\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const element = this.host.shadowRoot.querySelector(\n            '.mdc-linear-progress'\n        );\n        if (!element) {\n            return;\n        }\n\n        this.mdcLinearProgress = new MDCLinearProgress(element);\n        this.mdcLinearProgress.progress = this.value;\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcLinearProgress) {\n            this.mdcLinearProgress.destroy();\n        }\n    }\n\n    public render() {\n        const classList = {\n            'mdc-linear-progress': true,\n            'mdc-linear-progress--indeterminate': this.indeterminate,\n        };\n\n        return (\n            <div\n                role=\"progressbar\"\n                class={classList}\n                aria-label=\"Progress Bar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"1\"\n                aria-valuenow={this.value}\n            >\n                <div class=\"mdc-linear-progress__buffer\">\n                    <div class=\"mdc-linear-progress__buffer-bar\"></div>\n                </div>\n                <div class=\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\">\n                    <span class=\"mdc-linear-progress__bar-inner\" />\n                </div>\n                <div class=\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\">\n                    <span class=\"mdc-linear-progress__bar-inner\" />\n                </div>\n            </div>\n        );\n    }\n\n    @Watch('value')\n    protected watchValue(newValue) {\n        if (!this.mdcLinearProgress) {\n            return;\n        }\n\n        this.mdcLinearProgress.progress = newValue;\n    }\n}\n"},{"filename":"linear-progress.scss","type":"scss","source":"@use '../../style/internal/lime-theme';\n@use '@material/linear-progress';\n\n/**\n * @prop --background-color: Color to use for progress-bar track.\n */\n\n@include linear-progress.core-styles;\n\n.mdc-linear-progress {\n    text-align: left;\n}\n\n@include linear-progress.buffer-color(\n    var(--background-color, rgba(var(--contrast-800), 0.5))\n);\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list","filePath":"./src/components/list/list.tsx","fileName":"list.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/usage","tag":"limel-list","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-list"},{"name":"exampleComponent","text":"limel-example-list-secondary"},{"name":"exampleComponent","text":"limel-example-list-selectable"},{"name":"exampleComponent","text":"limel-example-list-icons"},{"name":"exampleComponent","text":"limel-example-list-badge-icons"},{"name":"exampleComponent","text":"limel-example-list-checkbox"},{"name":"exampleComponent","text":"limel-example-list-checkbox-icons"},{"name":"exampleComponent","text":"limel-example-list-radio-button"},{"name":"exampleComponent","text":"limel-example-list-radio-button-icons"},{"name":"exampleComponent","text":"limel-example-list-action"},{"name":"exampleComponent","text":"limel-example-list-striped"},{"name":"exampleComponent","text":"limel-example-list-badge-icons-with-multiple-lines"},{"name":"exampleComponent","text":"limel-example-list-grid"},{"name":"exampleComponent","text":"limel-example-list-primary-component"}],"encapsulation":"shadow","dependents":["limel-example-list","limel-example-list-action","limel-example-list-badge-icons","limel-example-list-badge-icons-with-multiple-lines","limel-example-list-checkbox","limel-example-list-checkbox-icons","limel-example-list-grid","limel-example-list-icons","limel-example-list-primary-component","limel-example-list-radio-button","limel-example-list-radio-button-icons","limel-example-list-secondary","limel-example-list-selectable","limel-example-list-striped","limel-input-field","limel-picker","limel-select","my-custom-menu","my-custom-menu-with-notifications"],"dependencies":[],"dependencyGraph":{"limel-example-list":["limel-list"],"limel-example-list-action":["limel-list"],"limel-example-list-badge-icons":["limel-list"],"limel-example-list-badge-icons-with-multiple-lines":["limel-list"],"limel-example-list-checkbox":["limel-list"],"limel-example-list-checkbox-icons":["limel-list"],"limel-example-list-grid":["limel-list"],"limel-example-list-icons":["limel-list"],"limel-example-list-primary-component":["limel-list"],"limel-example-list-radio-button":["limel-list"],"limel-example-list-radio-button-icons":["limel-list"],"limel-example-list-secondary":["limel-list"],"limel-example-list-selectable":["limel-list"],"limel-example-list-striped":["limel-list"],"limel-input-field":["limel-list"],"limel-picker":["limel-list"],"limel-select":["limel-list"],"my-custom-menu":["limel-list"],"my-custom-menu-with-notifications":["limel-list"]},"props":[{"name":"badgeIcons","type":"boolean","mutable":false,"attr":"badge-icons","reflectToAttr":false,"docs":"Set to `true` if the list should display larger icons with a background","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"iconSize","type":"\"large\" | \"medium\" | \"small\" | \"x-small\"","mutable":false,"attr":"icon-size","reflectToAttr":false,"docs":"Size of the icons in the list","docsTags":[],"default":"'small'","values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"small","type":"string"},{"value":"x-small","type":"string"}],"optional":false,"required":false},{"name":"items","type":"(ListSeparator | ListItem<any>)[]","mutable":false,"reflectToAttr":false,"docs":"List of items to display","docsTags":[],"values":[{"type":"(ListSeparator"},{"type":"ListItem<any>)[]"}],"optional":false,"required":false},{"name":"maxLinesSecondaryText","type":"number","mutable":false,"attr":"max-lines-secondary-text","reflectToAttr":false,"docs":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","docsTags":[],"default":"3","values":[{"type":"number"}],"optional":false,"required":false},{"name":"type","type":"\"checkbox\" | \"radio\" | \"selectable\"","mutable":false,"attr":"type","reflectToAttr":false,"docs":"The type of the list, omit to get a regular list. Available types are:\n`selectable`: regular list with single selection.\n`radio`: radio button list with single selection.\n`checkbox`: checkbox list with multiple selection.","docsTags":[],"values":[{"value":"checkbox","type":"string"},{"value":"radio","type":"string"},{"value":"selectable","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"ListItem<any> | ListItem<any>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a new value has been selected from the list. Only fired if selectable is set to true","docsTags":[]},{"event":"select","detail":"ListItem<any> | ListItem<any>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when an action has been selected from the action menu of a list item","docsTags":[]}],"styles":[{"name":"--checkbox-unchecked-border-color","annotation":"prop","docs":"Affects the border color of the default state of the checkbox (when it is not checked). Defaults to `--contrast-900`."},{"name":"--icon-background-color","annotation":"prop","docs":"Color to use for icon background when `badgeIcons=true`."},{"name":"--icon-color","annotation":"prop","docs":"Color to use for icon. Defaults to grey when `badgeIcons=false`. Defaults to white when `badgeIcons=true`."},{"name":"--list-background-color-of-even-interactive-items","annotation":"prop","docs":"Background color of even list items, when `has-striped-rows` class is applied to the component. Defaults to `transparent`."},{"name":"--list-background-color-of-odd-interactive-items","annotation":"prop","docs":"Background color of odd list items, when `has-striped-rows` class is applied to the component. Defaults to `--contrast-200`."},{"name":"--list-grid-gap","annotation":"prop","docs":"Distance between items in a list that has `has-grid-layout` class. Defaults to `0.75rem`."},{"name":"--list-grid-item-max-width","annotation":"prop","docs":"Maximum width of items in a list that has `has-grid-layout` class. Defaults to `10rem`."},{"name":"--list-grid-item-min-width","annotation":"prop","docs":"Minimum width of items in a list that has `has-grid-layout` class. Defaults to `7.5rem`."},{"name":"--list-grid-max-width","annotation":"prop","docs":"Maximum width of a list that has `has-grid-layout` class. Defaults to `100%`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list.tsx","type":"tsx","source":"import {\n    IconSize,\n    ListItem,\n    ListSeparator,\n    ListType,\n} from '@limetech/lime-elements';\nimport { MDCList, MDCListActionEvent } from '@material/list';\nimport { strings as listStrings } from '@material/list/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { ListRenderer } from './list-renderer';\nimport { ListRendererConfig } from './list-renderer-config';\n\nconst { ACTION_EVENT } = listStrings;\n\n/**\n * @exampleComponent limel-example-list\n * @exampleComponent limel-example-list-secondary\n * @exampleComponent limel-example-list-selectable\n * @exampleComponent limel-example-list-icons\n * @exampleComponent limel-example-list-badge-icons\n * @exampleComponent limel-example-list-checkbox\n * @exampleComponent limel-example-list-checkbox-icons\n * @exampleComponent limel-example-list-radio-button\n * @exampleComponent limel-example-list-radio-button-icons\n * @exampleComponent limel-example-list-action\n * @exampleComponent limel-example-list-striped\n * @exampleComponent limel-example-list-badge-icons-with-multiple-lines\n * @exampleComponent limel-example-list-grid\n * @exampleComponent limel-example-list-primary-component\n */\n@Component({\n    tag: 'limel-list',\n    shadow: true,\n    styleUrl: 'list.scss',\n})\nexport class List {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<ListItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * The type of the list, omit to get a regular list. Available types are:\n     * `selectable`: regular list with single selection.\n     * `radio`: radio button list with single selection.\n     * `checkbox`: checkbox list with multiple selection.\n     */\n    @Prop()\n    public type: ListType;\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n    // eslint-disable-next-line no-magic-numbers\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelListElement;\n\n    private config: ListRendererConfig;\n    private listRenderer = new ListRenderer();\n    private mdcList: MDCList;\n    private multiple: boolean;\n    private selectable: boolean;\n\n    /**\n     * Fired when a new value has been selected from the list. Only fired if selectable is set to true\n     */\n    @Event()\n    private change: EventEmitter<ListItem | ListItem[]>;\n\n    /**\n     * Fired when an action has been selected from the action menu of a list item\n     */\n    @Event()\n    protected select: EventEmitter<ListItem | ListItem[]>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            type: this.type,\n            iconSize: this.iconSize,\n        };\n        let maxLinesSecondaryText = +this.maxLinesSecondaryText?.toFixed();\n        if (this.maxLinesSecondaryText < 1) {\n            maxLinesSecondaryText = 1;\n        }\n\n        const html = this.listRenderer.render(this.items, this.config);\n\n        return (\n            <Host\n                style={{\n                    '--maxLinesSecondaryText': `${maxLinesSecondaryText}`,\n                }}\n            >\n                {html}\n            </Host>\n        );\n    }\n\n    @Watch('type')\n    protected handleType() {\n        this.setupListeners();\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        if (!this.mdcList) {\n            return;\n        }\n\n        const listItems = this.items.filter(this.isListItem);\n\n        if (this.multiple) {\n            this.mdcList.selectedIndex = listItems\n                .filter((item: ListItem) => item.selected)\n                .map((item: ListItem) => listItems.indexOf(item));\n        } else {\n            const selectedIndex = listItems.findIndex(\n                (item: ListItem) => item.selected\n            );\n\n            if (selectedIndex === -1) {\n                this.mdcList.initializeListType();\n            } else {\n                this.mdcList.selectedIndex = selectedIndex;\n            }\n        }\n    }\n\n    private setup = () => {\n        this.setupList();\n\n        this.setupListeners();\n    };\n\n    private setupList = () => {\n        const element = this.element.shadowRoot.querySelector(\n            '.mdc-deprecated-list'\n        );\n        if (!element) {\n            return;\n        }\n\n        this.mdcList = new MDCList(element);\n        this.mdcList.hasTypeahead = true;\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcList) {\n            return;\n        }\n\n        this.mdcList.unlisten(ACTION_EVENT, this.handleAction);\n\n        this.selectable = ['selectable', 'radio', 'checkbox'].includes(\n            this.type\n        );\n        this.multiple = this.type === 'checkbox';\n\n        if (!this.selectable) {\n            return;\n        }\n\n        this.mdcList.listen(ACTION_EVENT, this.handleAction);\n        this.mdcList.singleSelection = !this.multiple;\n    };\n\n    private teardown = () => {\n        this.mdcList?.unlisten(ACTION_EVENT, this.handleAction);\n        this.mdcList?.destroy();\n    };\n\n    private handleAction = (event: MDCListActionEvent) => {\n        if (!this.multiple) {\n            this.handleSingleSelect(event.detail.index);\n\n            return;\n        }\n\n        this.handleMultiSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: ListItem = listItems.find((item: ListItem) => {\n            return !!item.selected;\n        });\n\n        if (selectedItem) {\n            this.change.emit({ ...selectedItem, selected: false });\n        }\n\n        if (listItems[index] !== selectedItem) {\n            this.change.emit({ ...listItems[index], selected: true });\n        }\n    };\n\n    private handleMultiSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItems: ListItem[] = listItems\n            .filter((item: ListItem, listIndex: number) => {\n                if (listIndex === index) {\n                    // This is the item that was selected or deselected,\n                    // so we negate its previous selection status.\n                    return !item.selected;\n                }\n\n                // This is an item that didn't change, so we keep its selection status.\n                return item.selected;\n            })\n            .map((item: ListItem) => {\n                return { ...item, selected: true };\n            });\n\n        this.change.emit(selectedItems);\n    };\n\n    private isListItem = (item: ListItem): boolean => {\n        return !('separator' in item);\n    };\n}\n"},{"filename":"list.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n@use '../checkbox/checkbox.scss';\n\n@use '@material/list';\n\n$list-border-radius: 0.375rem; // 6px\n$list--has-interactive-items--mdc-list-item--hover: 1;\n$list-static-actions-list: 1;\n$list-mdc-list-item: 0;\n\n/**\n * @prop --icon-background-color: Color to use for icon background when `badgeIcons=true`.\n * @prop --icon-color: Color to use for icon. Defaults to grey when `badgeIcons=false`. Defaults to white when `badgeIcons=true`.\n * @prop --list-grid-max-width: Maximum width of a list that has `has-grid-layout` class. Defaults to `100%`.\n * @prop --list-grid-item-max-width: Maximum width of items in a list that has `has-grid-layout` class. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in a list that has `has-grid-layout` class. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between items in a list that has `has-grid-layout` class. Defaults to `0.75rem`.\n * @prop --list-background-color-of-odd-interactive-items: Background color of odd list items, when `has-striped-rows` class is applied to the component. Defaults to `--contrast-200`.\n * @prop --list-background-color-of-even-interactive-items:  Background color of even list items, when `has-striped-rows` class is applied to the component. Defaults to `transparent`.\n */\n\n:host(limel-list) {\n    display: block;\n    isolation: isolate;\n    @include checkbox.custom-checkbox-styles;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n@include list.deprecated-core-styles;\n\n.mdc-deprecated-list {\n    --mdc-theme-text-icon-on-background: var(\n        --icon-color,\n        rgb(var(--contrast-900))\n    );\n    margin: functions.pxToRem(\n        4\n    ); // added space to visualize keyboard-focused items\n    padding: 0;\n    border-radius: $list-border-radius;\n\n    .mdc-deprecated-list-divider {\n        border-bottom-color: rgb(var(--contrast-400));\n    }\n\n    .mdc-deprecated-list-item {\n        transition: background-color 0.2s ease;\n        box-sizing: border-box;\n        z-index: $list-mdc-list-item; // in Chrome on Windows, menus flicker when they have a scroll bar and user hovers on them. We may be able to remove this in future versions of Chrome. Kia 2021-May-12\n\n        &:not(.mdc-deprecated-list-item--disabled) {\n            &:hover {\n                background-color: rgb(var(--contrast-300));\n                z-index: 1;\n            }\n        }\n\n        &.mdc-deprecated-list-item--disabled {\n            cursor: not-allowed;\n\n            limel-icon {\n                opacity: 0.38; // similar to `mdc-deprecated-list-item__text` when disabled\n            }\n        }\n\n        &:first-child {\n            border-top-left-radius: $list-border-radius;\n            border-top-right-radius: $list-border-radius;\n        }\n        &:last-child {\n            border-bottom-right-radius: $list-border-radius;\n            border-bottom-left-radius: $list-border-radius;\n        }\n    }\n\n    &.selectable\n        .mdc-deprecated-list-item:not(.mdc-deprecated-list-item--disabled) {\n        cursor: pointer;\n    }\n\n    .mdc-deprecated-list-item__meta {\n        // the action menu on the right side a list item\n        line-height: 100%;\n        margin-right: -0.5rem;\n    }\n\n    .mdc-deprecated-list-item__graphic {\n        margin-right: functions.pxToRem(8);\n    }\n\n    &.mdc-deprecated-list--avatar-list {\n        position: relative;\n\n        limel-icon.mdc-deprecated-list-item__graphic {\n            background-color: var(\n                --icon-background-color,\n                rgb(var(--contrast-900))\n            );\n            color: var(--icon-color, rgba(var(--color-white), 0.88));\n            margin-right: functions.pxToRem(12);\n            margin-left: functions.pxToRem(-4);\n        }\n\n        hr.mdc-deprecated-list-divider {\n            position: absolute;\n            bottom: 0;\n\n            &.mdc-deprecated-list-divider--inset {\n                --icon-width: #{functions.pxToRem(40)};\n                --icon-right-padding: #{functions.pxToRem(12)};\n                --list-right-padding: #{functions.pxToRem(12)};\n                right: 0;\n                width: calc(\n                    100% - var(--icon-width) - var(--icon-right-padding) -\n                        var(--list-right-padding)\n                );\n\n                &.x-small {\n                    --icon-width: #{functions.pxToRem(24)};\n                }\n\n                &.small {\n                    --icon-width: #{functions.pxToRem(32)};\n                }\n\n                &.medium {\n                    --icon-width: #{functions.pxToRem(40)};\n                }\n\n                &.large {\n                    --icon-width: #{functions.pxToRem(48)};\n                }\n            }\n        }\n\n        .mdc-deprecated-list-item:last-child hr.mdc-deprecated-list-divider {\n            display: none;\n        }\n    }\n\n    &.mdc-deprecated-list--two-line {\n        .mdc-deprecated-list-item__text {\n            padding-top: functions.pxToRem(8);\n            padding-bottom: functions.pxToRem(8);\n        }\n        .mdc-deprecated-list-item__primary-text {\n            margin-bottom: functions.pxToRem(4);\n        }\n    }\n\n    .mdc-deprecated-list-item__secondary-text,\n    .mdc-deprecated-list-item__primary-text,\n    .mdc-deprecated-list-item__command-text {\n        margin: 0;\n        &:before,\n        &:after {\n            display: none;\n        }\n    }\n\n    .mdc-deprecated-list-item__command-text {\n        color: rgb(var(--contrast-800));\n        margin-left: 0.7rem;\n    }\n\n    .mdc-deprecated-list-item__text {\n        align-self: center;\n        width: 100%;\n    }\n\n    .has-primary-component {\n        .mdc-deprecated-list-item__text {\n            margin-left: 0.5rem;\n        }\n    }\n    .mdc-deprecated-list-item__primary-command-text {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: baseline;\n    }\n\n    // Tweaks to display the icon correctly in Edge\n    limel-icon.mdc-deprecated-list-item__graphic {\n        display: block;\n    }\n}\n\n.mdc-deprecated-list:not(.mdc-deprecated-list--avatar-list) {\n    limel-icon.mdc-deprecated-list-item__graphic {\n        // Tweaks to make icon lists align nicely with badge-icon lists.\n        &[size='x-small'] {\n            margin-right: functions.pxToRem(4);\n        }\n        &[size='small'] {\n            margin-right: functions.pxToRem(8);\n        }\n        &[size='medium'] {\n            margin-right: functions.pxToRem(8);\n        }\n        &[size='large'] {\n            margin-right: functions.pxToRem(12);\n        }\n    }\n}\n\n.mdc-deprecated-list-item.mdc-deprecated-list-item--selected {\n    &:before {\n        background-color: var(--mdc-theme-primary);\n        opacity: 0.15;\n    }\n}\n\n:not(.mdc-deprecated-list--non-interactive) {\n    > {\n        :not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item {\n            @include mixins.visualize-keyboard-focus;\n\n            &:focus-visible {\n                border-radius: $list-border-radius;\n                z-index: $list--has-interactive-items--mdc-list-item--hover;\n            }\n        }\n    }\n}\n\n@import '../checkbox/checkbox.scss';\n\n@import './radio-button/radio-button.scss';\n\n@import './partial-styles/custom-styles.scss';\n@import './partial-styles/enable-multiline-text.scss';\n@import './partial-styles/_has-grid-layout.scss';\n@import './partial-styles/_static-actions.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu","filePath":"./src/components/menu/menu.tsx","fileName":"menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/usage","tag":"limel-menu","overview":"","usage":{},"docs":"","docsTags":[{"name":"slot","text":"trigger - Element to use as a trigger for the menu."},{"name":"exampleComponent","text":"limel-example-menu-basic"},{"name":"exampleComponent","text":"limel-example-menu-disabled"},{"name":"exampleComponent","text":"limel-example-menu-open-direction"},{"name":"exampleComponent","text":"limel-example-menu-icons"},{"name":"exampleComponent","text":"limel-example-menu-badge-icons"},{"name":"exampleComponent","text":"limel-example-menu-grid"},{"name":"exampleComponent","text":"limel-example-menu-hotkeys"},{"name":"exampleComponent","text":"limel-example-menu-secondary-text"},{"name":"exampleComponent","text":"limel-example-menu-notification"},{"name":"exampleComponent","text":"limel-example-menu-composite"}],"encapsulation":"shadow","dependents":["limel-example-header-menu","limel-example-menu-badge-icons","limel-example-menu-basic","limel-example-menu-composite","limel-example-menu-disabled","limel-example-menu-grid","limel-example-menu-hotkeys","limel-example-menu-icons","limel-example-menu-notification","limel-example-menu-open-direction","limel-example-menu-secondary-text","limel-split-button"],"dependencies":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"dependencyGraph":{"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-example-header-menu":["limel-menu"],"limel-example-menu-badge-icons":["limel-menu"],"limel-example-menu-basic":["limel-menu"],"limel-example-menu-composite":["limel-menu"],"limel-example-menu-disabled":["limel-menu"],"limel-example-menu-grid":["limel-menu"],"limel-example-menu-hotkeys":["limel-menu"],"limel-example-menu-icons":["limel-menu"],"limel-example-menu-notification":["limel-menu"],"limel-example-menu-open-direction":["limel-menu"],"limel-example-menu-secondary-text":["limel-menu"],"limel-split-button":["limel-menu"]},"props":[{"name":"badgeIcons","type":"boolean","mutable":false,"attr":"badge-icons","reflectToAttr":true,"docs":"Defines whether the menu should show badges.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Sets the disabled state of the menu.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"gridLayout","type":"boolean","mutable":false,"attr":"grid-layout","reflectToAttr":true,"docs":"Renders list items in a grid layout, rather than a vertical list","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"items","type":"(MenuItem<any> | ListSeparator)[]","mutable":false,"reflectToAttr":false,"docs":"A list of items and separators to show in the menu.","docsTags":[],"default":"[]","values":[{"type":"(MenuItem<any>"},{"type":"ListSeparator)[]"}],"optional":false,"required":false},{"name":"open","type":"boolean","mutable":true,"attr":"open","reflectToAttr":true,"docs":"Sets the open state of the menu.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"openDirection","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","mutable":false,"attr":"open-direction","reflectToAttr":true,"docs":"Decides the menu's location in relation to its trigger","docsTags":[],"default":"'bottom-start'","values":[{"value":"bottom","type":"string"},{"value":"bottom-end","type":"string"},{"value":"bottom-start","type":"string"},{"value":"left","type":"string"},{"value":"left-end","type":"string"},{"value":"left-start","type":"string"},{"value":"right","type":"string"},{"value":"right-end","type":"string"},{"value":"right-start","type":"string"},{"value":"top","type":"string"},{"value":"top-end","type":"string"},{"value":"top-start","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Is emitted when the menu is cancelled.","docsTags":[]},{"event":"select","detail":"MenuItem<any> | MenuItem<any>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Is emitted when a menu item is selected.","docsTags":[]}],"styles":[{"name":"--dropdown-z-index","annotation":"prop","docs":"`z-index` of the dropdown menu."},{"name":"--list-grid-gap","annotation":"prop","docs":"Distance between the items in the menu list when `gridLayout={true}`. Defaults to `0.75rem`."},{"name":"--list-grid-item-max-width","annotation":"prop","docs":"Maximum width of items in the menu list when `gridLayout={true}`. Defaults to `10rem`."},{"name":"--list-grid-item-min-width","annotation":"prop","docs":"Minimum width of items in the menu list when `gridLayout={true}`. Defaults to `7.5rem`."},{"name":"--menu-surface-width","annotation":"prop","docs":"Width of the menu surface."},{"name":"--notification-badge-background-color","annotation":"prop","docs":"Defines the background color of notification badges. Defaults to `--color-red-default`."},{"name":"--notification-badge-text-color","annotation":"prop","docs":"Defines the text color of notification badges. Defaults to `--color-white`."}],"slots":[{"name":"trigger","docs":"Element to use as a trigger for the menu."}],"parts":[],"listeners":[],"sources":[{"filename":"menu.tsx","type":"tsx","source":"import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Element,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { zipObject } from 'lodash-es';\nimport {\n    ListSeparator,\n    MenuItem,\n    OpenDirection,\n} from '@limetech/lime-elements';\n\n/**\n * @slot trigger - Element to use as a trigger for the menu.\n * @exampleComponent limel-example-menu-basic\n * @exampleComponent limel-example-menu-disabled\n * @exampleComponent limel-example-menu-open-direction\n * @exampleComponent limel-example-menu-icons\n * @exampleComponent limel-example-menu-badge-icons\n * @exampleComponent limel-example-menu-grid\n * @exampleComponent limel-example-menu-hotkeys\n * @exampleComponent limel-example-menu-secondary-text\n * @exampleComponent limel-example-menu-notification\n * @exampleComponent limel-example-menu-composite\n */\n@Component({\n    tag: 'limel-menu',\n    shadow: true,\n    styleUrl: 'menu.scss',\n})\nexport class Menu {\n    /**\n     * A list of items and separators to show in the menu.\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator> = [];\n\n    /**\n     * Sets the disabled state of the menu.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Decides the menu's location in relation to its trigger\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'bottom-start';\n\n    /**\n     * Sets the open state of the menu.\n     */\n    @Prop({ mutable: true, reflect: true })\n    public open = false;\n\n    /**\n     * Defines whether the menu should show badges.\n     */\n    @Prop({ reflect: true })\n    public badgeIcons = false;\n\n    /**\n     * Renders list items in a grid layout, rather than a vertical list\n     */\n    @Prop({ reflect: true })\n    public gridLayout = false;\n\n    /**\n     * Is emitted when the menu is cancelled.\n     */\n    @Event()\n    private cancel: EventEmitter<void>;\n\n    /**\n     * Is emitted when a menu item is selected.\n     */\n    @Event()\n    private select: EventEmitter<MenuItem | MenuItem[]>;\n\n    @Element()\n    private host: HTMLLimelMenuElement;\n\n    private list: HTMLLimelMenuListElement;\n\n    private portalId: string;\n\n    constructor() {\n        this.portalId = createRandomString();\n    }\n\n    @Watch('open')\n    protected openWatcher() {\n        if (!this.open) {\n            return;\n        }\n\n        const observer = new IntersectionObserver(() => {\n            observer.unobserve(this.list);\n            this.focusMenuItem();\n        });\n        observer.observe(this.list);\n    }\n\n    public render() {\n        const cssProperties = this.getCssProperties();\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index'\n        );\n\n        return (\n            <div class=\"mdc-menu-surface--anchor\" onClick={this.onTriggerClick}>\n                <slot name=\"trigger\" />\n                {this.renderNotificationBadge()}\n                <limel-portal\n                    visible={this.open}\n                    containerId={this.portalId}\n                    openDirection={this.openDirection}\n                    position=\"absolute\"\n                    containerStyle={{ 'z-index': dropdownZIndex }}\n                >\n                    <limel-menu-surface\n                        open={this.open}\n                        onDismiss={this.onClose}\n                        style={cssProperties}\n                        class={{\n                            'has-grid-layout': this.gridLayout,\n                        }}\n                    >\n                        <limel-menu-list\n                            class={{\n                                'has-grid-layout has-interactive-items':\n                                    this.gridLayout,\n                            }}\n                            items={this.items}\n                            type=\"menu\"\n                            badgeIcons={this.badgeIcons}\n                            onSelect={this.handleSelect}\n                            ref={this.setListElement}\n                        />\n                    </limel-menu-surface>\n                </limel-portal>\n            </div>\n        );\n    }\n\n    public componentDidRender() {\n        const slotElement = this.host.shadowRoot.querySelector('slot');\n        slotElement.assignedElements().forEach(this.setTriggerAttributes);\n    }\n\n    private setTriggerAttributes = (element: HTMLElement) => {\n        const attributes = {\n            'aria-haspopup': true,\n            'aria-expanded': this.open,\n            disabled: this.disabled,\n            role: 'button',\n        };\n\n        for (const [key, value] of Object.entries(attributes)) {\n            if (!value) {\n                element.removeAttribute(key);\n            } else {\n                element.setAttribute(key, String(value));\n            }\n        }\n    };\n\n    private onClose = () => {\n        this.cancel.emit();\n        this.open = false;\n    };\n\n    private onTriggerClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        if (this.disabled) {\n            return;\n        }\n\n        this.open = !this.open;\n    };\n\n    private handleSelect = (event: CustomEvent<MenuItem>) => {\n        event.stopPropagation();\n        this.select.emit(event.detail);\n        this.open = false;\n    };\n\n    private getCssProperties() {\n        const propertyNames = [\n            '--menu-surface-width',\n            '--list-grid-item-max-width',\n            '--list-grid-item-min-width',\n            '--list-grid-gap',\n            '--notification-badge-background-color',\n            '--notification-badge-text-color',\n        ];\n        const style = getComputedStyle(this.host);\n        const values = propertyNames.map((property) => {\n            return style.getPropertyValue(property);\n        });\n\n        return zipObject(propertyNames, values);\n    }\n\n    private setListElement = (element: HTMLLimelMenuListElement) => {\n        this.list = element;\n    };\n\n    private focusMenuItem = () => {\n        const activeElement = this.list.shadowRoot.activeElement as HTMLElement;\n        activeElement?.blur();\n\n        const MenuItems = this.items.filter(this.isMenuItem);\n        const selectedIndex = Math.max(\n            MenuItems.findIndex((item) => item.selected),\n            0\n        );\n        const menuElements: HTMLElement[] = Array.from(\n            this.list.shadowRoot.querySelectorAll('[role=\"menuitem\"]')\n        );\n        menuElements[selectedIndex]?.focus();\n    };\n\n    private isMenuItem(item: MenuItem | ListSeparator): item is MenuItem {\n        return !('separator' in item);\n    }\n\n    private renderNotificationBadge = () => {\n        if (this.items.some(this.hasNotificationBadge)) {\n            return <limel-badge />;\n        }\n    };\n\n    private hasNotificationBadge = (item: MenuItem | ListSeparator) =>\n        this.isMenuItem(item) && item.badge !== undefined;\n}\n"},{"filename":"menu.scss","type":"scss","source":"@use '../../style/functions';\n\n// Note! The `--dropdown-z-index` property is used from `menu.tsx`.\n\n/**\n * @prop --dropdown-z-index: `z-index` of the dropdown menu.\n * @prop --menu-surface-width: Width of the menu surface.\n * @prop --list-grid-item-max-width: Maximum width of items in the menu list when `gridLayout={true}`. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in the menu list when `gridLayout={true}`. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between the items in the menu list when `gridLayout={true}`. Defaults to `0.75rem`.\n * @prop --notification-badge-text-color: Defines the text color of notification badges. Defaults to `--color-white`.\n * @prop --notification-badge-background-color: Defines the background color of notification badges. Defaults to `--color-red-default`.\n */\n\n:host(limel-menu) {\n    isolation: isolate;\n    position: relative;\n    display: inline-block;\n    --badge-background-color: var(\n        --notification-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    --badge-text-color: var(\n        --notification-badge-text-color,\n        rgb(var(--color-white))\n    );\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n.menu__trigger {\n    border-color: transparent;\n    border-width: 1px;\n    border-style: solid;\n    background: none;\n    color: rgb(var(--contrast-800));\n    height: functions.pxToRem(36);\n\n    &-enabled {\n        &:hover {\n            border-color: rgb(var(--contrast-800));\n            color: rgb(var(--contrast-1100));\n        }\n    }\n}\n\n.mdc-menu-surface--anchor {\n    position: relative;\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.25rem;\n    right: -0.25rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu-list","filePath":"./src/components/menu-list/menu-list.tsx","fileName":"menu-list.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu-list/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu-list/usage","tag":"limel-menu-list","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-menu"],"dependencies":[],"dependencyGraph":{"limel-menu":["limel-menu-list"]},"props":[{"name":"badgeIcons","type":"boolean","mutable":false,"attr":"badge-icons","reflectToAttr":false,"docs":"Set to `true` if the list should display larger icons with a background","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"iconSize","type":"\"large\" | \"medium\" | \"small\" | \"x-small\"","mutable":false,"attr":"icon-size","reflectToAttr":false,"docs":"Size of the icons in the list","docsTags":[],"default":"'small'","values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"small","type":"string"},{"value":"x-small","type":"string"}],"optional":false,"required":false},{"name":"items","type":"(MenuItem<any> | ListSeparator)[]","mutable":false,"reflectToAttr":false,"docs":"List of items to display","docsTags":[],"values":[{"type":"(MenuItem<any>"},{"type":"ListSeparator)[]"}],"optional":false,"required":false},{"name":"maxLinesSecondaryText","type":"number","mutable":false,"attr":"max-lines-secondary-text","reflectToAttr":false,"docs":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","docsTags":[],"default":"3","values":[{"type":"number"}],"optional":false,"required":false},{"name":"type","type":"\"menu\"","mutable":false,"attr":"type","reflectToAttr":false,"docs":"The type of the menu, omit to get a regular vertical menu.\nAvailable types are:\n`menu`: regular vertical menu.","docsTags":[],"values":[{"value":"menu","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"select","detail":"MenuItem<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a new value has been selected from the list.","docsTags":[]}],"styles":[{"name":"--checkbox-unchecked-border-color","annotation":"prop","docs":"Affects the border color of the default state of the checkbox (when it is not checked). Defaults to `--contrast-900`."},{"name":"--icon-background-color","annotation":"prop","docs":"Color to use for icon background when `badgeIcons=true`."},{"name":"--icon-color","annotation":"prop","docs":"Color to use for icon. Defaults to grey when `badgeIcons=false`. Defaults to white when `badgeIcons=true`."},{"name":"--list-background-color-of-even-interactive-items","annotation":"prop","docs":"Background color of even list items, when `has-striped-rows` class is applied to the component. Defaults to `transparent`."},{"name":"--list-background-color-of-odd-interactive-items","annotation":"prop","docs":"Background color of odd list items, when `has-striped-rows` class is applied to the component. Defaults to `--contrast-200`."},{"name":"--list-grid-gap","annotation":"prop","docs":"Distance between items in a list that has `has-grid-layout` class. Defaults to `0.75rem`."},{"name":"--list-grid-item-max-width","annotation":"prop","docs":"Maximum width of items in a list that has `has-grid-layout` class. Defaults to `10rem`."},{"name":"--list-grid-item-min-width","annotation":"prop","docs":"Minimum width of items in a list that has `has-grid-layout` class. Defaults to `7.5rem`."},{"name":"--list-grid-max-width","annotation":"prop","docs":"Maximum width of a list that has `has-grid-layout` class. Defaults to `100%`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-list.tsx","type":"tsx","source":"import {\n    IconSize,\n    MenuItem,\n    ListSeparator,\n    MenuListType,\n} from '@limetech/lime-elements';\nimport { MDCList, MDCListActionEvent } from '@material/list';\nimport { MDCMenu, MDCMenuItemEvent } from '@material/menu';\nimport { MDCRipple } from '@material/ripple';\nimport { strings as listStrings } from '@material/list/constants';\nimport { strings as menuStrings } from '@material/menu/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { MenuListRenderer } from './menu-list-renderer';\nimport { MenuListRendererConfig } from './menu-list-renderer-config';\n\nconst { ACTION_EVENT } = listStrings;\nconst { SELECTED_EVENT } = menuStrings;\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-menu-list',\n    shadow: true,\n    styleUrl: 'menu-list.scss',\n})\nexport class MenuList {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * The type of the menu, omit to get a regular vertical menu.\n     * Available types are:\n     * `menu`: regular vertical menu.\n     */\n    @Prop()\n    public type: MenuListType;\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n    // eslint-disable-next-line no-magic-numbers\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelMenuListElement;\n\n    private config: MenuListRendererConfig;\n    private MenuListRenderer = new MenuListRenderer();\n    private mdcList: MDCList;\n    private mdcMenu: MDCMenu;\n\n    /**\n     * Fired when a new value has been selected from the list.\n     */\n    @Event()\n    private select: EventEmitter<MenuItem>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            type: this.type,\n            iconSize: this.iconSize,\n        };\n\n        const html = this.MenuListRenderer.render(this.items, this.config);\n\n        return <div class=\"mdc-menu mdc-menu-surface\">{html}</div>;\n    }\n\n    @Watch('type')\n    protected handleType() {\n        this.setupListeners();\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        if (!this.mdcList) {\n            return;\n        }\n\n        const MenuItems = this.items.filter(this.isMenuItem);\n\n        this.mdcList.selectedIndex = MenuItems.findIndex(\n            (item: MenuItem) => item.selected\n        );\n    }\n\n    private setup = () => {\n        this.setupMenu();\n        this.setupListeners();\n    };\n\n    private setupMenu = () => {\n        const element = this.element.shadowRoot.querySelector('.mdc-menu');\n        if (!element) {\n            return;\n        }\n\n        this.mdcMenu = new MDCMenu(element);\n        this.mdcMenu.hasTypeahead = true;\n        this.mdcMenu.wrapFocus = true;\n        this.mdcMenu.items.forEach((item) => new MDCRipple(item));\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcMenu) {\n            return;\n        }\n\n        this.mdcMenu.unlisten(SELECTED_EVENT, this.handleMenuSelect);\n        this.mdcMenu.listen(SELECTED_EVENT, this.handleMenuSelect);\n    };\n\n    private teardown = () => {\n        this.mdcList?.unlisten(ACTION_EVENT, this.handleAction);\n        this.mdcList?.destroy();\n\n        this.mdcMenu?.unlisten(SELECTED_EVENT, this.handleMenuSelect);\n        this.mdcMenu?.destroy();\n    };\n\n    private handleAction = (event: MDCListActionEvent) => {\n        this.handleSingleSelect(event.detail.index);\n    };\n\n    private handleMenuSelect = (event: MDCMenuItemEvent) => {\n        this.handleSingleSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const MenuItems = this.items.filter(this.isMenuItem) as MenuItem[];\n        if (MenuItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: MenuItem = MenuItems.find((item: MenuItem) => {\n            return !!item.selected;\n        });\n\n        if (selectedItem) {\n            this.select.emit({ ...selectedItem, selected: false });\n        }\n\n        if (MenuItems[index] !== selectedItem) {\n            this.select.emit({ ...MenuItems[index], selected: false });\n        }\n    };\n\n    private isMenuItem = (item: MenuItem): boolean => {\n        return !('separator' in item);\n    };\n}\n"},{"filename":"menu-list.scss","type":"scss","source":"@use '../../style/functions';\n\n@import '../list/list';\n\n:host(limel-menu-list) {\n    display: block;\n    --badge-background-color: var(\n        --notification-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    --badge-text-color: var(\n        --notification-badge-text-color,\n        rgb(var(--color-white))\n    );\n}\n\n.mdc-menu {\n    max-height: 70vh; // force tall menus render inside the viewport when menu is at the bottom of the screen\n}\n\n.mdc-deprecated-list {\n    margin: functions.pxToRem(4);\n    // added space to visualize keyboard-focused items\n    .mdc-deprecated-list-item[role='menuitem'] {\n        font-size: functions.pxToRem(13);\n\n        .mdc-deprecated-list-item__graphic {\n            margin-right: functions.pxToRem(14);\n        }\n    }\n\n    hr.mdc-deprecated-list-divider {\n        &.mdc-deprecated-list-divider--inset {\n            display: none;\n        }\n    }\n}\n\nlimel-badge {\n    transform: translateX(0.75rem);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu-surface","filePath":"./src/components/menu-surface/menu-surface.tsx","fileName":"menu-surface.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu-surface/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu-surface/usage","tag":"limel-menu-surface","overview":"","usage":{},"docs":"","docsTags":[{"name":"slot","text":"- Content to put inside the surface"},{"name":"private"}],"encapsulation":"shadow","dependents":["limel-input-field","limel-menu","limel-picker","limel-select"],"dependencies":[],"dependencyGraph":{"limel-input-field":["limel-menu-surface"],"limel-menu":["limel-menu-surface"],"limel-picker":["limel-menu-surface"],"limel-select":["limel-menu-surface"]},"props":[{"name":"allowClicksElement","type":"HTMLElement","mutable":false,"reflectToAttr":false,"docs":"Clicks in this element should not be prevented when the menu surface is open","docsTags":[],"values":[{"type":"HTMLElement"}],"optional":false,"required":false},{"name":"open","type":"boolean","mutable":false,"attr":"open","reflectToAttr":false,"docs":"True if the menu surface is open, false otherwise","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"dismiss","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the menu surface is dismissed and should be closed","docsTags":[]}],"styles":[],"slots":[{"name":"","docs":"Content to put inside the surface"}],"parts":[],"listeners":[],"sources":[{"filename":"menu-surface.tsx","type":"tsx","source":"import { Corner, MDCMenuSurface } from '@material/menu-surface';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { isDescendant } from '../../util/dom';\nimport {\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\n\n/**\n * @slot - Content to put inside the surface\n * @private\n */\n@Component({\n    tag: 'limel-menu-surface',\n    shadow: true,\n    styleUrl: 'menu-surface.scss',\n})\nexport class MenuSurface {\n    /**\n     * True if the menu surface is open, false otherwise\n     */\n    @Prop()\n    public open = false;\n\n    /**\n     * Clicks in this element should not be prevented when the menu surface is open\n     */\n    @Prop()\n    public allowClicksElement: HTMLElement;\n\n    /**\n     * Emitted when the menu surface is dismissed and should be closed\n     */\n    @Event()\n    public dismiss: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelMenuSurfaceElement;\n\n    private menuSurface: MDCMenuSurface;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public render() {\n        const classList = {\n            'mdc-menu': true,\n            'mdc-menu-surface': true,\n            'mdc-menu-surface--open': this.open,\n            'mdc-elevation-transition': true,\n            'mdc-elevation--z4': true,\n        };\n\n        return (\n            <div class={classList} tabindex=\"-1\">\n                <slot />\n            </div>\n        );\n    }\n\n    private setup = () => {\n        const menuElement: HTMLElement =\n            this.host.shadowRoot.querySelector('.mdc-menu-surface');\n        if (!menuElement) {\n            return;\n        }\n\n        this.menuSurface = new MDCMenuSurface(menuElement);\n        this.menuSurface.setAnchorCorner(Corner.TOP_START);\n\n        document.addEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('resize', this.handleResize, {\n            passive: true,\n        });\n    };\n\n    private teardown = () => {\n        this.menuSurface?.destroy();\n        document.removeEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('resize', this.handleResize);\n    };\n\n    private handleDocumentClick = (event) => {\n        const elementPath = event.path || [];\n\n        if (!this.open) {\n            return;\n        }\n\n        if (isDescendant(event.target, this.host)) {\n            return;\n        }\n\n        if (this.allowClicksElement) {\n            const clickedInAllowedElement = elementPath.includes(\n                this.allowClicksElement\n            );\n\n            if (clickedInAllowedElement) {\n                return;\n            }\n        }\n\n        this.dismiss.emit();\n        this.preventClickEventPropagation();\n    };\n\n    private handleResize = () => {\n        if (this.open) {\n            this.dismiss.emit();\n        }\n    };\n\n    private preventClickEventPropagation = () => {\n        // When the menu surface is open, we want to stop the `click` event from propagating\n        // when clicking outside the surface itself. This is to prevent any dialog that might\n        // be open from closing, etc. However, when dragging a scrollbar no `click` event is emitted,\n        // only mousedown and mouseup. So we listen for `mousedown` and attach a one-time listener\n        // for `click`, so we can capture and \"kill\" it.\n        document.addEventListener('click', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // We also capture and \"kill\" the next `mouseup` event.\n        document.addEventListener('mouseup', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // If the user dragged the scrollbar, no `click` event happens. So when we get the\n        // `mouseup` event, remove the handler for `click` if it's still there.\n        // Otherwise, we would catch the next click even though the menu is no longer open.\n        document.addEventListener(\n            'mouseup',\n            () => {\n                document.removeEventListener('click', this.stopEvent, {\n                    capture: true,\n                });\n            },\n            {\n                once: true,\n            }\n        );\n    };\n\n    private stopEvent = (event) => {\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        const isEscape =\n            event.key === ESCAPE || event.keyCode === ESCAPE_KEY_CODE;\n        const isTab = event.key === TAB || event.keyCode === TAB_KEY_CODE;\n\n        if (this.open && (isEscape || isTab)) {\n            event.stopPropagation();\n            this.dismiss.emit();\n        }\n    };\n}\n"},{"filename":"menu-surface.scss","type":"scss","source":"@use '@material/menu-surface';\n@use '@material/elevation';\n@use '@material/menu';\n\n:host {\n    display: block;\n}\n\n@include menu-surface.core-styles;\n@include menu.core-styles;\n\n.mdc-menu-surface {\n    max-height: 100%;\n    position: relative;\n    --mdc-menu-max-width: var(\n        --menu-surface-width,\n        min(calc(100vw - 2rem), 20rem)\n    );\n    background-color: var(--lime-elevated-surface-background-color);\n}\n\n:host(limel-menu-surface.has-grid-layout) {\n    .mdc-menu-surface {\n        width: var(--menu-surface-width, min(calc(100vw - 2rem), 40rem));\n        max-width: unset;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker","filePath":"./src/components/picker/picker.tsx","fileName":"picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/usage","tag":"limel-picker","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-picker-single"},{"name":"exampleComponent","text":"limel-example-picker-multiple"},{"name":"exampleComponent","text":"limel-example-picker-icons"},{"name":"exampleComponent","text":"limel-example-picker-empty-suggestions"},{"name":"exampleComponent","text":"limel-example-picker-leading-icon"},{"name":"exampleComponent","text":"limel-example-picker-static-actions"},{"name":"exampleComponent","text":"limel-example-picker-composite"}],"encapsulation":"shadow","dependents":["limel-example-custom-picker","limel-example-picker-composite","limel-example-picker-empty-suggestions","limel-example-picker-icons","limel-example-picker-leading-icon","limel-example-picker-multiple","limel-example-picker-single","limel-example-picker-static-actions","limel-example-props-factory-picker"],"dependencies":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"dependencyGraph":{"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-icon","limel-badge"],"limel-example-custom-picker":["limel-picker"],"limel-example-picker-composite":["limel-picker"],"limel-example-picker-empty-suggestions":["limel-picker"],"limel-example-picker-icons":["limel-picker"],"limel-example-picker-leading-icon":["limel-picker"],"limel-example-picker-multiple":["limel-picker"],"limel-example-picker-single":["limel-picker"],"limel-example-picker-static-actions":["limel-picker"],"limel-example-props-factory-picker":["limel-picker"]},"props":[{"name":"actionPosition","type":"\"bottom\" | \"top\"","mutable":false,"attr":"action-position","reflectToAttr":false,"docs":"Position of the custom static actions in the picker's results dropdown.\nCan be set to `'top'` or `'bottom'`.","docsTags":[],"default":"'bottom'","values":[{"value":"bottom","type":"string"},{"value":"top","type":"string"}],"optional":false,"required":false},{"name":"actionScrollBehavior","type":"\"scroll\" | \"sticky\"","mutable":false,"attr":"action-scroll-behavior","reflectToAttr":false,"docs":"Scroll behavior of the custom static actions, when user scrolls\nin the picker's results dropdown. Can be set to `'scroll'` which means\nthe action items will scroll together with the list, or `'sticky'` which\nretains their position at the top or bottom of the drop down while\nscrolling.","docsTags":[],"default":"'sticky'","values":[{"value":"scroll","type":"string"},{"value":"sticky","type":"string"}],"optional":false,"required":false},{"name":"actions","type":"ListItem<Action>[]","mutable":false,"reflectToAttr":false,"docs":"Static actions that can be clicked by the user.","docsTags":[],"default":"[]","values":[{"type":"ListItem<Action>[]"}],"optional":false,"required":false},{"name":"badgeIcons","type":"boolean","mutable":false,"attr":"badge-icons","reflectToAttr":true,"docs":"Whether badge icons should be used in the result list or not","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"delimiter","type":"string","mutable":false,"attr":"delimiter","reflectToAttr":true,"docs":"Sets delimiters between chips. Works only when `multiple` is `true`.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"True if the picker should be disabled","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"emptyResultMessage","type":"string","mutable":false,"attr":"empty-result-message","reflectToAttr":false,"docs":"A message to display when the search returned an empty result","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the input field when it has focus","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"Text to display for the input field of the picker","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"leadingIcon","type":"string","mutable":false,"attr":"leading-icon","reflectToAttr":false,"docs":"Leading icon to show to the far left in the text field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"multiple","type":"boolean","mutable":false,"attr":"multiple","reflectToAttr":false,"docs":"True if multiple values are allowed","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to disable adding and removing items,\nbut allow interaction with existing items.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":false,"docs":"True if the control requires a value","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"searchLabel","type":"string","mutable":false,"attr":"search-label","reflectToAttr":false,"docs":"Search label to display in the input field when searching","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"searcher","type":"(query: string) => Promise<ListItem<any>[]>","mutable":false,"reflectToAttr":false,"docs":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `ListItem`:s.\n\nSee the docs for the type `Searcher` for type information on\nthe searcher function itself.","docsTags":[],"values":[{"type":"(query: string) => Promise<ListItem<any>[]>"}],"optional":false,"required":false},{"name":"value","type":"ListItem<string | number> | ListItem<string | number>[]","mutable":false,"reflectToAttr":false,"docs":"Currently selected value or values","docsTags":[],"values":[{"type":"ListItem<string"},{"type":"number>"},{"type":"ListItem<string"},{"type":"number>[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"action","detail":"Action","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the user selects an action.","docsTags":[]},{"event":"change","detail":"ListItem<string | number> | ListItem<string | number>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a new value has been selected from the picker","docsTags":[]},{"event":"interact","detail":"ListItem<string | number>","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when clicking on a selected value","docsTags":[]}],"styles":[{"name":"--dropdown-z-index","annotation":"prop","docs":"z-index of the dropdown menu."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker.tsx","type":"tsx","source":"import {\n    Action,\n    Chip,\n    LimelChipSetCustomEvent,\n    LimelListCustomEvent,\n    ListItem,\n    Searcher,\n} from '@limetech/lime-elements';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport { isDescendant } from '../../util/dom';\nimport {\n    ARROW_DOWN,\n    ARROW_DOWN_KEY_CODE,\n    ARROW_UP,\n    ARROW_UP_KEY_CODE,\n    ENTER,\n    ENTER_KEY_CODE,\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\nimport { createRandomString } from '../../util/random-string';\nimport { ActionScrollBehavior, ActionPosition } from './actions.types';\n\nconst SEARCH_DEBOUNCE = 500;\nconst CHIP_SET_TAG_NAME = 'limel-chip-set';\n\n/**\n * @exampleComponent limel-example-picker-single\n * @exampleComponent limel-example-picker-multiple\n * @exampleComponent limel-example-picker-icons\n * @exampleComponent limel-example-picker-empty-suggestions\n * @exampleComponent limel-example-picker-leading-icon\n * @exampleComponent limel-example-picker-static-actions\n * @exampleComponent limel-example-picker-composite\n */\n@Component({\n    tag: 'limel-picker',\n    shadow: true,\n    styleUrl: 'picker.scss',\n})\nexport class Picker {\n    /**\n     * True if the picker should be disabled\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to disable adding and removing items,\n     * but allow interaction with existing items.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Text to display for the input field of the picker\n     */\n    @Prop()\n    public label: string;\n\n    /**\n     * Search label to display in the input field when searching\n     */\n    @Prop()\n    public searchLabel: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Leading icon to show to the far left in the text field\n     */\n    @Prop()\n    public leadingIcon: string;\n\n    /**\n     * A message to display when the search returned an empty result\n     */\n    @Prop()\n    public emptyResultMessage: string;\n\n    /**\n     * True if the control requires a value\n     */\n    @Prop()\n    public required: boolean = false;\n\n    /**\n     * Currently selected value or values\n     */\n    @Prop()\n    public value: ListItem<number | string> | Array<ListItem<number | string>>;\n\n    /**\n     * A search function that takes a search-string as an argument,\n     * and returns a promise that will eventually be resolved with\n     * an array of `ListItem`:s.\n     *\n     * See the docs for the type `Searcher` for type information on\n     * the searcher function itself.\n     */\n    @Prop()\n    public searcher: Searcher;\n\n    /**\n     * True if multiple values are allowed\n     */\n    @Prop()\n    public multiple: boolean = false;\n\n    /**\n     * Sets delimiters between chips. Works only when `multiple` is `true`.\n     */\n    @Prop({ reflect: true })\n    public delimiter: string = null;\n\n    /**\n     * Static actions that can be clicked by the user.\n     */\n    @Prop()\n    public actions: Array<ListItem<Action>> = [];\n\n    /**\n     * Position of the custom static actions in the picker's results dropdown.\n     * Can be set to `'top'` or `'bottom'`.\n     */\n    @Prop()\n    public actionPosition: ActionPosition = 'bottom';\n\n    /**\n     * Scroll behavior of the custom static actions, when user scrolls\n     * in the picker's results dropdown. Can be set to `'scroll'` which means\n     * the action items will scroll together with the list, or `'sticky'` which\n     * retains their position at the top or bottom of the drop down while\n     * scrolling.\n     */\n    @Prop()\n    public actionScrollBehavior: ActionScrollBehavior = 'sticky';\n\n    /**\n     * Whether badge icons should be used in the result list or not\n     */\n    @Prop({ reflect: true })\n    public badgeIcons: boolean = true;\n\n    /**\n     * Fired when a new value has been selected from the picker\n     */\n    @Event()\n    private change: EventEmitter<\n        ListItem<number | string> | Array<ListItem<number | string>>\n    >;\n\n    /**\n     * Fired when clicking on a selected value\n     */\n    @Event()\n    private interact: EventEmitter<ListItem<number | string>>;\n\n    /**\n     * Emitted when the user selects an action.\n     */\n    @Event()\n    private action: EventEmitter<Action>;\n\n    @State()\n    private items: Array<ListItem<number | string>>;\n\n    @State()\n    private textValue: string = '';\n\n    @State()\n    private loading: boolean = false;\n\n    @State()\n    private chips: Chip[] = [];\n\n    @Element()\n    private host: HTMLLimelPickerElement;\n\n    // Should NOT be decorated with State(), since this\n    // should not trigger a re-render by itself.\n    private chipSetEditMode = false;\n\n    private debouncedSearch: Searcher;\n    private chipSet: HTMLLimelChipSetElement;\n    private portalId: string;\n\n    constructor() {\n        this.handleTextInput = this.handleTextInput.bind(this);\n        this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n        this.handleDropdownKeyDown = this.handleDropdownKeyDown.bind(this);\n        this.handleInputFieldFocus = this.handleInputFieldFocus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleInteract = this.handleInteract.bind(this);\n        this.handleListChange = this.handleListChange.bind(this);\n        this.handleActionListChange = this.handleActionListChange.bind(this);\n        this.handleStopEditAndBlur = this.handleStopEditAndBlur.bind(this);\n        this.createDebouncedSearcher = this.createDebouncedSearcher.bind(this);\n        this.handleCloseMenu = this.handleCloseMenu.bind(this);\n        this.onListKeyDown = this.onListKeyDown.bind(this);\n\n        this.portalId = createRandomString();\n    }\n\n    public componentWillLoad() {\n        this.chips = this.createChips(this.value);\n    }\n\n    public componentDidLoad() {\n        this.createDebouncedSearcher(this.searcher);\n        this.chipSet = this.host.shadowRoot.querySelector(CHIP_SET_TAG_NAME);\n    }\n\n    public async componentWillUpdate() {\n        this.chipSetEditMode = false;\n        if (this.chipSet) {\n            this.chipSetEditMode = await this.chipSet.getEditMode();\n        }\n    }\n\n    public render() {\n        this.chips.forEach((chip: Chip) => {\n            if ('iconBackgroundColor' in chip && !!chip.iconBackgroundColor) {\n                chip.iconFillColor = 'rgb(var(--color-white))';\n            }\n        });\n\n        const props: {\n            maxItems?: number;\n        } = {};\n\n        if (!this.multiple) {\n            props.maxItems = 1;\n        }\n\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"search\"\n                label={this.label}\n                helperText={this.helperText}\n                leadingIcon={this.leadingIcon}\n                value={this.chips}\n                disabled={this.disabled}\n                delimiter={this.renderDelimiter()}\n                readonly={this.readonly}\n                required={this.required}\n                searchLabel={this.searchLabel}\n                onInput={this.handleTextInput}\n                onKeyDown={this.handleInputKeyDown}\n                onChange={this.handleChange}\n                onInteract={this.handleInteract}\n                onStartEdit={this.handleInputFieldFocus}\n                onStopEdit={this.handleStopEditAndBlur}\n                emptyInputOnBlur={false}\n                clearAllButton={this.multiple}\n                {...props}\n            />,\n            this.renderDropdown(),\n        ];\n    }\n\n    @Watch('value')\n    protected onChangeValue() {\n        this.chips = this.createChips(this.value);\n    }\n\n    @Watch('searcher')\n    protected createDebouncedSearcher(newValue: Searcher) {\n        if (typeof newValue !== 'function') {\n            return;\n        }\n\n        this.debouncedSearch = AwesomeDebouncePromise(\n            newValue,\n            SEARCH_DEBOUNCE\n        );\n    }\n\n    private renderDelimiter() {\n        if (this.multiple) {\n            return this.delimiter;\n        }\n\n        return null;\n    }\n\n    private createChips(value: ListItem | ListItem[]): Chip[] {\n        if (!value) {\n            return [];\n        }\n\n        if (this.multiple) {\n            const listItems: ListItem[] = value as ListItem[];\n\n            return listItems.map(this.createChip);\n        }\n\n        const listItem: ListItem = value as ListItem;\n\n        return [this.createChip(listItem)];\n    }\n\n    private createChip(listItem: ListItem): Chip {\n        return {\n            id: `${listItem.value}`,\n            text: listItem.text,\n            removable: true,\n            icon: listItem.icon,\n            iconBackgroundColor: listItem.iconColor,\n            value: listItem,\n        };\n    }\n\n    /**\n     * Renders the dropdown with the items to pick from, or a spinner if the picker\n     * is waiting for items to be received\n     *\n     * @returns {HTMLElement} picker dropdown\n     */\n    private renderDropdown() {\n        const dropDownContent = this.getDropdownContent();\n\n        const content = [];\n\n        if (this.shouldShowDropDownContent()) {\n            const actionContent = this.getActionContent();\n            if (this.actionPosition === 'top') {\n                content.push(actionContent);\n            }\n\n            if (dropDownContent) {\n                content.push(dropDownContent);\n            }\n\n            if (this.actionPosition === 'bottom') {\n                content.push(actionContent);\n            }\n        }\n\n        return this.renderPortal(content);\n    }\n\n    private getActionContent() {\n        const actionCount = this.actions?.length ?? 0;\n        if (actionCount === 0) {\n            return null;\n        }\n\n        return [\n            <limel-list\n                class={{\n                    'static-actions-list': true,\n                    'is-on-top': this.actionPosition === 'top',\n                    'is-at-bottom': this.actionPosition === 'bottom',\n                    'has-position-sticky':\n                        this.actionScrollBehavior === 'sticky',\n                }}\n                badgeIcons={true}\n                type={'selectable'}\n                onChange={this.handleActionListChange}\n                items={this.actions.map(this.removeUnusedPropertiesOnAction)}\n            />,\n        ];\n    }\n\n    private removeUnusedPropertiesOnAction(\n        action: ListItem<Action>\n    ): ListItem<Action> {\n        return {\n            ...action,\n            actions: [],\n        };\n    }\n\n    private shouldShowDropDownContent() {\n        if (this.isFull()) {\n            return false;\n        }\n\n        return !!this.chipSetEditMode;\n    }\n\n    private getDropdownContent() {\n        if (!this.shouldShowDropDownContent()) {\n            return;\n        }\n\n        if (this.loading) {\n            return this.renderSpinner();\n        }\n\n        if (!this.items || !this.items.length) {\n            return this.renderEmptyMessage();\n        }\n\n        return this.renderListResult();\n    }\n\n    /**\n     * Returns true if the picker is \"full\"\n     * The picker is considered to be full if it has a value and only one is allowed\n     *\n     * @returns {boolean} true if the picker is full\n     */\n    private isFull(): boolean {\n        return !this.multiple && !!this.value;\n    }\n\n    private renderSpinner() {\n        return (\n            <div\n                style={{\n                    width: '100%',\n                    display: 'flex',\n                    'align-items': 'center',\n                    'justify-content': 'center',\n                    padding: '1rem 0',\n                }}\n            >\n                <limel-spinner limeBranded={false} />\n            </div>\n        );\n    }\n\n    private renderEmptyMessage() {\n        if (!this.emptyResultMessage) {\n            return;\n        }\n\n        const style = {\n            color: 'rgb(var(--contrast-1100))',\n            'text-align': 'center',\n            margin: '0.5rem 1rem',\n        };\n\n        return <p style={style}>{this.emptyResultMessage}</p>;\n    }\n\n    private renderListResult() {\n        const hasIcons = this.items.some((item) => {\n            return 'icon' in item && !!item.icon;\n        });\n\n        return (\n            <limel-list\n                badgeIcons={hasIcons && this.badgeIcons}\n                onChange={this.handleListChange}\n                onKeyDown={this.onListKeyDown}\n                type=\"selectable\"\n                items={this.items}\n            />\n        );\n    }\n\n    private onListKeyDown(event: KeyboardEvent) {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        const keyCodeFound = [\n            TAB_KEY_CODE,\n            ESCAPE_KEY_CODE,\n            ENTER_KEY_CODE,\n        ].includes(event.keyCode);\n        if (keyFound || keyCodeFound) {\n            this.chipSet.setFocus();\n        }\n    }\n\n    private renderPortal(content: any[] = []) {\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index'\n        );\n\n        return (\n            <limel-portal\n                visible={content.length > 0}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={content.length > 0}\n                    allowClicksElement={this.host}\n                    style={{\n                        '--mdc-menu-min-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {content}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    }\n\n    /**\n     * Check if a descendant still has focus. If not, reset text value and search result.\n     *\n     * @returns {void}\n     */\n    private handleStopEditAndBlur() {\n        // In browsers where shadow DOM is not supported activeElement on shadowRoot will return null\n        // However, document.activeElement will return the actual focused element instead of the outermost shadow host\n        const element =\n            this.host.shadowRoot.activeElement || document.activeElement;\n        const portalElement = document.querySelector(`#${this.portalId}`);\n        if (\n            isDescendant(element as HTMLElement, this.host) ||\n            isDescendant(element as HTMLElement, portalElement as HTMLElement)\n        ) {\n            return;\n        }\n\n        this.clearInputField();\n    }\n\n    /**\n     * Input handler for the input field\n     *\n     * @param {InputEvent} event event\n     * @returns {void}\n     */\n    private async handleTextInput(event) {\n        event.stopPropagation();\n\n        const query = event.detail;\n        this.textValue = query;\n        this.loading = true;\n\n        // If the search-query is an empty string, bypass debouncing.\n        const searchFn = query === '' ? this.searcher : this.debouncedSearch;\n        const result = await searchFn(query);\n        this.handleSearchResult(query, result);\n    }\n\n    /**\n     * Change handler for the list\n     *\n     * @param {LimelListCustomEvent<ListItem>} event event\n     * @returns {void}\n     */\n    private handleListChange(event: LimelListCustomEvent<ListItem>) {\n        event.stopPropagation();\n        if (!this.value || this.value !== event.detail) {\n            let newValue: ListItem | ListItem[] = event.detail;\n            if (this.multiple) {\n                newValue = [...(this.value as ListItem[]), event.detail];\n            }\n\n            this.change.emit(newValue);\n            this.items = [];\n        }\n\n        if (this.multiple) {\n            this.chipSet?.setFocus(true);\n        }\n    }\n\n    /**\n     * Change handler for the list\n     *\n     * @param {LimelChipSetCustomEvent} event event\n     * @returns {void}\n     */\n    private handleActionListChange(\n        event: LimelListCustomEvent<ListItem<Action>>\n    ) {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.action.emit(event.detail.value);\n        this.items = [];\n    }\n\n    /**\n     * Focus handler for the chip set\n     * Prevent focus if the picker has a value and does not support multiple values\n     *\n     * @returns {void}\n     */\n    private async handleInputFieldFocus() {\n        this.loading = true;\n        const query = this.textValue;\n        const result = await this.searcher(query);\n        this.handleSearchResult(query, result);\n    }\n\n    private handleChange(event: LimelChipSetCustomEvent<Chip | Chip[]>) {\n        event.stopPropagation();\n\n        let newValue = null;\n        if (this.multiple) {\n            const chips = event.detail as Chip[];\n            newValue = chips.map((chip) => {\n                return (this.value as ListItem[]).find((item) => {\n                    return `${item.value}` === chip.id;\n                });\n            });\n        }\n\n        this.change.emit(newValue);\n    }\n\n    private handleInteract(event: LimelChipSetCustomEvent<Chip>) {\n        event.stopPropagation();\n        this.interact.emit(event.detail ? event.detail.value : event.detail);\n    }\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     *\n     * @param {KeyboardEvent} event event\n     * @returns {void}\n     */\n    private handleInputKeyDown(event: KeyboardEvent) {\n        const isForwardTab =\n            (event.key === TAB || event.keyCode === TAB_KEY_CODE) &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp =\n            event.key === ARROW_UP || event.keyCode === ARROW_UP_KEY_CODE;\n        const isDown =\n            event.key === ARROW_DOWN || event.keyCode === ARROW_DOWN_KEY_CODE;\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child'\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child'\n            );\n            listElement.focus();\n        }\n    }\n\n    /**\n     * Key handler for the dropdown\n     *\n     * @param {KeyboardEvent} event event\n     * @returns {void}\n     */\n    private handleDropdownKeyDown(event: KeyboardEvent) {\n        const isEscape =\n            event.key === ESCAPE || event.keyCode === ESCAPE_KEY_CODE;\n\n        if (isEscape) {\n            event.preventDefault();\n            this.textValue = '';\n            this.chipSet.setFocus(true);\n        }\n    }\n\n    private handleSearchResult(query: string, result: ListItem[]) {\n        if (query === this.textValue) {\n            this.items = result;\n            if (this.multiple) {\n                const values = this.value as ListItem[];\n                this.items = result.filter((item) => {\n                    return !values.includes(item);\n                });\n            }\n\n            this.loading = false;\n        }\n    }\n\n    private handleCloseMenu() {\n        this.clearInputField();\n    }\n\n    private clearInputField() {\n        this.chipSet.emptyInput();\n        this.textValue = '';\n        this.handleSearchResult('', []);\n    }\n}\n"},{"filename":"picker.scss","type":"scss","source":"// Note! The `--dropdown-z-index` property is used from `picker.tsx`.\n/**\n  * @prop --dropdown-z-index: z-index of the dropdown menu.\n  */\n\n:host {\n    position: relative;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/popover","filePath":"./src/components/popover/popover.tsx","fileName":"popover.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/popover/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/popover/usage","tag":"limel-popover","overview":"A popover is an impermanent layer that is displayed on top of other content\nwhen user taps an element that triggers the popover. This element can be\npractically anything, a button, piece of text, and icon, etc.\n\nPopovers are nonmodal, thus they don't have a semi-transparent backdrop layer\nthat darkens the content below them. Also for the same reason, they can be\ndismissed by tapping or clicking another part of the screen, but not by a\nclicking a button or link on the popover itself.\n\n:::warning\nThe component is emitting a close event when you click outside its container\nor press the <kbd>Esc</kbd> key. However, it’s up to you as consumer to react\nproperly on this event and hide the component (preferably by setting the\nproperty `open` to `false`).\n:::\n\n## Usage\nUse a popover to show **options** or **information** related to the trigger\nonscreen. A typical use case for popovers is a tooltip, in which you show\nhelp text or contextual information to users.\n\nPopovers are most appropriate on larger screens but can be used on smaller\nscreens too, as long as their content is responsive and takes into account\nthe context they are displayed on.\n\nWhen a popover is displayed, interactions with other controls are blocked,\nuntil user dismisses the popover.\n\n\n## Layout\nPopovers has only one slot in which you can import a custom web-component.\n\n:::note\nYou must make sure that web-components that you import into the slot has\na `width: 100%;` style so that it can horizontally stretch across the popover.\n\nHowever, `width` of the popover can be controlled by specifying a CSS variable\nof `--popover-surface-width`. If you don't specify any width, the popover\nwill grow as wide as its content.\n:::\n\n:::important\nDo not make a popover too big. They should never take over the entire screen.\nIf your content is that big, you should probably be using a Modal instead.\n:::","usage":{},"docs":"A popover is an impermanent layer that is displayed on top of other content\nwhen user taps an element that triggers the popover. This element can be\npractically anything, a button, piece of text, and icon, etc.\n\nPopovers are nonmodal, thus they don't have a semi-transparent backdrop layer\nthat darkens the content below them. Also for the same reason, they can be\ndismissed by tapping or clicking another part of the screen, but not by a\nclicking a button or link on the popover itself.\n\n:::warning\nThe component is emitting a close event when you click outside its container\nor press the <kbd>Esc</kbd> key. However, it’s up to you as consumer to react\nproperly on this event and hide the component (preferably by setting the\nproperty `open` to `false`).\n:::\n\n## Usage\nUse a popover to show **options** or **information** related to the trigger\nonscreen. A typical use case for popovers is a tooltip, in which you show\nhelp text or contextual information to users.\n\nPopovers are most appropriate on larger screens but can be used on smaller\nscreens too, as long as their content is responsive and takes into account\nthe context they are displayed on.\n\nWhen a popover is displayed, interactions with other controls are blocked,\nuntil user dismisses the popover.\n\n\n## Layout\nPopovers has only one slot in which you can import a custom web-component.\n\n:::note\nYou must make sure that web-components that you import into the slot has\na `width: 100%;` style so that it can horizontally stretch across the popover.\n\nHowever, `width` of the popover can be controlled by specifying a CSS variable\nof `--popover-surface-width`. If you don't specify any width, the popover\nwill grow as wide as its content.\n:::\n\n:::important\nDo not make a popover too big. They should never take over the entire screen.\nIf your content is that big, you should probably be using a Modal instead.\n:::","docsTags":[{"name":"slot","text":"- Content to put inside the surface"},{"name":"exampleComponent","text":"limel-example-popover"}],"encapsulation":"shadow","dependents":["limel-color-picker","limel-dock-button","limel-example-popover","limel-example-portal"],"dependencies":["limel-portal","limel-popover-surface"],"dependencyGraph":{"limel-popover":["limel-portal","limel-popover-surface"],"limel-color-picker":["limel-popover"],"limel-dock-button":["limel-popover"],"limel-example-popover":["limel-popover"],"limel-example-portal":["limel-popover"]},"props":[{"name":"open","type":"boolean","mutable":false,"attr":"open","reflectToAttr":false,"docs":"True if the content within the popover should be visible","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"openDirection","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","mutable":false,"attr":"open-direction","reflectToAttr":true,"docs":"Decides the popover's location in relation to its trigger","docsTags":[],"values":[{"value":"bottom","type":"string"},{"value":"bottom-end","type":"string"},{"value":"bottom-start","type":"string"},{"value":"left","type":"string"},{"value":"left-end","type":"string"},{"value":"left-start","type":"string"},{"value":"right","type":"string"},{"value":"right-end","type":"string"},{"value":"right-start","type":"string"},{"value":"top","type":"string"},{"value":"top-end","type":"string"},{"value":"top-start","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"close","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emits an event when the component is closing","docsTags":[]}],"styles":[{"name":"--popover-body-background-color","annotation":"prop","docs":"Background color of popover body, defaults to `--lime-elevated-surface-background-color`."},{"name":"--popover-border-radius","annotation":"prop","docs":"Border radius of popover, defaults to `0.75rem`."},{"name":"--popover-surface-width","annotation":"prop","docs":"Width of the popover surface. defaults to `auto`"},{"name":"--popover-z-index","annotation":"prop","docs":"z-index of the popover."}],"slots":[{"name":"","docs":"Content to put inside the surface"}],"parts":[],"listeners":[],"sources":[{"filename":"popover.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    Element,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { zipObject } from 'lodash-es';\nimport { portalContains } from '../portal/contains';\nimport { ESCAPE } from '../../util/keycodes';\nimport { OpenDirection } from '../menu/menu.types';\n\n/**\n * A popover is an impermanent layer that is displayed on top of other content\n * when user taps an element that triggers the popover. This element can be\n * practically anything, a button, piece of text, and icon, etc.\n *\n * Popovers are nonmodal, thus they don't have a semi-transparent backdrop layer\n * that darkens the content below them. Also for the same reason, they can be\n * dismissed by tapping or clicking another part of the screen, but not by a\n * clicking a button or link on the popover itself.\n *\n * :::warning\n * The component is emitting a close event when you click outside its container\n * or press the <kbd>Esc</kbd> key. However, it’s up to you as consumer to react\n * properly on this event and hide the component (preferably by setting the\n * property `open` to `false`).\n * :::\n *\n * ## Usage\n * Use a popover to show **options** or **information** related to the trigger\n * onscreen. A typical use case for popovers is a tooltip, in which you show\n * help text or contextual information to users.\n *\n * Popovers are most appropriate on larger screens but can be used on smaller\n * screens too, as long as their content is responsive and takes into account\n * the context they are displayed on.\n *\n * When a popover is displayed, interactions with other controls are blocked,\n * until user dismisses the popover.\n *\n *\n * ## Layout\n * Popovers has only one slot in which you can import a custom web-component.\n *\n * :::note\n * You must make sure that web-components that you import into the slot has\n * a `width: 100%;` style so that it can horizontally stretch across the popover.\n *\n * However, `width` of the popover can be controlled by specifying a CSS variable\n * of `--popover-surface-width`. If you don't specify any width, the popover\n * will grow as wide as its content.\n * :::\n *\n * :::important\n * Do not make a popover too big. They should never take over the entire screen.\n * If your content is that big, you should probably be using a Modal instead.\n * :::\n *\n *\n * @slot - Content to put inside the surface\n * @exampleComponent limel-example-popover\n */\n@Component({\n    tag: 'limel-popover',\n    shadow: true,\n    styleUrl: 'popover.scss',\n})\nexport class Popover {\n    /**\n     * True if the content within the popover should be visible\n     */\n    @Prop()\n    public open = false;\n\n    /**\n     * Decides the popover's location in relation to its trigger\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection;\n\n    /**\n     * Emits an event when the component is closing\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelPopoverElement;\n\n    private portalId: string;\n\n    constructor() {\n        this.portalId = createRandomString();\n        this.globalClickListener = this.globalClickListener.bind(this);\n    }\n\n    @Watch('open')\n    protected watchOpen() {\n        this.setupGlobalHandlers();\n    }\n\n    public componentWillLoad() {\n        this.setupGlobalHandlers();\n    }\n\n    private setupGlobalHandlers() {\n        if (this.open) {\n            document.addEventListener('click', this.globalClickListener, {\n                capture: true,\n            });\n            document.addEventListener('keyup', this.handleGlobalKeyPress);\n        } else {\n            document.removeEventListener('click', this.globalClickListener);\n            document.removeEventListener('keyup', this.handleGlobalKeyPress);\n        }\n    }\n\n    public render() {\n        const cssProperties = this.getCssProperties();\n        const popoverZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--popover-z-index'\n        );\n\n        return (\n            <div class=\"trigger-anchor\">\n                <slot name=\"trigger\"></slot>\n                <limel-portal\n                    visible={this.open}\n                    containerId={this.portalId}\n                    containerStyle={{ 'z-index': popoverZIndex }}\n                    openDirection={this.openDirection}\n                >\n                    <limel-popover-surface\n                        contentCollection={this.host.children}\n                        style={cssProperties}\n                    />\n                </limel-portal>\n            </div>\n        );\n    }\n\n    private globalClickListener(event: MouseEvent) {\n        const element: HTMLElement = event.target as HTMLElement;\n        const clickedInside = portalContains(this.host, element);\n        if (this.open && !clickedInside) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.close.emit();\n        }\n    }\n\n    private getCssProperties() {\n        const propertyNames = [\n            '--popover-surface-width',\n            '--popover-body-background-color',\n            '--popover-border-radius',\n        ];\n        const style = getComputedStyle(this.host);\n        const values = propertyNames.map((property) => {\n            return style.getPropertyValue(property);\n        });\n\n        return zipObject(propertyNames, values);\n    }\n\n    private handleGlobalKeyPress = (event: KeyboardEvent) => {\n        if (event.key !== ESCAPE) {\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n        this.close.emit();\n    };\n}\n"},{"filename":"popover.scss","type":"scss","source":"/**\n * @prop --popover-surface-width: Width of the popover surface. defaults to `auto`\n * @prop --popover-body-background-color: Background color of popover body, defaults to `--lime-elevated-surface-background-color`.\n * @prop --popover-border-radius: Border radius of popover, defaults to `0.75rem`.\n * @prop --popover-z-index: z-index of the popover.\n */\n\n.trigger-anchor {\n    display: inline-block;\n    position: relative;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/popover-surface","filePath":"./src/components/popover-surface/popover-surface.tsx","fileName":"popover-surface.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/popover-surface/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/popover-surface/usage","tag":"limel-popover-surface","overview":"","usage":{},"docs":"","docsTags":[{"name":"slot","text":"- Content to put inside the surface"},{"name":"private"}],"encapsulation":"shadow","dependents":["limel-popover"],"dependencies":[],"dependencyGraph":{"limel-popover":["limel-popover-surface"]},"props":[{"name":"contentCollection","type":"HTMLCollection","mutable":false,"reflectToAttr":false,"docs":"Content to render","docsTags":[],"values":[{"type":"HTMLCollection"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[{"name":"","docs":"Content to put inside the surface"}],"parts":[],"listeners":[],"sources":[{"filename":"popover-surface.tsx","type":"tsx","source":"import { Component, h, Prop, Element } from '@stencil/core';\n\n/**\n * @slot - Content to put inside the surface\n * @private\n */\n\n@Component({\n    tag: 'limel-popover-surface',\n    shadow: true,\n    styleUrl: 'popover-surface.scss',\n})\nexport class PopoverSurface {\n    /**\n     * Content to render\n     */\n    @Prop()\n    public contentCollection: HTMLCollection;\n\n    @Element()\n    private host: HTMLLimelPopoverSurfaceElement;\n\n    public componentDidLoad() {\n        this.appendElement();\n    }\n\n    public render() {\n        return <div class=\"limel-popover-surface\" tabindex=\"0\" />;\n    }\n\n    private appendElement() {\n        const portalContainer = this.host.shadowRoot.querySelector(\n            '.limel-popover-surface'\n        );\n\n        Array.from(this.contentCollection).forEach((child) => {\n            if (child.slot === 'trigger') {\n                return;\n            }\n\n            portalContainer.appendChild(child);\n        });\n    }\n}\n"},{"filename":"popover-surface.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/mixins';\n\n:host(limel-popover-surface) {\n    isolation: isolate;\n}\n\n.limel-popover-surface {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n\n    width: var(--popover-surface-width, auto);\n    max-height: calc(100vh - 2rem);\n    max-width: calc(100vw - 2rem);\n    margin: 0 0.25rem;\n\n    border-radius: var(--popover-border-radius, functions.pxToRem(12));\n    box-shadow: var(--shadow-depth-16);\n\n    backdrop-filter: blur(functions.pxToRem(5));\n    -webkit-backdrop-filter: blur(functions.pxToRem(5));\n\n    &:after {\n        // allows using `--popover-body-background-color` while\n        // getting the blurred backdrop effect\n        transition: opacity 0.4s ease;\n        pointer-events: none;\n\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        z-index: -1;\n\n        opacity: 0.75;\n\n        border-radius: var(--popover-border-radius, functions.pxToRem(12));\n        background-color: var(\n            --popover-body-background-color,\n            var(--lime-elevated-surface-background-color)\n        );\n    }\n\n    @include mixins.visualize-keyboard-focus;\n\n    &:focus,\n    &:focus-within {\n        &:after {\n            opacity: 1;\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/portal","filePath":"./src/components/portal/portal.tsx","fileName":"portal.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/portal/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/portal/usage","tag":"limel-portal","overview":"The portal component provides a way to render children into a DOM node that\nexist outside the DOM hierarchy of the parent component.\n\nThere are some caveats when using this component\n\nEvents might not bubble up as expected since the content is moved out to\n  another DOM node.\nAny styling that is applied to content from the parent will be lost, if the\n  content is just another web compoent it will work without any issues.\n  Alternatively, use the\n  `style=\"\"` html attribute.\nAny component that is placed inside the container must have a style of\n  `max-height: inherit`. This ensures that its placement is calculated\n  correctly in relation to the trigger, and that it never covers its own\n  trigger.\nWhen the node is moved in the DOM, `disconnectedCallback` and\n  `connectedCallback` will be invoked, so if `disconnectedCallback` is used\n  to do any tear-down, the appropriate setup will have to be done again on\n  `connectedCallback`.","usage":{},"docs":"The portal component provides a way to render children into a DOM node that\nexist outside the DOM hierarchy of the parent component.\n\nThere are some caveats when using this component\n\nEvents might not bubble up as expected since the content is moved out to\n  another DOM node.\nAny styling that is applied to content from the parent will be lost, if the\n  content is just another web compoent it will work without any issues.\n  Alternatively, use the\n  `style=\"\"` html attribute.\nAny component that is placed inside the container must have a style of\n  `max-height: inherit`. This ensures that its placement is calculated\n  correctly in relation to the trigger, and that it never covers its own\n  trigger.\nWhen the node is moved in the DOM, `disconnectedCallback` and\n  `connectedCallback` will be invoked, so if `disconnectedCallback` is used\n  to do any tear-down, the appropriate setup will have to be done again on\n  `connectedCallback`.","docsTags":[{"name":"slot","text":"- Content to put inside the portal"},{"name":"private"},{"name":"exampleComponent","text":"limel-example-portal"}],"encapsulation":"shadow","dependents":["limel-date-picker","limel-input-field","limel-menu","limel-picker","limel-popover","limel-select","limel-tooltip"],"dependencies":[],"dependencyGraph":{"limel-date-picker":["limel-portal"],"limel-input-field":["limel-portal"],"limel-menu":["limel-portal"],"limel-picker":["limel-portal"],"limel-popover":["limel-portal"],"limel-select":["limel-portal"],"limel-tooltip":["limel-portal"]},"props":[{"name":"containerId","type":"string","mutable":false,"attr":"container-id","reflectToAttr":false,"docs":"A unique ID.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"containerStyle","type":"object","mutable":false,"reflectToAttr":false,"docs":"Dynamic styling that can be applied to the container holding the content.","docsTags":[],"default":"{}","values":[{"type":"object"}],"optional":false,"required":false},{"name":"inheritParentWidth","type":"boolean","mutable":false,"attr":"inherit-parent-width","reflectToAttr":false,"docs":"Used to make a dropdown have the same width as the trigger, for example\nin `limel-picker`.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"openDirection","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","mutable":false,"attr":"open-direction","reflectToAttr":false,"docs":"Decides which direction the portal content should open.","docsTags":[],"default":"'bottom'","values":[{"value":"bottom","type":"string"},{"value":"bottom-end","type":"string"},{"value":"bottom-start","type":"string"},{"value":"left","type":"string"},{"value":"left-end","type":"string"},{"value":"left-start","type":"string"},{"value":"right","type":"string"},{"value":"right-end","type":"string"},{"value":"right-start","type":"string"},{"value":"top","type":"string"},{"value":"top-end","type":"string"},{"value":"top-start","type":"string"}],"optional":false,"required":false},{"name":"parent","type":"HTMLElement","mutable":false,"reflectToAttr":false,"docs":"Parent element to move the content to.","docsTags":[],"default":"document.body","values":[{"type":"HTMLElement"}],"optional":false,"required":false},{"name":"position","type":"\"absolute\" | \"fixed\"","mutable":false,"attr":"position","reflectToAttr":false,"docs":"Position of the content.","docsTags":[],"default":"'absolute'","values":[{"value":"absolute","type":"string"},{"value":"fixed","type":"string"}],"optional":false,"required":false},{"name":"visible","type":"boolean","mutable":false,"attr":"visible","reflectToAttr":false,"docs":"True if the content within the portal should be visible.\n\nIf the content is from within a dialog for instance, this can be set to\ntrue from false when the dialog opens to position the content properly.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[{"name":"","docs":"Content to put inside the portal"}],"parts":[],"listeners":[],"sources":[{"filename":"portal.tsx","type":"tsx","source":"import { Component, Element, h, Prop, Watch } from '@stencil/core';\nimport { OpenDirection } from '../menu/menu.types';\nimport {\n    createPopper,\n    Instance,\n    OptionsGeneric,\n    Placement,\n} from '@popperjs/core';\nimport { FlipModifier } from '@popperjs/core/lib/modifiers/flip';\n\n/* eslint-disable jsdoc/check-indentation */\n/**\n * The portal component provides a way to render children into a DOM node that\n * exist outside the DOM hierarchy of the parent component.\n *\n * There are some caveats when using this component\n *\n * Events might not bubble up as expected since the content is moved out to\n *   another DOM node.\n * Any styling that is applied to content from the parent will be lost, if the\n *   content is just another web compoent it will work without any issues.\n *   Alternatively, use the\n *   `style=\"\"` html attribute.\n * Any component that is placed inside the container must have a style of\n *   `max-height: inherit`. This ensures that its placement is calculated\n *   correctly in relation to the trigger, and that it never covers its own\n *   trigger.\n * When the node is moved in the DOM, `disconnectedCallback` and\n *   `connectedCallback` will be invoked, so if `disconnectedCallback` is used\n *   to do any tear-down, the appropriate setup will have to be done again on\n *   `connectedCallback`.\n *\n * @slot - Content to put inside the portal\n * @private\n * @exampleComponent limel-example-portal\n */\n/* eslint-enable jsdoc/check-indentation */\n@Component({\n    tag: 'limel-portal',\n    shadow: true,\n    styleUrl: 'portal.scss',\n})\nexport class Portal {\n    /**\n     * Decides which direction the portal content should open.\n     */\n    @Prop()\n    public openDirection: OpenDirection = 'bottom';\n\n    /**\n     * Position of the content.\n     */\n    @Prop()\n    public position: 'fixed' | 'absolute' = 'absolute';\n\n    /**\n     * A unique ID.\n     */\n    @Prop()\n    public containerId: string;\n\n    /**\n     * Dynamic styling that can be applied to the container holding the content.\n     */\n    @Prop()\n    public containerStyle: object = {};\n\n    /**\n     * Parent element to move the content to.\n     */\n    @Prop()\n    public parent: HTMLElement = document.body;\n\n    /**\n     * Used to make a dropdown have the same width as the trigger, for example\n     * in `limel-picker`.\n     */\n    @Prop()\n    public inheritParentWidth = false;\n\n    /**\n     * True if the content within the portal should be visible.\n     *\n     * If the content is from within a dialog for instance, this can be set to\n     * true from false when the dialog opens to position the content properly.\n     */\n    @Prop()\n    public visible = false;\n\n    private parents: WeakMap<HTMLElement, HTMLElement>;\n\n    @Watch('visible')\n    protected onVisible() {\n        if (!this.visible) {\n            this.hideContainer();\n            this.styleContainer();\n            this.destroyPopper();\n\n            return;\n        }\n\n        this.styleContainer();\n        this.createPopper();\n        requestAnimationFrame(() => {\n            this.showContainer();\n        });\n    }\n\n    @Element()\n    private host: HTMLLimelPortalElement;\n\n    private container: HTMLElement;\n\n    private popperInstance: Instance;\n\n    private loaded = false;\n\n    private observer: ResizeObserver;\n\n    constructor() {\n        this.parents = new WeakMap();\n    }\n\n    public disconnectedCallback() {\n        this.removeContainer();\n        this.destroyPopper();\n        if (this.observer) {\n            this.observer.unobserve(this.container);\n        }\n    }\n\n    public connectedCallback() {\n        if (!this.loaded) {\n            return;\n        }\n\n        this.createContainer();\n        this.hideContainer();\n        this.attachContainer();\n        this.styleContainer();\n\n        if (this.visible) {\n            this.createPopper();\n            this.showContainer();\n        }\n\n        if ('ResizeObserver' in window) {\n            const observer = new ResizeObserver(() => {\n                if (this.popperInstance) {\n                    this.styleContainer();\n                    this.popperInstance.update();\n                }\n            });\n            observer.observe(this.container);\n        }\n    }\n\n    public componentDidLoad() {\n        this.loaded = true;\n        this.connectedCallback();\n    }\n\n    public render() {\n        return <slot />;\n    }\n\n    private createContainer() {\n        const slot: HTMLSlotElement =\n            this.host.shadowRoot.querySelector('slot');\n        const content =\n            (slot.assignedElements && slot.assignedElements()) || [];\n\n        this.container = document.createElement('div');\n        this.container.setAttribute('id', this.containerId);\n        this.container.setAttribute('class', 'limel-portal--container');\n        Object.assign(this.container, {\n            portalSource: this.host,\n        });\n\n        content.forEach((element: HTMLElement) => {\n            this.parents.set(element, element.parentElement);\n            this.container.appendChild(element);\n        });\n    }\n\n    private attachContainer() {\n        this.parent.appendChild(this.container);\n    }\n\n    private removeContainer() {\n        if (!this.container) {\n            return;\n        }\n\n        Array.from(this.container.children).forEach((element: HTMLElement) => {\n            const parent = this.parents.get(element);\n            if (!parent) {\n                return;\n            }\n\n            parent.appendChild(element);\n        });\n\n        this.hideContainer();\n        this.container.parentElement.removeChild(this.container);\n    }\n\n    private hideContainer() {\n        this.container.style.opacity = '0';\n    }\n\n    private showContainer() {\n        this.container.style.opacity = '1';\n    }\n\n    private styleContainer() {\n        const hostWidth = this.host.getBoundingClientRect().width;\n\n        if (this.visible) {\n            this.container.style.display = 'block';\n        } else {\n            this.container.style.display = 'none';\n        }\n\n        if (this.inheritParentWidth) {\n            const containerWidth = this.getContentWidth(this.container);\n            let width = containerWidth;\n            if (hostWidth > 0) {\n                width = hostWidth;\n            }\n\n            this.container.style.width = `${width}px`;\n        }\n\n        this.ensureContainerFitsInViewPort();\n\n        Object.keys(this.containerStyle).forEach((property) => {\n            this.container.style[property] = this.containerStyle[property];\n        });\n    }\n\n    private getContentWidth(element: HTMLElement | Element) {\n        if (!element) {\n            return null;\n        }\n\n        const width = element.getBoundingClientRect().width;\n        if (width !== 0) {\n            return width;\n        }\n\n        const elementContent = element.querySelector('*');\n\n        return this.getContentWidth(elementContent);\n    }\n\n    private createPopper() {\n        const config = this.createPopperConfig();\n\n        this.popperInstance = createPopper(this.host, this.container, config);\n    }\n\n    private destroyPopper() {\n        this.popperInstance?.destroy();\n        this.popperInstance = null;\n    }\n\n    private createPopperConfig(): Partial<\n        OptionsGeneric<Partial<FlipModifier>>\n    > {\n        const placement = this.getPlacement(this.openDirection);\n        const flipPlacement = this.getFlipPlacement(this.openDirection);\n\n        return {\n            strategy: this.position,\n            placement: placement,\n            modifiers: [\n                {\n                    name: 'flip',\n                    options: {\n                        fallbackPlacements: [flipPlacement],\n                    },\n                },\n            ],\n        };\n    }\n\n    private getPlacement(direction: OpenDirection): Placement {\n        const placements: Record<OpenDirection, Placement> = {\n            'left-start': 'left-start',\n            left: 'left',\n            'left-end': 'left-end',\n            'right-start': 'right-start',\n            right: 'right',\n            'right-end': 'right-end',\n            'top-start': 'top-start',\n            top: 'top',\n            'top-end': 'top-end',\n            'bottom-start': 'bottom-start',\n            bottom: 'bottom',\n            'bottom-end': 'bottom-end',\n        };\n\n        return placements[direction];\n    }\n\n    private getFlipPlacement(direction: OpenDirection): Placement {\n        const flipPlacements: Record<OpenDirection, Placement> = {\n            'left-start': 'right-start',\n            left: 'right',\n            'left-end': 'right-end',\n            'right-start': 'left-start',\n            right: 'left',\n            'right-end': 'left-end',\n            'top-start': 'bottom-start',\n            top: 'bottom',\n            'top-end': 'bottom-end',\n            'bottom-start': 'top-start',\n            bottom: 'top',\n            'bottom-end': 'top-end',\n        };\n\n        return flipPlacements[direction];\n    }\n\n    private ensureContainerFitsInViewPort() {\n        const viewHeight = Math.max(\n            document.documentElement.clientHeight || 0,\n            window.innerHeight || 0\n        );\n\n        const { top, bottom } = this.host.getBoundingClientRect();\n        const spaceAboveTopOfSurface = Math.max(top, 0);\n        const spaceBelowTopOfSurface = Math.max(viewHeight - bottom, 0);\n        const extraCosmeticSpace = 16;\n        const maxHeight =\n            Math.max(spaceAboveTopOfSurface, spaceBelowTopOfSurface) -\n            extraCosmeticSpace;\n\n        this.container.style.maxHeight = `${maxHeight}px`;\n    }\n}\n"},{"filename":"portal.scss","type":"scss","source":":host(limel-portal) {\n    display: block;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 100%;\n    pointer-events: none;\n}\n\n:host([hidden]) {\n    display: none;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow","filePath":"./src/components/progress-flow/progress-flow.tsx","fileName":"progress-flow.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/usage","tag":"limel-progress-flow","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-progress-flow-basic"},{"name":"exampleComponent","text":"limel-example-progress-flow-secondary-text"},{"name":"exampleComponent","text":"limel-example-progress-flow-disabled-step"},{"name":"exampleComponent","text":"limel-example-progress-flow-colors"},{"name":"exampleComponent","text":"limel-example-progress-flow-colors-css"},{"name":"exampleComponent","text":"limel-example-progress-flow-off-progress-steps"},{"name":"exampleComponent","text":"limel-example-progress-flow-narrow"}],"encapsulation":"shadow","dependents":["limel-example-progress-flow-basic","limel-example-progress-flow-colors","limel-example-progress-flow-colors-css","limel-example-progress-flow-disabled-step","limel-example-progress-flow-narrow","limel-example-progress-flow-off-progress-steps","limel-example-progress-flow-secondary-text"],"dependencies":["limel-progress-flow-item"],"dependencyGraph":{"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"],"limel-example-progress-flow-basic":["limel-progress-flow"],"limel-example-progress-flow-colors":["limel-progress-flow"],"limel-example-progress-flow-colors-css":["limel-progress-flow"],"limel-example-progress-flow-disabled-step":["limel-progress-flow"],"limel-example-progress-flow-narrow":["limel-progress-flow"],"limel-example-progress-flow-off-progress-steps":["limel-progress-flow"],"limel-example-progress-flow-secondary-text":["limel-progress-flow"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"Set to `true` to disable the progress flow.\nUse `disabled` to indicate that the component can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"flowItems","type":"FlowItem[]","mutable":false,"reflectToAttr":false,"docs":"What flow items to render","docsTags":[],"default":"[]","values":[{"type":"FlowItem[]"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":false,"docs":"Disables the progress flow when `true`.\nThis does not visualize the component that much differently.\nBut since the component does not provide any feedback that users can\ninteract with the component, it makes it perfect for illustrative and\ninformative porpuses.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"FlowItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a new value has been selected from the progress flow","docsTags":[]}],"styles":[{"name":"--progress-flow-icon-color--inactive","annotation":"prop","docs":"Color of the optional icons used in each step. Only affects inactive steps, defaults to text colors for inactive, active, or passed step."},{"name":"--progress-flow-step-background-color","annotation":"prop","docs":"Background color of steps, defaults to `--contrast-600`."},{"name":"--progress-flow-step-background-color--passed","annotation":"prop","docs":"Background color of passed steps, defaults to the background color the step has when selected."},{"name":"--progress-flow-step-background-color--selected","annotation":"prop","docs":"Background color of selected step, defaults to `--lime-primary-color`."},{"name":"--progress-flow-step-divider-color","annotation":"prop","docs":"Color of the arrow shaped dividers between steps which must be the same as component's background, defaults to `--contrast-100`."},{"name":"--progress-flow-step-text-color","annotation":"prop","docs":"Text of steps, defaults to `--contrast-1200`."},{"name":"--progress-flow-step-text-color--passed","annotation":"prop","docs":"Text color of passed steps, defaults to the text color the step has when selected."},{"name":"--progress-flow-step-text-color--selected","annotation":"prop","docs":"Text color of selected step, defaults to `--lime-primary-color`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { FlowItem } from './progress-flow.types';\n\n/**\n * @exampleComponent limel-example-progress-flow-basic\n * @exampleComponent limel-example-progress-flow-secondary-text\n * @exampleComponent limel-example-progress-flow-disabled-step\n * @exampleComponent limel-example-progress-flow-colors\n * @exampleComponent limel-example-progress-flow-colors-css\n * @exampleComponent limel-example-progress-flow-off-progress-steps\n * @exampleComponent limel-example-progress-flow-narrow\n */\n@Component({\n    tag: 'limel-progress-flow',\n    shadow: true,\n    styleUrl: 'progress-flow.scss',\n})\nexport class ProgressFlow {\n    @Element()\n    public element: HTMLLimelProgressFlowElement;\n\n    /**\n     * What flow items to render\n     */\n    @Prop()\n    public flowItems: FlowItem[] = [];\n\n    /**\n     * Set to `true` to disable the progress flow.\n     * Use `disabled` to indicate that the component can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop()\n    public disabled = false;\n\n    /**\n     * Disables the progress flow when `true`.\n     * This does not visualize the component that much differently.\n     * But since the component does not provide any feedback that users can\n     * interact with the component, it makes it perfect for illustrative and\n     * informative porpuses.\n     */\n    @Prop()\n    public readonly = false;\n\n    /**\n     * Fired when a new value has been selected from the progress flow\n     */\n    @Event()\n    public change: EventEmitter<FlowItem>;\n\n    private selectedItemIndex: number;\n\n    public componentDidRender() {\n        this.scrollToSelectedItem();\n    }\n\n    public render() {\n        const regularFlowItems = this.flowItems.filter((item) => {\n            return !item.isOffProgress;\n        });\n        const endPhaseItems = this.flowItems.filter((item) => {\n            return item.isOffProgress;\n        });\n        this.selectedItemIndex = regularFlowItems.findIndex((item) => {\n            return item.selected;\n        });\n\n        return [\n            regularFlowItems.map(this.renderRegularFlowItem),\n            endPhaseItems.map(this.renderEndPhaseItem),\n        ];\n    }\n\n    private renderRegularFlowItem = (\n        item: FlowItem,\n        index: number,\n        array: FlowItem[]\n    ) => {\n        return (\n            <limel-progress-flow-item\n                class={{\n                    'flow-item': true,\n                    first: index === 0,\n                    last: index === array.length - 1,\n                    passed: index < this.selectedItemIndex,\n                    selected: item.selected,\n                }}\n                style={this.getItemStyle(item)}\n                disabled={this.disabled || this.readonly}\n                readonly={this.readonly}\n                item={item}\n                onInteract={this.handleFlowItemClick(item)}\n                data-tracking-value={item.value}\n            />\n        );\n    };\n\n    private renderEndPhaseItem = (\n        item: FlowItem,\n        index: number,\n        array: FlowItem[]\n    ) => {\n        return (\n            <limel-progress-flow-item\n                class={{\n                    'flow-item': true,\n                    'off-progress-item': true,\n                    selected: item.selected,\n                    'first-off-progress-item': index === 0,\n                    'last-off-progress-item': index === array.length - 1,\n                }}\n                style={this.getItemStyle(item)}\n                disabled={this.disabled || this.readonly}\n                readonly={this.readonly}\n                item={item}\n                onInteract={this.handleFlowItemClick(item)}\n                data-tracking-value={item.value}\n            />\n        );\n    };\n\n    private handleFlowItemClick = (flowItem: FlowItem) => () => {\n        if (!flowItem.selected && !flowItem.disabled && !this.disabled) {\n            this.change.emit(flowItem);\n        }\n    };\n\n    private getItemStyle(flowItem: FlowItem) {\n        const style: any = {};\n        if (flowItem?.selectedColor) {\n            style['--progress-flow-step-background-color--selected'] =\n                flowItem.selectedColor;\n        }\n\n        if (flowItem?.passedColor) {\n            style['--progress-flow-step-background-color--passed'] =\n                flowItem.passedColor;\n        }\n\n        if (flowItem?.iconColor) {\n            style['--progress-flow-icon-color--inactive'] = flowItem.iconColor;\n        }\n\n        return style;\n    }\n\n    private scrollToSelectedItem() {\n        const selectedElement = this.getElementForSelectedItem();\n        if (selectedElement) {\n            const selectedItemLeftPosition =\n                selectedElement.offsetLeft - this.element.offsetLeft;\n            const selectedElementLeftPositionCentered =\n                // eslint-disable-next-line no-magic-numbers\n                selectedItemLeftPosition - this.element.offsetWidth / 2;\n            const selectedElementCentered =\n                selectedElementLeftPositionCentered +\n                // eslint-disable-next-line no-magic-numbers\n                selectedElement.offsetWidth / 2;\n            this.element.scrollTo({\n                behavior: 'smooth',\n                left: selectedElementCentered,\n            });\n        }\n    }\n\n    private getElementForSelectedItem(): HTMLLimelProgressFlowItemElement {\n        return this.element.shadowRoot.querySelector('.flow-item.selected');\n    }\n}\n"},{"filename":"progress-flow.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/internal/variables';\n\n/**\n* @prop --progress-flow-step-background-color: Background color of steps, defaults to `--contrast-600`.\n* @prop --progress-flow-step-background-color--selected: Background color of selected step, defaults to `--lime-primary-color`.\n* @prop --progress-flow-step-background-color--passed: Background color of passed steps, defaults to the background color the step has when selected.\n* @prop --progress-flow-step-text-color: Text of steps, defaults to `--contrast-1200`.\n* @prop --progress-flow-step-text-color--selected: Text color of selected step, defaults to `--lime-primary-color`.\n* @prop --progress-flow-step-text-color--passed: Text color of passed steps, defaults to the text color the step has when selected.\n* @prop --progress-flow-step-divider-color: Color of the arrow shaped dividers between steps which must be the same as component's background, defaults to `--contrast-100`.\n* @prop --progress-flow-icon-color--inactive: Color of the optional icons used in each step. Only affects inactive steps, defaults to text colors for inactive, active, or passed step.\n*/\n\n:host {\n    --step-height: 2.5rem;\n    --selected-indicator-right: -0.5rem;\n    --max-text-width: 10rem;\n\n    isolation: isolate;\n    box-sizing: border-box;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n\n    overflow-x: auto;\n    scrollbar-width: none; // This hides the scrollbars appearing under in Firefox\n    -ms-overflow-style: none; // Same as above for IE 11\n    padding: functions.pxToRem(4); // needed for the focus effect\n\n    &::-webkit-scrollbar {\n        display: none; // This hides the scrollbars appearing under in Chrome\n    }\n}\n\n:host(.is-narrow) {\n    --step-height: 1.5rem;\n    --selected-indicator-right: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/progress-flow-item","filePath":"./src/components/progress-flow/progress-flow-item/progress-flow-item.tsx","fileName":"progress-flow-item.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/progress-flow-item/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/progress-flow-item/usage","tag":"limel-progress-flow-item","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"none","dependents":["limel-progress-flow"],"dependencies":["limel-icon"],"dependencyGraph":{"limel-progress-flow-item":["limel-icon"],"limel-progress-flow":["limel-progress-flow-item"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"True if the flow item should be disabled","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"item","type":"FlowItem","mutable":false,"reflectToAttr":false,"docs":"The flow item that should be rendered","docsTags":[],"default":"null","values":[{"type":"FlowItem"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":false,"docs":"True if the flow item should be readonly","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"interact","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when clicking on the flow item","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-item.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { FlowItem } from '../progress-flow.types';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-progress-flow-item',\n    shadow: false,\n    styleUrl: 'progress-flow-item.scss',\n})\nexport class ProgressFlowItem {\n    @Element()\n    public element: HTMLLimelProgressFlowItemElement;\n\n    /**\n     * The flow item that should be rendered\n     */\n    @Prop()\n    public item: FlowItem = null;\n\n    /**\n     * True if the flow item should be disabled\n     */\n    @Prop()\n    public disabled = false;\n\n    /**\n     * True if the flow item should be readonly\n     */\n    @Prop()\n    public readonly = false;\n\n    /**\n     * Fired when clicking on the flow item\n     */\n    @Event()\n    public interact: EventEmitter<void>;\n\n    public render() {\n        if (!this.item) {\n            return;\n        }\n\n        return [\n            <button\n                tabindex=\"0\"\n                title={this.getToolTipText()}\n                type=\"button\"\n                class={{\n                    step: true,\n                    selected: this.item?.selected,\n                    disabled: this.isDisabled(),\n                    readonly: this.readonly,\n                }}\n                onClick={this.handleClick}\n                disabled={this.isDisabled()}\n            >\n                {this.renderIcon()}\n                <span class=\"text\">{this.item.text}</span>\n                {this.renderDivider()}\n            </button>,\n            this.renderSecondaryText(),\n        ];\n    }\n\n    private isDisabled() {\n        return this.item?.disabled || this.readonly || this.disabled;\n    }\n\n    private getToolTipText() {\n        if (!this.item.secondaryText) {\n            return this.item.text;\n        }\n\n        return [this.item.text, this.item.secondaryText].join(' · ');\n    }\n\n    private handleClick = () => {\n        this.interact.emit();\n    };\n\n    private renderSecondaryText() {\n        if (!this.item?.secondaryText) {\n            return;\n        }\n\n        return <div class=\"secondary-text\">{this.item.secondaryText}</div>;\n    }\n\n    private renderIcon() {\n        if (!this.item.icon) {\n            return;\n        }\n\n        return <limel-icon name={this.item.icon} size=\"small\" class=\"icon\" />;\n    }\n\n    private renderDivider() {\n        if (this.item.isOffProgress) {\n            return;\n        }\n\n        return <div class=\"divider\" />;\n    }\n}\n"},{"filename":"progress-flow-item.scss","type":"scss","source":"@use '../../../style/mixins';\n@use '../../../style/functions';\n@use '../../../style/internal/variables';\n\n$limel-progress-flow-step-content: 2;\n$limel-progress-flow-divider: 1;\n\n.flow-item {\n    --step-background: var(\n        --progress-flow-step-background-color,\n        rgb(var(--contrast-600))\n    );\n    --step-background--selected: var(\n        --progress-flow-step-background-color--selected,\n        var(--mdc-theme-primary)\n    );\n    --step-background--passed: var(\n        --progress-flow-step-background-color--passed,\n        var(--step-background--selected)\n    );\n\n    --step-text: var(\n        --progress-flow-step-text-color,\n        rgb(var(--contrast-1200))\n    );\n    --step-text--selected: var(\n        --progress-flow-step-text-color--selected,\n        var(--mdc-theme-on-primary)\n    );\n    --step-text--passed: var(\n        --progress-flow-step-text-color--passed,\n        var(--step-text--selected)\n    );\n\n    --step-divider-color: var(\n        --progress-flow-step-divider-color,\n        rgb(var(--contrast-100))\n    );\n\n    position: relative;\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n\n    &:not(.off-progress-item, .last) {\n        .divider {\n            &:after {\n                content: '';\n            }\n        }\n    }\n\n    &.off-progress-item {\n        padding-left: functions.pxToRem(8);\n    }\n\n    &.first-off-progress-item {\n        padding-left: functions.pxToRem(16);\n    }\n}\n\n.step {\n    transition: background-color 0.2s ease, box-shadow 0.2s ease;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    width: 100%;\n    height: var(--step-height);\n    border: none;\n    font-size: functions.pxToRem(14);\n\n    &.disabled {\n        cursor: not-allowed;\n\n        &.readonly {\n            opacity: 1;\n            cursor: default;\n        }\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    &:focus-visible {\n        box-shadow: var(--shadow-depth-8-focused);\n    }\n\n    .flow-item:not(.off-progress-item, .first) & {\n        padding-left: calc(var(--step-height) / 2);\n    }\n\n    .flow-item:not(.selected) & {\n        &:not(.disabled) {\n            cursor: pointer;\n            &:hover {\n                box-shadow: var(--button-shadow-normal);\n            }\n            &:active {\n                box-shadow: var(--button-shadow-pressed);\n            }\n        }\n    }\n\n    .off-progress-item & {\n        border-radius: functions.pxToRem(4);\n        padding: 0 functions.pxToRem(12);\n\n        .icon {\n            margin-left: 0;\n        }\n    }\n    .flow-item.first & {\n        border-top-left-radius: var(--step-height);\n        border-bottom-left-radius: var(--step-height);\n        padding-left: functions.pxToRem(20);\n    }\n    .flow-item.last & {\n        border-top-right-radius: var(--step-height);\n        border-bottom-right-radius: var(--step-height);\n        padding-right: functions.pxToRem(20);\n    }\n}\n\n.divider {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: var(--step-height);\n    height: var(--step-height);\n\n    position: absolute;\n    z-index: $limel-progress-flow-divider;\n    right: calc(var(--step-height) / 2 * -1);\n    overflow: hidden;\n\n    &:after {\n        position: absolute;\n        display: block;\n\n        box-sizing: border-box;\n        transition: background-color 0.2s ease;\n\n        width: 100%;\n        height: 100%;\n        right: calc(var(--step-height) / 5);\n        transform: rotate(45deg);\n        border: {\n            style: solid;\n            width: functions.pxToRem(2) functions.pxToRem(2) 0 0;\n            radius: 0 functions.pxToRem(8) 0 0;\n            color: var(--step-divider-color);\n        }\n    }\n    .flow-item.last & {\n        width: 0;\n    }\n}\n\n.text,\n.secondary-text {\n    @include mixins.truncate-text();\n    max-width: var(--max-text-width);\n    z-index: $limel-progress-flow-step-content;\n}\n\n.secondary-text {\n    font-size: functions.pxToRem(12);\n    margin: auto;\n    padding-left: calc(var(--step-height) / 2);\n}\n\n.icon {\n    margin: 0 functions.pxToRem(8) 0 functions.pxToRem(4);\n    z-index: $limel-progress-flow-step-content;\n}\n\n@import './partial-styles/_selected-indicator';\n@import './partial-styles/_colors';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select","filePath":"./src/components/select/select.tsx","fileName":"select.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/usage","tag":"limel-select","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-select"},{"name":"exampleComponent","text":"limel-example-select-with-icons"},{"name":"exampleComponent","text":"limel-example-select-multiple"},{"name":"exampleComponent","text":"limel-example-select-with-empty-option"},{"name":"exampleComponent","text":"limel-example-select-preselected"},{"name":"exampleComponent","text":"limel-example-select-change-options"},{"name":"exampleComponent","text":"limel-example-select-narrow"},{"name":"exampleComponent","text":"limel-example-select-dialog"}],"encapsulation":"shadow","dependents":["limel-example-dialog-heading","limel-example-linear-progress-color","limel-example-menu-open-direction","limel-example-picker-static-actions","limel-example-select","limel-example-select-change-options","limel-example-select-dialog","limel-example-select-multiple","limel-example-select-narrow","limel-example-select-preselected","limel-example-select-with-empty-option","limel-example-select-with-icons"],"dependencies":["limel-icon","limel-portal","limel-menu-surface","limel-list"],"dependencyGraph":{"limel-select":["limel-icon","limel-portal","limel-menu-surface","limel-list"],"limel-example-dialog-heading":["limel-select"],"limel-example-linear-progress-color":["limel-select"],"limel-example-menu-open-direction":["limel-select"],"limel-example-picker-static-actions":["limel-select"],"limel-example-select":["limel-select"],"limel-example-select-change-options":["limel-select"],"limel-example-select-dialog":["limel-select"],"limel-example-select-multiple":["limel-select"],"limel-example-select-narrow":["limel-select"],"limel-example-select-preselected":["limel-select"],"limel-example-select-with-empty-option":["limel-select"],"limel-example-select-with-icons":["limel-select"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to make the field disabled.\nand visually shows that the `select` component is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe component may become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the input field when it has focus.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the select is\ninvalid.","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Text to display next to the select.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"multiple","type":"boolean","mutable":false,"attr":"multiple","reflectToAttr":false,"docs":"Set to `true` to allow multiple values to be selected.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"options","type":"Option<string>[]","mutable":false,"reflectToAttr":false,"docs":"List of options.","docsTags":[],"default":"[]","values":[{"type":"Option<string>[]"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to make the field read-only.\nThis visualizes the component slightly differently.\nBut shows no visual sign indicating that the component is disabled\nor can ever become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"True if the control requires a value.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"Option<string> | Option<string>[]","mutable":false,"reflectToAttr":false,"docs":"Currently selected value or values.\nIf `multiple` is `true`, this must be an array. Otherwise it must be a\nsingle value.","docsTags":[],"values":[{"type":"Option<string>"},{"type":"Option<string>[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"Option<string> | Option<string>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the value is changed.","docsTags":[]}],"styles":[{"name":"--dropdown-z-index","annotation":"prop","docs":"z-index of the dropdown menu."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select.tsx","type":"tsx","source":"import { ListItem, Option } from '@limetech/lime-elements';\nimport { MDCFloatingLabel } from '@material/floating-label';\nimport { MDCSelectHelperText } from '@material/select/helper-text';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { isMobileDevice } from '../../util/device';\nimport {\n    ENTER,\n    ENTER_KEY_CODE,\n    SPACE,\n    SPACE_KEY_CODE,\n} from '../../util/keycodes';\nimport { isMultiple } from '../../util/multiple';\nimport { createRandomString } from '../../util/random-string';\nimport { SelectTemplate } from './select.template';\n\n/**\n * @exampleComponent limel-example-select\n * @exampleComponent limel-example-select-with-icons\n * @exampleComponent limel-example-select-multiple\n * @exampleComponent limel-example-select-with-empty-option\n * @exampleComponent limel-example-select-preselected\n * @exampleComponent limel-example-select-change-options\n * @exampleComponent limel-example-select-narrow\n * @exampleComponent limel-example-select-dialog\n */\n@Component({\n    tag: 'limel-select',\n    shadow: true,\n    styleUrl: 'select.scss',\n})\nexport class Select {\n    /**\n     * Set to `true` to make the field disabled.\n     * and visually shows that the `select` component is editable but disabled.\n     * This tells the users that if certain requirements are met,\n     * the component may become interactable.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to make the field read-only.\n     * This visualizes the component slightly differently.\n     * But shows no visual sign indicating that the component is disabled\n     * or can ever become interactable.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the select is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid: boolean;\n\n    /**\n     * True if the control requires a value.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * Text to display next to the select.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus.\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Currently selected value or values.\n     * If `multiple` is `true`, this must be an array. Otherwise it must be a\n     * single value.\n     */\n    @Prop()\n    public value: Option | Option[];\n\n    /**\n     * List of options.\n     */\n    @Prop()\n    public options: Option[] = [];\n\n    /**\n     * Set to `true` to allow multiple values to be selected.\n     */\n    @Prop()\n    public multiple: boolean = false;\n\n    /**\n     * Emitted when the value is changed.\n     */\n    @Event()\n    private change: EventEmitter<Option | Option[]>;\n\n    @Element()\n    private host: HTMLLimelSelectElement;\n\n    @State()\n    private menuOpen: boolean = false;\n\n    private hasChanged: boolean = false;\n    private checkValid: boolean = false;\n    private mdcSelectHelperText: MDCSelectHelperText;\n    private mdcFloatingLabel: MDCFloatingLabel;\n    private isMobileDevice: boolean;\n    private portalId: string;\n\n    constructor() {\n        this.handleMenuChange = this.handleMenuChange.bind(this);\n        this.handleNativeChange = this.handleNativeChange.bind(this);\n        this.handleMenuTriggerKeyPress =\n            this.handleMenuTriggerKeyPress.bind(this);\n        this.openMenu = this.openMenu.bind(this);\n        this.closeMenu = this.closeMenu.bind(this);\n\n        this.portalId = createRandomString();\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentWillLoad() {\n        this.isMobileDevice = isMobileDevice();\n\n        // It should not be possible to render the native select for consumers, but we still want to make it testable.\n        // We can set this attribute in tests to force rendering of the native select\n        if (this.host.hasAttribute('data-native')) {\n            this.isMobileDevice = true;\n        }\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        let element: HTMLElement;\n        element = this.host.shadowRoot.querySelector('.mdc-floating-label');\n        if (!element) {\n            return;\n        }\n\n        this.mdcFloatingLabel = new MDCFloatingLabel(element);\n\n        element = this.host.shadowRoot.querySelector('.mdc-select-helper-text');\n        if (element) {\n            this.mdcSelectHelperText = new MDCSelectHelperText(element);\n        }\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcFloatingLabel) {\n            this.mdcFloatingLabel.destroy();\n        }\n\n        if (this.mdcSelectHelperText) {\n            this.mdcSelectHelperText.destroy();\n        }\n    }\n\n    public componentDidUpdate() {\n        if (this.menuOpen) {\n            this.setMenuFocus();\n        }\n    }\n\n    public render() {\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index'\n        );\n\n        return (\n            <SelectTemplate\n                id={this.portalId}\n                disabled={this.disabled || this.readonly}\n                readonly={this.readonly}\n                required={this.required}\n                invalid={this.invalid}\n                label={this.label}\n                helperText={this.helperText}\n                value={this.value}\n                options={this.options}\n                onMenuChange={this.handleMenuChange}\n                onNativeChange={this.handleNativeChange}\n                onTriggerPress={this.handleMenuTriggerKeyPress}\n                multiple={this.multiple}\n                isOpen={this.menuOpen}\n                open={this.openMenu}\n                close={this.closeMenu}\n                checkValid={this.checkValid}\n                native={this.isMobileDevice}\n                dropdownZIndex={dropdownZIndex}\n            />\n        );\n    }\n\n    @Watch('menuOpen')\n    protected watchOpen(newValue: boolean, oldValue: boolean) {\n        if (this.checkValid) {\n            return;\n        }\n\n        // Menu was closed for the first time\n        if (!newValue && oldValue) {\n            this.checkValid = true;\n        }\n    }\n\n    private setMenuFocus() {\n        if (this.isMobileDevice) {\n            return;\n        }\n\n        setTimeout(() => {\n            const list: HTMLElement = document.querySelector(\n                `#${this.portalId} limel-menu-surface limel-list`\n            );\n            const firstItem: HTMLElement =\n                list?.shadowRoot?.querySelector('[tabindex]');\n\n            if (firstItem) {\n                firstItem.focus();\n            }\n        });\n    }\n\n    private setTriggerFocus() {\n        const trigger: HTMLElement = this.host.shadowRoot.querySelector(\n            '.limel-select-trigger'\n        );\n        trigger.focus();\n    }\n\n    private handleMenuChange(\n        event: CustomEvent<Array<ListItem<Option>> | ListItem<Option>>\n    ) {\n        event.stopPropagation();\n\n        if (isMultiple(event.detail)) {\n            const listItems: ListItem[] = event.detail;\n            const options: Option[] = listItems.map((item) => item.value);\n            this.change.emit(options);\n\n            return;\n        }\n\n        if (!event.detail.selected) {\n            return;\n        }\n\n        const listItem: ListItem = event.detail;\n        const option: Option = listItem.value;\n        if (option.disabled) {\n            return;\n        }\n\n        this.change.emit(option);\n        this.menuOpen = false;\n        this.setTriggerFocus();\n    }\n\n    private openMenu() {\n        if (this.emitFirstChangeEvent()) {\n            this.hasChanged = true;\n            this.change.emit(this.options[0]);\n        }\n\n        this.menuOpen = true;\n    }\n\n    private emitFirstChangeEvent() {\n        return !this.hasChanged && this.isMobileDevice && !this.value;\n    }\n\n    private closeMenu() {\n        this.menuOpen = false;\n        this.setTriggerFocus();\n    }\n\n    private handleMenuTriggerKeyPress(event: KeyboardEvent) {\n        const isEnter = event.key === ENTER || event.keyCode === ENTER_KEY_CODE;\n        const isSpace = event.key === SPACE || event.keyCode === SPACE_KEY_CODE;\n\n        if (!this.menuOpen && (isSpace || isEnter)) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.menuOpen = true;\n        }\n    }\n\n    private handleNativeChange(event: Event) {\n        event.stopPropagation();\n\n        const element: HTMLSelectElement = this.host.shadowRoot.querySelector(\n            'select.limel-select__native-control'\n        );\n        const options = Array.apply(null, element.options) // eslint-disable-line prefer-spread\n            .filter((optionElement: HTMLOptionElement) => {\n                return !!optionElement.selected;\n            })\n            .map((optionElement: HTMLOptionElement) => {\n                return this.options.find(\n                    (o) => o.value === optionElement.value\n                );\n            });\n\n        if (this.multiple) {\n            this.change.emit(options);\n\n            return;\n        }\n\n        this.change.emit(options[0]);\n        this.menuOpen = false;\n    }\n}\n"},{"filename":"select.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '@material/select/styles';\n@use '@material/select/helper-text/mdc-select-helper-text';\n@use '@material/floating-label';\n@use '@material/floating-label/mdc-floating-label';\n\n// Note! The `--dropdown-z-index` property is used from `select.tsx`.\n/**\n * @prop --dropdown-z-index: z-index of the dropdown menu.\n */\n\n:host {\n    display: block;\n    position: relative;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n.mdc-select--outlined .mdc-floating-label {\n    left: functions.pxToRem(16);\n}\n\n.mdc-select__dropdown-icon-graphic {\n    transition: transform 0.2s ease;\n}\n\n.limel-select__selected-option {\n    display: flex;\n    align-items: center;\n\n    box-sizing: border-box;\n    outline: none;\n\n    align-self: center;\n    min-width: 0; // makes it truncate and prevents the select to grow wider than its container\n}\n\n.limel-select__selected-option__icon {\n    margin-right: functions.pxToRem(8);\n    flex-shrink: 0;\n}\n\n.limel-select__selected-option__text {\n    .mdc-select:not(.mdc-select--disabled) & {\n        @include shared_input-select-picker.looks-like-input-label;\n    }\n    @include mixins.truncate-text;\n}\n\n.limel-select {\n    flex-wrap: wrap;\n    width: 100%;\n\n    &:not(.limel-select--readonly) {\n        .limel-select-trigger {\n            background-color: shared_input-select-picker.$background-color-focused;\n        }\n    }\n\n    .limel-select-trigger {\n        border: none;\n        height: shared_input-select-picker.$height-of-mdc-text-field;\n        display: inline-flex;\n        align-items: center;\n\n        cursor: pointer;\n        border-radius: functions.pxToRem(5);\n\n        .mdc-floating-label {\n            color: shared_input-select-picker.$label-color;\n            width: calc(\n                100% - #{functions.pxToRem(16)}\n            ); //This forces the label to truncate when container is too little.\n            &.mdc-floating-label--float-above {\n                font-size: shared_input-select-picker.$cropped-label-hack--font-size;\n                transform: translateY(functions.pxToRem(-34.75)) scale(0.75);\n            }\n        }\n    }\n\n    .limel-select-trigger,\n    .limel-select__selected-option {\n        width: 100%;\n    }\n\n    .mdc-select__dropdown-icon {\n        margin-left: 0.25rem;\n    }\n\n    &.mdc-select--disabled {\n        .limel-select-trigger {\n            @include shared_input-select-picker.looks-disabled;\n        }\n        .mdc-select__dropdown-icon {\n            svg {\n                fill: rgb(var(--contrast-800));\n            }\n        }\n    }\n\n    &:not(.mdc-select--disabled) {\n        .mdc-select__dropdown-icon {\n            svg {\n                fill: rgb(var(--contrast-1000));\n            }\n        }\n\n        .limel-select-trigger {\n            @include mixins.is-elevated-clickable;\n            @include mixins.visualize-keyboard-focus;\n\n            &.limel-select--focused {\n                background-color: shared_input-select-picker.$background-color-focused;\n\n                .mdc-floating-label {\n                    color: var(--mdc-theme-primary);\n                }\n\n                .mdc-select__dropdown-icon {\n                    svg {\n                        fill: var(--mdc-theme-primary);\n                    }\n                }\n\n                .mdc-select__dropdown-icon-graphic {\n                    transform: rotate(-180deg);\n                }\n            }\n        }\n    }\n\n    &.limel-select--required {\n        .mdc-floating-label::after {\n            content: '*';\n        }\n    }\n\n    &.limel-select--invalid {\n        .mdc-floating-label,\n        .limel-select__selected-option,\n        .invalid-icon,\n        + .mdc-select-helper-line .mdc-select-helper-text {\n            color: var(--lime-error-text-color);\n        }\n        .mdc-floating-label:not(.mdc-floating-label--float-above) {\n            max-width: calc(\n                100% - #{functions.pxToRem(64)}\n            ); // leaves space for the invalid-icon\n        }\n    }\n}\n\n.invalid-icon {\n    flex-shrink: 0;\n}\n\nselect.limel-select__native-control {\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    width: 100%;\n    height: 100%;\n    opacity: 0;\n    border: 0;\n}\n\n:host(.is-narrow) {\n    .limel-select {\n        .mdc-select__anchor {\n            height: functions.pxToRem(36);\n            padding-left: functions.pxToRem(0);\n        }\n\n        .mdc-select__dropdown-icon {\n            margin-right: 0.25rem;\n        }\n    }\n\n    .mdc-floating-label {\n        &.mdc-floating-label--float-above {\n            top: functions.pxToRem(28);\n        }\n    }\n\n    .limel-select__selected-option {\n        padding: 0 0.25rem 0 1rem;\n    }\n\n    .limel-select__selected-option__icon {\n        margin-left: functions.pxToRem(-8);\n    }\n}\n\n@import './partial-styles/_readonly';\n@import './partial-styles/_helper-text';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut","filePath":"./src/components/shortcut/shortcut.tsx","fileName":"shortcut.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/usage","tag":"limel-shortcut","overview":"This component can be used on places such as a start page or a dashboard.\nClicking on the component should navigate the user to a new screen,\nto which you need to provide a URL, by specifying an `href` for the `link` property.\n\nBy default, this navigation will happen within the same browser tab.\nHowever, it is possible to override that behavior, by specifying a `target`\nfor the `link` property","usage":{},"docs":"This component can be used on places such as a start page or a dashboard.\nClicking on the component should navigate the user to a new screen,\nto which you need to provide a URL, by specifying an `href` for the `link` property.\n\nBy default, this navigation will happen within the same browser tab.\nHowever, it is possible to override that behavior, by specifying a `target`\nfor the `link` property","docsTags":[{"name":"exampleComponent","text":"limel-example-shortcut"},{"name":"exampleComponent","text":"limel-example-shortcut-notification"},{"name":"exampleComponent","text":"limel-example-shortcut-styling"},{"name":"exampleComponent","text":"limel-example-shortcut-with-click-handler"}],"encapsulation":"shadow","dependents":["limel-example-shortcut","limel-example-shortcut-notification","limel-example-shortcut-styling","limel-example-shortcut-with-click-handler"],"dependencies":["limel-badge","limel-icon"],"dependencyGraph":{"limel-shortcut":["limel-badge","limel-icon"],"limel-example-shortcut":["limel-shortcut"],"limel-example-shortcut-notification":["limel-shortcut"],"limel-example-shortcut-styling":["limel-shortcut"],"limel-example-shortcut-with-click-handler":["limel-shortcut"]},"props":[{"name":"badge","type":"number | string","mutable":false,"attr":"badge","reflectToAttr":true,"docs":"If specified, will display a notification badge\non the shortcut.","docsTags":[],"values":[{"type":"number"},{"type":"string"}],"optional":true,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` if shortcut is disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"Name of icon for the shortcut.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The text to show below the shortcut. Long label will be truncated.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":true,"required":false},{"name":"link","type":"Link","mutable":false,"reflectToAttr":false,"docs":"If supplied, the shortcut will be a clickable link.","docsTags":[],"values":[{"type":"Link"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[{"name":"--shortcut-background-color","annotation":"prop","docs":"defines the backgrounds color of the shortcut icon. Defaults to `--lime-elevated-surface-background-color`"},{"name":"--shortcut-badge-background-color","annotation":"prop","docs":"Background color of the notification badge. Defaults to `--color-red-default`"},{"name":"--shortcut-badge-text-color","annotation":"prop","docs":"Text color of the notification badge. Defaults to `--color-white`"},{"name":"--shortcut-border-radius","annotation":"prop","docs":"defines the radius of corners of the shortcut. Defaults to `1rem`"},{"name":"--shortcut-icon-color","annotation":"prop","docs":"defines the fill color of the shortcut icon. Defaults to `--contrast-1000`"},{"name":"--shortcut-label-color","annotation":"prop","docs":"defines the color of the shortcut label. Defaults to `--contrast-1100`"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"shortcut.tsx","type":"tsx","source":"import { Component, Prop, h } from '@stencil/core';\nimport { Link } from '@limetech/lime-elements';\n\n/**\n * This component can be used on places such as a start page or a dashboard.\n * Clicking on the component should navigate the user to a new screen,\n * to which you need to provide a URL, by specifying an `href` for the `link` property.\n *\n * By default, this navigation will happen within the same browser tab.\n * However, it is possible to override that behavior, by specifying a `target`\n * for the `link` property\n *\n * @exampleComponent limel-example-shortcut\n * @exampleComponent limel-example-shortcut-notification\n * @exampleComponent limel-example-shortcut-styling\n * @exampleComponent limel-example-shortcut-with-click-handler\n */\n\n@Component({\n    tag: 'limel-shortcut',\n    shadow: true,\n    styleUrl: 'shortcut.scss',\n})\nexport class Shortcut {\n    /**\n     * Name of icon for the shortcut.\n     */\n    @Prop({ reflect: true })\n    public icon: string;\n\n    /**\n     * The text to show below the shortcut. Long label will be truncated.\n     */\n    @Prop({ reflect: true })\n    public label?: string = null;\n\n    /**\n     * Set to `true` if shortcut is disabled.\n     */\n    @Prop({ reflect: true })\n    public disabled?: boolean = false;\n\n    /**\n     * If specified, will display a notification badge\n     * on the shortcut.\n     */\n    @Prop({ reflect: true })\n    public badge?: number | string;\n\n    /**\n     * If supplied, the shortcut will be a clickable link.\n     */\n    @Prop()\n    public link?: Link;\n\n    public render() {\n        return [\n            <a\n                aria-disabled={this.disabled}\n                href={this.link?.href}\n                target={this.link?.target}\n                tabindex=\"0\"\n                aria-label={this.getAriaLabel()}\n                title={this.link?.title}\n            >\n                <limel-icon name={this.icon} />\n            </a>,\n            this.renderLabel(),\n            this.renderNotification(),\n        ];\n    }\n\n    private renderLabel = () => {\n        if (this.label) {\n            return <span aria-hidden=\"true\">{this.label}</span>;\n        }\n    };\n\n    private getAriaLabel = () => {\n        if (this.label && this.link?.title) {\n            return this.label + '. ' + this.link.title;\n        }\n\n        if (this.label) {\n            return this.label;\n        }\n\n        if (this.link?.title) {\n            return this.link.title;\n        }\n\n        return undefined;\n    };\n\n    private renderNotification = () => {\n        if (this.badge) {\n            return <limel-badge label={this.badge} />;\n        }\n    };\n}\n"},{"filename":"shortcut.scss","type":"scss","source":"/**\n* @prop --shortcut-border-radius: defines the radius of corners of the shortcut. Defaults to `1rem`\n* @prop --shortcut-icon-color: defines the fill color of the shortcut icon. Defaults to `--contrast-1000`\n* @prop --shortcut-label-color: defines the color of the shortcut label. Defaults to `--contrast-1100`\n* @prop --shortcut-background-color: defines the backgrounds color of the shortcut icon. Defaults to `--lime-elevated-surface-background-color`\n* @prop --shortcut-badge-text-color: Text color of the notification badge. Defaults to `--color-white`\n* @prop --shortcut-badge-background-color: Background color of the notification badge. Defaults to `--color-red-default`\n*/\n\n@use '../../style/mixins';\n\n:host(limel-shortcut) {\n    --badge-text-color: var(\n        --shortcut-badge-text-color,\n        rgb(var(--color-white))\n    );\n    --badge-background-color: var(\n        --shortcut-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    row-gap: 0.0625rem; //1px\n\n    * {\n        box-sizing: border-box;\n    }\n}\n\n:host(limel-shortcut[disabled]) {\n    a {\n        opacity: 0.5;\n        box-shadow: unset;\n        cursor: not-allowed;\n    }\n}\n\na {\n    all: unset;\n    @include mixins.is-elevated-clickable(\n        $background-color:\n            var(\n                --shortcut-background-color,\n                var(--lime-elevated-surface-background-color)\n            )\n    );\n    @include mixins.visualize-keyboard-focus;\n    cursor: pointer;\n    text-align: center;\n\n    height: calc(100% - 1rem);\n    width: calc(100% - 1rem);\n    padding: 0.5rem;\n\n    border-radius: var(--shortcut-border-radius, 1rem);\n}\n\nlimel-icon {\n    display: flex;\n    height: 100%;\n    width: 100%;\n    justify-content: center;\n    color: var(--shortcut-icon-color, rgb(var(--contrast-1000)));\n    border-radius: var(--shortcut-border-radius, 1rem);\n}\n\nspan {\n    @include mixins.truncate-text;\n    width: 100%;\n    color: var(--shortcut-label-color, rgb(var(--contrast-1100)));\n    font-size: 0.75rem;\n    text-align: center;\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.5rem;\n    right: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/slider","filePath":"./src/components/slider/slider.tsx","fileName":"slider.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/slider/usage","tag":"limel-slider","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-slider"},{"name":"exampleComponent","text":"limel-example-slider-multiplier"},{"name":"exampleComponent","text":"limel-example-slider-multiplier-percentage-colors"},{"name":"exampleComponent","text":"limel-example-slider-composite"}],"encapsulation":"shadow","dependents":["limel-example-collapsible-section-with-slider","limel-example-dialog-form","limel-example-slider","limel-example-slider-composite","limel-example-slider-multiplier","limel-example-slider-multiplier-percentage-colors"],"dependencies":[],"dependencyGraph":{"limel-example-collapsible-section-with-slider":["limel-slider"],"limel-example-dialog-form":["limel-slider"],"limel-example-slider":["limel-slider"],"limel-example-slider-composite":["limel-slider"],"limel-example-slider-multiplier":["limel-slider"],"limel-example-slider-multiplier-percentage-colors":["limel-slider"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Disables the slider when `true`,\nand visually shows that the field is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe slider may become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"factor","type":"number","mutable":false,"attr":"factor","reflectToAttr":true,"docs":"Default value: 1.\nThe factor that the properties `value`, `valuemax`, `valuemin`, and\n`step` are multiplied by. On `change` divides the value by the factor,\nso the original format stays the same.","docsTags":[],"default":"1","values":[{"type":"number"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the slider","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label to display next to the input","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Disables the slider when `true`. This visualizes the slider slightly differently.\nBut shows no visual sign indicating that the slider field\nis disabled or can ever become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"step","type":"number","mutable":false,"attr":"step","reflectToAttr":true,"docs":"The stepping interval to use when adjusting the value","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"unit","type":"string","mutable":false,"attr":"unit","reflectToAttr":true,"docs":"Unit to display next to the value","docsTags":[],"default":"''","values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"number","mutable":false,"attr":"value","reflectToAttr":true,"docs":"The value of the input","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"valuemax","type":"number","mutable":false,"attr":"valuemax","reflectToAttr":true,"docs":"The maximum value allowed","docsTags":[],"default":"100","values":[{"type":"number"}],"optional":false,"required":false},{"name":"valuemin","type":"number","mutable":false,"attr":"valuemin","reflectToAttr":true,"docs":"The minimum value allowed","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"number","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the value has been changed","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"slider.tsx","type":"tsx","source":"import { MDCSlider } from '@material/slider';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { getPercentageClass } from './getPercentageClass';\n/**\n * @exampleComponent limel-example-slider\n * @exampleComponent limel-example-slider-multiplier\n * @exampleComponent limel-example-slider-multiplier-percentage-colors\n * @exampleComponent limel-example-slider-composite\n */\n@Component({\n    tag: 'limel-slider',\n    shadow: true,\n    styleUrl: 'slider.scss',\n})\nexport class Slider {\n    /**\n     * Disables the slider when `true`,\n     * and visually shows that the field is editable but disabled.\n     * This tells the users that if certain requirements are met,\n     * the slider may become interactable.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Disables the slider when `true`. This visualizes the slider slightly differently.\n     * But shows no visual sign indicating that the slider field\n     * is disabled or can ever become interactable.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Default value: 1.\n     * The factor that the properties `value`, `valuemax`, `valuemin`, and\n     * `step` are multiplied by. On `change` divides the value by the factor,\n     * so the original format stays the same.\n     */\n    @Prop({ reflect: true })\n    public factor: number = 1;\n\n    /**\n     * Label to display next to the input\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the slider\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Unit to display next to the value\n     */\n    @Prop({ reflect: true })\n    public unit: string = '';\n\n    /**\n     * The value of the input\n     */\n    @Prop({ reflect: true })\n    public value: number;\n\n    /**\n     * The maximum value allowed\n     */\n    @Prop({ reflect: true })\n    public valuemax: number = 100; // eslint-disable-line no-magic-numbers\n\n    /**\n     * The minimum value allowed\n     */\n    @Prop({ reflect: true })\n    public valuemin: number = 0;\n\n    /**\n     * The stepping interval to use when adjusting the value\n     */\n    @Prop({ reflect: true })\n    public step: number;\n\n    /**\n     * Emitted when the value has been changed\n     */\n    @Event()\n    private change: EventEmitter<number>;\n\n    @Element()\n    private rootElement: HTMLLimelSliderElement;\n\n    private mdcSlider: MDCSlider;\n\n    @State()\n    private percentageClass: string;\n\n    public constructor() {\n        this.inputHandler = this.inputHandler.bind(this);\n        this.getContainerClassList = this.getContainerClassList.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const inputElement = this.getInputElement();\n        if (!inputElement) {\n            return;\n        }\n\n        const value = this.getValue();\n\n        /*\n        For some reason the input element's `value` attribute is removed\n        (probably by Stencil) when the element is first rendered. But if the\n        attribute is missing when MDCSlider is initialized (MDC v11.0.0),\n        MDCSlider crashes.\n        So we add the attribute right before initializing MDCSlider. /Ads\n        */\n        inputElement.setAttribute('value', `${this.multiplyByFactor(value)}`);\n\n        /*\n        When creating the `mdcSlider` component, its important that the value set in\n        the input field obeys the range and the step size.\n\n        The MDCSlider will throw an exception unless the value in the input element\n        is dividible by the step value and is in the provided range.\n        If an exception occurs, this component will crash and it will be impossible to change\n        its value.\n        The logic below ensures that the component will render even though the\n        provided value is wrong.\n        This could be considered wrong, but it at least fixes so that it's possible\n        to change the value from the UI.\n        */\n        const greaterThanOrEqualMin = value >= this.valuemin;\n        const lessThanOrEqualMax = value <= this.valuemax;\n\n        if (!greaterThanOrEqualMin) {\n            const newMin = this.multiplyByFactor(value);\n            inputElement.setAttribute('min', `${newMin}`);\n        }\n\n        if (!lessThanOrEqualMax) {\n            const newMax = this.multiplyByFactor(value);\n            inputElement.setAttribute('max', `${newMax}`);\n        }\n\n        if (!this.isMultipleOfStep(value, this.step)) {\n            inputElement.removeAttribute('step');\n        }\n\n        this.createMDCSlider();\n    }\n\n    public componentWillLoad() {\n        this.setPercentageClass(this.value);\n    }\n\n    public disconnectedCallback() {\n        this.destroyMDCSlider();\n    }\n\n    private getContainerClassList() {\n        return {\n            slider: true,\n            'lime-slider--readonly': this.readonly,\n            [this.percentageClass]: true,\n        };\n    }\n\n    public render() {\n        const inputProps: any = {};\n        if (this.step) {\n            inputProps.step = this.multiplyByFactor(this.step);\n        }\n\n        if (this.disabled || this.readonly) {\n            inputProps.disabled = true;\n        }\n\n        return (\n            <div class={this.getContainerClassList()}>\n                <label class=\"slider__label mdc-floating-label mdc-floating-label--float-above\">\n                    {this.label}\n                </label>\n                <div class=\"slider__content\">\n                    <div class=\"slider__content-range-container\">\n                        <span class=\"slider__content-min-label\">\n                            {this.multiplyByFactor(this.valuemin)}\n                            {this.unit}\n                        </span>\n                        <span class=\"slider__content-max-label\">\n                            {this.multiplyByFactor(this.valuemax)}\n                            {this.unit}\n                        </span>\n                    </div>\n                    <div\n                        class={{\n                            'mdc-slider': true,\n                            'mdc-slider--discrete': true,\n                            'mdc-slider--disabled':\n                                this.disabled || this.readonly,\n                        }}\n                    >\n                        <input\n                            class=\"mdc-slider__input\"\n                            type=\"range\"\n                            min={this.multiplyByFactor(this.valuemin)}\n                            max={this.multiplyByFactor(this.valuemax)}\n                            value={this.multiplyByFactor(this.value)}\n                            name=\"volume\"\n                            aria-label=\"Discrete slider demo\"\n                            {...inputProps}\n                        />\n                        <div class=\"mdc-slider__track\">\n                            <div class=\"mdc-slider__track--inactive\"></div>\n                            <div class=\"mdc-slider__track--active\">\n                                <div class=\"mdc-slider__track--active_fill\"></div>\n                            </div>\n                        </div>\n                        <div class=\"mdc-slider__thumb\">\n                            <div\n                                class=\"mdc-slider__value-indicator-container\"\n                                aria-hidden=\"true\"\n                            >\n                                <div class=\"mdc-slider__value-indicator\">\n                                    <span class=\"mdc-slider__value-indicator-text\">\n                                        {this.multiplyByFactor(this.value)}\n                                    </span>\n                                </div>\n                            </div>\n                            <div class=\"mdc-slider__thumb-knob\"></div>\n                        </div>\n                    </div>\n                </div>\n                {this.renderHelperLine()}\n            </div>\n        );\n    }\n\n    private renderHelperLine() {\n        if (!this.helperText) {\n            return;\n        }\n\n        return (\n            <div class=\"mdc-slider-helper-line\">\n                <p class=\"mdc-slider-helper-text\">{this.helperText}</p>\n            </div>\n        );\n    }\n\n    @Watch('disabled')\n    protected watchDisabled() {\n        this.updateDisabledState();\n    }\n\n    @Watch('readonly')\n    protected watchReadonly() {\n        this.updateDisabledState();\n    }\n\n    @Watch('value')\n    protected watchValue() {\n        if (!this.mdcSlider) {\n            return;\n        }\n\n        const value = this.multiplyByFactor(this.getValue());\n        this.mdcSlider.setValue(value);\n\n        if (this.isStepConfigured()) {\n            return;\n        }\n\n        const step = this.multiplyByFactor(this.step);\n        if (!this.isMultipleOfStep(value, step)) {\n            return;\n        }\n\n        this.reCreateSliderWithStep();\n    }\n\n    private updateDisabledState() {\n        if (!this.mdcSlider) {\n            return;\n        }\n\n        this.mdcSlider.setDisabled(this.disabled || this.readonly);\n    }\n\n    private changeHandler = (event) => {\n        let value = event.detail.value;\n        const step = this.multiplyByFactor(this.step);\n\n        if (!this.isMultipleOfStep(value, step)) {\n            value = this.roundToStep(value, step);\n        }\n\n        this.change.emit(value / this.factor);\n    };\n\n    private multiplyByFactor(value) {\n        return Math.round(value * this.factor);\n    }\n\n    private getValue() {\n        let value = this.value;\n        if (!isFinite(value)) {\n            value = this.valuemin;\n        }\n\n        return value;\n    }\n\n    private inputHandler(event) {\n        this.setPercentageClass(event.detail.value / this.factor);\n    }\n\n    private setPercentageClass(value) {\n        this.percentageClass = getPercentageClass(\n            (value - this.valuemin) / (this.valuemax - this.valuemin)\n        );\n    }\n\n    private isMultipleOfStep(value: number, step: number): boolean {\n        if (!step) {\n            return true;\n        }\n\n        return value % step === 0;\n    }\n\n    private roundToStep(value: number, step: number): number {\n        return Math.round(value / step) * step;\n    }\n\n    private getRootElement(): HTMLElement | undefined {\n        return this.rootElement.shadowRoot.querySelector('.mdc-slider');\n    }\n\n    private getInputElement(): HTMLInputElement | undefined {\n        const element = this.getRootElement();\n        if (!element) {\n            return;\n        }\n\n        return element.querySelector('input');\n    }\n\n    private isStepConfigured(): boolean {\n        if (!this.step) {\n            return true;\n        }\n\n        const input = this.getInputElement();\n        if (!input) {\n            return true;\n        }\n\n        return input.hasAttribute('step');\n    }\n\n    private reCreateSliderWithStep() {\n        const inputElement = this.getInputElement();\n        const step = `${this.multiplyByFactor(this.step)}`;\n\n        inputElement.setAttribute('step', step);\n\n        this.destroyMDCSlider();\n        this.createMDCSlider();\n    }\n\n    private createMDCSlider() {\n        const element = this.getRootElement();\n\n        this.mdcSlider = new MDCSlider(element);\n        this.mdcSlider.listen('MDCSlider:change', this.changeHandler);\n        this.mdcSlider.listen('MDCSlider:input', this.inputHandler);\n    }\n\n    private destroyMDCSlider() {\n        this.mdcSlider.unlisten('MDCSlider:change', this.changeHandler);\n        this.mdcSlider.unlisten('MDCSlider:input', this.inputHandler);\n        this.mdcSlider.destroy();\n        this.mdcSlider = undefined;\n    }\n}\n"},{"filename":"slider.scss","type":"scss","source":"@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/slider/styles';\n@use '@material/floating-label/mdc-floating-label';\n\n:host([disabled]:not([readonly])) {\n    .slider__label {\n        color: shared_input-select-picker.$label-color-disabled;\n    }\n}\n\n.slider {\n    position: relative;\n}\n\n.slider__label {\n    color: shared_input-select-picker.$label-color;\n    padding-left: functions.pxToRem(20);\n    top: functions.pxToRem(\n        9\n    ); // To place its label on the same height as other `floating-label`s in a form\n}\n\n.slider__content {\n    display: flex;\n    flex-direction: column;\n    margin-top: functions.pxToRem(4);\n}\n\n.slider__content-range-container {\n    display: flex;\n    order: 2;\n    justify-content: space-between;\n    width: calc(100% - #{functions.pxToRem(24)});\n    margin: 0 auto;\n    margin-top: functions.pxToRem(-16);\n}\n\n.slider__content-min-label,\n.slider__content-max-label {\n    transition: opacity 0.2s ease;\n    opacity: 0.7;\n    font-size: functions.pxToRem(12);\n    top: functions.pxToRem(20);\n    color: shared_input-select-picker.$helper-text-color;\n\n    .slider:hover & {\n        opacity: 1;\n    }\n}\n\n.mdc-slider__track {\n    &:before,\n    &:after {\n        // start & end indicators\n        content: '';\n        display: inline-block;\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        margin: auto;\n\n        width: functions.pxToRem(6);\n        height: functions.pxToRem(6);\n        border-radius: 50%;\n        background-color: rgba(var(--contrast-700), 0.6);\n    }\n\n    &:before {\n        left: functions.pxToRem(-12);\n    }\n\n    &:after {\n        right: functions.pxToRem(-12);\n    }\n}\n\n@import './partial-styles/percentage-color';\n@import './partial-styles/_readonly';\n@import './partial-styles/_thumb';\n@import './partial-styles/_helper-text';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar","filePath":"./src/components/snackbar/snackbar.tsx","fileName":"snackbar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/usage","tag":"limel-snackbar","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-snackbar"}],"encapsulation":"shadow","dependents":["limel-example-snackbar"],"dependencies":["limel-button","limel-icon-button"],"dependencyGraph":{"limel-snackbar":["limel-button","limel-icon-button"],"limel-button":["limel-spinner","limel-icon"],"limel-icon-button":["limel-icon"],"limel-example-snackbar":["limel-snackbar"]},"props":[{"name":"actionText","type":"string","mutable":false,"attr":"action-text","reflectToAttr":false,"docs":"The text to display for the action button.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"dismissible","type":"boolean","mutable":false,"attr":"dismissible","reflectToAttr":false,"docs":"True if the snackbar is dismissible, false otherwise","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"Defines the language for translations.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"message","type":"string","mutable":false,"attr":"message","reflectToAttr":false,"docs":"The text message to display.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"multiline","type":"boolean","mutable":false,"attr":"multiline","reflectToAttr":false,"docs":"Whether to show the snackbar with space for multiple lines of text","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"timeout","type":"number","mutable":false,"attr":"timeout","reflectToAttr":false,"docs":"The amount of time in milliseconds to show the snackbar.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false}],"methods":[{"name":"show","returns":{"type":"Promise<void>","docs":""},"signature":"show() => Promise<void>","parameters":[],"docs":"Show the snackbar","docsTags":[]}],"events":[{"event":"action","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the action button is pressed","docsTags":[]},{"event":"hide","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the snackbar hides itself","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"snackbar.tsx","type":"tsx","source":"import { Languages } from '@limetech/lime-elements';\nimport { MDCSnackbar, MDCSnackbarCloseEvent } from '@material/snackbar';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Method,\n    Prop,\n} from '@stencil/core';\nimport translate from '../../global/translations';\n\n/**\n * @exampleComponent limel-example-snackbar\n */\n@Component({\n    tag: 'limel-snackbar',\n    shadow: true,\n    styleUrl: 'snackbar.scss',\n})\nexport class Snackbar {\n    /**\n     * The text message to display.\n     */\n    @Prop()\n    public message: string;\n\n    /**\n     * The amount of time in milliseconds to show the snackbar.\n     */\n    @Prop()\n    public timeout: number;\n\n    /**\n     * The text to display for the action button.\n     */\n    @Prop()\n    public actionText: string;\n\n    /**\n     * True if the snackbar is dismissible, false otherwise\n     */\n    @Prop()\n    public dismissible: boolean;\n\n    /**\n     * Whether to show the snackbar with space for multiple lines of text\n     */\n    @Prop()\n    public multiline: boolean;\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    @Element()\n    private host: HTMLLimelSnackbarElement;\n\n    /**\n     * Emitted when the action button is pressed\n     */\n    @Event()\n    private action: EventEmitter<void>;\n\n    /**\n     * Emitted when the snackbar hides itself\n     */\n    @Event()\n    private hide: EventEmitter<void>;\n\n    private mdcSnackbar: MDCSnackbar;\n\n    constructor() {\n        this.handleMdcClosing = this.handleMdcClosing.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const element = this.host.shadowRoot.querySelector('.mdc-snackbar');\n        if (!element) {\n            return;\n        }\n\n        this.mdcSnackbar = new MDCSnackbar(element);\n\n        this.mdcSnackbar.listen('MDCSnackbar:closing', this.handleMdcClosing);\n    }\n\n    public disconnectedCallback() {\n        this.mdcSnackbar.unlisten('MDCSnackbar:closing', this.handleMdcClosing);\n        this.mdcSnackbar.destroy();\n    }\n\n    /**\n     * Show the snackbar\n     */\n    @Method()\n    public async show() {\n        if (this.timeout) {\n            this.mdcSnackbar.timeoutMs = this.timeout;\n        }\n\n        this.mdcSnackbar.labelText = this.message;\n\n        this.mdcSnackbar.open();\n    }\n\n    public render() {\n        return (\n            <aside\n                class={`\n                    mdc-snackbar\n                    ${this.multiline ? 'mdc-snackbar--stacked' : ''}\n                `}\n            >\n                <div\n                    class=\"mdc-snackbar__surface\"\n                    role=\"status\"\n                    aria-relevant=\"additions\"\n                >\n                    <div class=\"mdc-snackbar__label\" aria-atomic=\"false\"></div>\n                    {this.renderActions(this.actionText, this.dismissible)}\n                </div>\n            </aside>\n        );\n    }\n\n    private handleMdcClosing(event: MDCSnackbarCloseEvent) {\n        if (event.detail.reason === 'action') {\n            this.action.emit();\n        } else {\n            this.hide.emit();\n        }\n    }\n\n    private renderActions(actionText: string, dismissible: boolean) {\n        if (!actionText && !dismissible) {\n            return;\n        }\n\n        return (\n            <div class=\"mdc-snackbar__actions\" aria-atomic=\"true\">\n                {this.renderActionButton(actionText)}\n                {this.renderDismissButton(dismissible)}\n            </div>\n        );\n    }\n\n    private renderActionButton(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <limel-button\n                class=\"mdc-button mdc-snackbar__action\"\n                label={actionText}\n            />\n        );\n    }\n\n    private renderDismissButton(dismissible: boolean) {\n        if (!dismissible) {\n            return;\n        }\n\n        const label = translate.get('snackbar.dismiss', this.language);\n\n        return (\n            <limel-icon-button\n                class=\"mdc-icon-button mdc-snackbar__dismiss\"\n                icon=\"multiply\"\n                label={label}\n            />\n        );\n    }\n}\n"},{"filename":"snackbar.scss","type":"scss","source":"@use '../../style/internal/lime-theme';\n\n@use '@material/snackbar/mdc-snackbar';\n\n.mdc-snackbar__surface {\n    background-color: var(--lime-elevated-surface-background-color);\n    box-shadow: var(--shadow-depth-16);\n}\n\n.mdc-snackbar__label {\n    color: var(--mdc-theme-on-surface);\n}\n\n.mdc-snackbar__actions {\n    gap: 0.5rem;\n    padding-left: 0.5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner","filePath":"./src/components/spinner/spinner.tsx","fileName":"spinner.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/usage","tag":"limel-spinner","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-spinner"},{"name":"exampleComponent","text":"limel-example-spinner-color"},{"name":"exampleComponent","text":"limel-example-spinner-size"}],"encapsulation":"shadow","dependents":["limel-button","limel-example-spinner","limel-example-spinner-color","limel-example-spinner-size","limel-example-tab-panel-content","limel-picker","limel-table"],"dependencies":[],"dependencyGraph":{"limel-button":["limel-spinner"],"limel-example-spinner":["limel-spinner"],"limel-example-spinner-color":["limel-spinner"],"limel-example-spinner-size":["limel-spinner"],"limel-example-tab-panel-content":["limel-spinner"],"limel-picker":["limel-spinner"],"limel-table":["limel-spinner"]},"props":[{"name":"limeBranded","type":"boolean","mutable":false,"attr":"lime-branded","reflectToAttr":false,"docs":"Gives the spinner the shape of Lime Technologies' logo","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"size","type":"\"large\" | \"medium\" | \"mini\" | \"small\" | \"x-small\"","mutable":false,"attr":"size","reflectToAttr":true,"docs":"Determines the size of the spinner.","docsTags":[],"default":"'mini'","values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"mini","type":"string"},{"value":"small","type":"string"},{"value":"x-small","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--spinner-color-1","annotation":"prop","docs":"1st animated stroke color, defaults to `--lime-brand-color-deep-red`."},{"name":"--spinner-color-10","annotation":"prop","docs":"10th animated stroke color, defaults to `--lime-brand-color-light-grey`."},{"name":"--spinner-color-2","annotation":"prop","docs":"2nd animated stroke color, defaults to `--lime-brand-color-sellable-orange`."},{"name":"--spinner-color-3","annotation":"prop","docs":"3rd animated stroke color, defaults to `--lime-brand-color-simple-blue`."},{"name":"--spinner-color-4","annotation":"prop","docs":"4th animated stroke color, defaults to `--lime-brand-color-orange`."},{"name":"--spinner-color-5","annotation":"prop","docs":"5th animated stroke color, defaults to `--lime-brand-color-lime-green`."},{"name":"--spinner-color-6","annotation":"prop","docs":"6th animated stroke color, defaults to `--lime-brand-color-yellow`."},{"name":"--spinner-color-7","annotation":"prop","docs":"7th animated stroke color, defaults to `--lime-brand-color-flexible-turquoise`."},{"name":"--spinner-color-8","annotation":"prop","docs":"8th animated stroke color, defaults to `--lime-brand-color-loving-magenta`."},{"name":"--spinner-color-9","annotation":"prop","docs":"9th animated stroke color, defaults to `--lime-brand-color-dark-blue`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"spinner.tsx","type":"tsx","source":"import { SpinnerSize } from '@limetech/lime-elements';\nimport { Component, Prop, h } from '@stencil/core';\n\n/**\n * @exampleComponent limel-example-spinner\n * @exampleComponent limel-example-spinner-color\n * @exampleComponent limel-example-spinner-size\n */\n@Component({\n    tag: 'limel-spinner',\n    shadow: true,\n    styleUrl: 'spinner.scss',\n})\nexport class Spinner {\n    /**\n     * Determines the size of the spinner.\n     */\n    @Prop({ reflect: true })\n    public size: SpinnerSize = 'mini';\n\n    /**\n     * Gives the spinner the shape of Lime Technologies' logo\n     */\n    @Prop()\n    public limeBranded: boolean = true;\n\n    public render() {\n        return [\n            <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                {this.renderSpinner()}\n            </svg>,\n        ];\n    }\n\n    private renderSpinner() {\n        if (!this.limeBranded) {\n            return (\n                <g>\n                    <circle class=\"outline\" cx=\"12\" cy=\"12\" r=\"10\" />\n                    <g class=\"spinner\">\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                    </g>\n                </g>\n            );\n        }\n\n        return (\n            <g>\n                <g clip-path=\"url(#mask)\">\n                    <circle class=\"outline thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                    <g class=\"spinner\">\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                    </g>\n                </g>\n                <clipPath id=\"mask\">\n                    <path d=\"M2.166 11.248C2.166 5.04 7.058 0 13.083 0 19.108 0 24 5.04 24 11.248c0 3.229-1.307 6.548-4.533 9.306-3.908 3.343-9.15 3.8-17.254 3.249-2.405-.164-2.753-.588-1.51-1.533C4.61 19.3 2.165 17.025 2.165 11.248zm3.124 9.834c5.563.227 9.416-.246 12.397-2.76 2.432-2.05 3.482-4.56 3.51-7.074.05-4.613-3.636-8.36-8.114-8.36-4.478 0-8.114 3.746-8.114 8.36 0 2.793.607 4.737.726 6.345.092 1.252.03 2.388-.405 3.49z\" />\n                </clipPath>\n            </g>\n        );\n    }\n}\n"},{"filename":"spinner.scss","type":"scss","source":"@use 'sass:math';\n@use '../../style/functions';\n@use '../../style/internal/lime-theme';\n\n/**\n * @prop --spinner-color-1: 1st animated stroke color, defaults to `--lime-brand-color-deep-red`.\n * @prop --spinner-color-2: 2nd animated stroke color, defaults to `--lime-brand-color-sellable-orange`.\n * @prop --spinner-color-3: 3rd animated stroke color, defaults to `--lime-brand-color-simple-blue`.\n * @prop --spinner-color-4: 4th animated stroke color, defaults to `--lime-brand-color-orange`.\n * @prop --spinner-color-5: 5th animated stroke color, defaults to `--lime-brand-color-lime-green`.\n * @prop --spinner-color-6: 6th animated stroke color, defaults to `--lime-brand-color-yellow`.\n * @prop --spinner-color-7: 7th animated stroke color, defaults to `--lime-brand-color-flexible-turquoise`.\n * @prop --spinner-color-8: 8th animated stroke color, defaults to `--lime-brand-color-loving-magenta`.\n * @prop --spinner-color-9: 9th animated stroke color, defaults to `--lime-brand-color-dark-blue`.\n * @prop --spinner-color-10: 10th animated stroke color, defaults to `--lime-brand-color-light-grey`.\n */\n\n$stroke-width-normal: 4;\n$stroke-width-thick: 10;\n$colors: var(--spinner-color-1, rgb(var(--lime-brand-color-deep-red))),\n    var(--spinner-color-2, rgb(var(--lime-brand-color-sellable-orange))),\n    var(--spinner-color-3, rgb(var(--lime-brand-color-simple-blue))),\n    var(--spinner-color-4, rgb(var(--lime-brand-color-orange))),\n    var(--spinner-color-5, rgb(var(--lime-brand-color-lime-green))),\n    var(--spinner-color-6, rgb(var(--lime-brand-color-yellow))),\n    var(--spinner-color-7, rgb(var(--lime-brand-color-flexible-turquoise))),\n    var(--spinner-color-8, rgb(var(--lime-brand-color-loving-magenta))),\n    var(--spinner-color-9, rgb(var(--lime-brand-color-dark-blue))),\n    var(--spinner-color-9, rgb(var(--lime-brand-color-light-grey)));\n$dash: 63;\n$duration: length($colors) * 1s;\n$duration-alt: math.div($duration, length($colors));\n$keyframe: math.div(1, length($colors) * 2) * 100;\n\n:host(limel-spinner) {\n    display: block;\n}\n\n@keyframes spin {\n    50% {\n        transform: rotate(180deg);\n    }\n    100% {\n        transform: rotate(720deg);\n    }\n}\n\n@keyframes fade-in-the-spinner {\n    0% {\n        transform: scale(0.7);\n        opacity: 0;\n    }\n    100% {\n        transform: scale(1);\n        opacity: 1;\n    }\n}\n\n@keyframes animate-colored-circles {\n    #{$keyframe * 1%} {\n        stroke-dashoffset: 0;\n    }\n    #{$keyframe * 2%},\n    100% {\n        stroke-dashoffset: $dash;\n    }\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host {\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    // size=mini is the default\n    height: functions.pxToRem(24);\n    width: functions.pxToRem(24);\n    transform: translate3d(0, 0, 0);\n    animation: fade-in-the-spinner 0.5s ease forwards;\n}\n\n:host([size='x-small']) {\n    height: functions.pxToRem(32);\n    width: functions.pxToRem(32);\n}\n\n:host([size='small']) {\n    height: functions.pxToRem(34);\n    width: functions.pxToRem(34);\n}\n\n:host([size='medium']) {\n    height: functions.pxToRem(44);\n    width: functions.pxToRem(44);\n}\n\n:host([size='large']) {\n    height: functions.pxToRem(64);\n    width: functions.pxToRem(64);\n}\n\n.spinner {\n    animation: spin $duration-alt linear infinite;\n    transform-origin: center;\n}\n\n.color {\n    animation: animate-colored-circles $duration linear infinite;\n    fill: none;\n    stroke-dasharray: $dash;\n    stroke-dashoffset: $dash;\n    stroke-linecap: round;\n    stroke-width: $stroke-width-normal;\n\n    &.thick {\n        stroke-width: $stroke-width-thick;\n    }\n\n    @for $i from 1 through length($colors) {\n        &:nth-child(#{$i}) {\n            stroke: nth($colors, $i);\n\n            @if $i > 1 {\n                animation-delay: ($i - 1) * $duration-alt;\n            }\n        }\n    }\n}\n\n.outline {\n    stroke: rgba(var(--lime-brand-color-light-grey), 0.3);\n    fill: none;\n    stroke-linecap: round;\n    stroke-width: $stroke-width-normal;\n\n    &.thick {\n        stroke-width: $stroke-width-thick;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button","filePath":"./src/components/split-button/split-button.tsx","fileName":"split-button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/usage","tag":"limel-split-button","overview":"A split button is a button with two components:\na button and a side-menu attached to it.\n\nClicking on the button runs a default action,\nand clicking on the arrow opens up a list of other possible actions.\n\n:::warning\n- Never use a split button for navigation purposes, such as going to next page.\nThe button should only be used for performing commands!\n- Never use this component instead of a Select or Menu component!\n:::","usage":{},"docs":"A split button is a button with two components:\na button and a side-menu attached to it.\n\nClicking on the button runs a default action,\nand clicking on the arrow opens up a list of other possible actions.\n\n:::warning\n- Never use a split button for navigation purposes, such as going to next page.\nThe button should only be used for performing commands!\n- Never use this component instead of a Select or Menu component!\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-split-button-basic"},{"name":"exampleComponent","text":"limel-example-split-button-repeat-default-command"}],"encapsulation":"shadow","dependents":["limel-example-split-button-basic","limel-example-split-button-repeat-default-command"],"dependencies":["limel-menu","limel-button"],"dependencyGraph":{"limel-split-button":["limel-menu","limel-button"],"limel-menu":["limel-badge","limel-portal","limel-menu-surface","limel-menu-list"],"limel-button":["limel-spinner","limel-icon"],"limel-example-split-button-basic":["limel-split-button"],"limel-example-split-button-repeat-default-command":["limel-split-button"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the button.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"Set icon for the button","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"items","type":"(MenuItem<any> | ListSeparator)[]","mutable":false,"reflectToAttr":false,"docs":"A list of items and separators to show in the menu.","docsTags":[],"default":"[]","values":[{"type":"(MenuItem<any>"},{"type":"ListSeparator)[]"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The text to show on the default action part of the button.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"primary","type":"boolean","mutable":false,"attr":"primary","reflectToAttr":true,"docs":"Set to `true` to make the button primary.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"select","detail":"MenuItem<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Is emitted when a menu item is selected.","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"split-button.tsx","type":"tsx","source":"import { Component, Event, EventEmitter, Host, h, Prop } from '@stencil/core';\nimport { ListSeparator, MenuItem } from '@limetech/lime-elements';\n\n/**\n * A split button is a button with two components:\n * a button and a side-menu attached to it.\n *\n * Clicking on the button runs a default action,\n * and clicking on the arrow opens up a list of other possible actions.\n *\n * :::warning\n * - Never use a split button for navigation purposes, such as going to next page.\n * The button should only be used for performing commands!\n * - Never use this component instead of a Select or Menu component!\n * :::\n *\n * @exampleComponent limel-example-split-button-basic\n * @exampleComponent limel-example-split-button-repeat-default-command\n */\n@Component({\n    tag: 'limel-split-button',\n    styleUrl: 'split-button.scss',\n    shadow: true,\n})\nexport class SplitButton {\n    /**\n     * The text to show on the default action part of the button.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Set to `true` to make the button primary.\n     */\n    @Prop({ reflect: true })\n    public primary = false;\n\n    /**\n     * Set icon for the button\n     */\n    @Prop({ reflect: true })\n    public icon: string;\n\n    /**\n     * Set to `true` to disable the button.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * A list of items and separators to show in the menu.\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator> = [];\n\n    /**\n     * Is emitted when a menu item is selected.\n     */\n    @Event()\n    public select: EventEmitter<MenuItem>;\n\n    render() {\n        return (\n            <Host\n                class={{\n                    'has-menu': !!this.items.length,\n                }}\n            >\n                <limel-button\n                    label={this.label}\n                    primary={this.primary}\n                    icon={this.icon}\n                    disabled={this.disabled}\n                />\n                {this.renderMenu()}\n            </Host>\n        );\n    }\n\n    private renderMenu = () => {\n        if (!this.items.length) {\n            return;\n        }\n\n        return (\n            <limel-menu\n                class={{\n                    primary: this.primary,\n                }}\n                disabled={this.disabled}\n                items={this.items}\n                openDirection=\"bottom\"\n            >\n                <button\n                    class=\"menu-trigger\"\n                    slot=\"trigger\"\n                    disabled={this.disabled}\n                >\n                    ⋮\n                </button>\n            </limel-menu>\n        );\n    };\n}\n"},{"filename":"split-button.scss","type":"scss","source":"@import '../../style/mixins';\n\n:host(limel-split-button.has-menu) {\n    --button-padding-right: 2rem;\n}\n\n:host(limel-split-button) {\n    display: inline-flex;\n    isolation: isolate;\n\n    * {\n        box-sizing: border-box;\n    }\n}\n\n:host([disabled]) {\n    pointer-events: none;\n}\n\nlimel-button {\n    width: 100%;\n}\n\n$distance-around-trigger: 0.125rem;\n\nlimel-menu {\n    display: flex;\n    justify-content: flex-end;\n    position: relative;\n    z-index: 1;\n\n    padding: $distance-around-trigger;\n    margin-left: calc(var(--button-padding-right) * -1);\n    width: var(--button-padding-right);\n\n    &:before {\n        transition: background-color 0.5s ease;\n        content: '';\n        position: absolute;\n        inset: 0.375rem auto 0.375rem 0.6875rem;\n        width: 1px;\n        background-color: currentColor;\n\n        opacity: 0.2;\n    }\n\n    &:not([disabled]) {\n        color: var(\n            --mdc-theme-primary,\n            rgb(var(--color-teal-default))\n        ); // similar to limel-button text\n\n        &.primary {\n            color: var(\n                --mdc-theme-on-primary,\n                rgb(var(--color-white))\n            ); // similar to limel-button text\n        }\n    }\n\n    &[disabled] {\n        color: rgba(var(--contrast-1600), 0.37); // similar to limel-button text\n    }\n\n    &:hover,\n    &:focus-within {\n        &:before {\n            background-color: transparent;\n        }\n    }\n}\n\n.menu-trigger {\n    all: unset;\n\n    text-align: center;\n    font-weight: bold;\n\n    border-radius: 0.125rem;\n    height: 100%;\n    width: 1rem;\n\n    &:not(:disabled) {\n        @include is-flat-clickable();\n        @include visualize-keyboard-focus();\n        cursor: pointer;\n\n        &:focus-visible,\n        &:hover {\n            background-color: rgb(var(--color-white), 0.1);\n        }\n    }\n\n    &:before {\n        // prevents unintentionally activating the default action,\n        // by clicking on the edge of menu trigger,\n        // which would be activating the default onClick action\n        // on `limel-button`.\n        content: '';\n        position: absolute;\n        inset: -$distance-around-trigger * 2;\n        z-index: -1;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/switch","filePath":"./src/components/switch/switch.tsx","fileName":"switch.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/switch/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/switch/usage","tag":"limel-switch","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-switch"}],"encapsulation":"shadow","dependents":["limel-example-dialog-nested-close-events","limel-example-form-span-fields","limel-example-icon-button-composite","limel-example-switch"],"dependencies":[],"dependencyGraph":{"limel-example-dialog-nested-close-events":["limel-switch"],"limel-example-form-span-fields":["limel-switch"],"limel-example-icon-button-composite":["limel-switch"],"limel-example-switch":["limel-switch"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Disables the switch when `true`,\nand visually shows that the switch is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe switch may become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label to display next to the switch","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Disables the switch when `true`. This visualizes the switch slightly differently.\nBut shows no visual sign indicating that the switch is disabled\nor can ever become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"boolean","mutable":false,"attr":"value","reflectToAttr":true,"docs":"The value of the switch","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"boolean","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the value has changed","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"switch.tsx","type":"tsx","source":"import { MDCSwitch } from '@material/switch';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\n\n/**\n * @exampleComponent limel-example-switch\n */\n@Component({\n    tag: 'limel-switch',\n    shadow: true,\n    styleUrl: 'switch.scss',\n})\nexport class Switch {\n    /**\n     * Label to display next to the switch\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Disables the switch when `true`,\n     * and visually shows that the switch is editable but disabled.\n     * This tells the users that if certain requirements are met,\n     * the switch may become interactable.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Disables the switch when `true`. This visualizes the switch slightly differently.\n     * But shows no visual sign indicating that the switch is disabled\n     * or can ever become interactable.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * The value of the switch\n     */\n    @Prop({ reflect: true })\n    public value = false;\n\n    /**\n     * Emitted when the value has changed\n     */\n    @Event()\n    private change: EventEmitter<boolean>;\n\n    @Element()\n    private host: HTMLLimelSwitchElement;\n\n    @State()\n    private fieldId = createRandomString();\n\n    private mdcSwitch: MDCSwitch;\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const element = this.host.shadowRoot.querySelector(\n            '.mdc-switch'\n        ) as HTMLButtonElement;\n        if (!element) {\n            return;\n        }\n\n        this.mdcSwitch = new MDCSwitch(element);\n    }\n\n    public disconnectedCallback() {\n        this.mdcSwitch?.destroy();\n    }\n\n    public render() {\n        return [\n            <button\n                id={this.fieldId}\n                class={{\n                    'mdc-switch': true,\n                    'lime-switch--readonly': this.readonly,\n                    'mdc-switch--unselected': !this.value,\n                    'mdc-switch--selected': this.value,\n                }}\n                type=\"button\"\n                role=\"switch\"\n                aria-checked={this.value}\n                disabled={this.disabled || this.readonly}\n                onClick={this.handleClick}\n            >\n                <div class=\"mdc-switch__track\" />\n                <div class=\"mdc-switch__handle-track\">\n                    <div class=\"mdc-switch__handle\">\n                        <div class=\"mdc-switch__shadow\">\n                            <div class=\"mdc-elevation-overlay\"></div>\n                        </div>\n                        <div class=\"mdc-switch__ripple\"></div>\n                        <div class=\"mdc-switch__icons\">\n                            <svg\n                                class=\"mdc-switch__icon mdc-switch__icon--on\"\n                                viewBox=\"0 0 24 24\"\n                            >\n                                <path d=\"M19.69,5.23L8.96,15.96l-4.23-4.23L2.96,13.5l6,6L21.46,7L19.69,5.23z\" />\n                            </svg>\n                            <svg\n                                class=\"mdc-switch__icon mdc-switch__icon--off\"\n                                viewBox=\"0 0 24 24\"\n                            >\n                                <path d=\"M20 13H4v-2h16v2z\" />\n                            </svg>\n                        </div>\n                    </div>\n                </div>\n            </button>,\n            <label\n                class={`${this.disabled || this.readonly ? 'disabled' : ''}`}\n                htmlFor={this.fieldId}\n            >\n                {this.label}\n            </label>,\n        ];\n    }\n\n    @Watch('value')\n    protected valueWatcher(newValue: boolean) {\n        if (!this.mdcSwitch) {\n            return;\n        }\n\n        this.mdcSwitch.selected = newValue;\n    }\n\n    private handleClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.change.emit(!this.value);\n    };\n}\n"},{"filename":"switch.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/internal/lime-theme';\n@use '../../style/internal/lime-typography';\n\n@use '@material/switch/styles';\n\n$scale-factor: 0.8;\n\n:host(limel-switch) {\n    display: inline-flex;\n    align-items: center;\n\n    --mdc-switch-selected-icon-color: transparent;\n    --mdc-switch-unselected-icon-color: transparent;\n\n    --mdc-switch-disabled-selected-icon-opacity: 1;\n    --mdc-switch-disabled-unselected-icon-opacity: 1;\n\n    --mdc-switch-selected-icon-size: 0.75rem;\n    --mdc-switch-unselected-icon-size: 0.75rem;\n\n    --mdc-switch-track-height: 1.25rem;\n    --mdc-switch-track-shape: var(--mdc-switch-track-height);\n\n    --mdc-switch-unselected-focus-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-focus-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-unselected-pressed-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-pressed-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-unselected-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-unselected-hover-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-hover-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n\n    --mdc-switch-unselected-track-color: rgb(var(--contrast-700));\n    --mdc-switch-unselected-focus-track-color: rgb(var(--contrast-800));\n    --mdc-switch-unselected-pressed-track-color: rgb(var(--contrast-800));\n    --mdc-switch-unselected-hover-track-color: rgb(var(--contrast-800));\n    --mdc-switch-selected-focus-track-color: var(--mdc-theme-primary);\n    --mdc-switch-selected-pressed-track-color: var(--mdc-theme-primary);\n    --mdc-switch-selected-track-color: var(--mdc-theme-primary);\n    --mdc-switch-selected-hover-track-color: var(--mdc-theme-primary);\n\n    --mdc-switch-handle-elevation: var(--button-shadow-normal);\n    --mdc-switch-disabled-track-opacity: 0.4;\n}\n\n.mdc-switch {\n    margin-right: functions.pxToRem(8);\n    &:hover {\n        --mdc-switch-handle-elevation: var(--button-shadow-hovered);\n    }\n}\n\nlabel {\n    @include lime-typography.typography(body2);\n    color: var(--mdc-theme-on-surface);\n\n    cursor: pointer;\n\n    &.disabled {\n        @include shared_input-select-picker.looks-disabled;\n    }\n}\n\n.mdc-switch {\n    &.mdc-switch--selected,\n    &.mdc-switch.mdc-switch--unselected {\n        .mdc-switch__handle {\n            &:after,\n            &:before {\n                transform: scale($scale-factor);\n            }\n        }\n    }\n    .mdc-switch__shadow {\n        transform: scale($scale-factor);\n    }\n}\n\n@import './partial-styles/_readonly.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar","filePath":"./src/components/tab-bar/tab-bar.tsx","fileName":"tab-bar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/usage","tag":"limel-tab-bar","overview":"Tabs are great to organize information hierarchically in the interface and divide it into distinct categories. Using tabs, you can create groups of content that are related and at the same level in the hierarchy.\n:::warning\nTab bars should be strictly used for navigation at the top levels.\nThey should never be used to perform actions, or navigate away from the view which contains them.\n:::\nAn exception for using tab bars in a high level of hierarchy is their usage in modals. This is because modals are perceived as a separate place and not a part of the current context. Therefore you can use tab bars in a modal to group and organize its content.\nA tab bar can contain an unlimited number of tabs. However, depending on the device width and width of the tabs, the number of tabs that are visible at the same time will vary. When there is limited horizontal space, the component shows a left-arrow and/or right-arrow button, which scrolls and reveals the additional tabs. The tab bar can also be swiped left and right on a touch-device.\n:::tip Other things to consider\nNever divide the content of a tab using a nested tab bar.\nNever place two tab bars within the same screen.\nNever use background color for icons in tabs.\nAvoid having long labels for tabs.\nA tab will never be removed or get disabled, even if there is no content under it.\n:::","usage":{},"docs":"Tabs are great to organize information hierarchically in the interface and divide it into distinct categories. Using tabs, you can create groups of content that are related and at the same level in the hierarchy.\n:::warning\nTab bars should be strictly used for navigation at the top levels.\nThey should never be used to perform actions, or navigate away from the view which contains them.\n:::\nAn exception for using tab bars in a high level of hierarchy is their usage in modals. This is because modals are perceived as a separate place and not a part of the current context. Therefore you can use tab bars in a modal to group and organize its content.\nA tab bar can contain an unlimited number of tabs. However, depending on the device width and width of the tabs, the number of tabs that are visible at the same time will vary. When there is limited horizontal space, the component shows a left-arrow and/or right-arrow button, which scrolls and reveals the additional tabs. The tab bar can also be swiped left and right on a touch-device.\n:::tip Other things to consider\nNever divide the content of a tab using a nested tab bar.\nNever place two tab bars within the same screen.\nNever use background color for icons in tabs.\nAvoid having long labels for tabs.\nA tab will never be removed or get disabled, even if there is no content under it.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-tab-bar"},{"name":"exampleComponent","text":"limel-example-tab-bar-with-dynamic-tab-width"},{"name":"exampleComponent","text":"limel-example-tab-bar-with-equal-tab-width"}],"encapsulation":"shadow","dependents":["limel-example-tab-bar","limel-example-tab-bar-with-dynamic-tab-width","limel-example-tab-bar-with-equal-tab-width","limel-tab-panel"],"dependencies":["limel-icon-button","limel-icon","limel-badge"],"dependencyGraph":{"limel-tab-bar":["limel-icon-button","limel-icon","limel-badge"],"limel-icon-button":["limel-icon"],"limel-example-tab-bar":["limel-tab-bar"],"limel-example-tab-bar-with-dynamic-tab-width":["limel-tab-bar"],"limel-example-tab-bar-with-equal-tab-width":["limel-tab-bar"],"limel-tab-panel":["limel-tab-bar"]},"props":[{"name":"tabs","type":"Tab[]","mutable":true,"reflectToAttr":false,"docs":"List of tabs to display","docsTags":[],"default":"[]","values":[{"type":"Tab[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"changeTab","detail":"Tab","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a tab has been changed","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[{"event":"resize","target":"window","capture":false,"passive":true}],"sources":[{"filename":"tab-bar.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Listen,\n    Prop,\n    Element,\n    EventEmitter,\n    Event,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { MDCTabBar, MDCTabBarActivatedEvent } from '@material/tab-bar';\nimport { strings } from '@material/tab-bar/constants';\nimport { Tab } from './tab.types';\nimport { isEqual, difference } from 'lodash-es';\nimport { setActiveTab } from './tabs';\n\nconst { TAB_ACTIVATED_EVENT } = strings;\nconst SCROLL_DISTANCE_ON_CLICK_PX = 150;\nconst HIDE_SCROLL_BUTTONS_WHEN_SCROLLED_LESS_THAN_PX = 40;\n\n/**\n * Tabs are great to organize information hierarchically in the interface and divide it into distinct categories. Using tabs, you can create groups of content that are related and at the same level in the hierarchy.\n * :::warning\n * Tab bars should be strictly used for navigation at the top levels.\n * They should never be used to perform actions, or navigate away from the view which contains them.\n * :::\n * An exception for using tab bars in a high level of hierarchy is their usage in modals. This is because modals are perceived as a separate place and not a part of the current context. Therefore you can use tab bars in a modal to group and organize its content.\n * A tab bar can contain an unlimited number of tabs. However, depending on the device width and width of the tabs, the number of tabs that are visible at the same time will vary. When there is limited horizontal space, the component shows a left-arrow and/or right-arrow button, which scrolls and reveals the additional tabs. The tab bar can also be swiped left and right on a touch-device.\n *:::tip Other things to consider\n * Never divide the content of a tab using a nested tab bar.\n * Never place two tab bars within the same screen.\n * Never use background color for icons in tabs.\n * Avoid having long labels for tabs.\n * A tab will never be removed or get disabled, even if there is no content under it.\n * :::\n *\n * @exampleComponent limel-example-tab-bar\n * @exampleComponent limel-example-tab-bar-with-dynamic-tab-width\n * @exampleComponent limel-example-tab-bar-with-equal-tab-width\n */\n@Component({\n    tag: 'limel-tab-bar',\n    styleUrl: 'tab-bar.scss',\n    shadow: true,\n})\nexport class TabBar {\n    /**\n     * List of tabs to display\n     */\n    @Prop({ mutable: true })\n    public tabs: Tab[] = [];\n\n    /**\n     * Emitted when a tab has been changed\n     */\n    @Event()\n    private changeTab: EventEmitter<Tab>;\n\n    @Element()\n    private host: HTMLLimelTabBarElement;\n\n    @State()\n    private canScrollLeft = false;\n\n    @State()\n    private canScrollRight = false;\n\n    private mdcTabBar: MDCTabBar;\n    private setupMdc = false;\n    private scrollArea: HTMLElement;\n    private scrollContent: HTMLElement;\n\n    constructor() {\n        this.handleTabActivated = this.handleTabActivated.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n        this.handleLeftScrollClick = this.handleLeftScrollClick.bind(this);\n        this.handleRightScrollClick = this.handleRightScrollClick.bind(this);\n        this.renderTab = this.renderTab.bind(this);\n    }\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public componentDidUpdate() {\n        if (!this.setupMdc) {\n            return;\n        }\n\n        this.setup();\n        this.setupMdc = false;\n    }\n\n    public disconnectedCallback() {\n        this.tearDown();\n    }\n\n    public render() {\n        return (\n            <div class=\"mdc-tab-bar\" role=\"tablist\">\n                <div\n                    class={{\n                        'mdc-tab-scroller': true,\n                        'can-scroll-left': this.canScrollLeft,\n                        'can-scroll-right': this.canScrollRight,\n                    }}\n                >\n                    <div class=\"mdc-tab-scroller__scroll-area lime-hide-scrollbars\">\n                        <div class=\"mdc-tab-scroller__scroll-content\">\n                            {this.tabs.map(this.renderTab)}\n                        </div>\n                    </div>\n                    <div class=\"scroll-fade left\" />\n                    <div class=\"scroll-button left\">\n                        <limel-icon-button\n                            icon=\"angle_left\"\n                            elevated={true}\n                            tabindex=\"-1\"\n                            aria-hidden=\"true\"\n                            disabled={!this.canScrollLeft}\n                            onClick={this.handleLeftScrollClick}\n                        />\n                    </div>\n                    <div class=\"scroll-fade right\" />\n                    <div class=\"scroll-button right\">\n                        <limel-icon-button\n                            icon=\"angle_right\"\n                            elevated={true}\n                            tabindex=\"-1\"\n                            aria-hidden=\"true\"\n                            disabled={!this.canScrollRight}\n                            onClick={this.handleRightScrollClick}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    @Watch('tabs')\n    protected tabsChanged(newTabs: Tab[] = [], oldTabs: Tab[] = []) {\n        const newIds = newTabs.map((tab) => tab.id);\n        const oldIds = oldTabs.map((tab) => tab.id);\n\n        if (isEqual(newIds, oldIds)) {\n            return;\n        }\n\n        this.setupMdc = true;\n        this.tearDown();\n    }\n\n    @Listen('resize', { passive: true, target: 'window' })\n    protected handleWindowResize() {\n        this.handleScroll();\n    }\n\n    private setup() {\n        const element = this.host.shadowRoot.querySelector('.mdc-tab-bar');\n        if (!element) {\n            return;\n        }\n\n        this.mdcTabBar = new MDCTabBar(element);\n        this.mdcTabBar.focusOnActivate = true;\n        this.mdcTabBar.useAutomaticActivation = true;\n        this.scrollArea = element.querySelector(\n            '.mdc-tab-scroller__scroll-area'\n        );\n        this.scrollContent = element.querySelector(\n            '.mdc-tab-scroller__scroll-content'\n        );\n\n        this.setupListeners();\n\n        // Use timeout to avoid Stencil warning about re-renders. /Ads\n        setTimeout(this.handleScroll, 0);\n    }\n\n    private tearDown() {\n        if (this.scrollArea) {\n            this.scrollArea.removeEventListener('scroll', this.handleScroll);\n        }\n\n        if (this.mdcTabBar) {\n            this.mdcTabBar.unlisten(\n                TAB_ACTIVATED_EVENT,\n                this.handleTabActivated\n            );\n            this.mdcTabBar.destroy();\n        }\n    }\n\n    private setupListeners() {\n        this.mdcTabBar.listen(TAB_ACTIVATED_EVENT, this.handleTabActivated);\n        this.scrollArea.addEventListener('scroll', this.handleScroll, {\n            passive: true,\n        });\n    }\n\n    private handleTabActivated(event: MDCTabBarActivatedEvent) {\n        const index = event.detail.index;\n        const newTabs = setActiveTab(this.tabs, index);\n\n        difference(newTabs, this.tabs)\n            .sort(this.sortByInactive)\n            .forEach((tab: Tab) => {\n                this.changeTab.emit(tab);\n            });\n\n        this.tabs = newTabs;\n    }\n\n    private sortByInactive(a: Tab, b: Tab) {\n        return Number(a.active) - Number(b.active);\n    }\n\n    private handleScroll() {\n        const scrollLeft = this.scrollArea.scrollLeft;\n        const scrollRight = Math.floor(\n            this.scrollContent.getBoundingClientRect().width -\n                this.scrollArea.getBoundingClientRect().width -\n                scrollLeft\n        );\n\n        if (scrollLeft > HIDE_SCROLL_BUTTONS_WHEN_SCROLLED_LESS_THAN_PX) {\n            this.canScrollLeft = true;\n        } else {\n            this.canScrollLeft = false;\n        }\n\n        if (scrollRight > HIDE_SCROLL_BUTTONS_WHEN_SCROLLED_LESS_THAN_PX) {\n            this.canScrollRight = true;\n        } else {\n            this.canScrollRight = false;\n        }\n    }\n\n    private handleLeftScrollClick() {\n        this.scrollArea.scroll({\n            left: this.scrollArea.scrollLeft - SCROLL_DISTANCE_ON_CLICK_PX,\n            behavior: 'smooth',\n        });\n    }\n\n    private handleRightScrollClick() {\n        this.scrollArea.scroll({\n            left: this.scrollArea.scrollLeft + SCROLL_DISTANCE_ON_CLICK_PX,\n            behavior: 'smooth',\n        });\n    }\n\n    private renderIcon(tab: Tab) {\n        if (!tab.icon) {\n            return;\n        }\n\n        const style = { color: '' };\n\n        if (tab.iconColor) {\n            style.color = tab.iconColor;\n        }\n\n        return (\n            <limel-icon\n                class=\"mdc-tab__icon\"\n                name={tab.icon}\n                style={style}\n                size=\"small\"\n                aria-hidden=\"true\"\n            />\n        );\n    }\n\n    private renderTab(tab: Tab) {\n        return (\n            <button\n                class={{\n                    'mdc-tab': true,\n                    'mdc-tab--active': !!tab.active,\n                }}\n                role=\"tab\"\n                aria-selected={tab.active ? 'true' : 'false'}\n                tabindex={tab.active ? 0 : -1}\n            >\n                <span class=\"mdc-tab__content\">\n                    {this.renderIcon(tab)}\n                    <span class=\"mdc-tab__text-label\">{tab.text}</span>\n                    {tab.badge ? <limel-badge label={tab.badge} /> : ''}\n                </span>\n                <span\n                    class={{\n                        'mdc-tab-indicator': true,\n                        'mdc-tab-indicator--active': !!tab.active,\n                    }}\n                >\n                    <span class=\"mdc-tab-indicator__content mdc-tab-indicator__content--underline\" />\n                </span>\n                <span class=\"mdc-tab__ripple\" />\n            </button>\n        );\n    }\n}\n"},{"filename":"tab-bar.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/internal/lime-theme';\n@use '@material/tab-bar/mdc-tab-bar';\n@use '@material/tab-scroller/mdc-tab-scroller';\n@use '@material/tab-indicator/mdc-tab-indicator';\n@use '@material/tab/mdc-tab';\n\n$tab-background-color: var(--contrast-300);\n$tab-border-radius: functions.pxToRem(10);\n$tab-active-outer-edge-curve-size: functions.pxToRem(12);\n$tab-separator-width: functions.pxToRem(2);\n$tab-separator-background-color: rgb(var(--contrast-600));\n$tab-scroller-fade-width: 65;\n\n@import './partial-styles/tab-bar-scroller.scss';\n\n:host(limel-tab-bar) {\n    --limel-active-tab-background-color: var(\n        --tab-panel-background-color,\n        rgb(var(--contrast-100))\n    );\n    isolation: isolate;\n    display: block;\n    position: relative;\n}\n\n:host(.has-tabs-with-equal-width) {\n    .mdc-tab {\n        flex: 1 0 auto;\n    }\n}\n\n.mdc-tab-indicator {\n    .mdc-tab-indicator__content {\n        border: none;\n    }\n}\n\n.mdc-tab__ripple {\n    box-sizing: border-box;\n    border-radius: $tab-border-radius;\n    border: {\n        style: solid;\n        color: transparent;\n        width: functions.pxToRem(4);\n    }\n    opacity: 0.7;\n\n    &:before,\n    &:after {\n        transition: background-color 0.5s ease;\n    }\n}\n\n.mdc-tab {\n    border-radius: 0;\n    letter-spacing: normal;\n    padding-right: functions.pxToRem(20);\n    padding-left: functions.pxToRem(20);\n    min-width: functions.pxToRem(40);\n    background-color: transparent;\n    flex: 0 0 auto;\n\n    &:not(.mdc-tab--active) {\n        --badge-background-color: rgb(var(--contrast-600));\n\n        &:after {\n            content: '';\n            display: block;\n            background-color: $tab-separator-background-color;\n            width: $tab-separator-width;\n            height: functions.pxToRem(16);\n            margin: auto;\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            border-radius: functions.pxToRem(16);\n            right: -$tab-separator-width;\n        }\n\n        &:last-of-type {\n            &:after {\n                display: none;\n            }\n        }\n    }\n}\n\n.mdc-tab--active {\n    border-radius: $tab-border-radius $tab-border-radius 0 0;\n    background-color: var(--limel-active-tab-background-color);\n    z-index: 2;\n\n    &:before,\n    &:after {\n        content: '';\n        display: block;\n        width: $tab-active-outer-edge-curve-size;\n        height: $tab-active-outer-edge-curve-size;\n        position: absolute;\n        bottom: 0;\n        background-color: var(--limel-active-tab-background-color);\n\n        -webkit-mask-image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' clip-rule='evenodd' viewBox='0 0 50 50'><defs/><path d='M0 0c0 27.594 22.406 50 50 50H0V0z'/></svg>\"); //For chrome and Safari the browser prefix is needed. (last checked Apr 2020)\n        mask-image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' clip-rule='evenodd' viewBox='0 0 50 50'><defs/><path d='M0 0c0 27.594 22.406 50 50 50H0V0z'/></svg>\");\n    }\n\n    &:before {\n        left: -$tab-active-outer-edge-curve-size;\n        transform: rotateY(180deg);\n    }\n    &:after {\n        right: -$tab-active-outer-edge-curve-size;\n    }\n\n    .mdc-ripple-upgraded--background-focused {\n        &:before {\n            background-color: transparent;\n            transition: background-color 1s ease;\n        }\n    }\n}\n\n.mdc-tab__content {\n    gap: functions.pxToRem(6);\n}\n\n.mdc-tab {\n    .mdc-tab__text-label {\n        transition: color 0.2s ease;\n        padding-left: 0 !important;\n        color: var(--mdc-theme-on-surface);\n    }\n    &:hover {\n        .mdc-tab__text-label {\n            color: var(--mdc-theme-text-primary-on-background);\n        }\n    }\n    &.mdc-tab--active {\n        .mdc-tab__text-label {\n            color: var(--mdc-theme-primary);\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel","filePath":"./src/components/tab-panel/tab-panel.tsx","fileName":"tab-panel.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/usage","tag":"limel-tab-panel","overview":"The `limel-tab-panel` component uses the `limel-tab-bar` component together\nwith custom slotted components and will display the content for the currently\nactive tab. Each slotted component must have an id equal to the id of the\ncorresponding tab it belongs to. These components should implement the\n[TabPanelComponent](#/type/TabPanelComponent/) interface.\n\nThe `limel-tab-panel` component will automatically set each tab configuration\non the corresponding slotted component as a property named `tab` so that the\ncomponent can take action upon that. Sometimes it might be desirable to not\nload data or render anything until the tab is active.\n\nThe slotted components can also emit the `changeTab` event to update anything\ninside the actual tab, e.g. to change the icon, color or badge.","usage":{},"docs":"The `limel-tab-panel` component uses the `limel-tab-bar` component together\nwith custom slotted components and will display the content for the currently\nactive tab. Each slotted component must have an id equal to the id of the\ncorresponding tab it belongs to. These components should implement the\n[TabPanelComponent](#/type/TabPanelComponent/) interface.\n\nThe `limel-tab-panel` component will automatically set each tab configuration\non the corresponding slotted component as a property named `tab` so that the\ncomponent can take action upon that. Sometimes it might be desirable to not\nload data or render anything until the tab is active.\n\nThe slotted components can also emit the `changeTab` event to update anything\ninside the actual tab, e.g. to change the icon, color or badge.","docsTags":[{"name":"slot","text":"- Content to put inside the `limel-tab-panel`. Each slotted element\nmust have the `id` attribute equal to the id of the tab it belongs to."},{"name":"exampleComponent","text":"limel-example-tab-panel"}],"encapsulation":"shadow","dependents":["limel-example-tab-panel"],"dependencies":["limel-tab-bar"],"dependencyGraph":{"limel-tab-panel":["limel-tab-bar"],"limel-tab-bar":["limel-icon-button","limel-icon","limel-badge"],"limel-icon-button":["limel-icon"],"limel-example-tab-panel":["limel-tab-panel"]},"props":[{"name":"tabs","type":"Tab[]","mutable":true,"reflectToAttr":false,"docs":"The tabs to display in the panel","docsTags":[],"default":"[]","values":[{"type":"Tab[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"changeTab","detail":"Tab","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a tab has been changed","docsTags":[]}],"styles":[{"name":"--tab-panel-background-color","annotation":"prop","docs":"Background color of the contents of the tab and the active tab of the tab bar. Defaults to `--contrast-100`."}],"slots":[{"name":"","docs":"Content to put inside the `limel-tab-panel`. Each slotted element\nmust have the `id` attribute equal to the id of the tab it belongs to."}],"parts":[],"listeners":[],"sources":[{"filename":"tab-panel.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    h,\n    Prop,\n    EventEmitter,\n    Event,\n    Host,\n    Watch,\n} from '@stencil/core';\nimport { Tab } from '../tab-bar/tab.types';\nimport { dispatchResizeEvent } from '../../util/dispatch-resize-event';\n\n/**\n * The `limel-tab-panel` component uses the `limel-tab-bar` component together\n * with custom slotted components and will display the content for the currently\n * active tab. Each slotted component must have an id equal to the id of the\n * corresponding tab it belongs to. These components should implement the\n * [TabPanelComponent](#/type/TabPanelComponent/) interface.\n *\n * The `limel-tab-panel` component will automatically set each tab configuration\n * on the corresponding slotted component as a property named `tab` so that the\n * component can take action upon that. Sometimes it might be desirable to not\n * load data or render anything until the tab is active.\n *\n * The slotted components can also emit the `changeTab` event to update anything\n * inside the actual tab, e.g. to change the icon, color or badge.\n *\n * @slot - Content to put inside the `limel-tab-panel`. Each slotted element\n * must have the `id` attribute equal to the id of the tab it belongs to.\n * @exampleComponent limel-example-tab-panel\n */\n@Component({\n    tag: 'limel-tab-panel',\n    styleUrl: 'tab-panel.scss',\n    shadow: true,\n})\nexport class TabPanel {\n    /**\n     * The tabs to display in the panel\n     */\n    @Prop({ mutable: true })\n    public tabs: Tab[] = [];\n\n    /**\n     * Emitted when a tab has been changed\n     */\n    @Event()\n    protected changeTab: EventEmitter<Tab>;\n\n    @Element()\n    private host: HTMLLimelTabPanelElement;\n\n    private slotElements: HTMLElement[] = [];\n\n    constructor() {\n        this.handleChangeTabs = this.handleChangeTabs.bind(this);\n        this.setSlotElements = this.setSlotElements.bind(this);\n        this.setTabStatus = this.setTabStatus.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const slot = this.getSlot();\n        if (!slot) {\n            return;\n        }\n\n        slot.addEventListener('slotchange', this.setSlotElements);\n        this.setSlotElements();\n        this.tabs.forEach(this.setTabStatus);\n    }\n\n    public disconnectedCallback() {\n        const slot = this.getSlot();\n        slot.removeEventListener('slotchange', this.setSlotElements);\n    }\n\n    @Watch('tabs')\n    public tabsChanged() {\n        this.hidePanels();\n        this.tabs.forEach(this.setTabStatus);\n    }\n\n    public render() {\n        return (\n            <Host onChangeTab={this.handleChangeTabs}>\n                <div class=\"tab-panel\">\n                    <limel-tab-bar tabs={this.tabs} />\n                    <div class=\"tab-content\">\n                        <slot />\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n\n    private setSlotElements() {\n        const slot = this.getSlot();\n        this.hidePanels();\n        this.slotElements = [].slice.call(slot.assignedElements());\n        this.tabs.forEach(this.setTabStatus);\n    }\n\n    private setTabStatus(tab: Tab) {\n        const element = this.slotElements.find((e) => e.id === tab.id);\n        if (!element) {\n            return;\n        }\n\n        if (tab.active) {\n            element.style.display = '';\n        } else {\n            element.style.display = 'none';\n        }\n\n        element['tab'] = tab; // eslint-disable-line @typescript-eslint/dot-notation\n    }\n\n    private handleChangeTabs(event: CustomEvent<Tab>) {\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n\n        this.setTabStatus(event.detail);\n\n        // Content inside the newly activated tab may need to redraw once\n        // visible, so we use the resize event trick. /Ads\n        setTimeout(dispatchResizeEvent);\n    }\n\n    private getSlot(): HTMLSlotElement {\n        return this.host.shadowRoot.querySelector('slot');\n    }\n\n    private hidePanels() {\n        this.slotElements.forEach((element) => {\n            element.style.display = 'none';\n        });\n    }\n}\n"},{"filename":"tab-panel.scss","type":"scss","source":"/**\n* @prop --tab-panel-background-color: Background color of the contents of the tab and the active tab of the tab bar. Defaults to `--contrast-100`.\n*/\n\n:host(limel-tab-panel) {\n    --tab-panel-background-color: rgb(var(--contrast-100));\n    display: block;\n    height: 100%;\n}\n\n.tab-panel {\n    // contains both limel-tab-bar and tab-content\n    height: 100%;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n.tab-content {\n    height: 100%;\n    flex: 1;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n    box-sizing: border-box;\n    background-color: var(--tab-panel-background-color);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table","filePath":"./src/components/table/table.tsx","fileName":"table.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/usage","tag":"limel-table","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-table"},{"name":"exampleComponent","text":"limel-example-table-custom-components"},{"name":"exampleComponent","text":"limel-example-table-header-menu"},{"name":"exampleComponent","text":"limel-example-table-movable-columns"},{"name":"exampleComponent","text":"limel-example-table-sorting-disabled"},{"name":"exampleComponent","text":"limel-example-table-local"},{"name":"exampleComponent","text":"limel-example-table-remote"},{"name":"exampleComponent","text":"limel-example-table-activate-row"},{"name":"exampleComponent","text":"limel-example-table-selectable-rows"},{"name":"exampleComponent","text":"limel-example-table-default-sorted"},{"name":"exampleComponent","text":"limel-example-table-layout-default"},{"name":"exampleComponent","text":"limel-example-table-layout-stretch-last-column"},{"name":"exampleComponent","text":"limel-example-table-layout-stretch-columns"},{"name":"exampleComponent","text":"limel-example-table-layout-low-density"},{"name":"exampleComponent","text":"limel-example-table-interactive-rows"}],"encapsulation":"shadow","dependents":["limel-example-table","limel-example-table-activate-row","limel-example-table-custom-components","limel-example-table-default-sorted","limel-example-table-header-menu","limel-example-table-interactive-rows","limel-example-table-layout-default","limel-example-table-layout-low-density","limel-example-table-layout-stretch-columns","limel-example-table-layout-stretch-last-column","limel-example-table-local","limel-example-table-movable-columns","limel-example-table-remote","limel-example-table-selectable-rows","limel-example-table-sorting-disabled"],"dependencies":["limel-spinner","limel-checkbox"],"dependencyGraph":{"limel-table":["limel-spinner","limel-checkbox"],"limel-example-table":["limel-table"],"limel-example-table-activate-row":["limel-table"],"limel-example-table-custom-components":["limel-table"],"limel-example-table-default-sorted":["limel-table"],"limel-example-table-header-menu":["limel-table"],"limel-example-table-interactive-rows":["limel-table"],"limel-example-table-layout-default":["limel-table"],"limel-example-table-layout-low-density":["limel-table"],"limel-example-table-layout-stretch-columns":["limel-table"],"limel-example-table-layout-stretch-last-column":["limel-table"],"limel-example-table-local":["limel-table"],"limel-example-table-movable-columns":["limel-table"],"limel-example-table-remote":["limel-table"],"limel-example-table-selectable-rows":["limel-table"],"limel-example-table-sorting-disabled":["limel-table"]},"props":[{"name":"activeRow","type":"object","mutable":true,"reflectToAttr":false,"docs":"Active row in the table","docsTags":[],"values":[{"type":"object"}],"optional":false,"required":false},{"name":"aggregates","type":"ColumnAggregate[]","mutable":false,"reflectToAttr":false,"docs":"Column aggregates to be displayed in the table","docsTags":[],"values":[{"type":"ColumnAggregate[]"}],"optional":false,"required":false},{"name":"columns","type":"Column<any>[]","mutable":false,"reflectToAttr":false,"docs":"Columns used to display the data","docsTags":[],"default":"[]","values":[{"type":"Column<any>[]"}],"optional":false,"required":false},{"name":"data","type":"object[]","mutable":false,"reflectToAttr":false,"docs":"Data to be displayed in the table","docsTags":[],"default":"[]","values":[{"type":"object[]"}],"optional":false,"required":false},{"name":"emptyMessage","type":"string","mutable":false,"attr":"empty-message","reflectToAttr":false,"docs":"A message to display when the table has no data","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"layout","type":"\"default\" | \"lowDensity\" | \"stretchColumns\" | \"stretchLastColumn\"","mutable":false,"attr":"layout","reflectToAttr":false,"docs":"Defines the layout of the table, based on how width of the columns are calculated.\n\n- `default`: makes columns as wide as their contents.\n- `stretchLastColumn`: makes columns as wide as their contents, stretch the last column to fill up the remaining table width.\n- `stretchColumns`: stretches all columns to fill the available width when possible.\n- `lowDensity`: makes columns as wide as their contents, and creates a low density and airy layout.","docsTags":[],"values":[{"value":"default","type":"string"},{"value":"lowDensity","type":"string"},{"value":"stretchColumns","type":"string"},{"value":"stretchLastColumn","type":"string"}],"optional":false,"required":false},{"name":"loading","type":"boolean","mutable":false,"attr":"loading","reflectToAttr":false,"docs":"Set to `true` to trigger loading animation","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"mode","type":"\"local\" | \"remote\"","mutable":false,"attr":"mode","reflectToAttr":false,"docs":"Set to either `local` or `remote` to change how the table handles the\nloaded data. When in `local` mode, all sorting and pagination will be\ndone locally with the data given. When in `remote` mode, the consumer\nis responsible to give the table new data when a `load` event occurs","docsTags":[],"default":"'local'","values":[{"value":"local","type":"string"},{"value":"remote","type":"string"}],"optional":false,"required":false},{"name":"movableColumns","type":"boolean","mutable":false,"attr":"movable-columns","reflectToAttr":false,"docs":"Set to `true` to enable reordering of the columns by dragging them","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"page","type":"number","mutable":false,"attr":"page","reflectToAttr":false,"docs":"The page to show","docsTags":[],"default":"FIRST_PAGE","values":[{"type":"number"}],"optional":false,"required":false},{"name":"pageSize","type":"number","mutable":false,"attr":"page-size","reflectToAttr":false,"docs":"Number of rows per page","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"selectable","type":"boolean","mutable":false,"attr":"selectable","reflectToAttr":false,"docs":"Enables row selection","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"selection","type":"object[]","mutable":false,"reflectToAttr":false,"docs":"Selected data. Requires `selectable` to be true.","docsTags":[],"values":[{"type":"object[]"}],"optional":false,"required":false},{"name":"sorting","type":"ColumnSorter[]","mutable":false,"reflectToAttr":false,"docs":"The initial sorted columns","docsTags":[],"default":"[]","values":[{"type":"ColumnSorter[]"}],"optional":false,"required":false},{"name":"totalRows","type":"number","mutable":false,"attr":"total-rows","reflectToAttr":false,"docs":"The number of total rows available for the data","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"activate","detail":"object","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a row is activated","docsTags":[]},{"event":"changeColumns","detail":"Column<any>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the columns have been changed","docsTags":[]},{"event":"changePage","detail":"number","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a new page has been set","docsTags":[]},{"event":"load","detail":"TableParams","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when `mode` is `remote` and the table is loading new data. The\nconsumer is responsible for giving the table new data","docsTags":[]},{"event":"select","detail":"object[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the row selection has been changed","docsTags":[]},{"event":"selectAll","detail":"boolean","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the select all rows state is toggled","docsTags":[]},{"event":"sort","detail":"ColumnSorter[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when `mode` is `local` the data is sorted","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    Element,\n    Watch,\n    EventEmitter,\n    Event,\n    Host,\n} from '@stencil/core';\nimport TabulatorTable from 'tabulator-tables';\nimport {\n    Column,\n    TableParams,\n    ColumnSorter,\n    ColumnAggregate,\n} from './table.types';\nimport { ColumnDefinitionFactory, createColumnSorter } from './columns';\nimport { isEqual, has } from 'lodash-es';\nimport { ElementPool } from './element-pool';\nimport { TableSelection } from './table-selection';\nimport { mapLayout, Layout } from './layout';\n\nconst FIRST_PAGE = 1;\n\n/**\n * @exampleComponent limel-example-table\n * @exampleComponent limel-example-table-custom-components\n * @exampleComponent limel-example-table-header-menu\n * @exampleComponent limel-example-table-movable-columns\n * @exampleComponent limel-example-table-sorting-disabled\n * @exampleComponent limel-example-table-local\n * @exampleComponent limel-example-table-remote\n * @exampleComponent limel-example-table-activate-row\n * @exampleComponent limel-example-table-selectable-rows\n * @exampleComponent limel-example-table-default-sorted\n * @exampleComponent limel-example-table-layout-default\n * @exampleComponent limel-example-table-layout-stretch-last-column\n * @exampleComponent limel-example-table-layout-stretch-columns\n * @exampleComponent limel-example-table-layout-low-density\n * @exampleComponent limel-example-table-interactive-rows\n */\n@Component({\n    tag: 'limel-table',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class Table {\n    /**\n     * Data to be displayed in the table\n     */\n    @Prop()\n    public data: object[] = [];\n\n    /**\n     * Columns used to display the data\n     */\n    @Prop()\n    public columns: Column[] = [];\n\n    /**\n     * Set to either `local` or `remote` to change how the table handles the\n     * loaded data. When in `local` mode, all sorting and pagination will be\n     * done locally with the data given. When in `remote` mode, the consumer\n     * is responsible to give the table new data when a `load` event occurs\n     */\n    @Prop()\n    public mode: 'local' | 'remote' = 'local';\n\n    /**\n     * Defines the layout of the table, based on how width of the columns are calculated.\n     *\n     * - `default`: makes columns as wide as their contents.\n     * - `stretchLastColumn`: makes columns as wide as their contents, stretch the last column to fill up the remaining table width.\n     * - `stretchColumns`: stretches all columns to fill the available width when possible.\n     * - `lowDensity`: makes columns as wide as their contents, and creates a low density and airy layout.\n     */\n    @Prop()\n    public layout: Layout;\n\n    /**\n     * Number of rows per page\n     */\n    @Prop()\n    public pageSize: number;\n\n    /**\n     * The number of total rows available for the data\n     */\n    @Prop()\n    public totalRows: number;\n\n    /**\n     * The initial sorted columns\n     */\n    @Prop()\n    public sorting: ColumnSorter[] = [];\n\n    /**\n     * Active row in the table\n     */\n    @Prop({ mutable: true })\n    public activeRow: object;\n\n    /**\n     * Set to `true` to enable reordering of the columns by dragging them\n     */\n    @Prop()\n    public movableColumns: boolean;\n\n    /**\n     * Set to `true` to trigger loading animation\n     */\n    @Prop()\n    public loading: boolean = false;\n\n    /**\n     * The page to show\n     */\n    @Prop()\n    public page: number = FIRST_PAGE;\n\n    /**\n     * Emitted when `mode` is `local` the data is sorted\n     */\n    @Event()\n    public sort: EventEmitter<ColumnSorter[]>;\n\n    /**\n     * Emitted when a new page has been set\n     */\n    @Event()\n    public changePage: EventEmitter<number>;\n\n    /**\n     * A message to display when the table has no data\n     */\n    @Prop()\n    public emptyMessage: string;\n\n    /**\n     * Column aggregates to be displayed in the table\n     */\n    @Prop()\n    public aggregates: ColumnAggregate[];\n\n    /**\n     * Enables row selection\n     */\n    @Prop()\n    public selectable: boolean;\n\n    /**\n     * Selected data. Requires `selectable` to be true.\n     */\n    @Prop()\n    public selection: object[];\n\n    /**\n     * Emitted when `mode` is `remote` and the table is loading new data. The\n     * consumer is responsible for giving the table new data\n     */\n    @Event()\n    public load: EventEmitter<TableParams>;\n\n    /**\n     * Emitted when a row is activated\n     */\n    @Event()\n    public activate: EventEmitter<object>;\n\n    /**\n     * Emitted when the columns have been changed\n     */\n    @Event()\n    public changeColumns: EventEmitter<Column[]>;\n\n    /**\n     * Emitted when the row selection has been changed\n     */\n    @Event()\n    public select: EventEmitter<object[]>;\n\n    /**\n     * Emitted when the select all rows state is toggled\n     */\n    @Event()\n    public selectAll: EventEmitter<boolean>;\n\n    @Element()\n    private host: HTMLLimelTableElement;\n\n    private currentLoad: { page: number; sorters: ColumnSorter[] };\n\n    private tabulator: Tabulator;\n\n    private pool: ElementPool;\n    private columnFactory: ColumnDefinitionFactory;\n    private firstRequest: boolean;\n    private currentSorting: ColumnSorter[];\n    private tableSelection: TableSelection;\n\n    constructor() {\n        this.handleDataSorting = this.handleDataSorting.bind(this);\n        this.handlePageLoaded = this.handlePageLoaded.bind(this);\n        this.handleAjaxRequesting = this.handleAjaxRequesting.bind(this);\n        this.requestData = this.requestData.bind(this);\n        this.onClickRow = this.onClickRow.bind(this);\n        this.formatRow = this.formatRow.bind(this);\n        this.formatRows = this.formatRows.bind(this);\n        this.updateMaxPage = this.updateMaxPage.bind(this);\n        this.initTabulatorComponent = this.initTabulatorComponent.bind(this);\n        this.setSelection = this.setSelection.bind(this);\n        this.addColumnAggregator = this.addColumnAggregator.bind(this);\n        this.pool = new ElementPool(document);\n        this.columnFactory = new ColumnDefinitionFactory(this.pool);\n    }\n\n    public componentWillLoad() {\n        this.firstRequest = this.mode === 'remote';\n        this.initTableSelection();\n    }\n\n    public componentDidLoad() {\n        this.init();\n    }\n\n    public disconnectedCallback() {\n        this.pool.clear();\n    }\n\n    @Watch('totalRows')\n    protected totalRowsChanged() {\n        this.updateMaxPage();\n    }\n\n    @Watch('pageSize')\n    protected pageSizeChanged() {\n        this.updateMaxPage();\n    }\n\n    @Watch('page')\n    protected pageChanged() {\n        if (!this.tabulator) {\n            return;\n        }\n\n        if (this.tabulator.getPage() === this.page) {\n            return;\n        }\n\n        this.tabulator.setPage(this.page);\n    }\n\n    @Watch('activeRow')\n    protected activeRowChanged() {\n        if (!this.tabulator) {\n            return;\n        }\n\n        this.formatRows();\n    }\n\n    @Watch('data')\n    protected updateData(newData = [], oldData = []) {\n        if (isEqual(newData, oldData)) {\n            return;\n        }\n\n        this.pool.releaseAll();\n\n        setTimeout(() => {\n            if (!this.tabulator) {\n                return;\n            }\n\n            this.tabulator.replaceData(this.data);\n            this.setSelection();\n        });\n    }\n\n    @Watch('columns')\n    protected updateColumns(newColumns: Column[], oldColumns: Column[]) {\n        if (!this.tabulator) {\n            return;\n        }\n\n        if (this.areSameColumns(newColumns, oldColumns)) {\n            return;\n        }\n\n        const columnsInTable = this.tabulator\n            .getColumns()\n            .filter((c) => c.getField());\n\n        const oldColumnsInTable = columnsInTable.map((c) =>\n            oldColumns.find((old) => old.field === c.getField())\n        );\n\n        if (this.areSameColumns(newColumns, oldColumnsInTable)) {\n            return;\n        }\n\n        // Updating columns requires a reinitialization otherwise sorting will not work\n        // afterwards\n        this.init();\n    }\n\n    @Watch('aggregates')\n    protected updateAggregates(\n        newAggregates: ColumnAggregate[],\n        oldAggregates: ColumnAggregate[]\n    ) {\n        if (!this.tabulator) {\n            return;\n        }\n\n        if (isEqual(newAggregates, oldAggregates)) {\n            return;\n        }\n\n        if (!this.haveSameAggregateFields(newAggregates, oldAggregates)) {\n            this.init();\n\n            return;\n        }\n\n        this.tabulator.recalc();\n        this.tabulator.rowManager.redraw();\n    }\n\n    @Watch('selection')\n    protected updateSelection(newSelection: any[]) {\n        if (!this.tableSelection) {\n            return;\n        }\n\n        this.tableSelection.setSelection(newSelection);\n    }\n\n    @Watch('selectable')\n    protected updateSelectable() {\n        if (this.tableSelection && !this.selectable) {\n            this.tableSelection = null;\n        }\n\n        this.initTableSelection();\n        this.init();\n    }\n\n    private areSameColumns(newColumns: Column[], oldColumns: Column[]) {\n        return (\n            newColumns.length === oldColumns.length &&\n            newColumns.every((column) => oldColumns.includes(column))\n        );\n    }\n\n    private haveSameAggregateFields(\n        newAggregates: ColumnAggregate[],\n        oldAggregates: ColumnAggregate[]\n    ) {\n        const oldAggregateFields = oldAggregates?.map((a) => a.field) || [];\n\n        return (\n            newAggregates?.length === oldAggregates?.length &&\n            !!newAggregates?.every((a) => oldAggregateFields.includes(a.field))\n        );\n    }\n\n    private init() {\n        if (this.tabulator) {\n            this.pool.releaseAll();\n            this.tabulator.destroy();\n        }\n\n        const options = this.getOptions();\n        const table: HTMLElement =\n            this.host.shadowRoot.querySelector('#tabulator-table');\n        this.initTabulatorComponent(table, options);\n    }\n\n    /*\n     * Tabulator requires that the html element it's rendered inside\n     * has a size before it's created, otherwise it doesn't consider\n     * it self renderedy completely. (the callback \"renderComplete\"\n     * is never run).\n     *\n     * @param table {HTMLElement}\n     * @param options {Tabulator.Options}\n     *\n     * @returns {void}\n     */\n    private initTabulatorComponent(\n        table: HTMLElement,\n        options: Tabulator.Options\n    ) {\n        // Some browsers do not implement the ResizeObserver API...\n        // If that's the case lets just create the table no\n        // matter if its rendered or not.\n        if (!('ResizeObserver' in window)) {\n            this.tabulator = new TabulatorTable(table, options);\n            this.setSelection();\n\n            return;\n        }\n\n        const observer = new ResizeObserver(() => {\n            this.tabulator = new TabulatorTable(table, options);\n            this.setSelection();\n            observer.unobserve(table);\n        });\n        observer.observe(table);\n    }\n\n    private initTableSelection() {\n        if (this.selectable) {\n            this.tableSelection = new TableSelection(\n                () => this.tabulator,\n                this.pool,\n                this.select\n            );\n            this.tableSelection.setSelection(this.selection);\n        }\n    }\n\n    private setSelection() {\n        if (!(this.tabulator && this.tableSelection)) {\n            return;\n        }\n\n        this.tableSelection.setSelection(this.selection);\n    }\n\n    private updateMaxPage() {\n        this.tabulator?.setMaxPage(this.calculatePageCount());\n    }\n\n    private getOptions(): Tabulator.Options {\n        const ajaxOptions = this.getAjaxOptions();\n        const paginationOptions = this.getPaginationOptions();\n        const columnOptions = this.getColumnOptions();\n\n        return {\n            data: this.data,\n            layout: mapLayout(this.layout),\n            columns: this.getColumnDefinitions(),\n            dataSorting: this.handleDataSorting,\n            pageLoaded: this.handlePageLoaded,\n            ...ajaxOptions,\n            ...paginationOptions,\n            rowClick: this.onClickRow,\n            rowFormatter: this.formatRow,\n            initialSort: this.getColumnSorter(),\n            nestedFieldSeparator: false,\n            ...columnOptions,\n        };\n    }\n\n    private getColumnSorter(): Tabulator.Sorter[] {\n        const sorting = this.currentSorting ?? this.sorting;\n\n        return sorting.map((sorter: ColumnSorter) => {\n            return {\n                column: String(sorter.column.field),\n                dir: sorter.direction.toLocaleLowerCase() as Tabulator.SortDirection,\n            };\n        });\n    }\n\n    private getColumnDefinitions(): Tabulator.ColumnDefinition[] {\n        const columnDefinitions = this.columns\n            .map(this.addColumnAggregator)\n            .map(this.columnFactory.create);\n\n        if (this.tableSelection) {\n            return this.tableSelection.getColumnDefinitions(columnDefinitions);\n        }\n\n        return columnDefinitions;\n    }\n\n    private addColumnAggregator(column: Column<any>): Column<any> {\n        if (!this.aggregates?.length || column.aggregator) {\n            return column;\n        }\n\n        const aggregate = this.aggregates.find((a) => a.field === column.field);\n        if (aggregate) {\n            column.aggregator = (\n                col?: Column,\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                _values?: any[],\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                _data?: any[]\n            ) => {\n                if (!col) {\n                    return undefined;\n                }\n\n                const value = this.aggregates.find(\n                    (a) => a.field === col.field\n                )?.value;\n\n                if (col.formatter) {\n                    return col.formatter(value);\n                }\n\n                return value;\n            };\n        }\n\n        return column;\n    }\n\n    private getAjaxOptions(): Tabulator.OptionsData {\n        if (!this.isRemoteMode()) {\n            return {};\n        }\n\n        // Tabulator needs a URL to be set, even though this one will never be\n        // used since we have our own custom `ajaxRequestFunc`\n        const remoteUrl = 'https://localhost';\n\n        return {\n            ajaxSorting: true,\n            ajaxURL: remoteUrl,\n            ajaxRequestFunc: this.requestData,\n            ajaxRequesting: this.handleAjaxRequesting,\n        };\n    }\n\n    /*\n     * The ajaxRequesting callback is triggered when ever an ajax request is made.\n     *\n     * Tabulator is requesting data with an AJAX request even though it has been\n     * given data when it was created.\n     *\n     * It seems unnecessary for us to emit the `load` event as well when this\n     * happens, since we can just initialize the table with the data that has been\n     * given to us. Therefore, we abort the request if:\n     *\n     *  * its the first time this method is called and,\n     *  * data has been sent in to the component as a prop\n     *\n     */\n    private handleAjaxRequesting() {\n        const abortRequest = this.firstRequest && !!this.data?.length;\n        this.firstRequest = false;\n\n        if (abortRequest) {\n            setTimeout(() => {\n                this.updateMaxPage();\n                this.tabulator.replaceData(this.data);\n            });\n\n            return false;\n        }\n\n        return true;\n    }\n\n    private getPaginationOptions(): Tabulator.OptionsPagination {\n        if (!this.pageSize) {\n            return {};\n        }\n\n        return {\n            pagination: this.isRemoteMode() ? 'remote' : 'local',\n            paginationSize: this.pageSize,\n            paginationInitialPage: this.page,\n        };\n    }\n\n    private requestData(_, __, params: any): Promise<object> {\n        const sorters = params.sorters;\n        const currentPage = params.page;\n\n        if (this.page !== currentPage) {\n            this.changePage.emit(currentPage);\n        }\n\n        const columnSorters = sorters.map(createColumnSorter(this.columns));\n\n        const load = {\n            page: currentPage,\n            sorters: columnSorters,\n        };\n\n        // In order to make limel-table behave more like a controlled component,\n        // we always return the existing data from this function, therefore\n        // relying on the consumer component to handle the loading\n        // state via the loading prop, if it actually decides to load new data.\n        const resolveExistingData = Promise.resolve({\n            last_page: this.calculatePageCount(), // eslint-disable-line camelcase\n            data: this.data,\n        });\n\n        if (isEqual(this.currentLoad, load)) {\n            return resolveExistingData;\n        }\n\n        this.currentSorting = columnSorters;\n        this.currentLoad = load;\n        this.load.emit(load);\n\n        return resolveExistingData;\n    }\n\n    private isRemoteMode(): boolean {\n        return this.mode === 'remote';\n    }\n\n    private handleDataSorting(sorters: Tabulator.Sorter[]): void {\n        if (this.isRemoteMode()) {\n            return;\n        }\n\n        const columnSorters = sorters.map(createColumnSorter(this.columns));\n        if (columnSorters.length === 0) {\n            return;\n        }\n\n        this.sort.emit(columnSorters);\n    }\n\n    private handlePageLoaded(page: number): void {\n        if (this.isRemoteMode()) {\n            return;\n        }\n\n        this.changePage.emit(page);\n    }\n\n    private onClickRow(_ev, row: Tabulator.RowComponent): void {\n        if (typeof row.getPosition === 'undefined') {\n            // Not a data row, probably a CalcComponent\n            return;\n        }\n\n        if (this.activeRow === row.getData()) {\n            this.activeRow = null;\n        } else {\n            this.activeRow = row.getData();\n        }\n\n        this.activate.emit(this.activeRow);\n    }\n\n    private getActiveRows: () => Tabulator.RowComponent[] = () => {\n        if (!this.tabulator) {\n            return [];\n        }\n\n        return this.tabulator.getRows('active');\n    };\n\n    private getActiveRowsData: () => object[] = () => {\n        // Note: Tabulator.getData() creates copies of each data object\n        // and will break this.selection.has checks, hence why this function\n        // intentionally retrieves the data using the row components\n        return this.getActiveRows().map((row) => row.getData());\n    };\n\n    private selectAllOnChange = (ev: CustomEvent<boolean>) => {\n        const selectAll = ev.detail;\n\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const newSelection = selectAll ? this.getActiveRowsData() : [];\n        this.select.emit(newSelection);\n        this.tableSelection.setSelection(newSelection);\n        this.selectAll.emit(selectAll);\n    };\n\n    private formatRows() {\n        this.tabulator.getRows().forEach(this.formatRow);\n    }\n\n    private formatRow(row: Tabulator.RowComponent) {\n        if (this.activeRow === row.getData()) {\n            row.getElement().classList.add('active');\n        } else {\n            row.getElement().classList.remove('active');\n        }\n    }\n\n    private calculatePageCount(): number {\n        let total = this.totalRows;\n        if (!total) {\n            total = this.data.length;\n        }\n\n        return Math.ceil(total / this.pageSize);\n    }\n\n    private hasAggregation(columns: Column[]): boolean {\n        return columns.some((column) => has(column, 'aggregator'));\n    }\n\n    private getColumnOptions = (): Tabulator.OptionsColumns => {\n        if (!this.movableColumns) {\n            return {};\n        }\n\n        return {\n            movableColumns: true,\n            columnMoved: this.handleMoveColumn,\n        };\n    };\n\n    private handleMoveColumn = (_, components: Tabulator.ColumnComponent[]) => {\n        const columns = components.map(this.findColumn).filter((c) => c);\n        this.changeColumns.emit(columns);\n    };\n\n    private findColumn = (component: Tabulator.ColumnComponent): Column => {\n        return this.columns.find((column) => {\n            return (\n                column.field === component.getField() &&\n                column.title === component.getDefinition().title\n            );\n        });\n    };\n\n    render() {\n        return (\n            <Host\n                class={{\n                    'has-low-density': this.layout === 'lowDensity',\n                }}\n            >\n                <div\n                    id=\"tabulator-container\"\n                    class={{\n                        'has-pagination': this.totalRows > this.pageSize,\n                        'has-aggregation': this.hasAggregation(this.columns),\n                        'has-movable-columns': this.movableColumns,\n                        'has-rowselector': this.selectable,\n                        'has-selection': this.tableSelection?.hasSelection,\n                    }}\n                >\n                    {/* Toggle style instead of removing the loader\n                    because removing the element will cause a rerender, breaking the\n                    tabulator table */}\n                    <div\n                        id=\"tabulator-loader\"\n                        style={{ display: this.loading ? 'flex' : 'none' }}\n                    >\n                        <limel-spinner size=\"large\" />\n                    </div>\n                    {this.renderEmptyMessage()}\n                    {this.renderSelectAll()}\n                    <div id=\"tabulator-table\" />\n                </div>\n            </Host>\n        );\n    }\n\n    private renderSelectAll() {\n        if (!this.selectable) {\n            return;\n        }\n\n        const showSelectAll = !this.loading && this.tableSelection;\n\n        return (\n            <div\n                class=\"select-all\"\n                style={{ display: showSelectAll ? 'inline-block' : 'none' }}\n            >\n                <limel-checkbox\n                    onChange={this.selectAllOnChange}\n                    disabled={!this.data.length}\n                    checked={this.tableSelection?.hasSelection}\n                    indeterminate={\n                        this.tableSelection?.hasSelection &&\n                        this.selection?.length < this.data.length\n                    }\n                />\n            </div>\n        );\n    }\n\n    private renderEmptyMessage() {\n        const showEmptyMessage =\n            !this.loading && !this.data.length && this.emptyMessage;\n\n        return (\n            <div\n                id=\"tabulator-empty-text\"\n                style={{ display: showEmptyMessage ? 'flex' : 'none' }}\n            >\n                <span>{this.emptyMessage}</span>\n            </div>\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":"@use '../../style/mixins';\n@use '../../style/functions';\n@use '../../style/internal/lime-typography';\n@import '../../../node_modules/tabulator-tables/src/scss/tabulator.scss';\n\n/*\n* @prop --table-max-column-width: defines a maximum width for columns using standard size units, to prevent the table from growing too wide. Set to `auto` if you do not need this limitation. Defaults to `40rem`.\n*/\n\n$width-of-sorter-arrow: 0.5rem;\n$cell-padding: 0.5rem;\n$table--has-interactive-rows--selectable-row--hover: 2;\n$table--limel-table--row-selector: 1;\n\n:host(limel-table) {\n    isolation: isolate;\n    display: block;\n    --table-header-background-color: var(--contrast-500);\n    --table-header-background-color--hover: var(--contrast-400);\n    --table-header-background-color-when-being-dragged: var(--contrast-100);\n\n    --table-row-background-color--odd: var(--contrast-200);\n    --table-row-background-color--even: var(--contrast-100);\n    --table-row-background-color--hover: var(\n        --lime-elevated-surface-background-color\n    );\n    --table-row-background-color--active: var(--contrast-300);\n\n    --table-arrow-color: var(--contrast-800);\n    --table-arrow-color--active: var(--mdc-theme-primary);\n\n    --table-text-color: var(--mdc-theme-text-primary-on-background);\n}\n\n@import './partial-styles/_table-main-layout';\n\n#tabulator-container {\n    position: relative;\n}\n\n#tabulator-container,\n#tabulator-table {\n    @include lime-typography.base;\n    background-color: transparent;\n    border: none;\n}\n\n.tabulator {\n    .tabulator-header {\n        color: var(--table-text-color);\n    }\n    .tabulator-tableHolder {\n        .tabulator-table {\n            color: var(--table-text-color);\n            background-color: transparent;\n        }\n    }\n\n    .tabulator-header {\n        border-bottom: 0;\n        background-color: rgb(var(--table-header-background-color));\n\n        .tabulator-headers {\n            width: fit-content;\n        }\n\n        .tabulator-col {\n            transition: background-color 0.2s ease;\n            background-color: rgb(var(--table-header-background-color));\n            border-right-color: rgb(var(--contrast-200));\n\n            &.tabulator-sortable {\n                &:hover {\n                    background-color: rgb(\n                        var(--table-header-background-color--hover)\n                    );\n                }\n            }\n\n            .tabulator-col-content {\n                padding-right: $width-of-sorter-arrow;\n            }\n        }\n\n        .tabulator-col-title-holder {\n            display: flex;\n            gap: 0.25rem;\n        }\n\n        .tabulator-col-sorter {\n            order: 1;\n        }\n        .tabulator-col-title {\n            order: 2;\n            font-weight: 500;\n            padding-right: 0 !important;\n            line-height: functions.pxToRem(20);\n        }\n    }\n}\n\n.tabulator-row {\n    &.tabulator-selectable {\n        transition: background-color 0.2s ease;\n\n        &:hover {\n            background-color: rgb(var(--contrast-300));\n        }\n        &:not(.active) {\n            &:hover {\n                background-color: rgb(var(--table-header-background-color));\n            }\n        }\n    }\n    &.tabulator-row-odd:not(.active):not(:hover) {\n        background-color: rgb(var(--table-row-background-color--odd));\n    }\n\n    &.tabulator-row-even:not(.active):not(:hover) {\n        background-color: rgb(var(--table-row-background-color--even));\n    }\n\n    &.active {\n        background-color: rgb(var(--table-row-background-color--active));\n        box-shadow: var(--button-shadow-inset-pressed);\n\n        &:before {\n            $width-of-selected-row-indicator: 0.2rem;\n            content: '';\n            display: inline-block;\n            box-sizing: border-box;\n            position: sticky;\n            z-index: $table--has-interactive-rows--selectable-row--hover + 1;\n            inset: 0 0 auto 0;\n            border: $width-of-selected-row-indicator solid\n                var(--mdc-theme-primary);\n            border-radius: 1rem;\n            margin-right: -$width-of-selected-row-indicator * 2;\n        }\n    }\n\n    .tabulator-cell {\n        border-right: transparent;\n        padding: $cell-padding;\n        padding-left: $cell-padding + $width-of-sorter-arrow;\n\n        display: inline-flex;\n        align-items: center;\n        &[style*='text-align: right;'] {\n            justify-content: flex-end;\n        }\n        &[style*='text-align: center;'] {\n            justify-content: center;\n        }\n    }\n}\n\n.tabulator-col,\n.tabulator-cell {\n    max-width: var(--table-max-column-width, 40rem);\n    font-size: functions.pxToRem(13);\n}\n\n#tabulator-loader,\n#tabulator-empty-text {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#tabulator-loader {\n    background-color: rgba(var(--contrast-100), 0.6);\n    cursor: wait;\n}\n\n#tabulator-empty-text {\n    color: rgb(var(--contrast-800));\n    font-weight: bold;\n    font-size: functions.pxToRem(20);\n    pointer-events: none;\n}\n\n@import './partial-styles/tabulator-arrow';\n@import './partial-styles/tabulator-paginator';\n@import './partial-styles/tabulator-loader';\n@import './partial-styles/tabulator-custom-styles';\n@import './partial-styles/header-component';\n@import './partial-styles/movable-columns';\n@import './partial-styles/_tabulator-footer';\n@import './partial-styles/_row-selection';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip","filePath":"./src/components/tooltip/tooltip.tsx","fileName":"tooltip.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/usage","tag":"limel-tooltip","overview":"A tooltip can be used to display a descriptive text for any element.\nThe displayed content must be a brief and supplemental string of text,\nidentifying the element or describing its function for the user,\nhelping them better understand unfamiliar objects that aren't described\ndirectly in the UI.\n\n## Interaction\nThe tooltip appears after a slight delay, when the element is hovered;\nand disappears as soon as the cursor leaves the element.\nTherefore, users cannot interact with the tip, but if the trigger element\nitself is interactive, it will remain interactible even with a tooltip bound\nto it.\n\n:::note\nIn order to display the tooltip, the tooltip element and its trigger element\nmust be within the same document or document fragment.\nA good practice is to just place them next to each other like below:\n\n```html\n<limel-button icon=\"search\" id=\"tooltip-example\" />\n<limel-tooltip label=\"Search\" elementId=\"tooltip-example\" />\n```\n:::\n\n## Usage\n- Keep in mind that tooltips can be distracting, and can be perceived as an interruption.\nUse them only when they add significant value.\n- A good tip is concise, helpful, and informative.\nDon't explain the obvious or simply repeat what is already on the screen.\nWhen used correctly, supplemental info of a tooltip helps to [declutter the UI](/#/DesignGuidelines/decluttering.md/).\n- If the tip is essential to the primary tasks that the user is performing,\nsuch as warnings or important notes, include the information directly in the\ninterface instead.\n- When a component offers a helper text (e.g. [Input field](/#/component/limel-input-field/)),\nuse that, not a tooltip.\n- Make sure to use the tooltip on an element that users naturally and\neffortlessly recognize can be hovered.","usage":{},"docs":"A tooltip can be used to display a descriptive text for any element.\nThe displayed content must be a brief and supplemental string of text,\nidentifying the element or describing its function for the user,\nhelping them better understand unfamiliar objects that aren't described\ndirectly in the UI.\n\n## Interaction\nThe tooltip appears after a slight delay, when the element is hovered;\nand disappears as soon as the cursor leaves the element.\nTherefore, users cannot interact with the tip, but if the trigger element\nitself is interactive, it will remain interactible even with a tooltip bound\nto it.\n\n:::note\nIn order to display the tooltip, the tooltip element and its trigger element\nmust be within the same document or document fragment.\nA good practice is to just place them next to each other like below:\n\n```html\n<limel-button icon=\"search\" id=\"tooltip-example\" />\n<limel-tooltip label=\"Search\" elementId=\"tooltip-example\" />\n```\n:::\n\n## Usage\n- Keep in mind that tooltips can be distracting, and can be perceived as an interruption.\nUse them only when they add significant value.\n- A good tip is concise, helpful, and informative.\nDon't explain the obvious or simply repeat what is already on the screen.\nWhen used correctly, supplemental info of a tooltip helps to [declutter the UI](/#/DesignGuidelines/decluttering.md/).\n- If the tip is essential to the primary tasks that the user is performing,\nsuch as warnings or important notes, include the information directly in the\ninterface instead.\n- When a component offers a helper text (e.g. [Input field](/#/component/limel-input-field/)),\nuse that, not a tooltip.\n- Make sure to use the tooltip on an element that users naturally and\neffortlessly recognize can be hovered.","docsTags":[{"name":"exampleComponent","text":"limel-example-tooltip"},{"name":"exampleComponent","text":"limel-example-tooltip-max-character"},{"name":"exampleComponent","text":"limel-example-tooltip-composite"},{"name":"private"}],"encapsulation":"shadow","dependents":["limel-button-group","limel-color-picker","limel-dock-button","limel-example-tooltip","limel-example-tooltip-composite","limel-example-tooltip-declutter","limel-example-tooltip-max-character"],"dependencies":["limel-portal","limel-tooltip-content"],"dependencyGraph":{"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-button-group":["limel-tooltip"],"limel-color-picker":["limel-tooltip"],"limel-dock-button":["limel-tooltip"],"limel-example-tooltip":["limel-tooltip"],"limel-example-tooltip-composite":["limel-tooltip"],"limel-example-tooltip-declutter":["limel-tooltip"],"limel-example-tooltip-max-character":["limel-tooltip"]},"props":[{"name":"elementId","type":"string","mutable":false,"attr":"element-id","reflectToAttr":true,"docs":"ID of the owner element that the tooltip should describe.\nMust be a child within the same document fragment as the tooltip element\nitself.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":true},{"name":"helperLabel","type":"string","mutable":false,"attr":"helper-label","reflectToAttr":true,"docs":"Additional helper text for the element.\nExample usage can be a keyboard shortcut to activate the function of the\nowner element.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Short descriptive text of the owner element.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":true},{"name":"maxlength","type":"number","mutable":false,"attr":"maxlength","reflectToAttr":true,"docs":"The maximum amount of characters before rendering 'label' and\n'helperLabel' in two rows.","docsTags":[],"default":"DEFAULT_MAX_LENGTH","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[{"name":"--tooltip-z-index","annotation":"prop","docs":"z-index of the tooltip."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip.tsx","type":"tsx","source":"import { Component, h, Prop, Element, State } from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\n\nconst DEFAULT_MAX_LENGTH = 50;\n\n/**\n * A tooltip can be used to display a descriptive text for any element.\n * The displayed content must be a brief and supplemental string of text,\n * identifying the element or describing its function for the user,\n * helping them better understand unfamiliar objects that aren't described\n * directly in the UI.\n *\n * ## Interaction\n * The tooltip appears after a slight delay, when the element is hovered;\n * and disappears as soon as the cursor leaves the element.\n * Therefore, users cannot interact with the tip, but if the trigger element\n * itself is interactive, it will remain interactible even with a tooltip bound\n * to it.\n *\n * :::note\n * In order to display the tooltip, the tooltip element and its trigger element\n * must be within the same document or document fragment.\n * A good practice is to just place them next to each other like below:\n *\n * ```html\n * <limel-button icon=\"search\" id=\"tooltip-example\" />\n * <limel-tooltip label=\"Search\" elementId=\"tooltip-example\" />\n * ```\n * :::\n *\n * ## Usage\n * - Keep in mind that tooltips can be distracting, and can be perceived as an interruption.\n * Use them only when they add significant value.\n * - A good tip is concise, helpful, and informative.\n * Don't explain the obvious or simply repeat what is already on the screen.\n * When used correctly, supplemental info of a tooltip helps to [declutter the UI](/#/DesignGuidelines/decluttering.md/).\n * - If the tip is essential to the primary tasks that the user is performing,\n * such as warnings or important notes, include the information directly in the\n * interface instead.\n * - When a component offers a helper text (e.g. [Input field](/#/component/limel-input-field/)),\n * use that, not a tooltip.\n * - Make sure to use the tooltip on an element that users naturally and\n * effortlessly recognize can be hovered.\n *\n * @exampleComponent limel-example-tooltip\n * @exampleComponent limel-example-tooltip-max-character\n * @exampleComponent limel-example-tooltip-composite\n * @private\n */\n@Component({\n    tag: 'limel-tooltip',\n    shadow: true,\n    styleUrl: 'tooltip.scss',\n})\nexport class Tooltip {\n    /**\n     * ID of the owner element that the tooltip should describe.\n     * Must be a child within the same document fragment as the tooltip element\n     * itself.\n     */\n    @Prop({ reflect: true })\n    public elementId!: string;\n\n    /**\n     * Short descriptive text of the owner element.\n     */\n    @Prop({ reflect: true })\n    public label!: string;\n\n    /**\n     * Additional helper text for the element.\n     * Example usage can be a keyboard shortcut to activate the function of the\n     * owner element.\n     */\n    @Prop({ reflect: true })\n    public helperLabel?: string;\n\n    /**\n     * The maximum amount of characters before rendering 'label' and\n     * 'helperLabel' in two rows.\n     */\n    @Prop({ reflect: true })\n    public maxlength?: number = DEFAULT_MAX_LENGTH;\n\n    @State()\n    private open: boolean;\n\n    @Element()\n    private host: HTMLLimelTooltipElement;\n\n    private portalId: string;\n    private tooltipId: string;\n    private showTooltipTimeoutHandle: number;\n\n    public constructor() {\n        this.portalId = createRandomString();\n        this.tooltipId = createRandomString();\n    }\n\n    public connectedCallback() {\n        this.setOwnerAriaLabel();\n        this.addListeners();\n    }\n\n    public disconnectedCallback() {\n        this.removeListeners();\n    }\n\n    public render() {\n        const tooltipZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--tooltip-z-index'\n        );\n\n        return (\n            <div class=\"trigger-anchor\">\n                <limel-portal\n                    openDirection=\"bottom-start\"\n                    visible={this.open}\n                    containerId={this.portalId}\n                    containerStyle={{\n                        'z-index': tooltipZIndex,\n                        'pointer-events': 'none',\n                    }}\n                >\n                    <limel-tooltip-content\n                        label={this.label}\n                        helperLabel={this.helperLabel}\n                        maxlength={this.maxlength}\n                        role=\"tooltip\"\n                        aria-hidden={!this.open}\n                        id={this.tooltipId}\n                    />\n                </limel-portal>\n            </div>\n        );\n    }\n\n    private setOwnerAriaLabel() {\n        const owner = this.getOwnerElement();\n        owner?.setAttribute('aria-describedby', this.tooltipId);\n    }\n\n    private addListeners() {\n        const owner = this.getOwnerElement();\n        owner?.addEventListener('mouseover', this.showTooltip);\n        owner?.addEventListener('mouseout', this.hideTooltip);\n        owner?.addEventListener('click', this.hideTooltip);\n    }\n\n    private removeListeners() {\n        const owner = this.getOwnerElement();\n        owner?.removeEventListener('mouseover', this.showTooltip);\n        owner?.removeEventListener('mouseout', this.hideTooltip);\n        owner?.removeEventListener('click', this.hideTooltip);\n    }\n\n    private showTooltip = () => {\n        const tooltipDelay = 500;\n        this.showTooltipTimeoutHandle = window.setTimeout(() => {\n            this.open = true;\n        }, tooltipDelay);\n    };\n\n    private hideTooltip = () => {\n        clearTimeout(this.showTooltipTimeoutHandle);\n        this.open = false;\n    };\n\n    private getOwnerElement(): HTMLElement | undefined {\n        let element: Node = this.host;\n\n        do {\n            element = element.parentNode;\n        } while (\n            element &&\n            element.nodeType !== Node.DOCUMENT_FRAGMENT_NODE &&\n            element.nodeType !== Node.DOCUMENT_NODE\n        );\n\n        return (element as ShadowRoot)?.getElementById(this.elementId);\n    }\n}\n"},{"filename":"tooltip.scss","type":"scss","source":"/**\n * @prop --tooltip-z-index: z-index of the tooltip.\n */\n\n.trigger-anchor {\n    position: relative;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip","filePath":"./src/components/tooltip/tooltip-content.tsx","fileName":"tooltip-content.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/usage","tag":"limel-tooltip-content","overview":"This component is used internally by `limel-tooltip`.","usage":{},"docs":"This component is used internally by `limel-tooltip`.","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-tooltip"],"dependencies":[],"dependencyGraph":{"limel-tooltip":["limel-tooltip-content"]},"props":[{"name":"helperLabel","type":"string","mutable":false,"attr":"helper-label","reflectToAttr":true,"docs":"Read more in tooltip.tsx","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Read more in tooltip.tsx","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":true},{"name":"maxlength","type":"number","mutable":false,"attr":"maxlength","reflectToAttr":true,"docs":"Read more in tooltip.tsx","docsTags":[],"values":[{"type":"number"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip-content.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\n\n/**\n * This component is used internally by `limel-tooltip`.\n *\n * @private\n */\n@Component({\n    tag: 'limel-tooltip-content',\n    shadow: true,\n    styleUrl: 'tooltip-content.scss',\n})\nexport class TooltipContent {\n    /**\n     * Read more in tooltip.tsx\n     */\n    @Prop({ reflect: true })\n    label!: string;\n\n    /**\n     * Read more in tooltip.tsx\n     */\n    @Prop({ reflect: true })\n    helperLabel?: string;\n\n    /**\n     * Read more in tooltip.tsx\n     */\n    @Prop({ reflect: true })\n    maxlength?: number;\n\n    public render() {\n        let isLabelsTextLong = false;\n        if (this.helperLabel && this.maxlength) {\n            isLabelsTextLong =\n                this.label.length + this.helperLabel.length > this.maxlength;\n        }\n\n        const props: any = {};\n        if (this.maxlength) {\n            props.style = {\n                '--tooltip-max-width-of-text': `${this.maxlength}` + 'ch',\n            };\n        }\n\n        return [\n            <text class={{ 'has-column-layout': isLabelsTextLong }} {...props}>\n                <div class=\"label\">{this.label}</div>\n                <div class=\"helper-label\">{this.helperLabel}</div>\n            </text>,\n        ];\n    }\n}\n"},{"filename":"tooltip-content.scss","type":"scss","source":":host {\n    animation: display-tooltip 0.2s ease;\n    display: flex;\n\n    border-radius: 0.25rem;\n    padding: 0.25rem 0.5rem;\n    background-color: rgb(var(--contrast-1300));\n    box-shadow: var(--shadow-depth-16);\n}\n\ntext {\n    font-size: 0.875rem; // 14px\n    line-height: 1.25;\n    display: flex;\n    column-gap: 1rem;\n\n    &.has-column-layout {\n        display: table-cell;\n        width: fit-content;\n        max-width: min(var(--tooltip-max-width-of-text), 80vw);\n        .label {\n            padding-bottom: 0.5rem;\n        }\n        .helper-label {\n            padding-bottom: 0.25rem;\n        }\n    }\n}\n\n.label {\n    color: rgb(var(--contrast-200));\n}\n\n.helper-label {\n    color: rgb(var(--contrast-800));\n\n    &:empty {\n        display: none;\n    }\n}\n\n@keyframes display-tooltip {\n    0% {\n        opacity: 0;\n        transform: translate3d(0, 0, 0) scale(0.94);\n    }\n    100% {\n        opacity: 1;\n        transform: translate3d(0, 0, 0) scale(1);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/my-custom-menu.tsx","fileName":"my-custom-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"my-custom-menu","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-list"],"dependencyGraph":{"my-custom-menu":["limel-header","limel-list"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"my-custom-menu.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'my-custom-menu',\n    shadow: { delegatesFocus: true },\n})\nexport class MyCustomMenu {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'Companies',\n            icon: 'organization',\n            iconColor: 'rgb(var(--color-blue-default)',\n        },\n        {\n            text: 'Deals',\n            icon: 'money',\n            iconColor: 'rgb(var(--color-green-default))',\n        },\n        {\n            text: 'Agreements',\n            icon: 'handshake',\n            iconColor: 'rgb(var(--color-pink-default))',\n        },\n        {\n            text: 'Todos',\n            icon: 'today',\n            iconColor: 'rgb(var(--color-teal-default))',\n        },\n        {\n            text: 'History',\n            icon: 'comments',\n            iconColor: 'rgb(var(--color-grey-light))',\n        },\n        {\n            text: 'Coworkers',\n            icon: 'gender_neutral_user',\n            iconColor: 'rgb(var(--color-orange-light))',\n        },\n        {\n            text: 'Persons',\n            icon: 'user_group_man_man',\n            iconColor: 'rgb(var(--color-yellow-dark)',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-header\n                heading=\"Navigate to a table\"\n                subheading=\"Showing 7 of 12\"\n                supportingText=\"Show all…\"\n            />,\n            <limel-list\n                items={this.items}\n                class=\"has-grid-layout has-interactive-items\"\n            />,\n        ];\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/my-custom-menu-with-notifications.tsx","fileName":"my-custom-menu-with-notifications.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"my-custom-menu-with-notifications","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-list"],"dependencyGraph":{"my-custom-menu-with-notifications":["limel-header","limel-list"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"my-custom-menu-with-notifications.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'my-custom-menu-with-notifications',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'my-custom-menu-with-notifications.scss',\n})\nexport class MyCustomMenuWithNotifications {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'Preferences',\n            icon: 'horizontal_settings_mixer',\n            iconColor: 'rgb(var(--color-blue-default)',\n            primaryComponent: {\n                name: 'limel-badge',\n                props: {\n                    label: 2,\n                    style: {\n                        order: '2',\n                    },\n                },\n            },\n        },\n        {\n            text: \"What's new\",\n            icon: 'new',\n            iconColor: 'rgb(var(--color-orange-default)',\n            primaryComponent: {\n                name: 'limel-badge',\n                props: {\n                    label: 3,\n                    style: {\n                        order: '2',\n                    },\n                },\n            },\n        },\n        {\n            text: 'Sign out',\n            icon: 'shutdown',\n            iconColor: 'rgb(var(--color-red-default))',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-header heading=\"Hi user!\" icon=\"user_male_circle\" />,\n            <limel-list\n                items={this.items}\n                class=\"has-grid-layout has-interactive-items\"\n            />,\n        ];\n    }\n}\n"},{"filename":"my-custom-menu-with-notifications.scss","type":"scss","source":":host(my-custom-menu-with-notifications) {\n    --badge-background-color: rgb(var(--color-red-default));\n    --badge-text-color: rgb(var(--color-white));\n}\n\nlimel-list {\n    --gap: 0.25rem;\n}\n"}]}]},"title":"lime elements","menu":[{"path":"/Home/","title":"Home","children":[{"path":"/Home/index.md/","title":"Lime Elements","children":[]},{"path":"/Home/contributing.md/","title":"Contributing","children":[]},{"path":"/Home/events.md/","title":"Events and input handling","children":[]}]},{"path":"/DesignGuidelines/","title":"Design Guidelines","children":[{"path":"/DesignGuidelines/color-system.md/","title":"Color system","children":[]},{"path":"/DesignGuidelines/shadows-and-depth.md/","title":"Shadows and depth","children":[]},{"path":"/DesignGuidelines/size-rhythms.md/","title":"Size rhythms","children":[]},{"path":"/DesignGuidelines/action-buttons.md/","title":"Action buttons","children":[]},{"path":"/DesignGuidelines/declutter.md/","title":"Reducing UI clutter and cognitive load","children":[]}]},{"path":"/component/","title":"Components","children":[{"path":"/component/limel-badge/","title":"Badge","children":[{"title":"Properties","path":"/component/limel-badge/properties/"},{"title":"Styles","path":"/component/limel-badge/styles/"}]},{"path":"/component/limel-banner/","title":"Banner","children":[{"title":"Properties","path":"/component/limel-banner/properties/"},{"title":"Methods","path":"/component/limel-banner/methods/"},{"title":"Slots","path":"/component/limel-banner/slots/"},{"title":"Styles","path":"/component/limel-banner/styles/"}]},{"path":"/component/limel-button/","title":"Button","children":[{"title":"Properties","path":"/component/limel-button/properties/"}]},{"path":"/component/limel-button-group/","title":"Button group","children":[{"title":"Properties","path":"/component/limel-button-group/properties/"},{"title":"Events","path":"/component/limel-button-group/events/"},{"title":"Styles","path":"/component/limel-button-group/styles/"}]},{"path":"/component/limel-checkbox/","title":"Checkbox","children":[{"title":"Properties","path":"/component/limel-checkbox/properties/"},{"title":"Events","path":"/component/limel-checkbox/events/"},{"title":"Styles","path":"/component/limel-checkbox/styles/"}]},{"path":"/component/limel-chip-set/","title":"Chip set","children":[{"title":"Properties","path":"/component/limel-chip-set/properties/"},{"title":"Events","path":"/component/limel-chip-set/events/"},{"title":"Methods","path":"/component/limel-chip-set/methods/"},{"title":"Styles","path":"/component/limel-chip-set/styles/"}]},{"path":"/component/limel-circular-progress/","title":"Circular progress","children":[{"title":"Properties","path":"/component/limel-circular-progress/properties/"},{"title":"Styles","path":"/component/limel-circular-progress/styles/"}]},{"path":"/component/limel-code-editor/","title":"Code editor","children":[{"title":"Properties","path":"/component/limel-code-editor/properties/"},{"title":"Events","path":"/component/limel-code-editor/events/"},{"title":"Styles","path":"/component/limel-code-editor/styles/"}]},{"path":"/component/limel-collapsible-section/","title":"Collapsible section","children":[{"title":"Properties","path":"/component/limel-collapsible-section/properties/"},{"title":"Events","path":"/component/limel-collapsible-section/events/"},{"title":"Slots","path":"/component/limel-collapsible-section/slots/"},{"title":"Styles","path":"/component/limel-collapsible-section/styles/"}]},{"path":"/component/limel-color-picker/","title":"Color picker","children":[{"title":"Properties","path":"/component/limel-color-picker/properties/"},{"title":"Events","path":"/component/limel-color-picker/events/"}]},{"path":"/component/limel-date-picker/","title":"Date picker","children":[{"title":"Properties","path":"/component/limel-date-picker/properties/"},{"title":"Events","path":"/component/limel-date-picker/events/"},{"title":"Styles","path":"/component/limel-date-picker/styles/"}]},{"path":"/component/limel-dialog/","title":"Dialog","children":[{"title":"Properties","path":"/component/limel-dialog/properties/"},{"title":"Events","path":"/component/limel-dialog/events/"},{"title":"Slots","path":"/component/limel-dialog/slots/"},{"title":"Styles","path":"/component/limel-dialog/styles/"}]},{"path":"/component/limel-dock/","title":"Dock","children":[{"title":"Properties","path":"/component/limel-dock/properties/"},{"title":"Events","path":"/component/limel-dock/events/"},{"title":"Styles","path":"/component/limel-dock/styles/"}]},{"path":"/component/limel-file/","title":"File","children":[{"title":"Properties","path":"/component/limel-file/properties/"},{"title":"Events","path":"/component/limel-file/events/"},{"title":"Styles","path":"/component/limel-file/styles/"}]},{"path":"/component/limel-form/","title":"Form","children":[{"title":"Properties","path":"/component/limel-form/properties/"},{"title":"Events","path":"/component/limel-form/events/"},{"title":"Styles","path":"/component/limel-form/styles/"}]},{"path":"/component/limel-grid/","title":"Grid","children":[{"title":"Slots","path":"/component/limel-grid/slots/"},{"title":"Styles","path":"/component/limel-grid/styles/"}]},{"path":"/component/limel-header/","title":"Header","children":[{"title":"Properties","path":"/component/limel-header/properties/"},{"title":"Slots","path":"/component/limel-header/slots/"},{"title":"Styles","path":"/component/limel-header/styles/"}]},{"path":"/component/limel-icon/","title":"Icon","children":[{"title":"Properties","path":"/component/limel-icon/properties/"},{"title":"Styles","path":"/component/limel-icon/styles/"}]},{"path":"/component/limel-icon-button/","title":"Icon button","children":[{"title":"Properties","path":"/component/limel-icon-button/properties/"},{"title":"Styles","path":"/component/limel-icon-button/styles/"}]},{"path":"/component/limel-info-tile/","title":"Info tile","children":[{"title":"Properties","path":"/component/limel-info-tile/properties/"},{"title":"Styles","path":"/component/limel-info-tile/styles/"}]},{"path":"/component/limel-input-field/","title":"Input field","children":[{"title":"Properties","path":"/component/limel-input-field/properties/"},{"title":"Events","path":"/component/limel-input-field/events/"},{"title":"Styles","path":"/component/limel-input-field/styles/"}]},{"path":"/component/limel-linear-progress/","title":"Linear progress","children":[{"title":"Properties","path":"/component/limel-linear-progress/properties/"},{"title":"Styles","path":"/component/limel-linear-progress/styles/"}]},{"path":"/component/limel-list/","title":"List","children":[{"title":"Properties","path":"/component/limel-list/properties/"},{"title":"Events","path":"/component/limel-list/events/"},{"title":"Styles","path":"/component/limel-list/styles/"}]},{"path":"/component/limel-menu/","title":"Menu","children":[{"title":"Properties","path":"/component/limel-menu/properties/"},{"title":"Events","path":"/component/limel-menu/events/"},{"title":"Slots","path":"/component/limel-menu/slots/"},{"title":"Styles","path":"/component/limel-menu/styles/"}]},{"path":"/component/limel-picker/","title":"Picker","children":[{"title":"Properties","path":"/component/limel-picker/properties/"},{"title":"Events","path":"/component/limel-picker/events/"},{"title":"Styles","path":"/component/limel-picker/styles/"}]},{"path":"/component/limel-popover/","title":"Popover","children":[{"title":"Properties","path":"/component/limel-popover/properties/"},{"title":"Events","path":"/component/limel-popover/events/"},{"title":"Slots","path":"/component/limel-popover/slots/"},{"title":"Styles","path":"/component/limel-popover/styles/"}]},{"path":"/component/limel-progress-flow/","title":"Progress flow","children":[{"title":"Properties","path":"/component/limel-progress-flow/properties/"},{"title":"Events","path":"/component/limel-progress-flow/events/"},{"title":"Styles","path":"/component/limel-progress-flow/styles/"}]},{"path":"/component/limel-select/","title":"Select","children":[{"title":"Properties","path":"/component/limel-select/properties/"},{"title":"Events","path":"/component/limel-select/events/"},{"title":"Styles","path":"/component/limel-select/styles/"}]},{"path":"/component/limel-shortcut/","title":"Shortcut","children":[{"title":"Properties","path":"/component/limel-shortcut/properties/"},{"title":"Styles","path":"/component/limel-shortcut/styles/"}]},{"path":"/component/limel-slider/","title":"Slider","children":[{"title":"Properties","path":"/component/limel-slider/properties/"},{"title":"Events","path":"/component/limel-slider/events/"}]},{"path":"/component/limel-snackbar/","title":"Snackbar","children":[{"title":"Properties","path":"/component/limel-snackbar/properties/"},{"title":"Events","path":"/component/limel-snackbar/events/"},{"title":"Methods","path":"/component/limel-snackbar/methods/"}]},{"path":"/component/limel-spinner/","title":"Spinner","children":[{"title":"Properties","path":"/component/limel-spinner/properties/"},{"title":"Styles","path":"/component/limel-spinner/styles/"}]},{"path":"/component/limel-split-button/","title":"Split button","children":[{"title":"Properties","path":"/component/limel-split-button/properties/"},{"title":"Events","path":"/component/limel-split-button/events/"}]},{"path":"/component/limel-switch/","title":"Switch","children":[{"title":"Properties","path":"/component/limel-switch/properties/"},{"title":"Events","path":"/component/limel-switch/events/"}]},{"path":"/component/limel-tab-bar/","title":"Tab bar","children":[{"title":"Properties","path":"/component/limel-tab-bar/properties/"},{"title":"Events","path":"/component/limel-tab-bar/events/"}]},{"path":"/component/limel-tab-panel/","title":"Tab panel","children":[{"title":"Properties","path":"/component/limel-tab-panel/properties/"},{"title":"Events","path":"/component/limel-tab-panel/events/"},{"title":"Slots","path":"/component/limel-tab-panel/slots/"},{"title":"Styles","path":"/component/limel-tab-panel/styles/"}]},{"path":"/component/limel-table/","title":"Table","children":[{"title":"Properties","path":"/component/limel-table/properties/"},{"title":"Events","path":"/component/limel-table/events/"}]}]},{"path":"/type/","title":"Types","children":[{"path":"/type/Button/","title":"Button","children":[]},{"path":"/type/Chip/","title":"Chip","children":[]},{"path":"/type/Action/","title":"Action","children":[]},{"path":"/type/DateType/","title":"DateType","children":[]},{"path":"/type/Languages/","title":"Languages","children":[]},{"path":"/type/ClosingActions/","title":"ClosingActions","children":[]},{"path":"/type/DialogHeading/","title":"DialogHeading","children":[]},{"path":"/type/DockItem/","title":"DockItem","children":[]},{"path":"/type/DockMenu/","title":"DockMenu","children":[]},{"path":"/type/FileInfo/","title":"FileInfo","children":[]},{"path":"/type/FlexContainerAlign/","title":"FlexContainerAlign","children":[]},{"path":"/type/FlexContainerDirection/","title":"FlexContainerDirection","children":[]},{"path":"/type/FlexContainerJustify/","title":"FlexContainerJustify","children":[]},{"path":"/type/FormLayoutType/","title":"FormLayoutType","children":[]},{"path":"/type/FormComponent/","title":"FormComponent","children":[]},{"path":"/type/FormComponentOptions/","title":"FormComponentOptions","children":[]},{"path":"/type/FormError/","title":"FormError","children":[]},{"path":"/type/FormInfo/","title":"FormInfo","children":[]},{"path":"/type/FormLayoutOptions/","title":"FormLayoutOptions","children":[]},{"path":"/type/GridLayoutOptions/","title":"GridLayoutOptions","children":[]},{"path":"/type/LimeSchemaOptions/","title":"LimeSchemaOptions","children":[]},{"path":"/type/RowLayoutOptions/","title":"RowLayoutOptions","children":[]},{"path":"/type/ValidationStatus/","title":"ValidationStatus","children":[]},{"path":"/type/ValidationError/","title":"ValidationError","children":[]},{"path":"/type/IconSize/","title":"IconSize","children":[]},{"path":"/type/InfoTileProgress/","title":"InfoTileProgress","children":[]},{"path":"/type/InputType/","title":"InputType","children":[]},{"path":"/type/ListComponent/","title":"ListComponent","children":[]},{"path":"/type/ListItem/","title":"ListItem","children":[]},{"path":"/type/ListSeparator/","title":"ListSeparator","children":[]},{"path":"/type/ListType/","title":"ListType","children":[]},{"path":"/type/MenuListType/","title":"MenuListType","children":[]},{"path":"/type/MenuItem/","title":"MenuItem","children":[]},{"path":"/type/OpenDirection/","title":"OpenDirection","children":[]},{"path":"/type/Searcher/","title":"Searcher","children":[]},{"path":"/type/FlowItem/","title":"FlowItem","children":[]},{"path":"/type/Option/","title":"Option","children":[]},{"path":"/type/SpinnerSize/","title":"SpinnerSize","children":[]},{"path":"/type/Tab/","title":"Tab","children":[]},{"path":"/type/TabPanelComponent/","title":"TabPanelComponent","children":[]},{"path":"/type/ColumnAggregatorType/","title":"ColumnAggregatorType","children":[]},{"path":"/type/Column/","title":"Column","children":[]},{"path":"/type/ColumnAggregate/","title":"ColumnAggregate","children":[]},{"path":"/type/ColumnSorter/","title":"ColumnSorter","children":[]},{"path":"/type/TableComponent/","title":"TableComponent","children":[]},{"path":"/type/TableComponentDefinition/","title":"TableComponentDefinition","children":[]},{"path":"/type/TableParams/","title":"TableParams","children":[]},{"path":"/type/ColumnAggregatorFunction/","title":"ColumnAggregatorFunction","children":[]},{"path":"/type/TableFormatter/","title":"TableFormatter","children":[]},{"path":"/type/Link/","title":"Link","children":[]}]}],"readme":"# Lime Elements\n\nThis package includes basic components like buttons, loading-spinners, etc. For a full list of components, along with live examples, please visit the [documentation](https://lundalogik.github.io/lime-elements/).\n\nTo install, run `npm install @limetech/lime-elements`\n\n[![Version](https://img.shields.io/npm/v/@limetech/lime-elements.svg)](https://www.npmjs.com/package/@limetech/lime-elements) [![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n## Requirements\n\nThe \"Roboto\" font is included for development purposes, but is not included in the published package. This font should be supplied by the consuming application. If not supplied, texts will fall back to suitable alternatives.\n\n## Get help\n\n- If you have a general question, or are in need of support, please open a [Question issue](https://github.com/Lundalogik/lime-elements/issues/new?template=03_question.md) on GitHub.\n","guides":[{"dirPath":"src","fileName":"index.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/index.md","data":{"path":"/Home/index.md"},"content":"# Lime Elements\n\nVersion [NEXT-36.3.0-next.29](https://github.com/Lundalogik/lime-elements/blob/vNEXT-36.3.0-next.29/CHANGELOG.md). Please see the [changelog](https://github.com/Lundalogik/lime-elements/blob/main/CHANGELOG.md) for information about all versions.\n\nThis is the documentation for Lime Elements. Under *Components*, you will find documentation for each available component, along with examples of use.\n"},{"dirPath":"src","fileName":"contributing.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/contributing.md","data":{"path":"/Home/contributing.md"},"content":"# Contributing\n\nThis is the documentation for Lime Elements. Documentation is generated by \n[Kompendium](https://kompendium.dev) and is written in Markdown\n\n## Adding a new page in the docs\n\nA new page can be added just by creating a new `.md` file anywhere in the project\nand adding it to the `guides.ts` file.\n\n```\n# Hello world\n\nI'm a markdown document that can have components!\n```\n\n## Include an example\n\nThere are two ways to include an example\n\n* By adding a `@exampleComponent` tag to the doc block of the owning component\n* Adding the HTML-tag for the component anywhere in a markdown document\n\n### Using the @exampleComponent tag\n\nBy using the `@exampleComponent` tag the component gets inserted automatically for the owning component together with all code for the example, e.g\n\n```tsx\n/**\n * @exampleComponent my-component-example\n */\n@Component({\n    tag: 'my-component',\n    shadow: true,\n})\nexport class MyComponent {\n\n}\n```\n\n### Adding a component to a markdown document\n\nAny component can be included in the markdown document\n\nThe following file\n\n```\n# Hello world\n\nThis is my example file\n\n<limel-example-button-group/>\n```\n\nwill generate the following\n\n<limel-example-button-group />\n"},{"dirPath":"src","fileName":"events.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/events.md","data":{"path":"/Home/events.md"},"content":"# Events and input handling\n\nAll components in Lime Elements that has a value, and can take some kind of user input to change that value, has a `value` property, by which the consumer can set or update that value.\n\nWhen the value of the component is changed from within the component, e.g. from the user typing in a field or clicking a checkbox, a `change` event is dispatched from the component with the new value. This means that the `value` property is *not* updated automatically and it is the responsibility of the consumer to set the new value, like in the example below.\n\n## Custom events\n\nAll events that are declared in this documentation are of the type [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent), which has a `detail` property that may contain more information regarding the event. The type of the `detail` property is defined in this documentation and can be used in the event handler to make the code more readable.\n\n## DOM events\n\nBesides the custom events that are defined in this documentation, it is also possible to listen for any standard DOM event, e.g. `click`. These events do not have the `detail` property and how to use them is not described within this documentation.\n\n## Example\n\n```tsx\nclass MyComponent {    \n    @State()\n    private value: string;\n\n    public render() {\n        return [\n            <limel-input-field\n                value={this.value}\n                onChange={this.handleChange} />,\n            <limel-button\n                label=\"Submit\"\n                onClick={this.handleClick} />\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    }\n\n    private handleClick = (event: MouseEvent) => {\n        console.log(this.value);\n    }\n}\n```\n"},{"dirPath":"src/design-guidelines/color-system","fileName":"color-system.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/color-system.md","data":{"path":"/DesignGuidelines/color-system.md"},"content":"# Color system\n\nBy taking advantage of CSS variables, we have created a harmonic and pleasing color system that aims to ease the job of picking the right colors for components. These colors are inspired by [Material Design's 2014 color palettes](https://material.io/design/color/the-color-system.html#tools-for-picking-colors). However, we have modified them, renamed them, added new swatches, and also divided them into different subsets of colors which automatically adjust to Dark and Light themes.\n\n## Color palettes\n\nThe color system offers a few sets of colors which we call \"palettes\". Each palette includes a number of swatches, each of which automatically adjusts itself to the light and dark themes. In other words, each swatch has only one name, but two versions; a brighter one which is displayed when light mode is activated, and a slightly dimmer tone of the same color which is displayed when dark mode is activated. You don't really have to care about this, and all you need to do is pick a color and use its CSS variable name in your code.\n\n### Color swatch names\n\n<limel-example-extended-color-palette></limel-example-extended-color-palette>\n\nThe color system consists of 20 base colors or \"hues\". Each hue has five variations: one default, two tints (light and lighter), and two shades (dark and darker); and this is simply how we have named their CSS variables. The `red` color for instance has the following variable names:\n\n`--color-red-lighter` → `--color-red-light` → `--color-red-default`→ `--color-red-dark` → `--color-red-darker`\n\n### Contrast swatch names\n\n<limel-example-contrast-color-palette></limel-example-contrast-color-palette>\n\nThe contrast swatches are used to clarify the generic and neutral UI elements such as backgrounds, containers, sections, and their textual content. Using them wisely will help create a sense of hierarchy as well as improved readability. CSS variable names for contrast swatches start with a prefix of `--contrast-` followed by a number. These numbers start at `100` and incrementally increase by 100 and stop at `1700`, such as:\n\n`--contrast-100` → `--contrast-200` → ··· → `--contrast-1600` → `--contrast-1700`\n\n:::note\nNote that you should never use these swatches when you are coloring something (like a colorful icon or illustration). Because these swatches will dramatically change their colors and get inverted in dark and light modes. So if you want something to have a shade of grey, or appear black or white all the time, then you should use the swatches from the color palette instead, not from this contrast palette, as they invert with modes.\n:::\n\n:::important\nKeep in mind that `--color-white` and `--color-black`, which are displayed beside the contrast swatches do not change in dark and light modes. These variables can be used, for example, in shadows (which remain black even in dark mode) or text colors on colored buttons.\n:::\n\n### Dark mode, light mode, accessibility\n\n:::note\nDon't confuse titles like \"dark mode\" and \"light mode\" or \"dark/light themes\" with these swatches' naming convention. As mentioned above, each swatch -despite its name- already comes with two tones inbuilt into the color system. For example the `--color-red-dark` variable will automatically be displayed as `#d32f2f` in light mode, and as `#c62828` in dark mode.\n:::\n\n<limel-example-dark-light-mode></limel-example-dark-light-mode>\n\nThe reduced brightness in dark mode is set with accessibility in mind, and will help reduce users' eye strain in low-light environments. In a proper design for dark mode, it is not enough to invert the background and text colors. Colors which are bright in light mode, will appear even brighter in dark mode and therefore pop out more from the UI, which can make the UI unpleasant or harder to look at.\n\n#### Elevated objects and contrast\n\nIn the above example, the card is using a contrast variable which is lighter than its background layer; which means it will become darker than its background in dark mode as colors invert. However, we believe that this would create a strange experience for the users. Thus we manually specify a \"lighter\" background color for dark mode.\n\nThe reason for this is that the card has an elevated effect with a drop shadow. Such visual effects (depth, movement, light direction and its effects, etc...) rely on our experiences from the physical world and try to mimic what happens in reality. Because human brain normally expect deeper objects to appear darker and vice versa, we have added a lighter color to the card for it to still be \"elevated\". This not only helps users' perception of the interface on an unconscious level, but also keeps the shadow effect more visible.\n\n:::tip\nIf you want our color system to take care of these styles,\nsimply use the `--lime-elevated-surface-background-color` variable\nas the background color of your custom elevated surfaces,\ninstead of specifying a contrast variable manually. For example:\n\n```scss\n.my-elevated-surface {\n    background-color: var(--lime-elevated-surface-background-color);\n}\n```\n\nThis variable automatically picks the brightest contrast swatch\nfor `light` color-scheme, but not the absolute dimmest\ncontrast swatch for the `dark` color-scheme. We also use this\nvariable internally for many of components in Lime Elements,\nto properly support the dark mode.\n:::\n\n## Usage\n\nAll components in Lime Elements already use our color palette and therefore support the dark color scheme out of the box. But your application in which you use Lime Elements should also have support for the dark mode. To get dark mode support, simply load `@limetech/lime-elements/dist/lime-elements/style/color-palette-extended.css` in your app. This will make all of our colors and shadows variables accessible for your application to use internally as well.\n\n:::warning\nIf your application does not support the`dark` color-scheme properly yet, you should instead load `@limetech/lime-elements/dist/lime-elements/style/color-palette-extended-light-mode-only.css`, where dark mode support is completely disabled.\n:::\n\n### Enabling end users to force light or dark mode\n\nBy default, our color system reacts to users' preferred color scheme, set by the operating system or the browser. However, some users may prefer to see a certain application in light or dark mode, despite their globally set preferred color scheme.\n\nYou can enable them to do so, for example by providing a toggle switch in your application's internal preferences page; or add a toggle switch like the one we have on the sidebar of this documentation page.\n\nAs long as the toggle switch that you implement applies a `data-theme='force-dark'` or `data-theme='force-light'` to the `root` of your HTML page for these \"forced\" color schemes, our color system will support these as well. For example:\n\n```html\n<html data-theme=\"force-dark\"></html>\n```\n\n### Using CSS variables\n\nWe have not used HEX values to create the CSS variables for each color. They are instead written in RGB digits, without parentheses. For example `--color-blue-default: 33, 150, 243;` (which would be `#2196f3` in HEX). The reason for such a choice is empowering you to write the colors with alpha channel if needed.\n\nThus, to get a solid blue color, you would write `color: rgb(var(--color-blue-default));`.\nTo get a blue color with 10% opacity, write `color: rgba(var(--color-blue-default), 0.1);` instead.\n\n### Customizing our components and your apps with colors\n\nWhen using web-components from Lime Elements, you will notice that there are many components which allow you to add colors. However, since Lime Elements is a design system intended to unify the look and feel of our products, we naturally try to reduce your styling choices. So this color customization will enable you to either add an accent color (e.g. your product color) to the component, or add colors that contribute the the functionality of the component (e.g. indicating a status such as error, danger, etc).\n\nBut when you do your own add-ons, integrations, and apps, keep in mind that the UI should be neutrally colored (using the contrast scales). Applying intensive colors to big areas of the UI (such as headers and background colors) is not recommended.\n\n:::note\nColors should be used to communicate meaning, and attract attention to things that are functionally important, not to scream your brand throughout the entire product. Different sections of the app should be distinct, but also blend together well. Extensive color usage will be placing the emphasis on an app’s UI structure, instead of its content.\n:::\n\nUse only one accent color (product color) and use it for all Lime Elements components in your product. Define this accent color by setting the CSS variable `--lime-primary-color`. We don't recommend using the Lime brand color CSS variables directly in this case, but instead suggest using their equivalent swatch from the color palette. This will ensure that your UI will automatically benefit from dark mode adjustments, while users do not notice the difference.\n\nThings that can be affected by the accent color:\n\n-   In buttons: background color of primary buttons\n-   In check boxes: background color of “checked” boxed\n-   In radio buttons: background color of “checked” buttons\n-   In inputs: the underline visual effect\n-   In linear progress: color of the progressed section and what’s left (its background)\n-   In many components: the visual styles that indicate the `focused` state (using keyboard)\n-   In many components: the visual styles that indicate the `active` or `selected` state\n-   etc…\n\nWhat colors you can optionally change to communicate meaning:\n\n-   In buttons: text color, and also background color of buttons with certain functionalities (delete, restore, etc)\n-   In badges: color of the page and its text color\n-   In linear progress: color of the progressed section and what’s left (its background)\n-   etc…\n\n<limel-example-colors-in-components></limel-example-colors-in-components>\n\n### Available palettes\n\nAll CSS variables for the colors are available, so you _could_ pick any name and use it in your work. But please do not abuse this flexibility!\n\nExtensive usage of colors will create a messy and inconsistent UI. Most of your UI design needs should be resolved using the swatches in the \"UI palette\" (illustrated below), in addition to the contrast palette. If you need more colors, try to stick to the swatches available in the \"Primary palette\". The \"Extended palette\" should be used only for very rare cases.\n\n#### **UI palette** (default)\n\n<limel-example-ui-color-palette></limel-example-ui-color-palette>\n\nThis includes 10 color swatches which give you colors that you normally need in a user interface. These few, hand picked swatches add an extra layer of meaning to elements of the interface and make it possible to quickly communicate what the element does or indicates.\n\nIn this palette, there is a `-default` and a `-light` swatch available for each hue. The `-light` tints are usually good to use when creating interactive visual feedback. For example a button that has `--color-green-default` as background color, can get `--color-green-light` when it is hovered by the cursor.\n\n---\n\n#### **Primary palette**\n\n<limel-example-primary-color-palette></limel-example-primary-color-palette>\n\nSometimes, just a handful of colors is not enough and you need a bit more. For example when you need colors for your icons, or diagrams. This palette with 40 swatches is designed to provide a decent number of harmonic colors while easing the choice of colors for you. Used for primary purposes and meaningful communications with colors.\n\n---\n\n#### **Extended palette**\n\n<limel-example-extended-color-palette></limel-example-extended-color-palette>\n\nWith 100 swatches, this palette offers a much richer set of colors that can be used for visual communication, iconography, illustrations, and charts.\n\n---\n\n## Lime Technologies Brand Colors\n\n<limel-example-brand-color-palette></limel-example-brand-color-palette>\n\nThis set of colors is included in all available palettes, and can be used for branding and marketing purposes. Swatches and their respective CSS variables have specific names starting with the prefix `--lime-brand-color-`.\n\n:::note\nThe brand colors do **not** have a dark and light version. Thus when their respective CSS variable names are used, they will be displayed with the same brightness in both light and dark UIs. However, an equivalent of all these hues already exist in our color palette, and mostly reside in the \"dark mode\" subset -as stated beside their names as well.\n:::\n\n:::note\nNames of our brand colors are chosen by our Marketing department thus sometimes do not exactly match our naming conventions for their equivalent hues in the color palettes.\n:::\n\n### Usage of brand colors\n\nFor correct use of Lime Technologies brand assets, including colors, please refer to [Lime Technologies brand guidelines](https://www.lime-technologies.se/brand-guidelines/).\n\nWe recommend relying on the \"UI palette\" and avoid using brand colors extensively in UI design. Brand colors -as their name states- should be used where appropriate, to reflect the company's brand and identity; and add brand-recognizability to the product. These should be used the way you use spices in cooking. Too much and too many of them together will destroy the food. Therefore, in UI design, usage of brand colors should be very limited.\n\n:::tip\nGood places to use brand colors are:\n\n-   in loading screens or splash screens\n-   in logos or home links\n-   as accent colors, but carefully! This depends on the color which is chosen to represent the product. For example `deep-red`, `yellow`, `light-grey` or `grey` can never be good accent colors, even if they can be chosen to represent a Lime product.\n    :::\n"},{"dirPath":"src/design-guidelines/shadows","fileName":"shadows-and-depth.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/shadows-and-depth.md","data":{"path":"/DesignGuidelines/shadows-and-depth.md"},"content":"# Shadows and depth\n\n## Physical world metaphors in UI design\n\nWhen learning any new interface, physical or digital, the process is made easier if elements of the interface are already familiar to us. For example, we all learn how a physical button works long before we're old enough to remember it. When learning a new interface, we might have to learn what happens when a certain button is pressed, but we shouldn't have to learn what a button _is_ and that _something_ happens when you press it. Our familiarity with elements of the physical world has long been used in the design of digital interfaces. Digital buttons are a fairly obvious example of this.\n\nThe question is, how do we recognize that something is a button? While it may be difficult to list exactly what properties make us recognize a physical button as a button, most physical buttons share some set of properties that make us recognize it as a button when we see it.\n\nOne way to help sighted users of a digital interface understand that an element is a button and they can press it and interact with it, is to make it look like a physical button. Emulating the visual qualities of physical objects in interface design is sometimes called _Skeuomorphism_.\n\nA good example of an extreme skeuomorphic design is the first calendar app, released on the first iPhone. Its UI design featured visual details such as leather cover and paper details, to mimic a physical pocket calendar.\n\nDespite skeuomorphism having already been replaced with more minimalistic UI design trends, we still use details from the physical world in our UI designs, to help users make sense of the elements of digital user interfaces. From a shutter-click sound of a camera app on the phone, to elements such as toggle buttons, to notions such as light, shadows, and motion.\n\nWe may look at a subtle visual clue such as an elevated button with a slight shadow underneath it, and semi-consciously perceive it as an interactable element of the user interface. This is because the elevation reminds us of a real physical button. Just by looking at it, we realize that this thing can be pressed, moved, or otherwise interacted with. We may see a toolbar or a modal placed on top of the rest of the elements on the screen, casting a slight shadow on whatever is below it. This helps us understand that the element is higher in the hierarchy, is more important, or demands more attention right now.\n\n## Shadows\n\nWhen correctly used, shadows can improve usability of UI elements. We can use shadows to:\n\n-   create a sense of depth,\n-   improve users' perception of clickable elements,\n-   emphasize the hierarchy of sections of the user interface,\n-   signal that a component is temporary, by placing it \"on top of\" a context,\n-   clarify the direction of movement of an element, whether it is animated as a result of a user interaction, such as pressing a button, or to indicate transition from one state to another,\n-   and even visualize distinct surfaces by clarifying their edges.\n\nA surface’s shadow is determined by its elevation and relationship to other surfaces.\nBecause shadows express the degree of elevation between surfaces, they must be used consistently throughout the product.\n\n## CSS variables that we offer for shadows\n\nBecause shadows express the degree of elevation between surfaces, they must be used consistently throughout a design. Therefore, Lime Elements offers a handful of CSS variables that can be used as `box-shadow` properties on desired elements.\n\n:::tip\nUsing these variables also ensures that in dark mode, shadows are automatically adjusted to better fit darker backgrounds.\n:::\n\n### 1. Shadow variables for buttons\n\nButtons and similar clickable elements such as dropdown triggers or slider handles particularly benefit from the visual effect caused by shadows. Since a shadow makes the element look elevated, it naturally signals that the element can be \"pressed down\" again, or, in other words, clicked.\n\nIf you have custom elements (e.g. a link) that must be visualized like a button, feel free to use these variables on them.\n\n<limel-example-button-shadows></limel-example-button-shadows>\n\n:::tip **Tip** Change interactive shadows smoothly\nIt's crucial that an interaction (like hovering or pressing) that changes a visual property of an element such as its depth, is done smoothly. In other words, a change of shadows should not happen instantly. It should rather be animated with a transition. So make sure you have specified a `transition` for the `box-shadow` property, as shown below:\n\n```scss\n.my-custom-button {\n    transition: box-shadow 0.2s ease, transform 0.1s ease-out;\n    box-shadow: var(--button-shadow-normal);\n    &:hover {\n        box-shadow: var(--button-shadow-hovered);\n    }\n    &:active {\n        box-shadow: var(--button-shadow-pressed);\n        transform: translate3d(0, 0.08rem, 0);\n    }\n}\n```\n\nAlso note how we use `transform` to make our buttons feel like they are being pushed down, when pressed by the user.\n:::\n\n### 2. Shadow variables for surfaces\n\nIn a digital user interface, there are many floating UI elements like cards, modals, menus, or popovers that can benefit from a shadow effect. Here is a list of the various CSS variables for shadows that Lime Elements offers:\n\n<limel-example-surface-shadows></limel-example-surface-shadows>\n\n### 3. Shadow variables for highlighting different states\n\n<limel-example-surface-shadows-states></limel-example-surface-shadows-states>\n\n:::tip\nTo give a color around the focused element, the `-focused` variables will use `--lime-primary-color` if it is defined. When it is not defined, they will default to `--color-teal-default`.\n:::\n\n---\n\n## When not to use shadows in UI design\n\nSometimes we may only be trying to use shadows to create a visually distinct section, to separate a part of the interface from other parts.\n\nIn theory, having visually distinct areas in the UI increases the ease and speed of finding components or information when users are quickly scanning pages. But instead of using shadows, this visual distinction is better to be done through other ways, such as simply using outlines, dividers, larger headings, or different background colors.\n\n:::warning\nWe want to reserve the visual power of shadows to indicate possibility of interaction, to signify a difference in hierarchy, or to indicate that an element in the UI is temporary.\n\nTherefore, we strongly discourage the use of shadows when the only purpose is to create a visually distinct section in the UI.\n\nIf this is your only intention, we recommend using a different background color, different font characteristics, or relying on a good layout design that uses headings, paddings and margins well.\n:::\n<limel-example-shadows-bad-usage></limel-example-shadows-bad-usage>\n\nSometimes, using the recommended techniques above does not suffice, when you want to visually emphasize a section of the UI and make it pop out. For such cases, we offer other variables which can be used as `box-shadow` on the element.\n\n<limel-example-surface-shadows-inflated></limel-example-surface-shadows-inflated>\n\n:::tip\nThe best visual expression with these variables is achieved when:\n\n-   the element has a sizable `border-radius`\n-   there is enough empty space around the element\n-   the element has a light grey as `background-color`, (preferably `var(--contrast-200)`, `var(--contrast-300)` or `var(--contrast-400)`)\n-   `background-color` of the surface behind the element is not too dark or too light (preferably `var(--contrast-400)`, `var(--contrast-500)` or `var(--contrast-600)`)\n-   the element's `background-color` is lighter than the surface behind it\n    :::\n\n:::warning\n\n-   Do not overuse this visual effect on the same screen.\n-   The element using this effect should not be too small, or the effect might make it look like a button.\n    :::\n"},{"dirPath":"src/design-guidelines/size","fileName":"size-rhythms.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/size-rhythms.md","data":{"path":"/DesignGuidelines/size-rhythms.md"},"content":"# Size rhythms\n\nWhen designing components and layouts, you will have to specify the size of many properties such as `padding`, `margin`, `gap`, `width`, `height`, and so forth.\n\nTo generate a consistent layout and visual expression, we only use sizes that are multiples of four (4 * x). For example 4, 8, 12, 16, 20, and so on.\n\nIt is very important to follow this convention, both when creating new components for Lime Elements, and when creating bigger components and layouts which use these components. When the entire interface is calculated based on the single core value of 4, elements of the UI will align auto-magically.\n\nFor instance, if you want to create a custom row of buttons (not directly using Lime Elements) with this sizing convention, its `height` and `line-height` can be 40 units (to vertically align the text inside the button), the `padding-left` and `padding-right` can be 12 units, and its `margin-left` and `margin-right` which set the distance to the next or previous buttons can be for example 4 or 2, or in this example 6.\n\nEven though 6 is not a multiple of 4, it sums up to a 12 units distance between two buttons in a row; and since 12 is a multiple of 4, the overall result will be in line with the 4x rhythm 👍\n\n<limel-example-size></limel-example-size>\n\n\n## REM or PX\nWe only use `rem` units in our design system. `1rem` equals the font size set in the browser, and defaults to `16px` in most browsers. In such a system, multiples of 4px (our core size unit) can easily be calculated, as they increase sequentially by `0.25`.\n\n* 4 px = 0.25 rem\n* 8 px = 0.5 rem\n* 16 px = 1 rem\n* 20 px = 1.25 rem\n* 24 px = 1.5 rem\n\nHowever, while designing a UI, it may be easier to think in pixels, as rem is more abstract. By using a custom SASS function like below, you can effortlessly leave the job of unit conversion to the computer.\n\n````css\n// first define this converter function in your SCSS …\n@function pxToRem($px) {\n    @return #{$px/16}rem;\n}\n\n// … and then use it to ease calculations\n.example {\n    width: pxToRem(4); // will be compiled to 0.25rem\n}\n````\n\n**Note** write `1px` not `0,0625rem`!\n\nAnything that should get rendered in `1px` on a screen (such as a border) should be written in pixels. It's very important not to write it in its rem equivalent (`0,0625rem`). This is because depending on the physical pixel density of the screen, a `0,0625rem` thick line might be rendered as a semi-transparent line, or, even worse, not be rendered at all.\n\n## Exceptions in sizing rhythms\nThere are exceptions where we do not have to follow the above-mentioned sizing convention (multiples of 4). These exceptions are:\n* Numbers `1` and `2` are allowed to use when defining some visual details such as borders.\n* `font-size`: how fonts are rendered depend on the typography and design of the font itself. Fonts do not follow the same logic of simple geometric shapes of the UI. Therefore, using incremental rhythm based on 4 for font sizes (e.g. for H1, H2, H3, etc...) may generate huge font sizes which won't be usable. Also other numbers such as 14 or 13 may appear more appealing for a balanced and easily readable text, compared to 16, or 12.\n* `border-radius`: when it comes to border radius, multiples of 4 may render too large or too small. Pick the value that best helps the visual expression you want to achieve, even if it's not a multiple of 4.\n* `box-shadow`, `drop-shadow`, `blur`: How far a shadow reaches until it's faded out, or how blurry something looks should also be flexible depending on the visual expression that you want to achieve.\n\n## Be a believer, but not a fanatic!\nThis is about having a consistent rhythm in the UI, not about religiously following hard guidelines. In some cases, you will find yourself in situations in which some small detail in the UI is not following the 4-units rhythm, while everything else does.\n\nLet's look at the example below:\n\n<limel-example-size-edge-case></limel-example-size-edge-case>\n\nHere you see that the distance between the picture and top, bottom, and left of the rows is 6 units. However, the `line-height` or `height` of the picture itself (and other details) are multiples of 4. Now this is a made up example for illustrative purposes, but cases like this may happen in real life when designing components and layouts. For example you may choose to use 6 units for distance on a certain type of screen to achieve a higher visual density.\n\nSo, if you can justify that 6 works fine for your design, and the rest of your structure is following the 4x rhythm; then go for it! In this example, the accumulated height of the row (which is more decisive for the general rhythm) will be 24 (4 * 6). So you don't \"have to\" change 6 to 4 or 8 so that all numbers become multiplies of 4.\n\nThe only thing you should be mindful of is whether you are getting too many of these exceptions within the same component. In that case, something is wrong in your design.\n"},{"dirPath":"src/design-guidelines/action-buttons","fileName":"action-buttons.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/action-buttons.md","data":{"path":"/DesignGuidelines/action-buttons.md"},"content":"# Action buttons\n\nAction buttons are typically used in dialog footers, or in headers. These buttons indicate to users that they must deliberately choose one action from the set of actions presented, for the system to continue or finish a task.\n\nAction buttons must be presented together in one place, in a way that feels natural within the UI. When several action buttons are presented, their actions are often contradictory; for example **Discard** versus **Save**.\n\nWhen it comes to details such as placement of action buttons, choice of labels, and adding meaningful graphical details, it's important to follow a few design conventions, explained in this guide.\n\n<br/>\n<br/>\n\n*****\n\n## Placement\nOn a user interface which is designed for a left-to-right script like English, action buttons of a footer (for example in a dialog) are typically located at the bottom-right corner.\n\nWhen there are two buttons placed together, the button that represents a positive action is always on the right side, and the one which presents a negative one is on the left.\n\nA positive action could be an action that:\n- takes the user forwards or to next step; e.g. *Next*, *Skip*, or *Continue*\n- is primary, and most probably the one that users is going to select, e.g. *Save*, *Update*, *Send* (or even *Delete* which is a negative notion, but can be an expected or \"primary\" action, depending on the context, like in a confirm deletion dialog)\n\nA negative action could be an action that:\n- takes the user back, dismisses a dialog, or cancels an ongoing process; e.g. *Back*, *Cancel*, *Discard*\n- is secondary, which means it is not likely that users clicks it in that context\n\n<limel-example-action-buttons-placement></limel-example-action-buttons-placement>\n\n:::tip\nIn [`limel-dialog`](#/components/limel-dialog), there is a `slot` called `button`, which is a \"flexbox\". It automatically aligns its child elements to the right side. All you need to do is add `slot=\"button\"` to the elements you wish to appear in the slot.\n\n```tsx\n<limel-button\n    label=\"OK\"\n    slot=\"button\"\n/>\n```\n:::\n\n<br/>\n\n*****\n\n## Primary versus secondary actions\n\nAs you know, `limel-button` can have a `primary={true}` property, which makes it stand out by getting the primary color of your theme.\n\nOne of the action buttons is normally the primary action. That is the action that you expect the users to take, or you that want them to take.\n\n<limel-example-action-buttons-primary-secondary></limel-example-action-buttons-primary-secondary>\n\nA primary button has a stronger visual weight, and appearing more distinct makes it easier for users to chose the correct, safe, or promoted action.\n\nYou can use this visual distinction to promote the action that is safer, even if that action may not be the primary action. You can do so because sometimes:\n- it can be hard to identify the intention of the user\n- the action may be irreversible or risky\n\n<limel-example-action-buttons-primary-secondary-reversed></limel-example-action-buttons-primary-secondary-reversed>\n\n<br/>\n\n*****\n\n## Choosing good labels\n\nLabels you use should make sense together. You are usually dealing with contradictory actions. Therefore, what you put on each button should also reflect the contradiction.\n\n<limel-example-action-buttons-choosing-labels></limel-example-action-buttons-choosing-labels>\n\nLabels must make each option as clear as possible. An explicit label give users more confidence in selecting the correct action.\n\n:::note\n- Use a label that explains what the button does, rather than a generic label (such as “OK”, or \"Yes\").\n- Using verbs as labels instead of nouns is better, because a verb describes the action better.\n:::\n\n<limel-example-action-buttons-choosing-explicit-labels></limel-example-action-buttons-choosing-explicit-labels>\n\n<br/>\n\n*****\n\n## Providing a third alternative action\n\nSometimes having two actions is not enough for the user to make a decision with peace of mind. A common scenario is when a user has unsaved changes and tries to navigate away from the view. In such cases, typically a prompt maybe be shown to alert the user and give them a few logical choices.\n\nThis prompt can offer two main actions of \"Save\" and \"Discard\" (which means \"save & continue navigating away from this page\" and \"discard & continue navigating away from this page\"), along with a third choice that allows users to cancel (and go back / not continue navigating away!).\n\n<limel-example-action-buttons-third-alternative></limel-example-action-buttons-third-alternative>\n\nThe action that takes users one step back in the process is intentionally placed on the left side. This makes it easier for users to mentally separate the other two. Additionally, the placement makes it easier to connect the action to the notion of going back. (For left-to-right scripts. Left and right will of course have reversed meaning in right-to-left script, which is precisely why the CSS properties for these things use values like `flex-start` and `flex-end`, rather than `left` and `right`. See below.)\n\n:::tip\nIf buttons are placed in a full width flex container that has `justify-content: flex-end;`, these styles will align the targeted button to left side of the flex box. See \"Example with three action buttons\" in the [documentation for `limel-dialog`](#/component/limel-dialog/).\n\n```scss\n.back-button {\n    justify-self: flex-start;\n    margin-right: auto;\n}\n```\n:::\n\n<br/>\n\n*****\n\n## Adding more meaning with colors and icons\n\nTo make it easer for users to understand the message and make a decision faster, you can use icons and colors on the buttons.\n\nLearn more about [usage of colors and color conventions in the UI](#/DesignGuidelines/color-system.md/), and [how to color limel-buttons](#/component/limel-button/).\n\n<limel-example-action-buttons-icon-color></limel-example-action-buttons-icon-color>\n\n:::note\nIt might be tempting to use colors on action buttons to make the user interface more cheerful. But using colors in a user interface must follow certain UI design conventions, as colors convey meaning. Learn more about [usage of colors and color conventions in the UI](#/DesignGuidelines/color-system.md/).\n:::\n\n<limel-example-action-buttons-primary-secondary-reversed-colors></limel-example-action-buttons-primary-secondary-reversed-colors>\n\n:::note\nIf an action is not irreversible or too risky, the design does not have to put a lot of visual emphasis on the secondary action, by means of icons and colors. In such cases, highlighting the primary action and making it more recognizable is more relevant, and more motivated.\n:::\n\n<limel-example-action-buttons-colors-do-dont></limel-example-action-buttons-colors-do-dont>\n"},{"dirPath":"src/design-guidelines/declutter","fileName":"declutter.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/declutter.md","data":{"path":"/DesignGuidelines/declutter.md"},"content":"# Reducing UI clutter and cognitive load\n\n## The philosophy\n**Minimalism -** From our point of view, a great product or tool is essentially one that has a minimalistic user interface. This is not limited to digital products, but it becomes extra important for digital products, as they are often packed with tools, features, and functionalities.\n\nWith regard to both aesthetics and functionality, a minimalist product should be reduced to its necessary elements. This can be achieved by using fewer design elements, less ornamental elements in its visual design, fewer options and features, and less occupied screen space; as well as carefully breaking the interaction flows or functionalities into distinct and meaningful parts.\n\nThus, when designing a product, we have to keep removing elements and questioning their existence in the UI. We should always keep asking questions such as: Is this really needed? Does this really have to be there? Why? What's the trade-off if it's removed? Do we lose functionality? Do we lose usability? And so forth.\n> Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.\n>\n> – Antoine de Saint-Exupéry\n\n## The science\n**Cognitive load –** A user interface with too many elements requires more processing from users' brains. When fewer things on the screen try to attract the user's attention, it becomes easier for the user to \"consume\" the UI.\n\nThis is what we mean when we use the term \"cognitive load\" and talk about \"reducing cognitive load\". In the end, our goal is for the user to spend their mental energy on the problem at hand, not at the tool they are using to solve it (our UI).\n*****\n## Examples\n\n### Input fields\nWhenever possible, we take care of these details in our components. For instance, in the `limel-input` components, the \"Helper text\" and \"Character counters\" get displayed only when the field is `focused`, meaning when the user is typing in the input box. Before the user interacts with the component, displaying such details is not helpful and only adds to the clutter on the screen.\n\n<!-- <limel-example-input-field-text></limel-example-input-field-text> -->\n<!--\nNOTE: this example below is almost a duplicate of the example above.\nBecause here we need the example to have a white background due to our\nlack of support for dark mode. When we have proper support\nfor dark mode in lime elements, this example and its CSS can be deleted.\nInstead of this 👇, we can use that 👆 again. / Kia\n-->\n<limel-example-input-field-text-decluttering-guidelines></limel-example-input-field-text-decluttering-guidelines>\n\nHowever, sometimes such design decisions depend on the context and it is only you who are designing the UI that can judge. Examples of these follow below.\n\n<!--\nNOTE: this should be uncommented when we make `limel-tooltip` a public component.\n### Tooltips\nTooltips are also helpful components in creating a clean UI, by hiding away supplemental\nbut disposable pieces of information.\n\nUsers may need such information only once (usually for the first time they\nuse a UI) or occasionally. Therefore instead of constantly showing them\nin the user interface, a tooltip can be used to hide them away and display them once needed.\n<limel-example-tooltip-declutter></limel-example-tooltip-declutter>\n-->\n\n### Buttons\nButtons are particularly strong elements in the UI, since they are meant to perform important actions. Thus, an effective way of reducing clutter is to hide buttons that aren't useful at the moment. This most commonly applies to disabled buttons.\n\nDisabled buttons can convey important information, but when they don't, they should be hidden. Here are some examples:\n\n1. **When there are invalid fields, or empty required fields**\n   We can anticipate that the user might try to save their changes, and showing a disabled Save button is part of telling the user that there is something they need to do before saving is possible. This should be combined with other clear visual hints on what to do, like highlighting the invalid field and displaying a validation error message.\n2. **When the user has made no changes**\n   This example can be divided into two groups:\n   - *The user is in a distinct \"flow\" with discrete steps, and is prevented from continuing to the next step.* Common examples are so called \"wizards\". In this case, a disabled Save or Continue button should be kept visible, for the same reason as in example 1.\n   - *Making and saving changes is just one of the possible \"things to do\" on the current page.* Examples include forms that are used both for displaying and changing information (common for configuration or settings pages), or a feed, with an input for adding new posts. In this case, a disabled Save button isn't useful. We don't even know that the user has any intention of using it. Once the user updates the information, or starts writing in the input field, it's time to display the Save button, along with any other controls that might have also been hidden.\n\n:::note\nKeep in mind that a SAVE button can be disabled but visible, to tell the\nusers that requirements are not met, or there are errors.\n\nSuch cases should be accompanied with other clear visual hints where the\nerrors or progress-blockers are located in the UI.\n:::\n\nSee how Lime Elements can automatically hide buttons when they are not needed, in the \"Reduce Presence\" example for [limel-button](#/component/limel-button/).\n"}],"types":[{"type":"interface","name":"Button","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"badge","type":"number | string","docs":"The label displayed in the badge","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Name of the icon to use","docsTags":[],"optional":true},{"name":"id","type":"string","docs":"ID of the button. Must be unique.","docsTags":[],"optional":false},{"name":"selected","type":"boolean","docs":"True if the button should be selected. only first button will be selected.","docsTags":[],"optional":true},{"name":"title","type":"string","docs":"Text or label title in the button.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/button/button.types.ts"]},{"type":"interface","name":"Chip","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"badge","type":"number","docs":"The value of the badge. Only valid for `filter`.","docsTags":[],"optional":true},{"name":"href","type":"string","docs":"If supplied, the chip will render a link, using the supplied href.","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Name of the icon to use. Not valid for `filter`.","docsTags":[],"optional":true},{"name":"iconBackgroundColor","type":"string","docs":"Background color of the icon. Overrides `--icon-background-color`.","docsTags":[],"optional":true},{"name":"iconFillColor","type":"string","docs":"Color of the icon. Overrides `--icon-color`.","docsTags":[],"optional":true},{"name":"iconTitle","type":"string","docs":"`title` attribute of the icon","docsTags":[],"optional":true},{"name":"id","type":"number | string","docs":"ID of the chip. Must be unique.","docsTags":[],"optional":false},{"name":"removable","type":"boolean","docs":"Whether the chip should be removable. Not valid for `choice`.","docsTags":[],"optional":true},{"name":"selected","type":"boolean","docs":"Whether the chip is selected. Only valid for `choice` and `filter`.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display inside the chip.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the chip.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/chip-set/chip.types.ts"]},{"type":"interface","name":"Action","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"disabled","type":"boolean","docs":"","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"","docsTags":[],"optional":true},{"name":"id","type":"string","docs":"","docsTags":[],"optional":false},{"name":"label","type":"string","docs":"","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/action.ts"]},{"type":"alias","name":"DateType","docs":"","docsTags":[],"alias":"\"datetime\" | \"date\" | \"time\" | \"week\" | \"month\" | \"quarter\" | \"year\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/date-picker/date.types.ts"]},{"type":"alias","name":"Languages","docs":"","docsTags":[],"alias":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"no\" | \"nl\" | \"sv\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/date-picker/date.types.ts"]},{"type":"interface","name":"ClosingActions","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"escapeKey","type":"boolean","docs":"","docsTags":[],"optional":false},{"name":"scrimClick","type":"boolean","docs":"","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/dialog/dialog.types.ts"]},{"type":"interface","name":"DialogHeading","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"icon","type":"string","docs":"","docsTags":[],"optional":false},{"name":"subtitle","type":"string","docs":"","docsTags":[],"optional":true},{"name":"supportingText","type":"string","docs":"","docsTags":[],"optional":true},{"name":"title","type":"string","docs":"","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/dialog/dialog.types.ts"]},{"type":"interface","name":"DockItem","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"badge","type":"number | string","docs":"If specified, will display a notification badge on the buttons in the dock.","docsTags":[],"optional":true},{"name":"dockMenu","type":"DockMenu","docs":"Used to specify a custom component to render as a menu for the dock item.","docsTags":[],"optional":true},{"name":"helperLabel","type":"string","docs":"Additional helper text for the dock item.\nExample usage can be a keyboard shortcut to activate the dock item.","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Name of the icon to use.","docsTags":[],"optional":false},{"name":"id","type":"string","docs":"A non-changing value to uniquely identify each item.","docsTags":[],"optional":false},{"name":"label","type":"string","docs":"Text to display for the item.","docsTags":[],"optional":false},{"name":"selected","type":"boolean","docs":"Whether the dock item should indicate it is selected.\nThese dock items normally take the user to a top-level location within\nthe navigation tree; for example \"Home\", \"Search\" or \"My Account\".\nSet `selected` to `true`, when:\n- the user interface is showing the same top-level location as the dock\nitem is pointing at, or\n- the user interface is showing a page which is a sub-location of the\ntop-level location. For example, when user is at\n_My Account > Notification Settings_, the dock item of _My Account_\nshould have the `selected` state.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/dock/dock.types.ts"]},{"type":"interface","name":"DockMenu","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"componentName","type":"string","docs":"The tag name of a custom component to be displayed in a popover when\nclicking on the dock item this menu belongs to.","docsTags":[],"optional":false},{"name":"menuOpen","type":"boolean","docs":"Whether the menu is open.","docsTags":[],"optional":true},{"name":"props","type":"object","docs":"Any properties that should be set on the custom component.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/dock/dock.types.ts"]},{"type":"interface","name":"FileInfo","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"contentType","type":"string","docs":"Content type of file.","docsTags":[],"optional":true},{"name":"extension","type":"string","docs":"Extension of file.","docsTags":[],"optional":true},{"name":"fileContent","type":"File","docs":"the file content","docsTags":[],"optional":true},{"name":"filename","type":"string","docs":"Name of file.","docsTags":[],"optional":false},{"name":"href","type":"string","docs":"URL where the file can be downloaded. Note that this is optional. If the\nfile cannot be directly accessed via a unique url, this property should\nbe left undefined or set to `null`.","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconBackgroundColor","type":"string","docs":"Background color of the icon. Overrides `--icon-background-color`.","docsTags":[],"optional":true},{"name":"iconColor","type":"string","docs":"Icon color. Overrides `--icon-color`.","docsTags":[],"optional":true},{"name":"id","type":"number | string","docs":"ID of the file. Must be unique.","docsTags":[],"optional":false},{"name":"lastModified","type":"Date","docs":"Date of last modification.","docsTags":[],"optional":true},{"name":"size","type":"number","docs":"Size of file.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/file/file.types.ts"]},{"type":"alias","name":"FlexContainerAlign","docs":"","docsTags":[],"alias":"\"start\" | \"end\" | \"center\" | \"stretch\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/flex-container/flex-container.types.ts"]},{"type":"alias","name":"FlexContainerDirection","docs":"","docsTags":[],"alias":"\"horizontal\" | \"vertical\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/flex-container/flex-container.types.ts"]},{"type":"alias","name":"FlexContainerJustify","docs":"","docsTags":[],"alias":"\"start\" | \"end\" | \"center\" | \"space-between\" | \"space-around\" | \"space-evenly\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/flex-container/flex-container.types.ts"]},{"type":"enum","name":"FormLayoutType","docs":"","docsTags":[],"members":[{"name":"Default","docs":"The default layout","docsTags":[],"value":"\"default\""},{"name":"Grid","docs":"Render the form fields using a responsive grid layout","docsTags":[],"value":"\"grid\""},{"name":"Row","docs":"Render the form fields in full-width rows.\nEach row can have a leading `icon`, and a field.\n`title` and `description` provided by the schema will be placed\non the row itself, and not on the field.\nThis layout is good for creating UIs for user settings pages.","docsTags":[],"value":"\"row\""}],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormComponent","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"change","type":"EventEmitter<T>","docs":"The event to emit when the value of the current property has changed","docsTags":[],"optional":false},{"name":"disabled","type":"boolean","docs":"Whether or not the current property is disabled","docsTags":[],"optional":true},{"name":"formInfo","type":"FormInfo","docs":"Additional contextual information about the form","docsTags":[],"optional":true},{"name":"helperText","type":"string","docs":"The helper text for the current property","docsTags":[],"optional":true},{"name":"label","type":"string","docs":"The label of the current property","docsTags":[],"optional":true},{"name":"readonly","type":"boolean","docs":"Whether or not the current property is readonly","docsTags":[],"optional":true},{"name":"required","type":"boolean","docs":"Whether or not the current property is required","docsTags":[],"optional":true},{"name":"value","type":"T","docs":"The value of the current property","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormComponentOptions","typeParams":[],"docs":"Options for a component to be rendered inside a form","docsTags":[],"props":[{"name":"name","type":"string","docs":"Name of the component","docsTags":[],"optional":true},{"name":"props","type":"Record<string, any>","docs":"Extra properties to give the component in addition to the properties\nspecified on the `FormComponent` interface","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormError","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"message","type":"string","docs":"String describing the error","docsTags":[],"optional":false},{"name":"name","type":"string","docs":"Name of the error","docsTags":[],"optional":false},{"name":"params","type":"unknown","docs":"Params of the error","docsTags":[],"optional":true},{"name":"property","type":"string","docs":"Name of the invalid property","docsTags":[],"optional":false},{"name":"schemaPath","type":"string","docs":"Path to the property within the schema","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormInfo","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"errorSchema","type":"object","docs":"A tree of errors for this property and its children","docsTags":[],"optional":true},{"name":"name","type":"string","docs":"The name of the current property","docsTags":[],"optional":true},{"name":"rootSchema","type":"object","docs":"The schema of the whole form","docsTags":[],"optional":true},{"name":"rootValue","type":"any","docs":"The value of the whole form","docsTags":[],"optional":true},{"name":"schema","type":"object","docs":"The schema of the current property","docsTags":[],"optional":true},{"name":"schemaPath","type":"string[]","docs":"Path to the property within the schema","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormLayoutOptions","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"type","type":"T","docs":"The type of layout to use","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"GridLayoutOptions","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"colSpan","type":"1 | 2 | 3 | 4 | 5 | \"all\"","docs":"When specified on a component within the grid, the component will take\nup the the specified number of columns in the form","docsTags":[],"optional":true},{"name":"columns","type":"1 | 2 | 3 | 4 | 5","docs":"Number of columns to use in the layout","docsTags":[],"optional":true},{"name":"dense","type":"boolean","docs":"Attempts to fill in holes earlier in the grid, if smaller items come up\nlater. This may cause items to appear out-of-order, when doing so would\nfill holes left by larger items. Defaults to `true`.","docsTags":[],"optional":true},{"name":"rowSpan","type":"number","docs":"When specified on a component within the grid, the component will take\nup the the specified number of rows in the form","docsTags":[],"optional":true},{"name":"type","type":"Grid","docs":"The type of layout to use","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"LimeSchemaOptions","typeParams":[],"docs":"Lime elements specific options that can be specified under the `lime` key in\na schema, e.g.\n```ts\nconst schema = {\n    type: 'object',\n    lime: {\n        collapsible: true,\n    },\n};\n```","docsTags":[],"props":[{"name":"collapsed","type":"boolean","docs":"When `collapsible` is `true`, set this to `false` to make the\ncollapsible section load in the open state.\nDefaults to `true`.","docsTags":[],"optional":true},{"name":"collapsible","type":"boolean","docs":"When specified on an object it will render all sub components inside a\ncollapsible section","docsTags":[],"optional":true},{"name":"component","type":"FormComponentOptions","docs":"Will render the field using the specified component. The component\nshould implement the `FormComponent` interface","docsTags":[],"optional":true},{"name":"disabled","type":"boolean","docs":"Mark the field as disabled","docsTags":[],"optional":true},{"name":"layout","type":"FormLayoutOptions<any>","docs":"When specified on an object it will render the sub components with the\nspecified layout","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"RowLayoutOptions","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"icon","type":"string","docs":"When specified on a field, the chosen icon will be displayed\non the left side of the row, beside the title.","docsTags":[],"optional":true},{"name":"type","type":"Row","docs":"The type of layout to use","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"ValidationStatus","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"errors","type":"FormError[]","docs":"List of validation errors","docsTags":[],"optional":true},{"name":"valid","type":"boolean","docs":"True if the form is valid, false otherwise\nIf the form is invalid, any errors can be found on the `errors` property","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"alias","name":"ValidationError","docs":"","docsTags":[],"alias":"object","sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"alias","name":"IconSize","docs":"","docsTags":[],"alias":"\"x-small\" | \"small\" | \"medium\" | \"large\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/icon/icon.types.ts"]},{"type":"interface","name":"InfoTileProgress","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"displayPercentageColors","type":"boolean","docs":"When set to `true`, the progress bar changes color depending on its current value.","docsTags":[],"optional":true},{"name":"maxValue","type":"number","docs":"The maximum value within the scale that the progress bar should visualize.","docsTags":[],"optional":true},{"name":"prefix","type":"string","docs":"The prefix which is displayed before the `progressValue`.\nKeep to a few characters at most.","docsTags":[],"optional":true},{"name":"suffix","type":"string","docs":"The suffix which is displayed after the `value`, must be one or two characters long.","docsTags":[],"optional":true},{"name":"value","type":"number","docs":"The value of the progress bar.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/info-tile/info-tile.types.ts"]},{"type":"alias","name":"InputType","docs":"","docsTags":[],"alias":"\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"urlAsText\" | \"week\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/input-field/input-field.types.ts"]},{"type":"interface","name":"ListComponent","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"name","type":"string","docs":"Name of the custom component","docsTags":[],"optional":false},{"name":"props","type":"Record<string, any>","docs":"Properties to send to the custom component","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/list/list-item.types.ts"]},{"type":"interface","name":"ListItem","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"actions","type":"Array<MenuItem | ListSeparator>","docs":"List of actions to display as a menu at the end of the item","docsTags":[],"optional":true},{"name":"disabled","type":"boolean","docs":"True if the list item should be disabled.","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconColor","type":"string","docs":"Background color of the icon. Overrides `--icon-background-color`.","docsTags":[],"optional":true},{"name":"primaryComponent","type":"ListComponent","docs":"Component used to render in the list","docsTags":[],"optional":true},{"name":"secondaryText","type":"string","docs":"Additional supporting text to display in the list item.","docsTags":[],"optional":true},{"name":"selected","type":"boolean","docs":"True if the list item should be selected.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display in the list item.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the list item.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/list/list-item.types.ts"]},{"type":"interface","name":"ListSeparator","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"separator","type":"true","docs":"","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/list/list-item.types.ts"]},{"type":"alias","name":"ListType","docs":"The type of the list, omit to get a regular list. Available types are:\n`selectable`: regular list with single selection.\n`radio`: radio button list with single selection.\n`checkbox`: checkbox list with multiple selection.","docsTags":[],"alias":"\"selectable\" | \"radio\" | \"checkbox\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/list/list.types.ts"]},{"type":"alias","name":"MenuListType","docs":"The type of the menu, omit to get a regular vertical menu.\nAvailable types are:\n`menu`: regular vertical menu.","docsTags":[],"alias":"\"menu\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/menu-list/menu-list.types.ts"]},{"type":"interface","name":"MenuItem","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"badge","type":"number | string","docs":"If specified, will display a notification badge on the buttons in the dock.","docsTags":[],"optional":true},{"name":"commandText","type":"string","docs":"The additional supporting text is used for shortcut commands and displayed in the menu item.","docsTags":[],"optional":true},{"name":"disabled","type":"boolean","docs":"True if the menu item should be disabled.","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconColor","type":"string","docs":"Background color of the icon. Overrides `--icon-background-color`.","docsTags":[],"optional":true},{"name":"secondaryText","type":"string","docs":"Additional supporting text to display in the menu item.","docsTags":[],"optional":true},{"name":"selected","type":"boolean","docs":"True if the menu item should be selected.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display in the menu item.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the menu item.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/menu/menu.types.ts"]},{"type":"alias","name":"OpenDirection","docs":"","docsTags":[],"alias":"\"left-start\" | \"left\" | \"left-end\" | \"right-start\" | \"right\" | \"right-end\" | \"top-start\" | \"top\" | \"top-end\" | \"bottom-start\" | \"bottom\" | \"bottom-end\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/menu/menu.types.ts"]},{"type":"alias","name":"Searcher","docs":"A search function that takes a search-string as an argument, and returns\na promise that will eventually be resolved with an array of `ListItem`:s.","docsTags":[{"name":"param","text":"A search query. Typically what the user has written\nin the input field of a limel-picker."},{"name":"returns","text":"The search result."}],"alias":"function","sources":["/home/runner/work/lime-elements/lime-elements/src/components/picker/searcher.types.ts"]},{"type":"interface","name":"FlowItem","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"actions","type":"Array<MenuItem | ListSeparator>","docs":"List of actions to display as a menu at the end of the item","docsTags":[],"optional":true},{"name":"disabled","type":"boolean","docs":"True if the list item should be disabled.","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconColor","type":"string","docs":"Fill color of the icon on the step,\nwhen it is neither selected nor passed.","docsTags":[],"optional":true},{"name":"isOffProgress","type":"boolean","docs":"Determines whether a step should be a part of the flow,\nor should be an independent step visually located on the side.","docsTags":[],"optional":true},{"name":"passedColor","type":"string","docs":"Background color of the step, when it is passed.","docsTags":[],"optional":true},{"name":"primaryComponent","type":"ListComponent","docs":"Component used to render in the list","docsTags":[],"optional":true},{"name":"secondaryText","type":"string","docs":"Additional supporting text to display in the list item.","docsTags":[],"optional":true},{"name":"selected","type":"boolean","docs":"True if the list item should be selected.","docsTags":[],"optional":true},{"name":"selectedColor","type":"string","docs":"Background color of selected step.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display in the list item.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the list item.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/progress-flow.types.ts"]},{"type":"interface","name":"Option","typeParams":[{"name":"T"}],"docs":"Describes an option for limel-select.","docsTags":[],"props":[{"name":"disabled","type":"boolean","docs":"Set to `true` to make this option disabled and not possible to select.","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Displays an icon beside the name of the option.","docsTags":[],"optional":true},{"name":"iconColor","type":"string","docs":"Adds a color to the icon.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"The name of the option as shown to the user.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"The unique value of the option. Should always be the same for any given\noption, regardless of localization. The type `T` defaults to `string`,\nbut can be set to any type that extends `string` (using `Option<type>`),\nfor example an enum of specific strings.\nNote the value of this property *must* be a string!\nIf the value you wish to use is, for example, numeric, convert it to a\nstring before sending it to limel-select. Using numeric values does work\nin many desktop browsers, but breaks the select completely on some\niOS devices.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/select/option.types.ts"]},{"type":"alias","name":"SpinnerSize","docs":"","docsTags":[],"alias":"\"mini\" | \"x-small\" | \"small\" | \"medium\" | \"large\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/spinner/spinner.types.ts"]},{"type":"interface","name":"Tab","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"active","type":"boolean","docs":"True if the tab should be selected.","docsTags":[],"optional":true},{"name":"badge","type":"number | string","docs":"Shows a badge within the tab with a specified label","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconColor","type":"string","docs":"Color of the icon.","docsTags":[],"optional":true},{"name":"id","type":"number | string","docs":"Id of the tab. Must be unique.","docsTags":[],"optional":false},{"name":"text","type":"string","docs":"Text to display inside the tab.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/tab.types.ts"]},{"type":"interface","name":"TabPanelComponent","typeParams":[],"docs":"Interface for components rendered inside a `limel-tab-panel`","docsTags":[],"props":[{"name":"changeTab","type":"EventEmitter<Tab>","docs":"Emit when the tab is updated for some reason, e.g. changing the text,\nicon or badge","docsTags":[],"optional":true},{"name":"tab","type":"Tab","docs":"The tab that the component belongs to","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/tab-panel.types.ts"]},{"type":"enum","name":"ColumnAggregatorType","docs":"","docsTags":[],"members":[{"name":"Average","docs":"Calculates the average value of all numerical cells in the column","docsTags":[],"value":"\"avg\""},{"name":"Count","docs":"Counts the number of non empty cells in the column","docsTags":[],"value":"\"count\""},{"name":"Maximum","docs":"Displays the maximum value from all numerical cells in the column","docsTags":[],"value":"\"max\""},{"name":"Minimum","docs":"Displays the minimum value from all numerical cells in the column","docsTags":[],"value":"\"min\""},{"name":"Sum","docs":"Displays the sum of all numerical cells in the column","docsTags":[],"value":"\"sum\""}],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"Column","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"aggregator","type":"ColumnAggregatorType | ColumnAggregatorFunction<T>","docs":"Type of aggregator to use for the column","docsTags":[],"optional":true},{"name":"component","type":"TableComponentDefinition","docs":"Component used to render the field value","docsTags":[],"optional":true},{"name":"field","type":"keyof T","docs":"Name of the field in the data","docsTags":[],"optional":false},{"name":"formatter","type":"TableFormatter","docs":"Function to format the value before rendering","docsTags":[],"optional":true},{"name":"headerComponent","type":"TableComponentDefinition","docs":"A component used to render inside the column header","docsTags":[],"optional":true},{"name":"headerSort","type":"boolean","docs":"Defines whether end-user can sort a column","docsTags":[],"optional":true},{"name":"horizontalAlign","type":"\"left\" | \"center\" | \"right\"","docs":"Sets the horizontal text alignment for the column","docsTags":[],"optional":true},{"name":"title","type":"string","docs":"Column title to be displayed","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"ColumnAggregate","typeParams":[],"docs":"Defines aggregate values for columns","docsTags":[],"props":[{"name":"field","type":"string","docs":"The name of the `Column` field","docsTags":[],"optional":false},{"name":"value","type":"any","docs":"The aggregate value","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"ColumnSorter","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"column","type":"Column","docs":"The column being sorted","docsTags":[],"optional":false},{"name":"direction","type":"\"ASC\" | \"DESC\"","docs":"The direction to sort on","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"TableComponent","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"data","type":"T","docs":"Data for the current row of the table","docsTags":[],"optional":true},{"name":"field","type":"string","docs":"Name of the field being rendered","docsTags":[],"optional":true},{"name":"value","type":"any","docs":"Value being rendered","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"TableComponentDefinition","typeParams":[],"docs":"Definition for a component to be displayed in a cell in the table","docsTags":[{"name":"note","text":"The table will display the component as `inline-block` in order\nto give the column the correct size. If the component should have the\nfull width of the column, this might have to be overridden by setting\nthe display mode to `block`, e.g.\n\n```css\n:host(*) {\n    display: block !important;\n}\n```"}],"props":[{"name":"name","type":"string","docs":"Name of the component","docsTags":[],"optional":false},{"name":"props","type":"Record<string, any>","docs":"Properties to send to the component","docsTags":[],"optional":true}],"methods":[{"name":"propsFactory","docs":"Factory for creating properties dynamically for a custom component.\nThe properties returned from this function will be merged with the\n`props` properties when the component is created.\n\nWhen the propsFactory is used for header components there will be no data available","docsTags":[],"parameters":[{"name":"data","type":"object","docs":"the data for the current row","optional":false}],"returns":{"type":"Record<string, any>","docs":"properties for the component\n"}}],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"TableParams","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"page","type":"number","docs":"The current page being set","docsTags":[],"optional":false},{"name":"sorters","type":"ColumnSorter[]","docs":"Sorters applied to the current page","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"alias","name":"ColumnAggregatorFunction","docs":"Calculate an aggregated value for a column","docsTags":[{"name":"param","text":"the configuration for the column"},{"name":"param","text":"list of all values to be aggregated"},{"name":"param","text":"list of all objects to be aggregated"},{"name":"returns","text":"the aggregated data"}],"alias":"function","sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"alias","name":"TableFormatter","docs":"","docsTags":[],"alias":"function","sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"Link","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"href","type":"string","docs":"The url the link should point to.","docsTags":[],"optional":false},{"name":"target","type":"string","docs":"Target for the link. See\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\nfor more info.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"The text value to use for the link.\nNote that this might not be used by all components that use the\nLink interface.","docsTags":[],"optional":true},{"name":"title","type":"string","docs":"Title for the link. Read by assistive tech and shown when the\nlink is hovered. Can be used to provide additional information\nabout the link. It improves accessibility both for sighted users\nand users of assistive technologies.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/link.types.ts"]}],"schemas":[{"type":"object","$id":"limel-badge","properties":{"label":{"type":"string","title":"Label","description":"Label to display in the badge.\nNumeric labels larger than 999 will be rounded and abbreviated.\nString labels get truncated if their length is longer than\nsix characters."}}},{"type":"object","$id":"limel-banner","properties":{"icon":{"type":"string","title":"Icon","description":"Set icon for the banner"},"message":{"type":"string","title":"Message","description":"The text to show on the banner."}}},{"type":"object","$id":"limel-button","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the button.","default":false},"icon":{"type":"string","title":"Icon","description":"Set icon for the button"},"label":{"type":"string","title":"Label","description":"The text to show on the button."},"loading":{"type":"boolean","title":"Loading","description":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","default":false},"loadingFailed":{"type":"boolean","title":"Loading Failed","description":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","default":false},"outlined":{"type":"boolean","title":"Outlined","description":"Set to `true` to make the button outlined.","default":false},"primary":{"type":"boolean","title":"Primary","description":"Set to `true` to make the button primary.","default":false}}},{"type":"object","$id":"limel-button-group","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"True if the button-group should be disabled","default":false},"value":{"type":"array","title":"Value","description":"List of buttons for the group","items":{"type":"object","$ref":"#/definitions/Button"}}},"definitions":{"Button":{"type":"object","properties":{"badge":{"type":"string","title":"Badge","description":"The label displayed in the badge"},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use"},"id":{"type":"string","title":"Id","description":"ID of the button. Must be unique."},"selected":{"type":"boolean","title":"Selected","description":"True if the button should be selected. only first button will be selected."},"title":{"type":"string","title":"Title","description":"Text or label title in the button."}}}}},{"type":"object","$id":"limel-checkbox","properties":{"checked":{"type":"boolean","title":"Checked","description":"The value of the checkbox. Set to `true` to make the checkbox checked.","default":false},"disabled":{"type":"boolean","title":"Disabled","description":"Disables the checkbox when `true`. Works exactly the same as `readonly`.\nIf either property is `true`, the checkbox will be disabled.","default":false},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the checkbox"},"indeterminate":{"type":"boolean","title":"Indeterminate","description":"Enables indeterminate state. Set to `true` to signal indeterminate check.","default":false},"label":{"type":"string","title":"Label","description":"The checkbox label."},"readonly":{"type":"boolean","title":"Readonly","description":"Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\nBut shows no visual sign indicating that the checkbox is disabled\nor can ever become interactable.","default":false},"required":{"type":"boolean","title":"Required","description":"Set to `true` to indicate that the checkbox must be checked.","default":false}}},{"type":"object","$id":"limel-chip-set","properties":{"clearAllButton":{"type":"boolean","title":"Clear All Button","description":"Whether the \"Clear all\" buttons should be shown","default":true},"delimiter":{"type":"string","title":"Delimiter","description":"For chip-set of type `input`. Sets delimiters between chips."},"disabled":{"type":"boolean","title":"Disabled","description":"True if the chip set should be disabled","default":false},"emptyInputOnBlur":{"type":"boolean","title":"Empty Input On Blur","description":"Whether the input field should be emptied when the chip-set loses focus.","default":true},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the chipset.\nWhen type is `input`, the helper text is displayed below the\ninput field when it has focus.\nWhen type is not `input`, the helper text is always displayed\nif the device is touch screen; otherwise it is shown when chip-set\nis hovered or focused using keyboard navigation."},"inputType":{"type":"string","title":"Input Type","description":"For chip-sets of type `input`. Value to use for the `type` attribute on the\ninput field inside the chip-set.","default":"'text'","oneOf":[{"type":"string","const":"search","title":"search"},{"type":"string","const":"text","title":"text"}]},"label":{"type":"string","title":"Label","description":"Label for the chip-set"},"language":{"type":"string","title":"Language","description":"Defines the language for translations.\nWill translate the translatable strings on the components. For example, the clear all chips label.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"leadingIcon":{"type":"string","title":"Leading Icon","description":"For chip-sets of type `input`. When the value is null, no leading icon is used.\nLeading icon to show to the far left in the text field"},"maxItems":{"type":"number","title":"Max Items","description":"For chip-sets of type `input`. Limits the maximum number of chips.\nWhen the value is `0` or not set, no limit is applied."},"readonly":{"type":"boolean","title":"Readonly","description":"For chip-sets of type `input`, set to `true` to disable adding and\nremoving chips, but allow interaction with existing chips in the set.\nFor any other types, setting either `readonly` or `disabled` disables\nthe chip-set.","default":false},"required":{"type":"boolean","title":"Required","description":"True if the control requires a value","default":false},"searchLabel":{"type":"string","title":"Search Label","description":"Search label to display when type is `input` and component is in search mode"},"type":{"type":"string","title":"Type","description":"Type of chip set\n\n- `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n- `filter` renders a set of selectable chips where all are selectable. The `icon` property is ignored\n- `input` renders a set of chips that can be used in conjunction with an input field\n\nIf no type is set, a basic set of chips without additional functionality will be rendered","oneOf":[{"type":"string","const":"choice","title":"choice"},{"type":"string","const":"filter","title":"filter"},{"type":"string","const":"input","title":"input"}]},"value":{"type":"array","title":"Value","description":"List of chips for the set","items":{"type":"object","$ref":"#/definitions/Chip"}}},"definitions":{"Chip":{"type":"object","properties":{"badge":{"type":"number","title":"Badge","description":"The value of the badge. Only valid for `filter`."},"href":{"type":"string","title":"Href","description":"If supplied, the chip will render a link, using the supplied href."},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use. Not valid for `filter`."},"iconBackgroundColor":{"type":"string","title":"Icon Background Color","description":"Background color of the icon. Overrides `--icon-background-color`."},"iconFillColor":{"type":"string","title":"Icon Fill Color","description":"Color of the icon. Overrides `--icon-color`."},"iconTitle":{"type":"string","title":"Icon Title","description":"`title` attribute of the icon"},"id":{"type":"string","title":"Id","description":"ID of the chip. Must be unique."},"removable":{"type":"boolean","title":"Removable","description":"Whether the chip should be removable. Not valid for `choice`."},"selected":{"type":"boolean","title":"Selected","description":"Whether the chip is selected. Only valid for `choice` and `filter`."},"text":{"type":"string","title":"Text","description":"Text to display inside the chip."},"value":{"type":"object","title":"Value","description":"Value of the chip.","additionalProperties":true}}}}},{"type":"object","$id":"limel-circular-progress","properties":{"displayPercentageColors":{"type":"boolean","title":"Display Percentage Colors","description":"When set to `true`, makes the filled section showing the percentage colorful. Colors change with intervals of 10%.","default":false},"maxValue":{"type":"number","title":"Max Value","description":"The maximum value within the scale that the progress bar should visualize. Defaults to `100`.","default":null},"prefix":{"type":"string","title":"Prefix","description":"The prefix which is displayed before the `value`, must be a few characters characters long."},"size":{"type":"string","title":"Size","description":"Determines the visual size of the visualization from a preset size. This property can override the `--circular-progress-size` variable if it is specified.","oneOf":[{"type":"string","const":"large","title":"large"},{"type":"string","const":"medium","title":"medium"},{"type":"string","const":"small","title":"small"},{"type":"string","const":"x-large","title":"x-large"},{"type":"string","const":"x-small","title":"x-small"}]},"suffix":{"type":"string","title":"Suffix","description":"The suffix which is displayed after the `value`, must be one or two characters long. Defaults to `%`","default":"'%'"},"value":{"type":"number","title":"Value","description":"The value of the progress bar.","default":0}}},{"type":"object","$id":"limel-code-editor","properties":{"colorScheme":{"type":"string","title":"Color Scheme","description":"Select color scheme for the editor","default":"'auto'","oneOf":[{"type":"string","const":"auto","title":"auto"},{"type":"string","const":"dark","title":"dark"},{"type":"string","const":"light","title":"light"}]},"fold":{"type":"boolean","title":"Fold","description":"Allows the user to fold code","default":false},"language":{"type":"string","title":"Language","description":"The language of the code","oneOf":[{"type":"string","const":"javascript","title":"javascript"},{"type":"string","const":"json","title":"json"},{"type":"string","const":"typescript","title":"typescript"}]},"lineNumbers":{"type":"boolean","title":"Line Numbers","description":"Displays line numbers in the editor","default":false},"lint":{"type":"boolean","title":"Lint","description":"Enables linting of JSON content","default":false},"readonly":{"type":"boolean","title":"Readonly","description":"Disables editing of the editor content","default":false},"value":{"type":"string","title":"Value","description":"The code to be rendered","default":"''"}}},{"type":"object","$id":"limel-collapsible-section","properties":{"actions":{"type":"array","title":"Actions","description":"Actions to place to the far right inside the header","items":{"type":"object","$ref":"#/definitions/Action"}},"header":{"type":"string","title":"Header","description":"Text to display in the header of the section"},"isOpen":{"type":"boolean","title":"Is Open","description":"`true` if the section is expanded, `false` if collapsed.","default":false}},"definitions":{"Action":{"type":"object","properties":{"disabled":{"type":"boolean","title":"Disabled","description":""},"icon":{"type":"string","title":"Icon","description":""},"id":{"type":"string","title":"Id","description":""},"label":{"type":"string","title":"Label","description":""}}}}},{"type":"object","$id":"limel-color-picker","properties":{"helperText":{"type":"string","title":"Helper Text","description":"Helper text of the input field"},"label":{"type":"string","title":"Label","description":"The label of the input field"},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` if a value is readonly. This makes the component un-interactive."},"required":{"type":"boolean","title":"Required","description":"Set to `true` if a value is required"},"tooltipLabel":{"type":"string","title":"Tooltip Label","description":"Displayed as tooltips when picker is hovered."},"value":{"type":"string","title":"Value","description":"Name or code of the chosen color"}}},{"type":"object","$id":"limel-color-picker-palette","properties":{"helperText":{"type":"string","title":"Helper Text","description":"Helper text of the input field"},"label":{"type":"string","title":"Label","description":"Label of the input field"},"required":{"type":"boolean","title":"Required","description":"Set to `true` if a value is required"},"value":{"type":"string","title":"Value","description":"Color value that is manually typed by the user"}}},{"type":"object","$id":"limel-config","properties":{"config":{"type":"object","title":"Config","description":"Global configuration for Lime Elements","additionalProperties":true}}},{"type":"object","$id":"limel-date-picker","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","default":false},"format":{"type":"string","title":"Format","description":"Format to display the selected date in."},"formatter":{"type":"object","title":"Formatter","description":"Custom formatting function. Will be used for date formatting.\n\n:::note\noverrides `format` and `language`\n:::","additionalProperties":true},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the input field when it has focus"},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the date picker is\ninvalid.","default":false},"label":{"type":"string","title":"Label","description":"Text to display next to the date picker"},"language":{"type":"string","title":"Language","description":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"placeholder":{"type":"string","title":"Placeholder","description":"The placeholder text shown inside the input field, when the field is focused and empty"},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","default":false},"required":{"type":"boolean","title":"Required","description":"Set to `true` to indicate that the field is required.","default":false},"type":{"type":"string","title":"Type","description":"Type of date picker.","default":"'datetime'","oneOf":[{"type":"string","const":"date","title":"date"},{"type":"string","const":"datetime","title":"datetime"},{"type":"string","const":"month","title":"month"},{"type":"string","const":"quarter","title":"quarter"},{"type":"string","const":"time","title":"time"},{"type":"string","const":"week","title":"week"},{"type":"string","const":"year","title":"year"}]},"value":{"type":"object","title":"Value","description":"The value of the field.","additionalProperties":true}}},{"type":"object","$id":"limel-dialog","properties":{"closingActions":{"type":"object","title":"Closing Actions","description":"Defines which action triggers a close-event.","$ref":"#/definitions/ClosingActions"},"fullscreen":{"type":"boolean","title":"Fullscreen","description":"Set to `true` to make the dialog \"fullscreen\".","default":false},"heading":{"type":"object","title":"Heading","description":"The heading for the dialog, if any.","additionalProperties":true},"open":{"type":"boolean","title":"Open","description":"`true` if the dialog is open, `false` otherwise.","default":false}},"definitions":{"ClosingActions":{"type":"object","properties":{"escapeKey":{"type":"boolean","title":"Escape Key","description":""},"scrimClick":{"type":"boolean","title":"Scrim Click","description":""}}}}},{"type":"object","$id":"limel-dock","properties":{"accessibleLabel":{"type":"string","title":"Accessible Label","description":"A label used to describe the purpose of the navigation element to users\nof assistive technologies, like screen readers. Especially useful when\nthere are multiple navigation elements in the user interface.\nExample value: \"Primary navigation\""},"allowResize":{"type":"boolean","title":"Allow Resize","description":"Set to `false` if you do not want to allow end-users\nto exapnd or shrink the Dock. This will hide the\nexpand/shrink button, and the only things that defines\nthe layout will be the `expanded` property, and\nthe `mobileBreakPoint`.","default":true},"dockFooterItems":{"type":"array","title":"Dock Footer Items","description":"Items that are placed at the bottom of the dock. (Or at the end in mobile\nlayout.)","items":{"type":"object","$ref":"#/definitions/DockItem"}},"dockItems":{"type":"array","title":"Dock Items","description":"Items that are placed in the dock.","items":{"type":"object","$ref":"#/definitions/DockItem"}},"expanded":{"type":"boolean","title":"Expanded","description":"Defines the width of the component, when it loads.\n- `true`: shows both icons and labels of the Dock items.\n- `false`: only shows icons of the doc items, and displays\ntheir labels as tooltip.\n\nNote: when `useMobileLayout` is `true`, labels will always\nbe shown as tooltips. Read more below…","default":false},"mobileBreakPoint":{"type":"number","title":"Mobile Break Point","description":"Defines the breakpoint in pixles, at which the component will be rendered\nin a hoizontal layout. Default breakpoint is `700` pixels, which means\nwhen the screen size is smaller than `700px`, the component will automatically\nswitch to a horizontal layout.","default":null}},"definitions":{"DockItem":{"type":"object","properties":{"badge":{"type":"string","title":"Badge","description":"If specified, will display a notification badge on the buttons in the dock."},"dockMenu":{"type":"object","title":"Dock Menu","description":"Used to specify a custom component to render as a menu for the dock item.","additionalProperties":true},"helperLabel":{"type":"string","title":"Helper Label","description":"Additional helper text for the dock item.\nExample usage can be a keyboard shortcut to activate the dock item."},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use."},"id":{"type":"string","title":"Id","description":"A non-changing value to uniquely identify each item."},"label":{"type":"string","title":"Label","description":"Text to display for the item."},"selected":{"type":"boolean","title":"Selected","description":"Whether the dock item should indicate it is selected.\nThese dock items normally take the user to a top-level location within\nthe navigation tree; for example \"Home\", \"Search\" or \"My Account\".\nSet `selected` to `true`, when:\n- the user interface is showing the same top-level location as the dock\nitem is pointing at, or\n- the user interface is showing a page which is a sub-location of the\ntop-level location. For example, when user is at\n_My Account > Notification Settings_, the dock item of _My Account_\nshould have the `selected` state."}}}}},{"type":"object","$id":"limel-dock-button","properties":{"expanded":{"type":"boolean","title":"Expanded","description":"When the dock is expanded or collapsed, dock items\nshow labels and tooltips as suitable for the layout.","default":false},"item":{"type":"object","title":"Item","description":"Item that is placed in the dock.","$ref":"#/definitions/DockItem"},"useMobileLayout":{"type":"boolean","title":"Use Mobile Layout","description":"When dock is using mobile layout, dock items\nshow labels and tooltips as suitable for the layout.","default":false}},"definitions":{"DockItem":{"type":"object","properties":{"badge":{"type":"string","title":"Badge","description":"If specified, will display a notification badge on the buttons in the dock."},"dockMenu":{"type":"object","title":"Dock Menu","description":"Used to specify a custom component to render as a menu for the dock item.","additionalProperties":true},"helperLabel":{"type":"string","title":"Helper Label","description":"Additional helper text for the dock item.\nExample usage can be a keyboard shortcut to activate the dock item."},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use."},"id":{"type":"string","title":"Id","description":"A non-changing value to uniquely identify each item."},"label":{"type":"string","title":"Label","description":"Text to display for the item."},"selected":{"type":"boolean","title":"Selected","description":"Whether the dock item should indicate it is selected.\nThese dock items normally take the user to a top-level location within\nthe navigation tree; for example \"Home\", \"Search\" or \"My Account\".\nSet `selected` to `true`, when:\n- the user interface is showing the same top-level location as the dock\nitem is pointing at, or\n- the user interface is showing a page which is a sub-location of the\ntop-level location. For example, when user is at\n_My Account > Notification Settings_, the dock item of _My Account_\nshould have the `selected` state."}}}}},{"type":"object","$id":"limel-file","properties":{"accept":{"type":"string","title":"Accept","description":"The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)","default":"'*'"},"disabled":{"type":"boolean","title":"Disabled","description":"True if the input should be disabled","default":false},"label":{"type":"string","title":"Label","description":"The input label."},"language":{"type":"string","title":"Language","description":"Defines the localisation for translations.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to disable adding and removing files, but allow interaction\nwith any already existing file.","default":false},"required":{"type":"boolean","title":"Required","description":"Set to `true` to indicate that the field is required.","default":false},"value":{"type":"object","title":"Value","description":"The selected file.","$ref":"#/definitions/FileInfo"}},"definitions":{"FileInfo":{"type":"object","properties":{"contentType":{"type":"string","title":"Content Type","description":"Content type of file."},"extension":{"type":"string","title":"Extension","description":"Extension of file."},"fileContent":{"type":"object","title":"File Content","description":"the file content","additionalProperties":true},"filename":{"type":"string","title":"Filename","description":"Name of file."},"href":{"type":"string","title":"Href","description":"URL where the file can be downloaded. Note that this is optional. If the\nfile cannot be directly accessed via a unique url, this property should\nbe left undefined or set to `null`."},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use."},"iconBackgroundColor":{"type":"string","title":"Icon Background Color","description":"Background color of the icon. Overrides `--icon-background-color`."},"iconColor":{"type":"string","title":"Icon Color","description":"Icon color. Overrides `--icon-color`."},"id":{"type":"string","title":"Id","description":"ID of the file. Must be unique."},"lastModified":{"type":"object","title":"Last Modified","description":"Date of last modification.","additionalProperties":true},"size":{"type":"number","title":"Size","description":"Size of file."}}}}},{"type":"object","$id":"limel-flatpickr-adapter","properties":{"format":{"type":"string","title":"Format","description":"Format to display the selected date in."},"formatter":{"type":"object","title":"Formatter","description":"","additionalProperties":true},"inputElement":{"type":"object","title":"Input Element","description":"The native input element to use with flatpickr.","additionalProperties":true},"isOpen":{"type":"boolean","title":"Is Open","description":"Set to `true` if the calendar should be open."},"language":{"type":"string","title":"Language","description":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"type":{"type":"string","title":"Type","description":"Type of date picker.","default":"'datetime'","oneOf":[{"type":"string","const":"date","title":"date"},{"type":"string","const":"datetime","title":"datetime"},{"type":"string","const":"month","title":"month"},{"type":"string","const":"quarter","title":"quarter"},{"type":"string","const":"time","title":"time"},{"type":"string","const":"week","title":"week"},{"type":"string","const":"year","title":"year"}]},"value":{"type":"object","title":"Value","description":"The value of the field.","additionalProperties":true}}},{"type":"object","$id":"limel-flex-container","properties":{"align":{"type":"string","title":"Align","description":"Specify how items are aligned along the cross axis","default":"'center'","oneOf":[{"type":"string","const":"center","title":"center"},{"type":"string","const":"end","title":"end"},{"type":"string","const":"start","title":"start"},{"type":"string","const":"stretch","title":"stretch"}]},"direction":{"type":"string","title":"Direction","description":"Direction of the main axis","default":"'horizontal'","oneOf":[{"type":"string","const":"horizontal","title":"horizontal"},{"type":"string","const":"vertical","title":"vertical"}]},"justify":{"type":"string","title":"Justify","description":"Specify how items are aligned along the main axis","default":"'space-between'","oneOf":[{"type":"string","const":"center","title":"center"},{"type":"string","const":"end","title":"end"},{"type":"string","const":"space-around","title":"space-around"},{"type":"string","const":"space-between","title":"space-between"},{"type":"string","const":"space-evenly","title":"space-evenly"},{"type":"string","const":"start","title":"start"}]},"reverse":{"type":"boolean","title":"Reverse","description":"Reverse the order of the items","default":false}}},{"type":"object","$id":"limel-form","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the whole form.","default":false},"errors":{"type":"object","title":"Errors","description":"Extra errors to display in the form. Typical use case is asynchronous\nerrors generated server side.","additionalProperties":true},"propsFactory":{"type":"object","title":"Props Factory","description":"Factory for creating properties for custom form components\n\nWhen using custom components in the form some properties might have to be\nset dynamically. If this factory is set, it will be called with the\ncurrent schema for the field for each custom component in the form. The\nfactory must return an object where each key is the name of the property\nthat should be set, along with its value.","additionalProperties":true},"schema":{"type":"object","title":"Schema","description":"The schema used to render the form","additionalProperties":true},"transformErrors":{"type":"object","title":"Transform Errors","description":"Custom function to customize the default error messages","additionalProperties":true},"value":{"type":"object","title":"Value","description":"Value of the form","additionalProperties":true}}},{"type":"object","$id":"limel-grid","properties":{}},{"type":"object","$id":"limel-header","properties":{"heading":{"type":"string","title":"Heading","description":"Title to display"},"icon":{"type":"string","title":"Icon","description":"Icon to display"},"subheading":{"type":"string","title":"Subheading","description":"Subheading to display"},"supportingText":{"type":"string","title":"Supporting Text","description":"An extra string of text to display along with with the Subheading"}}},{"type":"object","$id":"limel-icon","properties":{"badge":{"type":"boolean","title":"Badge","description":"Set to `true` to give the icon a round background with some padding.\nOnly works when the `size` attribute is also set."},"name":{"type":"string","title":"Name","description":"Name of the icon"},"size":{"type":"string","title":"Size","description":"Size of the icon","oneOf":[{"type":"string","const":"large","title":"large"},{"type":"string","const":"medium","title":"medium"},{"type":"string","const":"small","title":"small"},{"type":"string","const":"x-small","title":"x-small"}]}}},{"type":"object","$id":"limel-icon-button","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the button.","default":false},"elevated":{"type":"boolean","title":"Elevated","description":"Set to `true` to give the button our standard \"elevated\" look, lifting\nit off the flat layout.","default":false},"icon":{"type":"string","title":"Icon","description":"The icon to display."},"label":{"type":"string","title":"Label","description":"The text to show to screenreaders and other assistive tech."}}},{"type":"object","$id":"limel-info-tile","properties":{"badge":{"type":"string","title":"Badge","description":"If supplied, the info tile will display a notification badge."},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` if info tile is disabled.","default":false},"icon":{"type":"string","title":"Icon","description":"Name of icon for the info tile."},"label":{"type":"string","title":"Label","description":"The text to show below the info tile. Long labels will be truncated."},"link":{"type":"object","title":"Link","description":"If supplied, the info tile will be a clickable link.\n\nSupplying a value also adds an elevated effect using a shadow,\nas well as `cursor: pointer`, which appears on hover.\nWhile we strongly recommend supplying a link whenever the\ncomponent should act as a link, if this is not possible, and\nyou need to provide interaction through a click handler,\nyou can still get the correct styling by supplying a `Link`\nobject with the `href` property set to `'#'`.","$ref":"#/definitions/Link"},"loading":{"type":"boolean","title":"Loading","description":"Set to `true` to put the component in the `loading` state.\nThis does _not_ disable the link. To do so, the\n`disabled` property should be set to `true` as well.","default":false},"prefix":{"type":"string","title":"Prefix","description":"A string of text that is visually placed before the value."},"progress":{"type":"object","title":"Progress","description":"Properties of the optional circular progress bar.\n\nDefaults:\n- `maxValue`: 100\n- `suffix`: %\n- `percentageColors`: false\n\nColors change with intervals of 10 %.","$ref":"#/definitions/InfoTileProgress"},"suffix":{"type":"string","title":"Suffix","description":"A string of text that is visually placed after the value."},"value":{"type":"string","title":"Value","description":"A piece of text or number that is the main piece of information\nwhich the component is intended to visualize."}},"definitions":{"InfoTileProgress":{"type":"object","properties":{"displayPercentageColors":{"type":"boolean","title":"Display Percentage Colors","description":"When set to `true`, the progress bar changes color depending on its current value."},"maxValue":{"type":"number","title":"Max Value","description":"The maximum value within the scale that the progress bar should visualize."},"prefix":{"type":"string","title":"Prefix","description":"The prefix which is displayed before the `progressValue`.\nKeep to a few characters at most."},"suffix":{"type":"string","title":"Suffix","description":"The suffix which is displayed after the `value`, must be one or two characters long."},"value":{"type":"number","title":"Value","description":"The value of the progress bar."}}},"Link":{"type":"object","properties":{"href":{"type":"string","title":"Href","description":"The url the link should point to."},"target":{"type":"string","title":"Target","description":"Target for the link. See\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\nfor more info."},"text":{"type":"string","title":"Text","description":"The text value to use for the link.\nNote that this might not be used by all components that use the\nLink interface."},"title":{"type":"string","title":"Title","description":"Title for the link. Read by assistive tech and shown when the\nlink is hovered. Can be used to provide additional information\nabout the link. It improves accessibility both for sighted users\nand users of assistive technologies."}}}}},{"type":"object","$id":"limel-input-field","properties":{"completions":{"type":"array","title":"Completions","description":"list of suggestions `value` can autocomplete to.","items":{"type":"string"}},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","default":false},"formatNumber":{"type":"boolean","title":"Format Number","description":"Set to `true` to format the current value of the input field only\nif the field is of type number.\nThe number format is determined by the current language of the browser.","default":true},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the input field when it has focus"},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the input field is\ninvalid.","default":false},"label":{"type":"string","title":"Label","description":"The input label."},"leadingIcon":{"type":"string","title":"Leading Icon","description":"Leading icon to show to the far left in the field."},"max":{"type":"number","title":"Max","description":"Maximum allowed value if input type is `number`."},"maxlength":{"type":"number","title":"Maxlength","description":"Maximum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`."},"min":{"type":"number","title":"Min","description":"Minimum allowed value if input type is `number`."},"minlength":{"type":"number","title":"Minlength","description":"Minimum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`."},"pattern":{"type":"string","title":"Pattern","description":"Regular expression that the current value of the input field must match.\nNo forward slashes should be specified around the pattern.\nOnly used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n`password`, or `search`."},"placeholder":{"type":"string","title":"Placeholder","description":"The placeholder text shown inside the input field, when the field is focused and empty."},"prefix":{"type":"string","title":"Prefix","description":"A short piece of text to display before the value inside the input field.\nDisplayed for all types except `textarea`."},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","default":false},"required":{"type":"boolean","title":"Required","description":"Set to `true` to indicate that the field is required.","default":false},"showLink":{"type":"boolean","title":"Show Link","description":"For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n`true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\nrespectively. The default icon can be overridden using the `trailingIcon`\nproperty.","default":false},"step":{"type":"string","title":"Step","description":"Incremental values that are valid if the field type is `number`.","default":"'any'","oneOf":[{"type":"string","const":"any","title":"any"},{"type":"string","const":"number","title":"number"}]},"suffix":{"type":"string","title":"Suffix","description":"A short piece of text to display after the value inside the input field.\nDisplayed for all types except `textarea`."},"trailingIcon":{"type":"string","title":"Trailing Icon","description":"Trailing icon to show to the far right in the field."},"type":{"type":"string","title":"Type","description":"Type of input.\n\nNote** regarding type `url`: `limel-input` uses the native validation\nbuilt into the browser for many types of input fields. The native\nvalidation for `url` is very strict, and does not allow relative urls,\nnor any other formats that are not a \"fully qualified\" url. To allow\nsuch urls, use the type `urlAsText` instead. `urlAsText` works exactly\nlike `text` in all regards, except that it enables use of the `showLink`\nproperty.","default":"'text'","oneOf":[{"type":"string","const":"date","title":"date"},{"type":"string","const":"datetime-local","title":"datetime-local"},{"type":"string","const":"email","title":"email"},{"type":"string","const":"month","title":"month"},{"type":"string","const":"number","title":"number"},{"type":"string","const":"password","title":"password"},{"type":"string","const":"search","title":"search"},{"type":"string","const":"tel","title":"tel"},{"type":"string","const":"text","title":"text"},{"type":"string","const":"textarea","title":"textarea"},{"type":"string","const":"time","title":"time"},{"type":"string","const":"url","title":"url"},{"type":"string","const":"urlAsText","title":"urlAsText"},{"type":"string","const":"week","title":"week"}]},"value":{"type":"string","title":"Value","description":"The value of the field."}}},{"type":"object","$id":"limel-linear-progress","properties":{"indeterminate":{"type":"boolean","title":"Indeterminate","description":"Puts the progress bar in an indeterminate state","default":false},"value":{"type":"number","title":"Value","description":"The value of the progress bar. Should be between `0` and `1`.","default":0}}},{"type":"object","$id":"limel-list","properties":{"badgeIcons":{"type":"boolean","title":"Badge Icons","description":"Set to `true` if the list should display larger icons with a background"},"iconSize":{"type":"string","title":"Icon Size","description":"Size of the icons in the list","default":"'small'","oneOf":[{"type":"string","const":"large","title":"large"},{"type":"string","const":"medium","title":"medium"},{"type":"string","const":"small","title":"small"},{"type":"string","const":"x-small","title":"x-small"}]},"items":{"type":"object","title":"Items","description":"List of items to display","additionalProperties":true},"maxLinesSecondaryText":{"type":"number","title":"Max Lines Secondary Text","description":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","default":3},"type":{"type":"string","title":"Type","description":"The type of the list, omit to get a regular list. Available types are:\n`selectable`: regular list with single selection.\n`radio`: radio button list with single selection.\n`checkbox`: checkbox list with multiple selection.","oneOf":[{"type":"string","const":"checkbox","title":"checkbox"},{"type":"string","const":"radio","title":"radio"},{"type":"string","const":"selectable","title":"selectable"}]}}},{"type":"object","$id":"limel-menu","properties":{"badgeIcons":{"type":"boolean","title":"Badge Icons","description":"Defines whether the menu should show badges.","default":false},"disabled":{"type":"boolean","title":"Disabled","description":"Sets the disabled state of the menu.","default":false},"gridLayout":{"type":"boolean","title":"Grid Layout","description":"Renders list items in a grid layout, rather than a vertical list","default":false},"items":{"type":"object","title":"Items","description":"A list of items and separators to show in the menu.","additionalProperties":true},"open":{"type":"boolean","title":"Open","description":"Sets the open state of the menu.","default":false},"openDirection":{"type":"string","title":"Open Direction","description":"Decides the menu's location in relation to its trigger","default":"'bottom-start'","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"bottom-end","title":"bottom-end"},{"type":"string","const":"bottom-start","title":"bottom-start"},{"type":"string","const":"left","title":"left"},{"type":"string","const":"left-end","title":"left-end"},{"type":"string","const":"left-start","title":"left-start"},{"type":"string","const":"right","title":"right"},{"type":"string","const":"right-end","title":"right-end"},{"type":"string","const":"right-start","title":"right-start"},{"type":"string","const":"top","title":"top"},{"type":"string","const":"top-end","title":"top-end"},{"type":"string","const":"top-start","title":"top-start"}]}}},{"type":"object","$id":"limel-menu-list","properties":{"badgeIcons":{"type":"boolean","title":"Badge Icons","description":"Set to `true` if the list should display larger icons with a background"},"iconSize":{"type":"string","title":"Icon Size","description":"Size of the icons in the list","default":"'small'","oneOf":[{"type":"string","const":"large","title":"large"},{"type":"string","const":"medium","title":"medium"},{"type":"string","const":"small","title":"small"},{"type":"string","const":"x-small","title":"x-small"}]},"items":{"type":"object","title":"Items","description":"List of items to display","additionalProperties":true},"maxLinesSecondaryText":{"type":"number","title":"Max Lines Secondary Text","description":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","default":3},"type":{"type":"string","title":"Type","description":"The type of the menu, omit to get a regular vertical menu.\nAvailable types are:\n`menu`: regular vertical menu.","oneOf":[{"type":"string","const":"menu","title":"menu"}]}}},{"type":"object","$id":"limel-menu-surface","properties":{"allowClicksElement":{"type":"object","title":"Allow Clicks Element","description":"Clicks in this element should not be prevented when the menu surface is open","additionalProperties":true},"open":{"type":"boolean","title":"Open","description":"True if the menu surface is open, false otherwise","default":false}}},{"type":"object","$id":"limel-picker","properties":{"actionPosition":{"type":"string","title":"Action Position","description":"Position of the custom static actions in the picker's results dropdown.\nCan be set to `'top'` or `'bottom'`.","default":"'bottom'","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"top","title":"top"}]},"actionScrollBehavior":{"type":"string","title":"Action Scroll Behavior","description":"Scroll behavior of the custom static actions, when user scrolls\nin the picker's results dropdown. Can be set to `'scroll'` which means\nthe action items will scroll together with the list, or `'sticky'` which\nretains their position at the top or bottom of the drop down while\nscrolling.","default":"'sticky'","oneOf":[{"type":"string","const":"scroll","title":"scroll"},{"type":"string","const":"sticky","title":"sticky"}]},"actions":{"type":"array","title":"Actions","description":"Static actions that can be clicked by the user.","items":{"type":"object","$ref":"#/definitions/ListItem"}},"badgeIcons":{"type":"boolean","title":"Badge Icons","description":"Whether badge icons should be used in the result list or not","default":true},"delimiter":{"type":"string","title":"Delimiter","description":"Sets delimiters between chips. Works only when `multiple` is `true`."},"disabled":{"type":"boolean","title":"Disabled","description":"True if the picker should be disabled","default":false},"emptyResultMessage":{"type":"string","title":"Empty Result Message","description":"A message to display when the search returned an empty result"},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the input field when it has focus"},"label":{"type":"string","title":"Label","description":"Text to display for the input field of the picker"},"leadingIcon":{"type":"string","title":"Leading Icon","description":"Leading icon to show to the far left in the text field"},"multiple":{"type":"boolean","title":"Multiple","description":"True if multiple values are allowed","default":false},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to disable adding and removing items,\nbut allow interaction with existing items.","default":false},"required":{"type":"boolean","title":"Required","description":"True if the control requires a value","default":false},"searchLabel":{"type":"string","title":"Search Label","description":"Search label to display in the input field when searching"},"searcher":{"type":"object","title":"Searcher","description":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `ListItem`:s.\n\nSee the docs for the type `Searcher` for type information on\nthe searcher function itself.","additionalProperties":true},"value":{"type":"object","title":"Value","description":"Currently selected value or values","additionalProperties":true}},"definitions":{"ListItem":{"type":"object","properties":{"actions":{"type":"array","title":"Actions","description":"List of actions to display as a menu at the end of the item","items":{"type":"object","additionalProperties":true}},"disabled":{"type":"boolean","title":"Disabled","description":"True if the list item should be disabled."},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use."},"iconColor":{"type":"string","title":"Icon Color","description":"Background color of the icon. Overrides `--icon-background-color`."},"primaryComponent":{"type":"object","title":"Primary Component","description":"Component used to render in the list","additionalProperties":true},"secondaryText":{"type":"string","title":"Secondary Text","description":"Additional supporting text to display in the list item."},"selected":{"type":"boolean","title":"Selected","description":"True if the list item should be selected."},"text":{"type":"string","title":"Text","description":"Text to display in the list item."},"value":{"type":"object","title":"Value","description":"Value of the list item.","additionalProperties":true}}}}},{"type":"object","$id":"limel-popover","properties":{"open":{"type":"boolean","title":"Open","description":"True if the content within the popover should be visible","default":false},"openDirection":{"type":"string","title":"Open Direction","description":"Decides the popover's location in relation to its trigger","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"bottom-end","title":"bottom-end"},{"type":"string","const":"bottom-start","title":"bottom-start"},{"type":"string","const":"left","title":"left"},{"type":"string","const":"left-end","title":"left-end"},{"type":"string","const":"left-start","title":"left-start"},{"type":"string","const":"right","title":"right"},{"type":"string","const":"right-end","title":"right-end"},{"type":"string","const":"right-start","title":"right-start"},{"type":"string","const":"top","title":"top"},{"type":"string","const":"top-end","title":"top-end"},{"type":"string","const":"top-start","title":"top-start"}]}}},{"type":"object","$id":"limel-popover-surface","properties":{"contentCollection":{"type":"object","title":"Content Collection","description":"Content to render","additionalProperties":true}}},{"type":"object","$id":"limel-portal","properties":{"containerId":{"type":"string","title":"Container Id","description":"A unique ID."},"containerStyle":{"type":"object","title":"Container Style","description":"Dynamic styling that can be applied to the container holding the content.","additionalProperties":true},"inheritParentWidth":{"type":"boolean","title":"Inherit Parent Width","description":"Used to make a dropdown have the same width as the trigger, for example\nin `limel-picker`.","default":false},"openDirection":{"type":"string","title":"Open Direction","description":"Decides which direction the portal content should open.","default":"'bottom'","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"bottom-end","title":"bottom-end"},{"type":"string","const":"bottom-start","title":"bottom-start"},{"type":"string","const":"left","title":"left"},{"type":"string","const":"left-end","title":"left-end"},{"type":"string","const":"left-start","title":"left-start"},{"type":"string","const":"right","title":"right"},{"type":"string","const":"right-end","title":"right-end"},{"type":"string","const":"right-start","title":"right-start"},{"type":"string","const":"top","title":"top"},{"type":"string","const":"top-end","title":"top-end"},{"type":"string","const":"top-start","title":"top-start"}]},"parent":{"type":"object","title":"Parent","description":"Parent element to move the content to.","additionalProperties":true},"position":{"type":"string","title":"Position","description":"Position of the content.","default":"'absolute'","oneOf":[{"type":"string","const":"absolute","title":"absolute"},{"type":"string","const":"fixed","title":"fixed"}]},"visible":{"type":"boolean","title":"Visible","description":"True if the content within the portal should be visible.\n\nIf the content is from within a dialog for instance, this can be set to\ntrue from false when the dialog opens to position the content properly.","default":false}}},{"type":"object","$id":"limel-progress-flow","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the progress flow.\nUse `disabled` to indicate that the component can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","default":false},"flowItems":{"type":"array","title":"Flow Items","description":"What flow items to render","items":{"type":"object","$ref":"#/definitions/FlowItem"}},"readonly":{"type":"boolean","title":"Readonly","description":"Disables the progress flow when `true`.\nThis does not visualize the component that much differently.\nBut since the component does not provide any feedback that users can\ninteract with the component, it makes it perfect for illustrative and\ninformative porpuses.","default":false}},"definitions":{"FlowItem":{"type":"object","properties":{"actions":{"type":"array","title":"Actions","description":"List of actions to display as a menu at the end of the item","items":{"type":"object","additionalProperties":true}},"disabled":{"type":"boolean","title":"Disabled","description":"True if the list item should be disabled."},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use."},"iconColor":{"type":"string","title":"Icon Color","description":"Fill color of the icon on the step,\nwhen it is neither selected nor passed."},"isOffProgress":{"type":"boolean","title":"Is Off Progress","description":"Determines whether a step should be a part of the flow,\nor should be an independent step visually located on the side."},"passedColor":{"type":"string","title":"Passed Color","description":"Background color of the step, when it is passed."},"primaryComponent":{"type":"object","title":"Primary Component","description":"Component used to render in the list","additionalProperties":true},"secondaryText":{"type":"string","title":"Secondary Text","description":"Additional supporting text to display in the list item."},"selected":{"type":"boolean","title":"Selected","description":"True if the list item should be selected."},"selectedColor":{"type":"string","title":"Selected Color","description":"Background color of selected step."},"text":{"type":"string","title":"Text","description":"Text to display in the list item."},"value":{"type":"object","title":"Value","description":"Value of the list item.","additionalProperties":true}}}}},{"type":"object","$id":"limel-progress-flow-item","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"True if the flow item should be disabled","default":false},"item":{"type":"object","title":"Item","description":"The flow item that should be rendered","$ref":"#/definitions/FlowItem"},"readonly":{"type":"boolean","title":"Readonly","description":"True if the flow item should be readonly","default":false}},"definitions":{"FlowItem":{"type":"object","properties":{"actions":{"type":"array","title":"Actions","description":"List of actions to display as a menu at the end of the item","items":{"type":"object","additionalProperties":true}},"disabled":{"type":"boolean","title":"Disabled","description":"True if the list item should be disabled."},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use."},"iconColor":{"type":"string","title":"Icon Color","description":"Fill color of the icon on the step,\nwhen it is neither selected nor passed."},"isOffProgress":{"type":"boolean","title":"Is Off Progress","description":"Determines whether a step should be a part of the flow,\nor should be an independent step visually located on the side."},"passedColor":{"type":"string","title":"Passed Color","description":"Background color of the step, when it is passed."},"primaryComponent":{"type":"object","title":"Primary Component","description":"Component used to render in the list","additionalProperties":true},"secondaryText":{"type":"string","title":"Secondary Text","description":"Additional supporting text to display in the list item."},"selected":{"type":"boolean","title":"Selected","description":"True if the list item should be selected."},"selectedColor":{"type":"string","title":"Selected Color","description":"Background color of selected step."},"text":{"type":"string","title":"Text","description":"Text to display in the list item."},"value":{"type":"object","title":"Value","description":"Value of the list item.","additionalProperties":true}}}}},{"type":"object","$id":"limel-select","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to make the field disabled.\nand visually shows that the `select` component is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe component may become interactable.","default":false},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the input field when it has focus."},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the select is\ninvalid."},"label":{"type":"string","title":"Label","description":"Text to display next to the select."},"multiple":{"type":"boolean","title":"Multiple","description":"Set to `true` to allow multiple values to be selected.","default":false},"options":{"type":"array","title":"Options","description":"List of options.","items":{"type":"object","$ref":"#/definitions/Option"}},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to make the field read-only.\nThis visualizes the component slightly differently.\nBut shows no visual sign indicating that the component is disabled\nor can ever become interactable.","default":false},"required":{"type":"boolean","title":"Required","description":"True if the control requires a value.","default":false},"value":{"type":"object","title":"Value","description":"Currently selected value or values.\nIf `multiple` is `true`, this must be an array. Otherwise it must be a\nsingle value.","additionalProperties":true}},"definitions":{"Option":{"type":"object","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to make this option disabled and not possible to select."},"icon":{"type":"string","title":"Icon","description":"Displays an icon beside the name of the option."},"iconColor":{"type":"string","title":"Icon Color","description":"Adds a color to the icon."},"text":{"type":"string","title":"Text","description":"The name of the option as shown to the user."},"value":{"type":"object","title":"Value","description":"The unique value of the option. Should always be the same for any given\noption, regardless of localization. The type `T` defaults to `string`,\nbut can be set to any type that extends `string` (using `Option<type>`),\nfor example an enum of specific strings.\nNote the value of this property *must* be a string!\nIf the value you wish to use is, for example, numeric, convert it to a\nstring before sending it to limel-select. Using numeric values does work\nin many desktop browsers, but breaks the select completely on some\niOS devices.","additionalProperties":true}}}}},{"type":"object","$id":"limel-shortcut","properties":{"badge":{"type":"string","title":"Badge","description":"If specified, will display a notification badge\non the shortcut."},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` if shortcut is disabled.","default":false},"icon":{"type":"string","title":"Icon","description":"Name of icon for the shortcut."},"label":{"type":"string","title":"Label","description":"The text to show below the shortcut. Long label will be truncated."},"link":{"type":"object","title":"Link","description":"If supplied, the shortcut will be a clickable link.","$ref":"#/definitions/Link"}},"definitions":{"Link":{"type":"object","properties":{"href":{"type":"string","title":"Href","description":"The url the link should point to."},"target":{"type":"string","title":"Target","description":"Target for the link. See\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\nfor more info."},"text":{"type":"string","title":"Text","description":"The text value to use for the link.\nNote that this might not be used by all components that use the\nLink interface."},"title":{"type":"string","title":"Title","description":"Title for the link. Read by assistive tech and shown when the\nlink is hovered. Can be used to provide additional information\nabout the link. It improves accessibility both for sighted users\nand users of assistive technologies."}}}}},{"type":"object","$id":"limel-slider","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Disables the slider when `true`,\nand visually shows that the field is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe slider may become interactable.","default":false},"factor":{"type":"number","title":"Factor","description":"Default value: 1.\nThe factor that the properties `value`, `valuemax`, `valuemin`, and\n`step` are multiplied by. On `change` divides the value by the factor,\nso the original format stays the same.","default":1},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the slider"},"label":{"type":"string","title":"Label","description":"Label to display next to the input"},"readonly":{"type":"boolean","title":"Readonly","description":"Disables the slider when `true`. This visualizes the slider slightly differently.\nBut shows no visual sign indicating that the slider field\nis disabled or can ever become interactable.","default":false},"step":{"type":"number","title":"Step","description":"The stepping interval to use when adjusting the value"},"unit":{"type":"string","title":"Unit","description":"Unit to display next to the value","default":"''"},"value":{"type":"number","title":"Value","description":"The value of the input"},"valuemax":{"type":"number","title":"Valuemax","description":"The maximum value allowed","default":100},"valuemin":{"type":"number","title":"Valuemin","description":"The minimum value allowed","default":0}}},{"type":"object","$id":"limel-snackbar","properties":{"actionText":{"type":"string","title":"Action Text","description":"The text to display for the action button."},"dismissible":{"type":"boolean","title":"Dismissible","description":"True if the snackbar is dismissible, false otherwise"},"language":{"type":"string","title":"Language","description":"Defines the language for translations.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"message":{"type":"string","title":"Message","description":"The text message to display."},"multiline":{"type":"boolean","title":"Multiline","description":"Whether to show the snackbar with space for multiple lines of text"},"timeout":{"type":"number","title":"Timeout","description":"The amount of time in milliseconds to show the snackbar."}}},{"type":"object","$id":"limel-spinner","properties":{"limeBranded":{"type":"boolean","title":"Lime Branded","description":"Gives the spinner the shape of Lime Technologies' logo","default":true},"size":{"type":"string","title":"Size","description":"Determines the size of the spinner.","default":"'mini'","oneOf":[{"type":"string","const":"large","title":"large"},{"type":"string","const":"medium","title":"medium"},{"type":"string","const":"mini","title":"mini"},{"type":"string","const":"small","title":"small"},{"type":"string","const":"x-small","title":"x-small"}]}}},{"type":"object","$id":"limel-split-button","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the button.","default":false},"icon":{"type":"string","title":"Icon","description":"Set icon for the button"},"items":{"type":"object","title":"Items","description":"A list of items and separators to show in the menu.","additionalProperties":true},"label":{"type":"string","title":"Label","description":"The text to show on the default action part of the button."},"primary":{"type":"boolean","title":"Primary","description":"Set to `true` to make the button primary.","default":false}}},{"type":"object","$id":"limel-switch","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Disables the switch when `true`,\nand visually shows that the switch is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe switch may become interactable.","default":false},"label":{"type":"string","title":"Label","description":"Label to display next to the switch"},"readonly":{"type":"boolean","title":"Readonly","description":"Disables the switch when `true`. This visualizes the switch slightly differently.\nBut shows no visual sign indicating that the switch is disabled\nor can ever become interactable.","default":false},"value":{"type":"boolean","title":"Value","description":"The value of the switch","default":false}}},{"type":"object","$id":"limel-tab-bar","properties":{"tabs":{"type":"array","title":"Tabs","description":"List of tabs to display","items":{"type":"object","$ref":"#/definitions/Tab"}}},"definitions":{"Tab":{"type":"object","properties":{"active":{"type":"boolean","title":"Active","description":"True if the tab should be selected."},"badge":{"type":"string","title":"Badge","description":"Shows a badge within the tab with a specified label"},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use."},"iconColor":{"type":"string","title":"Icon Color","description":"Color of the icon."},"id":{"type":"string","title":"Id","description":"Id of the tab. Must be unique."},"text":{"type":"string","title":"Text","description":"Text to display inside the tab."}}}}},{"type":"object","$id":"limel-tab-panel","properties":{"tabs":{"type":"array","title":"Tabs","description":"The tabs to display in the panel","items":{"type":"object","$ref":"#/definitions/Tab"}}},"definitions":{"Tab":{"type":"object","properties":{"active":{"type":"boolean","title":"Active","description":"True if the tab should be selected."},"badge":{"type":"string","title":"Badge","description":"Shows a badge within the tab with a specified label"},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use."},"iconColor":{"type":"string","title":"Icon Color","description":"Color of the icon."},"id":{"type":"string","title":"Id","description":"Id of the tab. Must be unique."},"text":{"type":"string","title":"Text","description":"Text to display inside the tab."}}}}},{"type":"object","$id":"limel-table","properties":{"activeRow":{"type":"object","title":"Active Row","description":"Active row in the table","additionalProperties":true},"aggregates":{"type":"array","title":"Aggregates","description":"Column aggregates to be displayed in the table","items":{"type":"object","$ref":"#/definitions/ColumnAggregate"}},"columns":{"type":"array","title":"Columns","description":"Columns used to display the data","items":{"type":"object","$ref":"#/definitions/Column"}},"data":{"type":"array","title":"Data","description":"Data to be displayed in the table","items":{"type":"object","additionalProperties":true}},"emptyMessage":{"type":"string","title":"Empty Message","description":"A message to display when the table has no data"},"layout":{"type":"string","title":"Layout","description":"Defines the layout of the table, based on how width of the columns are calculated.\n\n- `default`: makes columns as wide as their contents.\n- `stretchLastColumn`: makes columns as wide as their contents, stretch the last column to fill up the remaining table width.\n- `stretchColumns`: stretches all columns to fill the available width when possible.\n- `lowDensity`: makes columns as wide as their contents, and creates a low density and airy layout.","oneOf":[{"type":"string","const":"default","title":"default"},{"type":"string","const":"lowDensity","title":"lowDensity"},{"type":"string","const":"stretchColumns","title":"stretchColumns"},{"type":"string","const":"stretchLastColumn","title":"stretchLastColumn"}]},"loading":{"type":"boolean","title":"Loading","description":"Set to `true` to trigger loading animation","default":false},"mode":{"type":"string","title":"Mode","description":"Set to either `local` or `remote` to change how the table handles the\nloaded data. When in `local` mode, all sorting and pagination will be\ndone locally with the data given. When in `remote` mode, the consumer\nis responsible to give the table new data when a `load` event occurs","default":"'local'","oneOf":[{"type":"string","const":"local","title":"local"},{"type":"string","const":"remote","title":"remote"}]},"movableColumns":{"type":"boolean","title":"Movable Columns","description":"Set to `true` to enable reordering of the columns by dragging them"},"page":{"type":"number","title":"Page","description":"The page to show","default":null},"pageSize":{"type":"number","title":"Page Size","description":"Number of rows per page"},"selectable":{"type":"boolean","title":"Selectable","description":"Enables row selection"},"selection":{"type":"array","title":"Selection","description":"Selected data. Requires `selectable` to be true.","items":{"type":"object","additionalProperties":true}},"sorting":{"type":"array","title":"Sorting","description":"The initial sorted columns","items":{"type":"object","$ref":"#/definitions/ColumnSorter"}},"totalRows":{"type":"number","title":"Total Rows","description":"The number of total rows available for the data"}},"definitions":{"Column":{"type":"object","properties":{"aggregator":{"type":"object","title":"Aggregator","description":"Type of aggregator to use for the column","additionalProperties":true},"component":{"type":"object","title":"Component","description":"Component used to render the field value","additionalProperties":true},"field":{"type":"object","title":"Field","description":"Name of the field in the data","additionalProperties":true},"formatter":{"type":"object","title":"Formatter","description":"Function to format the value before rendering","additionalProperties":true},"headerComponent":{"type":"object","title":"Header Component","description":"A component used to render inside the column header","additionalProperties":true},"headerSort":{"type":"boolean","title":"Header Sort","description":"Defines whether end-user can sort a column"},"horizontalAlign":{"type":"string","title":"Horizontal Align","description":"Sets the horizontal text alignment for the column","oneOf":[{"type":"string","const":"left","title":"left"},{"type":"string","const":"center","title":"center"},{"type":"string","const":"right","title":"right"}]},"title":{"type":"string","title":"Title","description":"Column title to be displayed"}}},"ColumnAggregate":{"type":"object","properties":{"field":{"type":"string","title":"Field","description":"The name of the `Column` field"},"value":{"type":"object","title":"Value","description":"The aggregate value","additionalProperties":true}}},"ColumnSorter":{"type":"object","properties":{"column":{"type":"object","title":"Column","description":"The column being sorted","additionalProperties":true},"direction":{"type":"string","title":"Direction","description":"The direction to sort on","oneOf":[{"type":"string","const":"ASC","title":"ASC"},{"type":"string","const":"DESC","title":"DESC"}]}}}}},{"type":"object","$id":"limel-tooltip","properties":{"elementId":{"type":"string","title":"Element Id","description":"ID of the owner element that the tooltip should describe.\nMust be a child within the same document fragment as the tooltip element\nitself."},"helperLabel":{"type":"string","title":"Helper Label","description":"Additional helper text for the element.\nExample usage can be a keyboard shortcut to activate the function of the\nowner element."},"label":{"type":"string","title":"Label","description":"Short descriptive text of the owner element."},"maxlength":{"type":"number","title":"Maxlength","description":"The maximum amount of characters before rendering 'label' and\n'helperLabel' in two rows.","default":null}}},{"type":"object","$id":"limel-tooltip-content","properties":{"helperLabel":{"type":"string","title":"Helper Label","description":"Read more in tooltip.tsx"},"label":{"type":"string","title":"Label","description":"Read more in tooltip.tsx"},"maxlength":{"type":"number","title":"Maxlength","description":"Read more in tooltip.tsx"}}}],"index":{"documents":[{"path":"/Home/","title":"Home"},{"path":"/DesignGuidelines/","title":"Design Guidelines"},{"path":"/component/limel-badge/","title":"Badge","text":["The Badge component can be used to display a notification badge,\noptionally with a number or a text label.","Badge without a `label`\nWhen no `label` is provided, the badge will only render as a circle.\nThis is a convention which is used in many applications to attract the\nuser's attention to a certain element on the user interface; typically to\nmenus or buttons that navigate the user to another pane or screen.\n\nIn such cases, the idea is to provide the users with a \"red thread\"\nand help them find something that requires their attention, but is located\non another place in the app, and not directly visible.\n\n:::tip\nMake sure that the dot is noticeable, by providing an\neye-catching background color, as shown in this example.\n:::","Number badges\n\nNumeric labels larger than 999 will get both rounded and abbreviated.\nFor example, if the label is `1090` the badge will display `1.1K`.\nAbbreviation units used are `k` (Kilo) that stands for Thousands,\n`M` for Millions, `B` for Billions, and `T` for Trillions.\n\nWhen users hover the abbreviated badge, the complete\n`label` will be displayed in a tooltip.","String badges\n\nString labels get truncated if their visual length is longer than\nsix characters placed side by side (six `0`s to be exact).\n\nWhen users hover the truncated badge, the complete\n`label` will be displayed in a tooltip."],"props":[{"name":"label","tags":[],"text":"Label to display in the badge.\nNumeric labels larger than 999 will be rounded and abbreviated.\nString labels get truncated if their length is longer than\nsix characters.","type":"number | string"}],"events":[],"tags":["exampleComponent limel-example-badge","exampleComponent limel-example-badge-number","exampleComponent limel-example-badge-string"]},{"path":"/component/limel-banner/","title":"Banner","text":["",""],"props":[{"name":"icon","tags":[],"text":"Set icon for the banner","type":"string"},{"name":"message","tags":[],"text":"The text to show on the banner.","type":"string"}],"events":[],"tags":["exampleComponent limel-example-banner","slot buttons - Buttons to show in the banner"]},{"path":"/component/limel-button/","title":"Button","text":["","Basic Example\n\nJust a label and a click-handler.\nOpen the dev-tools console to see logged clicks.","Primary\n\nEach screen (modal, or section with action buttons)\nshould contain a single prominent button like this one,\nto emphasize the primary action.\n\n:::note\nThink twice before setting `primary={true}` on buttons.\nThe arrangement of buttons and their colors should clearly\ncommunicate their importance and primariness or secondariness.\n\nSee some examples at [our design guidelines for\nAction buttons](#/DesignGuidelines/action-buttons.md/).\n:::","Outlined\n\nBy setting `outlined={true}`, you can create a style\nof buttons which could be used to indicate an action\nwith medium emphasis.\n\n:::note\nThis style is useful to indicate the \"secondariness\" of an action.\nTherefore, only use this style, if there is another related\n`primary` button present on the same view or screen,\nalong with another normal button.\n\nAlso, give such a choice a second thought by reading\n[our guidelines for Split button](#/component/limel-split-button/).\n:::","Disabled","Icon","Loading\n\nNote that the example is also using `disabled`, because a button that is\nloading should normally also be disabled.","With click handler\n\nThe click handler in this example simulates saving some changed values in a\nform. When the button is clicked, the `loading` attribute is set to `true`.\nAfter a short while, we pretend that the saving was successful, and set\n`loading` to `false`. We also set `disabled` to `true`, because we just\nsuccessfully saved, so until the user updates our imaginary form again, there\nis nothing to save.\n\nWhen the `loading` attribute changes from `true` to `false`, the button\nautomatically displays a checkmark icon for 2 seconds. Note that our click\nhandler isn't actually involved in this.\n\nA short while after the checkmark has disappeared, we enable the button\nagain. This is just so that you can try the functionality again. Normally,\nthe button would stay disabled until the user made some changes, so there's\nsomething new to save!","With click handler, and failed feedback\n\nThis example works just like the \"With click handler\" example, except that,\nwhen the `loading` attribute changes from `true` to `false`, the button\nautomatically indicates that the previously ongoing process just failed.","Reduce Presence\n\nThis example is identical to the \"With click handler\" example, except that\nhere, the `has-reduced-presence` class has been set to `true`. This will hide\nthe button when it is disabled. However, it will also make sure that the\nbutton remains visible while the loading animation is ongoing. When the\nanimation is done and the checkmark has been shown, the button will hide.\n\nRead more in the [Design Guidelines](#/DesignGuidelines/decluttering.md/)","How to color button text and background\nWhen a button is a \"primary\" button (`primary={true}`), the color value you specify\nfor `--lime-primary-color` will apply to its background. By default, text color\nof primary buttons is white. To change their text color you must send a color\nvalue with the `--lime-on-primary-color` variable.\n\nWhen a button is not a \"primary\" button, the value of `--lime-primary-color`\nwill be applied to its text, and `--lime-on-primary-color` will have no effect.\n\nKeep in mind that `disabled` buttons don't care about your specified colors at all.","Composite\n\nA place to try different combinations of states."],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the button.","type":"boolean"},{"name":"icon","tags":[],"text":"Set icon for the button","type":"string"},{"name":"label","tags":[],"text":"The text to show on the button.","type":"string"},{"name":"loading","tags":[],"text":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","type":"boolean"},{"name":"loadingFailed","tags":[],"text":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","type":"boolean"},{"name":"outlined","tags":[],"text":"Set to `true` to make the button outlined.","type":"boolean"},{"name":"primary","tags":[],"text":"Set to `true` to make the button primary.","type":"boolean"}],"events":[],"tags":["exampleComponent limel-example-button-basic","exampleComponent limel-example-button-primary","exampleComponent limel-example-button-outlined","exampleComponent limel-example-button-disabled","exampleComponent limel-example-button-icon","exampleComponent limel-example-button-loading","exampleComponent limel-example-button-click-success","exampleComponent limel-example-button-click-fail","exampleComponent limel-example-button-reduce-presence","exampleComponent limel-example-button-colors","exampleComponent limel-example-button-composite"]},{"path":"/component/limel-button-group/","title":"Button group","text":["A button group control is a linear set of two or more buttons.\n\n## Usage\n\nButton groups are often used to display different views of the same thing. A\ncommon example of this component is when you switch between [ Map | Transit\n| Satellite ] views to look at an area on the map.\n\nIn some cases, button groups may serve as quick filters as well. For example\na list of contacts, in which the user can switch to [ All | Favorites\n| Frequently contacted ] can incorporate a button group to quickly filter out\nitems and display subsets of them.\n\n## Layout\n\nThe button groups are usually placed in top headers and action bars,\nsometimes with other elements. Since the group items will always be rendered\nin a row, you must make sure not to have too many buttons in the group.\nBecause if the container of your button group does not get enough space to\nfit in all its buttons, they will have to truncate their text and may appear\nvery cramped together. Always think about how your button group will appear\non a small screen such as phones.\n:::note\nButton can contain text or icons, but not both simultaneously!\n:::\n\nWithin the group, icon buttons will all have the same width, while each text button\ninherits its width from its content.","Icon only\n\nIf you pick well descriptive icons, this layout will usually suffice. When\nyou specify an `icon`, it will automatically be shown instead of the `title`.\n:::important\nAdding titles for buttons is compulsory. The reason is that when\nonly icons are shown, titles will appear as `aria-label` for screen readers,\nas well as `title` attribute when users hover and hold their cursors on the\nbuttons.\n:::\nThis makes it easier for them to know what the button actually does\nor what the icon tries to indicate.\n\nSo, make sure to label your icons properly and descriptively.","Text only\n\nThis layout is good when you do not have access to icons which are\ndescriptive enough.","Mixed text and icon within the same group\n\nGenerally, you should avoid mixing text and images in button group. Although\nindividual buttons can contain text or images, mixing the two in a single\ngroup can lead to an inconsistent and confusing interface.\n\nHowever, in some case your design may benefit from having only one button in\na different format.","Button group with badges\n\nBadges can be used to add further contextual information.\nFor example, if the component is used to filter a set of data\nthe badges could visualize the number of entries\nfor each filter option.\n\nThe badge can either\nhave a `number` or `string` label.\nRead more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","Composite\n\nA place to try different combinations of states."],"props":[{"name":"disabled","tags":[],"text":"True if the button-group should be disabled","type":"boolean"},{"name":"value","tags":[],"text":"List of buttons for the group","type":"Button[]"}],"events":[{"name":"change","tags":[],"text":"Dispatched when a button is selected/deselected","type":"Button"}],"tags":["exampleComponent limel-example-button-group-icons","exampleComponent limel-example-button-group","exampleComponent limel-example-button-group-mix","exampleComponent limel-example-button-group-badges","exampleComponent limel-example-button-group-composite"]},{"path":"/component/limel-checkbox/","title":"Checkbox","text":["","","With `helperText`\n\nCheckboxes can have a helper text, which is useful when providing additional information\ncan clarify functionality of the checkbox for the user.\n\nThe helper text is displayed when user hovers the checkbox, or focuses on it using keyboard\nnavigation. However, on touchscreen devices, the helper text is always displayed."],"props":[{"name":"checked","tags":[],"text":"The value of the checkbox. Set to `true` to make the checkbox checked.","type":"boolean"},{"name":"disabled","tags":[],"text":"Disables the checkbox when `true`. Works exactly the same as `readonly`.\nIf either property is `true`, the checkbox will be disabled.","type":"boolean"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the checkbox","type":"string"},{"name":"indeterminate","tags":[],"text":"Enables indeterminate state. Set to `true` to signal indeterminate check.","type":"boolean"},{"name":"label","tags":[],"text":"The checkbox label.","type":"string"},{"name":"readonly","tags":[],"text":"Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\nBut shows no visual sign indicating that the checkbox is disabled\nor can ever become interactable.","type":"boolean"},{"name":"required","tags":[],"text":"Set to `true` to indicate that the checkbox must be checked.","type":"boolean"}],"events":[{"name":"change","tags":[],"text":"Emitted when the input value is changed.","type":"boolean"}],"tags":["exampleComponent limel-example-checkbox","exampleComponent limel-example-checkbox-helper-text"]},{"path":"/component/limel-chip-set/","title":"Chip set","text":["","Basic example with no `type` set\n\nMay be useful as a read-only presentation of a collection of tags, or\nsimilar.\n\nDepending on the use case, you may also wish to consider\n[limel-button](#/component/limel-button/) or\n[limel-button-group](#/component/limel-button-group/).","Choice chip set\n\nOnly one option can be selected at once. Kind of like radio-buttons, but the\nuser can deselect the chosen option too. Good as an alternative to using a\n`select` when there are only a few options.","Filter chip set\n\nAny number of options can be selected at once, including none. As the name\nsuggests, this one is good for filtering things.","Filter chip set with badge.\nThe badge can be used to visulize the number of results using each filter.","Input chip set\n\nUseful for collections of tags or labels. Can also be used as an advanced\nsearch input, with leading icon and a delimiter between search terms.","Input chip set with `inputType` of `text`\n\nThere is a slight difference in the way browsers treat `input` field\nwith `type=\"text\"` and `type=\"search\"`. You can read more about this\ndifference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\nbut the most important difference in this case is activation of the\nautocorrection feature on most smart devices.\n\nWhen a user makes a spelling mistake while typing in an input field with\n`type=\"text\"`, the mistake will be corrected automatically, right after they\npress <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\ndo not auto correct the user's input.\n\nIf you want to use limel-chip-set in a form context, where autocorrection is\na good thing, use `text` as `inputType`. It is important to know that the\nchip-set component creates a chip from the autocorrected value, after the\nuser has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\nexisting typos! For example, for a question like \"Please type five of your\nfavorite fruits\", you would want to avoid misspellings, to collect higher\nquality data.","Input chip set with `inputType` of `search`\n\nWhen autocorrection is potentially harmful for the user experience and for\nyour intended result, use `search` as `inputType`. For instance, for a\nquestion like \"Please suggest unique names for our newly founded company\",\nyou probably don't want autocorrection, because you would expect many\nvalid suggestions to not exist in the autocorrection dictionary. Therefore,\nyou do not want the respondent's input to be regarded as a typo and to be\nchanged when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.","Chip Icon Color\n\nThe color and background color of each chip's icon can be individually\nconfigured.","Composite\n\nA place to try different combinations of states."],"props":[{"name":"clearAllButton","tags":[],"text":"Whether the \"Clear all\" buttons should be shown","type":"boolean"},{"name":"delimiter","tags":[],"text":"For chip-set of type `input`. Sets delimiters between chips.","type":"string"},{"name":"disabled","tags":[],"text":"True if the chip set should be disabled","type":"boolean"},{"name":"emptyInputOnBlur","tags":[],"text":"Whether the input field should be emptied when the chip-set loses focus.","type":"boolean"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the chipset.\nWhen type is `input`, the helper text is displayed below the\ninput field when it has focus.\nWhen type is not `input`, the helper text is always displayed\nif the device is touch screen; otherwise it is shown when chip-set\nis hovered or focused using keyboard navigation.","type":"string"},{"name":"inputType","tags":[],"text":"For chip-sets of type `input`. Value to use for the `type` attribute on the\ninput field inside the chip-set.","type":"\"search\" | \"text\""},{"name":"label","tags":[],"text":"Label for the chip-set","type":"string"},{"name":"language","tags":[],"text":"Defines the language for translations.\nWill translate the translatable strings on the components. For example, the clear all chips label.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"leadingIcon","tags":[],"text":"For chip-sets of type `input`. When the value is null, no leading icon is used.\nLeading icon to show to the far left in the text field","type":"string"},{"name":"maxItems","tags":[],"text":"For chip-sets of type `input`. Limits the maximum number of chips.\nWhen the value is `0` or not set, no limit is applied.","type":"number"},{"name":"readonly","tags":[],"text":"For chip-sets of type `input`, set to `true` to disable adding and\nremoving chips, but allow interaction with existing chips in the set.\nFor any other types, setting either `readonly` or `disabled` disables\nthe chip-set.","type":"boolean"},{"name":"required","tags":[],"text":"True if the control requires a value","type":"boolean"},{"name":"searchLabel","tags":[],"text":"Search label to display when type is `input` and component is in search mode","type":"string"},{"name":"type","tags":[],"text":"Type of chip set\n\n- `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n- `filter` renders a set of selectable chips where all are selectable. The `icon` property is ignored\n- `input` renders a set of chips that can be used in conjunction with an input field\n\nIf no type is set, a basic set of chips without additional functionality will be rendered","type":"\"choice\" | \"filter\" | \"input\""},{"name":"value","tags":[],"text":"List of chips for the set","type":"Chip<any>[]"}],"events":[{"name":"change","tags":[],"text":"Dispatched when a chip is selected/deselected","type":"Chip<any> | Chip<any>[]"},{"name":"input","tags":[],"text":"Dispatched when the input is changed for type `input`","type":"string"},{"name":"interact","tags":[],"text":"Dispatched when a chip is interacted with","type":"Chip<any>"},{"name":"startEdit","tags":[],"text":"Emitted when an input chip set has received focus and editing in the text field has started","type":"void"},{"name":"stopEdit","tags":[],"text":"Emitted when an input chip set has lost focus and editing in the text field has ended","type":"void"}],"tags":["exampleComponent limel-example-chip-set","exampleComponent limel-example-chip-set-choice","exampleComponent limel-example-chip-set-filter","exampleComponent limel-example-chip-set-filter-badge","exampleComponent limel-example-chip-set-input","exampleComponent limel-example-chip-set-input-type-text","exampleComponent limel-example-chip-set-input-type-search","exampleComponent limel-example-chip-icon-color","exampleComponent limel-example-chip-set-composite"]},{"path":"/component/limel-circular-progress/","title":"Circular progress","text":["The circular progress component can be used to visualize the curent state of\na progress in a scale; for example percentage of completion of a task.\n\nIts compact UI makes the component suitable when there is not enough screen\nspace available to visualise such information.\n\nThis component allows you to define your scale, from `0` to a desired\n`maxValue`; and also lets you chose a proper `suffix` for your scale.\n\n:::note\nThe component will round up the value when it is displayed, and only shows\none decimal digit.\nIt also abbreviates large numbers. For example 1234 will be displayed as 1.2k.\nOf course such numbers, if bigger than `maxValue` will be visualized as a\nfull progress.\n:::","","Size presets\nYou can chose a preset size for the component to render it desireably,\nusing the `size` prop.\nHowever, if these preset sizes do not suit your UI needs, do not specify them\nand instead specify the size using the `--circular-progress-size` variable,\nwhich must always be according to our\n[size rhythm](#/DesignGuidelines/size-rhythms.md/) guidelines.\n\nNote that the text size is automatically adjusted, based on the visual size\nof the component.","Using the props\nThis component is initially designed to visualize a percentage on a scale of\nzero to 100. However, you can easily visualize a progress in other scales,\nsimply by setting `maxValue`, `prefix` and `suffix`.\n\nLook at this example to see how the component displays an angle in a\n360-degrees scale, a 60-seconds scale, and a 5-stars rating.","Tweaking the style, using CSS variables\nThe component offers a few possibilities for tweaking its size and colors\nusing a few CSS variables.\n\n:::note\nIf you have tweaked component's size using size presets offered by the\n`size` prop, the css variable of `--circular-progress-size` will not have any\neffect.\n:::\n:::important\nMake sure that the track color is lighter than the fill color. Otherwise the\nUI will be very confusing for the users.\n:::","Displaying percentage colors\nAt Lime Technologies we have a convention for displaying percentage colors.\nThe colors we use to display a range change with intervals of 10.\nThe color spectrum is not modifiable, and looks like\nred → orange → yellow → green → teal.\nTo enable this feature, simply set `displayPercentageColors` to `true`.\n\nTry changing the value in the example below to see how colors change\nfor different percentages."],"props":[{"name":"displayPercentageColors","tags":[],"text":"When set to `true`, makes the filled section showing the percentage colorful. Colors change with intervals of 10%.","type":"boolean"},{"name":"maxValue","tags":[],"text":"The maximum value within the scale that the progress bar should visualize. Defaults to `100`.","type":"number"},{"name":"prefix","tags":[],"text":"The prefix which is displayed before the `value`, must be a few characters characters long.","type":"string"},{"name":"size","tags":[],"text":"Determines the visual size of the visualization from a preset size. This property can override the `--circular-progress-size` variable if it is specified.","type":"\"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\""},{"name":"suffix","tags":[],"text":"The suffix which is displayed after the `value`, must be one or two characters long. Defaults to `%`","type":"string"},{"name":"value","tags":[],"text":"The value of the progress bar.","type":"number"}],"events":[],"tags":["exampleComponent limel-example-circular-progress","exampleComponent limel-example-circular-progress-sizes","exampleComponent limel-example-circular-progress-props","exampleComponent limel-example-circular-progress-css-variables","exampleComponent limel-example-circular-progress-percentage-colors"]},{"path":"/component/limel-code-editor/","title":"Code editor","text":["Currently this component support syntax highlighting for `javascript`,\n`json` and `typescript` formats.","Editable with automatic theme\nHere you see an instance of the Code Editor component which allows editing the\npresented code.\nThis instance has an `auto` `colorScheme`, which means it reacts\nto the operating system's settings for preferred appearance (dark or light).","Readonly, with line numbers and dark theme\nHere you see a `readonly` instance of the Code Editor component. This means\nyou cannot edit the code. We also display line numbers here.\nAdditionally, this instance has a `dark` `colorScheme`, which means it does not\nrespect the operating system's settings for preferred appearance (dark or light).","Editable with JSON linting and folding\nHere you see an instance of the Code Editor component with linting and\nfolding support, which allows the user to see syntax errors in the JSON\ncode shown in the editor. Folding makes it easier to collapse larger pieces\nof code."],"props":[{"name":"colorScheme","tags":[],"text":"Select color scheme for the editor","type":"\"auto\" | \"dark\" | \"light\""},{"name":"fold","tags":[],"text":"Allows the user to fold code","type":"boolean"},{"name":"language","tags":[],"text":"The language of the code","type":"\"javascript\" | \"json\" | \"typescript\""},{"name":"lineNumbers","tags":[],"text":"Displays line numbers in the editor","type":"boolean"},{"name":"lint","tags":[],"text":"Enables linting of JSON content","type":"boolean"},{"name":"readonly","tags":[],"text":"Disables editing of the editor content","type":"boolean"},{"name":"value","tags":[],"text":"The code to be rendered","type":"string"}],"events":[{"name":"change","tags":[],"text":"Emitted when the code has changed. Will only be emitted when the code\narea has lost focus","type":"string"}],"tags":["exampleComponent limel-example-code-editor","exampleComponent limel-example-code-editor-readonly-with-line-numbers","exampleComponent limel-example-code-editor-fold-lint"]},{"path":"/component/limel-collapsible-section/","title":"Collapsible section","text":["","","Example with actions","Using the CSS properties","Opening and closing from outside the component","With a limel-slider - for testing\n:::note\nSome elements need to be redrawn if they were created\nwhile their container was hidden. The collapsible\nsection will emit a resize event after opening, to make this happen.\n:::"],"props":[{"name":"actions","tags":[],"text":"Actions to place to the far right inside the header","type":"Action[]"},{"name":"header","tags":[],"text":"Text to display in the header of the section","type":"string"},{"name":"isOpen","tags":[],"text":"`true` if the section is expanded, `false` if collapsed.","type":"boolean"}],"events":[{"name":"action","tags":[],"text":"Emitted when an action is clicked inside the header","type":"Action"},{"name":"close","tags":[],"text":"Emitted when the section is collapsed","type":"void"},{"name":"open","tags":[],"text":"Emitted when the section is expanded","type":"void"}],"tags":["slot - Content to put inside the collapsible section","exampleComponent limel-example-collapsible-section","exampleComponent limel-example-collapsible-section-actions","exampleComponent limel-example-collapsible-section-css-props","exampleComponent limel-example-collapsible-section-external-control","exampleComponent limel-example-collapsible-section-with-slider"]},{"path":"/component/limel-color-picker/","title":"Color picker","text":["This component enables you to select a swatch from out color palette, simply\nby clicking on it. You can then copy the css variable name of the chosen color\nand use it where desired.\n\nThe color picker can also show you a preview of any valid color name or color value.\n\n:::note\nMake sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n:::","","Using the component in `readonly` mode\nIt is possible to use the component to visualize a color of your choice.\nIn this case, users cannot pick any colors, but they can view what you have picked."],"props":[{"name":"helperText","tags":[],"text":"Helper text of the input field","type":"string"},{"name":"label","tags":[],"text":"The label of the input field","type":"string"},{"name":"readonly","tags":[],"text":"Set to `true` if a value is readonly. This makes the component un-interactive.","type":"boolean"},{"name":"required","tags":[],"text":"Set to `true` if a value is required","type":"boolean"},{"name":"tooltipLabel","tags":[],"text":"Displayed as tooltips when picker is hovered.","type":"string"},{"name":"value","tags":[],"text":"Name or code of the chosen color","type":"string"}],"events":[{"name":"change","tags":[],"text":"Emits chosen value to the parent component","type":"string"}],"tags":["exampleComponent limel-example-color-picker","exampleComponent limel-example-color-picker-readonly"]},{"path":"/component/limel-date-picker/","title":"Date picker","text":["","datetime","date","time","week","month","quarter","year","With defined localization","Changing the input programmatically","Composite\n\nA place to try different combinations of states.","Custom date formatter\n\nYou can provide a function to customize the date formatting."],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","type":"boolean"},{"name":"format","tags":[],"text":"Format to display the selected date in.","type":"string"},{"name":"formatter","tags":[],"text":"Custom formatting function. Will be used for date formatting.\n\n:::note\noverrides `format` and `language`\n:::","type":"(date: Date) => string"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the input field when it has focus","type":"string"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value of the date picker is\ninvalid.","type":"boolean"},{"name":"label","tags":[],"text":"Text to display next to the date picker","type":"string"},{"name":"language","tags":[],"text":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"placeholder","tags":[],"text":"The placeholder text shown inside the input field, when the field is focused and empty","type":"string"},{"name":"readonly","tags":[],"text":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","type":"boolean"},{"name":"required","tags":[],"text":"Set to `true` to indicate that the field is required.","type":"boolean"},{"name":"type","tags":[],"text":"Type of date picker.","type":"\"date\" | \"datetime\" | \"month\" | \"quarter\" | \"time\" | \"week\" | \"year\""},{"name":"value","tags":[],"text":"The value of the field.","type":"Date"}],"events":[{"name":"change","tags":[],"text":"Emitted when the date picker value is changed.","type":"Date"}],"tags":["exampleComponent limel-example-date-picker-datetime","exampleComponent limel-example-date-picker-date","exampleComponent limel-example-date-picker-time","exampleComponent limel-example-date-picker-week","exampleComponent limel-example-date-picker-month","exampleComponent limel-example-date-picker-quarter","exampleComponent limel-example-date-picker-year","exampleComponent limel-example-date-picker-formatted","exampleComponent limel-example-date-picker-programmatic-change","exampleComponent limel-example-date-picker-composite","exampleComponent limel-example-date-picker-custom-formatter"]},{"path":"/component/limel-dialog/","title":"Dialog","text":[":::note\nRegarding the `close` event: When putting other elements that emit `close`\nevents inside a dialog, those events must be caught and stopped inside the\ndialog. If not, they will bubble to the event handler listening for `close`\nevents on the dialog, which will close the dialog too.\n\nSee the example _Nested `close` events_.\n:::\n\n:::important\nAre you developing for\n[Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\nyou should use the [DialogService](https://lundalogik.github.io/lime-web-components/versions/latest/#/api/dialog-service)\nfrom Lime Web Components to open dialogs in Lime CRM.\n:::","","Nested `close` events\n\nWhen putting other elements that emit `close` events inside a dialog, those\nevents must be caught and stopped inside the dialog. If not, they will bubble\nto the event handler listening for `close` events on the dialog, which will\nclose the dialog too.\n\nThis example has an event handler for the `close` event on the dialog, and\na second event handler for the `close` event on the collapsible-section.\n\nTry it out with the _Stop the inner close-event_ switch disabled, and then\nwith the switch enabled, to see the difference.","Dialog with heading\n\nIn this example you can also see how available style properties can be used.","Dialog with form and header","Custom size","Fullscreen","Custom closing actions\n\nAction buttons in dialogs can be used to add a clear visual indication for\nthe sighted users to realize that the dialog can be closed by pressing\na button as well.\nThis may sometimes be considered an unnecessary usage of action buttons for\nsighted users. Because majority of them users know that clicking or tapping\noutside the dialog closes it.\n\nSuch buttons are usually labeled ***OK***, ***Dismiss*** or ***Close***.\n\n:::tip\nWhen to use action buttons for simple \"close\" actions?\n- In fullscreen dialogs where clicking outside to close is hard.\n- When big dialogs are opened on phones, which make tapping outside hard for users.\n- When designing with accessibility in mind, and for those users who\nuse screen readers to navigate the user interface.\n:::\n\nBut sometimes, depending on the importance of the message which is displayed,\nyou have to choose to display a close button, and disable other means of\ndismissing the dialog.\n\n:::tip\nWhen to use custom closing actions?\n- To make sure that the user really reads and understands the dialog's content.\n- To make sure that the user does not accidentally click outside and close the dialog.\n:::\n\nFor such cases, avoid generic labels like ***OK***, or ***Close*** which unconsciously\nmotivate users to dismiss the message; and instead use more purposeful labels\nsuch as ***I understand***, ***Looks good!***, ***Continue***, and similar;\nlike in the example below.","Example with three action buttons\n\nThis example shows how more than two buttons can be positioned in a dialog's\nfooter. Pay attention to how they are labeled & styled, and how you can\nenable important actions conditionally.\n\n:::note\nWhen it comes to details such as placement of action buttons, choice of\nlabels, and adding meaningful graphical details, it's important to follow\na few design conventions which are explained in\n[this guide](#/DesignGuidelines/action-buttons.md/)."],"props":[{"name":"closingActions","tags":[],"text":"Defines which action triggers a close-event.","type":"ClosingActions"},{"name":"fullscreen","tags":[],"text":"Set to `true` to make the dialog \"fullscreen\".","type":"boolean"},{"name":"heading","tags":[],"text":"The heading for the dialog, if any.","type":"DialogHeading | string"},{"name":"open","tags":[],"text":"`true` if the dialog is open, `false` otherwise.","type":"boolean"}],"events":[{"name":"close","tags":[],"text":"Emitted when the dialog is closed from inside the component.\n(*Not* emitted when the consumer sets the `open`-property to `false`.)","type":"void"},{"name":"closing","tags":[],"text":"Emitted when the dialog is in the process of being closed.","type":"void"}],"tags":["exampleComponent limel-example-dialog","exampleComponent limel-example-dialog-nested-close-events","exampleComponent limel-example-dialog-heading","exampleComponent limel-example-dialog-form","exampleComponent limel-example-dialog-size","exampleComponent limel-example-dialog-fullscreen","exampleComponent limel-example-dialog-closing-actions","exampleComponent limel-example-dialog-action-buttons","slot - Content to put inside the dialog","slot button - The dialog buttons"]},{"path":"/component/limel-dock/","title":"Dock","text":["","Basic Example\n\nThe Dock component can be used as a place for displaying the app's\nprimary navigation.\n\n:::important\nAvoid having too many items in the Dock, because it will become\nproblematic on mobile devices, when the component is rendered horizontally.\n:::\n\nIt is possible to split the dock items into two sections and place one or\nmore items at the bottom of the column. To do so, you can use `isFooterStart`\non one of the items, which will act as a separator between the two sections,\npushing itself and preceding to the bottom.\n\n:::important\nYou must provide `label`s for to improve accesibility! Without labels,\nscreen-readers cannot tell visually impared persons about the content\nof the Dock.\n:::\n\nIt is possible to add extra information about the items using `helperLabel`.\n\nWhen the component is expanded, only the `helpeLabel` is used\nin the tooltip, when items are hovered.\nWhen the component is shrunk, both `label` and `helperLabel` are displayed\ninside the tooltip.\n\nKeep in mind that on a mobile phone, the component will be displayed horizontally\nand no labels are displayed! Instead, both `label` and `helperLabel` will be used\nas a tooltip to improve accessibility for screen-reader technologies.\n\nHowever, since hovering is not possible on touch-only mobile devices, users who\nrely on their vision to navigate the app will only see your chosen icons.\nSo pick them carefully.","Displaying a custom component after Dock item is clicked\n\nIt is possible to display a custom component in a popover,\nwhen the Dock item is clicked. This enables you to design\nthe content of the menu as you wish, independently from the Dock.\n\n:::note\nPay attention to the `--popover-surface-width` variable in the\n`.SCSS` file. That defines the width the popover component, which is `auto`\nby default. But modifying it may be helpful depending on the usage.\n:::","Displaying a notification badge\n\nIt is possible to display a notification badge on each individual\nbutton in the Dock. Badges are supposed to inform the user that\nthere is something in the menu that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\n\n:::important\nThe menus are not a part of the Dock. They are individual components\nthat you develop separately. Make sure that the information\nand interactions regarding the notifications are correctly handled.\n\nFor example, when the items that require user's attention are\nseen or handled by the user after opening the menu, the badge on the\nDock button should disappear.\n:::\n\nWhen this quantity is unclear or undefined, you can simply pass an\nempty string (`badge: ''`), which will only render a circle on the button.\nThis is enough to attract user's attention.\nHowever, it is also possible to use a short string such as \"·\" or \"!\"\nfor such cases, if considered necessary.\n\n:::warning\nDo not negatively exploit this possibility and spam users' awareness.\nThe Dock is the most important and most dominant structural part of\nthe UI of your application. Therefore crowding it with too much noise\n_will_ negatively affect the user experience.\n:::","Setting a horizontal layout for mobile devices.\n\nBy default, the component has a vertical layout, placing the\nDock items in a column. However, the component will render the\nDock items in a horizontal layout when the screen width is smaller\nthan `700px`.\n\nIf you prefer the component to switch to the horizontal mobile layout\nat another breakpoint, use the `mobileBreakPoint` property and give it\na desired value in pixels (without `px`).\n\nIn this example, we have chosen a very large number (`5000`) to force\nthe component to be rendered in mobile layout here in the documentation,\nno matter how large the reader's screen size is.\n\n:::important\nTriggering the mobile layout does not automatically adjust the position\nof the component at the bottom of the screen. You should do that manually\nyourself in a proper way, depending on where the component is used;\nfor example by using CSS media queries, and setting `position: fixed`.\n:::\n\n:::note\nLabels are not displayed in horizontal layout, but they will be instead\ndisplayed as tooltips.\n:::","Basic Example expanded","Using CSS color variables for theming the Dock\n\nA few CSS variables can be used to customize the look and feel of the steps.\n\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual Dock items!\n:::\n:::important\nMake sure that:\n- text has enough contrast with its background and is readable.\n:::"],"props":[{"name":"accessibleLabel","tags":[],"text":"A label used to describe the purpose of the navigation element to users\nof assistive technologies, like screen readers. Especially useful when\nthere are multiple navigation elements in the user interface.\nExample value: \"Primary navigation\"","type":"string"},{"name":"allowResize","tags":[],"text":"Set to `false` if you do not want to allow end-users\nto exapnd or shrink the Dock. This will hide the\nexpand/shrink button, and the only things that defines\nthe layout will be the `expanded` property, and\nthe `mobileBreakPoint`.","type":"boolean"},{"name":"dockFooterItems","tags":[],"text":"Items that are placed at the bottom of the dock. (Or at the end in mobile\nlayout.)","type":"DockItem[]"},{"name":"dockItems","tags":[],"text":"Items that are placed in the dock.","type":"DockItem[]"},{"name":"expanded","tags":[],"text":"Defines the width of the component, when it loads.\n- `true`: shows both icons and labels of the Dock items.\n- `false`: only shows icons of the doc items, and displays\ntheir labels as tooltip.\n\nNote: when `useMobileLayout` is `true`, labels will always\nbe shown as tooltips. Read more below…","type":"boolean"},{"name":"mobileBreakPoint","tags":[],"text":"Defines the breakpoint in pixles, at which the component will be rendered\nin a hoizontal layout. Default breakpoint is `700` pixels, which means\nwhen the screen size is smaller than `700px`, the component will automatically\nswitch to a horizontal layout.","type":"number"}],"events":[{"name":"close","tags":[],"text":"Fired when the popover is closed.","type":"void"},{"name":"dockExpanded","tags":[],"text":"Fired when a Dock is expanded or collapsed.","type":"boolean"},{"name":"itemSelected","tags":[],"text":"Fired when a dock item has been selected from the dock.","type":"DockItem"},{"name":"menuOpen","tags":[],"text":"Fired when a dock menu is opened.","type":"DockItem"}],"tags":["exampleComponent limel-example-dock-basic","exampleComponent limel-example-dock-custom-component","exampleComponent limel-example-dock-notification","exampleComponent limel-example-dock-mobile","exampleComponent limel-example-dock-expanded","exampleComponent limel-example-dock-colors-css"]},{"path":"/component/limel-file/","title":"File","text":["This component lets end-users select a *single* file from their device\nstorage. Regardless of the user's device or operating system, this component\nopens up a file picker dialog that allows the user to choose a file.\n\n## Using correct labels\n\nThis file picker can be used in different contexts. The component's distinct\nvisual design including the upload icon hints end-users that this is not a\nnormal input field like other fields in the form for example.\n\n:::important\nyou need to use a descriptive `label` that clarifies the\nfunctionality of the file picker, and/or provides users with clear\ninstructions.\n\nDepending on the context, you may need to avoid labels such as:\n- File\n- Document\n\nand instead consider using labels like:\n- Attach a file\n- Upload a file\n- Choose a document\n- Choose a file\n\nand similar phrases...\n:::","Basic example","Custom icon and color\nThis component automatically visualizes the file type, based on the extension\nof the selected file. The visualization is done by displaying a colorful icon\nalong with the filename, for the most common file types.\n\nHowever, you can also customize the icon and its fill color & background color.","Limit accepted file types","Composite\n\nA place to try different combinations of states."],"props":[{"name":"accept","tags":[],"text":"The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)","type":"string"},{"name":"disabled","tags":[],"text":"True if the input should be disabled","type":"boolean"},{"name":"label","tags":[],"text":"The input label.","type":"string"},{"name":"language","tags":[],"text":"Defines the localisation for translations.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"readonly","tags":[],"text":"Set to `true` to disable adding and removing files, but allow interaction\nwith any already existing file.","type":"boolean"},{"name":"required","tags":[],"text":"Set to `true` to indicate that the field is required.","type":"boolean"},{"name":"value","tags":[],"text":"The selected file.","type":"FileInfo"}],"events":[{"name":"change","tags":[],"text":"Dispatched when a file is selected/deselected","type":"FileInfo"},{"name":"interact","tags":[],"text":"Dispatched when clicking on a chip","type":"number | string"}],"tags":["exampleComponent limel-example-file","exampleComponent limel-example-file-custom-icon","exampleComponent limel-example-file-accepted-types","exampleComponent limel-example-file-composite"]},{"path":"/component/limel-form/","title":"Form","text":["","Basic form with validation","Nested data","List data","Dynamic schema","Custom form component\n\nYou can specify a custom component to use for any property in your form. This\nis done under the `lime` key in the schema, following the\n[LimeSchemaOptions](#/type/LimeSchemaOptions/) specification, for example:\n\n```ts\nconst schema = {\n    type: 'object',\n    properties: {\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'my-useful-hero-picker',\n                },\n            },\n        },\n    },\n};\n```\n\nWhile you can, in principle, use any component in a form, your custom form\ncomponents should implement the [FormComponent](#/type/FormComponent/)\ninterface.","Using `propsFactory`","Layout\nBy default, each item in a limel-form will be rendered in a single row, and\neach row occupies the entire available width of the form's container.\n\nThis default layout may work fine on small screens or narrow containers,\nbut on larger screens it usually won't produce a nice layout. Thus we\nrecommend that you choose an appropriate responsive layout for your form.\n\n###### Enabling responsive layouts\n\nBy specifying `'grid'` as the layout `type` in your schema, as well as your desired\nnumber of `columns`, you can leave the job of responsively handling the form\nlayout to Lime Elements.\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 3,\n        },\n    },\n    …\n};\n```\n:::note\nValue for `columns` can only be `5`, `4`, `3`, `2`, or `1`. If you do not\nspecify a value, `limel-form` will choose `5` by default.\n:::\n\nSo if you have chosen `4` for instance, the form will do its best to fit\nfour columns in a row. But for smaller containers in which placement of four\nitems per row is not possible, the form will automatically change the layout\nand fit 3 items per row. As the container's width decreases, the number of\ncolumns will also decrease.\n\n:::tip\nYou can divide a form into sections,\nand specify a different layout for each section.\n:::\n\nIn this example, each collapsible section has its own `colSpan`.\nHowever, since the layout is responsive, make sure to change the browser\nwindow size to see how their responsive layout changes.","Stretching fields in a form\n\nSometimes, you need a field in the form to occupy several columns or the\nentire row, and stretch itself as wide as the form's width,\ndisregarding the form's layout and placement of the item in the list.\n\nThis could be nice for fields that require more space to provide better\nusability.\n\n:::tip\nFor example, a larger `textarea` is easier for the user to type in and\na `slider` that has many steps is easier to interact with when it is rendered wider.\n:::\n\nTo do so, in your schema you need to specify a `layout` for the field itself.\n`span` specifies the number of columns that the field should span.\n\nThus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\nSince we do not offer a *form layout* that has more than five columns,\nvalues higher than 5 (or higher than the maximum number of columns in the form)\nwill only force the field to be full-width, just like `all` does.\n\n```ts\nexport const schema = {\n    …\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                layout: {\n                      colSpan: 'all',\n                  },\n              },\n        },\n        …\n    },\n    …\n};\n```\n\n###### Dense layout (Auto reorder fields to avoid empty cells)\nThe order of fields and the number of columns that a field must span, can\naffect the layout of your responsive form when the container width changes.\n\nLet's say you have a form with a 4 column layout, and you specify that its\nsecond field must span 3 columns.\nIf the container's width decreases, it will force the form to render its\nlayout in 3 columns instead. Therefore, the second field has to jump\nto the next line to still be able to span 3 columns.\nThis will leave 2 empty cells in the first row, right after the first field.\n\nTo avoid these empty cells in the UI, limel-form will place the next available\nfield in this hole, provided it fits. So the hole may be filled by a single 2 column\nwide field, by two 1 column wide fields, or only partially filled by a single 1 column\nwide field. If none of the remaining fields fit, the hole will be left as it is.\n\nHowever, you can disable this functionality by setting `dense` to `false` in the\noptions for the grid layout.\n\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            dense: false,\n        },\n    },\n};\n```\n\n:::note\nSometimes, the order of fields are important for the way users perceive the form.\nIf you choose to use the default auto-reordering behavior, make sure to test your\nform's layout in different screen sizes to see whether you can mitigate unwanted\nlayout changes.\n\nSome unwanted results can be avoided by changing the order of the fields,\nso that they render appropriately on different screens, or by dividing\nthe form into more sections.\n:::\n\n###### Stretching a field vertically\nMost standard elements that can be used in forms, such as `limel-input`,\n`limel-select`, `limel-slider`, etc, have a fixed height, and therefore\nit does not really make sense to stretch them vertically, and we strongly\nrecommend you not to!\n\nBut there are some exceptions. One of them is `limel-input-field` with\n`type='textarea'`.\n\nAlso, if you create a custom component for your form—let's say a map—you\ncan use `rowSpan` to increase the height of your custom component.\n```ts\nexport const schema = {\n    type: 'object',\n    properties: {\n        comment: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                      colSpan: 3,\n                      rowSpan: 2,\n                },\n            },\n        },\n    },\n};\n```\n\n:::note\nIf you do *not* set the `rowSpan` for a component, it can stretch vertically\nwithin its row, and the row will simply expand with the component.\n\nIf you *do* set a `rowSpan`, even if you set it to `1`, the component is\nfixed to that height. What happens to any potential overflow depends on the\ncomponent.\n:::\n\n:::warning\nCustom web-components that you include in the forms should not have hard-coded\n`width` or `height` values! Otherwise they will stretch out of their cell and break\nthe UI. Make sure that such components are internally designed to be responsive,\nand that their `:host` and any potential wrapping container has the following styles:\n```scss\n:host {\n    display: block; // or another suitable property\n    width: 100%;\n    height: 100%;\n}\n:host([hidden]) {\n    display: none;\n}\n.my-component {\n    width: 100%;\n    height: 100%;\n}\n```\n:::","Form with custom error message","Form with server validation","Row layout"],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the whole form.","type":"boolean"},{"name":"errors","tags":[],"text":"Extra errors to display in the form. Typical use case is asynchronous\nerrors generated server side.","type":"{ [key: string]: ValidationError | string[]; }"},{"name":"propsFactory","tags":[],"text":"Factory for creating properties for custom form components\n\nWhen using custom components in the form some properties might have to be\nset dynamically. If this factory is set, it will be called with the\ncurrent schema for the field for each custom component in the form. The\nfactory must return an object where each key is the name of the property\nthat should be set, along with its value.","type":"(schema: Record<string, any>) => Record<string, any>"},{"name":"schema","tags":[],"text":"The schema used to render the form","type":"{ [key: string]: any; id?: string; }"},{"name":"transformErrors","tags":[],"text":"Custom function to customize the default error messages","type":"(errors: FormError[]) => FormError[]"},{"name":"value","tags":[],"text":"Value of the form","type":"object"}],"events":[{"name":"change","tags":[],"text":"Emitted when a change is made within the form","type":"object"},{"name":"validate","tags":[],"text":"Emitted when the validity of the form changes, or when\na change is made to an invalid form","type":"ValidationStatus"}],"tags":["exampleComponent limel-example-form","exampleComponent limel-example-nested-form","exampleComponent limel-example-list-form","exampleComponent limel-example-dynamic-form","exampleComponent limel-example-custom-component-form","exampleComponent limel-example-props-factory-form","exampleComponent limel-example-form-layout","exampleComponent limel-example-form-span-fields","exampleComponent limel-example-custom-error-message","exampleComponent limel-example-server-errors","exampleComponent limel-example-form-row-layout"]},{"path":"/component/limel-grid/","title":"Grid","text":["The `limel-grid` component creates a grid which can be used to control the\nlayout of other components. It uses CSS [grid-template-areas](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\nto enable easy configuration of its child-elements.","We use the `grid-area` property to give each component a unique name, and\nthen use this name to \"draw\" our grid layout.\n\nYou can name each component anything you want, like `salespipe`, or\n`infotile-active-support-tickets`, but keeping the names to a fixed number of\ncharacters makes the \"drawing\" of the grid look more like the actual grid.\nOne to three characters is probably a good number for most cases.\n\nAny \"name\" that doesn't match a named element will create empty cells. In our\ncase, we use a dot (`.`) to mark empty cells. Empty cells can be put anywhere\nin the grid, not just at the end.\n\nNote that we can add some extra spaces after the dot marking an empty cell,\nin order to align the next cell in our config-string. This can also be used\nif your elements have named of differing lengths. The extra whitespace is\nignored when the CSS is parsed.\n\nIf the name of an element does not appear in the grid-configuration, it will\nnot be displayed at all. This might be useful if you wish to show a specific\ncomponent only under certain circumstances, like if the viewport is large\nenough to accomodate it."],"props":[],"events":[],"tags":["exampleComponent limel-example-grid","slot - Grid content"]},{"path":"/component/limel-header/","title":"Header","text":["A header is the top most visual element in a component, page, card, or a view.\n\n## Usage\nA header is the first thing that clarifies a context for users.\nDue to their positions in the UI hierarchy, headers are the most\nprominent elements of a user interface; and because of that, they carry both\nvital information and fundamental controls for the area of the interface\nthey represent.\n\nFor example, when a header is placed on top of a card, it should quickly\nexplain the card to the user. When placed on top of a modal, it should easily\nclarify what the modal is about. When displayed on top of a fullscreen view,\nit should indicate where in the system users are, and what part of the app\nthey are looking at.\n\n\n## Layout\nThe vital information in a header is usually manifested in form of an icon,\nand a heading. A subheading also could be added to provide supplementary\ninformation. There is also a third place for displaying supplementary information\nor \"supporting text\", which will be rendered as a part of the subheading.\nAlong with this information, headers can also include actions, controls, or\nmenus.\n\n:::important\nSuch actions or menus must affect the entire section of the interface\nwhich the header is representing. For example, a _Delete_ button on a card\nheader must delete that entire card and its respective contents all together,\nnot for example a selected item which is visible in the content of that card.\n:::\n\n\n:::warning\nDo not user background color on icons in the headers. It is much better and\nmuch easier for the eye if your icon itself has a color.\nBackground colors behind icons make them look like \"call to action\" buttons\nand take a lot of attention from users.\n:::","How default layout of header works\nAll content of a header by default are placed on a horizontal row.\nThis will always render the headings on the left side, and the actions\non the right side.\n\nIn small containers when having the default layout, the `actions` area\nwins the battle of limited space! It means, if you have a very wide\ncomponent in the actions area, it will never shrink in size, and instead\nforces the headings to truncate.\n\n:::tip\nUsers can still hover the cursor on the truncated headings to read the full\ntext.\n:::","Colorful header\nIt's up to you to choose colors for the background, text or icon.\nWhen you change the default colors pay attention to how they look together.\nFor instance the text is readable and has enough contrast with a background color.","How Responsive layout of header works\nHowever, sometimes you may need to make the layout be responsive and split\ninto two rows, at a break point.\n\nTo activate this responsive layout, you can simply add the `has-responsive-layout`\nclass to your `limel-header` component.\n\nThis makes a few changes in the layout. Firstly, both the left side (icon and\nheadings) and right side (actions slot) will occupy 50% of the total header\nwidth each. However, the width of left and right side will never become smaller\nthan `22rem`.\n\n:::tip\nThe value of `22rem` is the default breakpoint. But you can easily change it\nby tweaking the `--header-responsive-breakpoint` variable in your component.\n:::","Narrow headers\nSometimes your UI design may require having a narrower header.\nThis will be easy to achieve by sending in the class of `is-narrow`\nto your component.\n\nThis will render the header icon smaller, and reduces the font size of\nthe `heading`.\n\n:::tip\nKeep in mind that headers are programmed to grow in height, depending\non their content. So if you have large custom components in the `actions`\nslot or use both `heading` and `subheading`, they will still force the header\nto appear tall.\n:::"],"props":[{"name":"heading","tags":[],"text":"Title to display","type":"string"},{"name":"icon","tags":[],"text":"Icon to display","type":"string"},{"name":"subheading","tags":[],"text":"Subheading to display","type":"string"},{"name":"supportingText","tags":[],"text":"An extra string of text to display along with with the Subheading","type":"string"}],"events":[],"tags":["exampleComponent limel-example-header","exampleComponent limel-example-header-colors","exampleComponent limel-example-header-responsive","exampleComponent limel-example-header-narrow","slot actions - Content (actions) to be put inside the far right surface of\nthe header","slot [no name] - DEPRECATED. The `actions` slot used to be unnamed. This\nbehavior has been deprecated, and support will be dropped in a future\nversion. Please add `slot=\"actions\"` to your elements to ensure your code\nwill continue to work with future versions of Lime Elements."]},{"path":"/component/limel-icon/","title":"Icon","text":["The recommended icon library for use with Lime Elements is the Windows 10 set\nfrom Icons8 (https://icons8.com/icons/windows). This set is included in the\nrelevant Lime products. If you are using Lime Elements in a non-Lime product,\nyou will have to supply your own icons.\n\nThe size and color of the icon is set in CSS, however there are a few\nstandard sizes defined that can be used with the `size` property.\n\n### Setup\nTo use **@lundalogik/lime-icons8**, the `/assets` folder from\n__@lundalogik/lime-icons8__ must be made available on the webserver.\nTo use a different icon set, the icons must be placed in a folder structure\nthat looks like this: `assets/icons/<name-of-icon>.svg`\n\nIf `assets` is placed in the root, no other setup is needed. The icons will\nbe fetched with a relative URL from `/assets/icons/<name-of-icon>.svg`.\n\nIf `assets` is placed in a sub-folder somewhere, the easiest way to make the\nicons available is to use the HTML `base` element:\n\n```\n<base href=\"/my/parent/path/\">\n```\n\nIf this is not enough, or if the `base` element is already in use for\nsomething else, a global icon path can be configured with the `limel-config`\nelement:\n```\n<limel-config config={{iconPath: '/my/parent/path/'}} />\n```\n\n### Lime icons\nThere are icons included in the **@lundalogik/lime-icons8** package which are\ndesigned by our designers at Lime.\nThe names of these icons start with `-lime-`, which makes them easy to\nfind using the Icon Finder tool below.\n:::note\nSome of the `-lime-` icons have multiple colors and use our own CSS variables\ninstead of HEX or RGB values to visualize their colors. Thus, you must import\nour color palette css files into your project to render the icons properly.\nRead more about our [Color System](#/DesignGuidelines/color-system.md/)\nand how to do this.\n:::\n\n### Icon Finder\n\nSearch for an icon and **click on it to copy its name to clipboard**.\n\n<limel-example-icon-finder />","","Example with background color\n:::note\nNote that `badge` is set to `true` to provide more space around the icon,\nand make sure the background color is nicely displayed.\n:::"],"props":[{"name":"badge","tags":[],"text":"Set to `true` to give the icon a round background with some padding.\nOnly works when the `size` attribute is also set.","type":"boolean"},{"name":"name","tags":[],"text":"Name of the icon","type":"string"},{"name":"size","tags":[],"text":"Size of the icon","type":"\"large\" | \"medium\" | \"small\" | \"x-small\""}],"events":[],"tags":["exampleComponent limel-example-icon","exampleComponent limel-example-icon-background"]},{"path":"/component/limel-icon-button/","title":"Icon button","text":["","Basic Example\n\nJust an icon and a click-handler.\nOpen the dev-tools console to see logged clicks.","Disabled","Elevated\n\nAn alternative button style, which helps communicate that this is a button\nwhich can be clicked.","Toggle State\n\nThis isn't really a feature of `limel-icon-button`, but since it is a common\nuse case, here is a simple way to make the icon button toggle between two\ndifferent \"states\", each with its own icon and label.","Composite\n\nA place to try different combinations of states."],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the button.","type":"boolean"},{"name":"elevated","tags":[],"text":"Set to `true` to give the button our standard \"elevated\" look, lifting\nit off the flat layout.","type":"boolean"},{"name":"icon","tags":[],"text":"The icon to display.","type":"string"},{"name":"label","tags":[],"text":"The text to show to screenreaders and other assistive tech.","type":"string"}],"events":[],"tags":["exampleComponent limel-example-icon-button-basic","exampleComponent limel-example-icon-button-disabled","exampleComponent limel-example-icon-button-elevated","exampleComponent limel-example-icon-button-toggle-state","exampleComponent limel-example-icon-button-composite"]},{"path":"/component/limel-info-tile/","title":"Info tile","text":["This component can be used on places such as a start page or a dashboard.\nIt offers features for visualizing aggregated data along with supplementary\ninformation.\n\nIf clicking on the component should navigate the user to\na new screen or web page, you need to provide a URL,\nusing the `link` property.","Basic example\n\nThis component does its best to offer a responsive layout\nthat reacts both to the length of text, and size of the container.\n\n:::note\nTo use this component properly, you need to define both\na declared `height` and a declared `width` for it. Alternatively,\nmake sure that its container enforces a width and height,\nfor instance, use it as a flex or grid child.\n:::\n\nIn this example, you can resize the component to see how it\ntries to adjust its content to the size of its container.\n\n:::tip\nTry to avoid long textual content to get\nthe best possible visualization. They can cause\nundesired overlapping of the content, depending on the size of the\ncomponent.\n:::","Displaying a notification badge\n\nThe component can display a badge, which could either be a `number` or\na `string`. Read more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","Displaying a progress bar\n\nBy defining a numeric `progressValue`, you can display\na circular progress bar to visualize more data on the component.\nThis can for instance help illustrate how much of a\nset goal has been reached, which together with the `value` will help users\nget a better overview of the provided data.\n\nWhen the circular progress is shown, that would become the primary\nillustrative element on the component,\nwhich means the icon will be rendered smaller, only as a supportive\ncontextual visual element.\n\n:::tip\nIt is possible to customize the progress bar's suffix, but it is\nset to display the percentage sign (**%**) by default.\n:::","Loading state\n\nSometimes the value needs to be calculated, updated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow an indeterminate progressbar indicating the data is being updated,\nwhile the older value is still being displayed.\n\n:::note\nNote that this does _not_ disable the link, and most probably you\ndo not need it to be disabled either.\nIf the link should be disabled while loading, the\n`disabled` property should be set to `true` as well.\n:::","How to style the Info tile\n\nThe component offers different CSS variables for styling\nthe color of the text, background, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text."],"props":[{"name":"badge","tags":[],"text":"If supplied, the info tile will display a notification badge.","type":"number | string"},{"name":"disabled","tags":[],"text":"Set to `true` if info tile is disabled.","type":"boolean"},{"name":"icon","tags":[],"text":"Name of icon for the info tile.","type":"string"},{"name":"label","tags":[],"text":"The text to show below the info tile. Long labels will be truncated.","type":"string"},{"name":"link","tags":[],"text":"If supplied, the info tile will be a clickable link.\n\nSupplying a value also adds an elevated effect using a shadow,\nas well as `cursor: pointer`, which appears on hover.\nWhile we strongly recommend supplying a link whenever the\ncomponent should act as a link, if this is not possible, and\nyou need to provide interaction through a click handler,\nyou can still get the correct styling by supplying a `Link`\nobject with the `href` property set to `'#'`.","type":"Link"},{"name":"loading","tags":[],"text":"Set to `true` to put the component in the `loading` state.\nThis does _not_ disable the link. To do so, the\n`disabled` property should be set to `true` as well.","type":"boolean"},{"name":"prefix","tags":[],"text":"A string of text that is visually placed before the value.","type":"string"},{"name":"progress","tags":[],"text":"Properties of the optional circular progress bar.\n\nDefaults:\n- `maxValue`: 100\n- `suffix`: %\n- `percentageColors`: false\n\nColors change with intervals of 10 %.","type":"InfoTileProgress"},{"name":"suffix","tags":[],"text":"A string of text that is visually placed after the value.","type":"string"},{"name":"value","tags":[],"text":"A piece of text or number that is the main piece of information\nwhich the component is intended to visualize.","type":"number | string"}],"events":[],"tags":["exampleComponent limel-example-info-tile","exampleComponent limel-example-info-tile-badge","exampleComponent limel-example-info-tile-progress","exampleComponent limel-example-info-tile-loading","exampleComponent limel-example-info-tile-styling"]},{"path":"/component/limel-input-field/","title":"Input field","text":["","Input Field of Type Text","Input Field with a placeholder\n\nThe placeholder text is displayed inside the input field,\nwhen the field is focused and empty.\n\n:::tip\nA `placeholder` text is good for providing hints and examples about the expected input.\nWhile the `helperText` is better for providing instructions.\n:::\n\nUnlike `helperText` which is constantly visible while the user is typing\ninside the field, the `placeholder` text disappears as soon as the user has\ninput anything.\n\n:::note\nMake an informed decision when using `placeholder` instead of `helperText`!\nYou may have good intentions to reduce clutter on the user interface\nand use a placeholder text, because it will disappear after user has started typing.\nHowever, if the additional tips or instructions that you are trying to provide is\ncrucial or hard to remember, it is better to display them as helper text instead.\n\nThis is because disappearing crucial information will strains users’ short-term memory.\nIn a form with many fields, users can easily forget\nwhat each field was for. Especially if a field has validations that fail\nfor example after submitting. Instructions that are not visible anymore will make it\nhard for the user to realize what the problem is or how to solve it.\n:::\n:::warning\nIf no `label` is provided, then the placeholder text will be displayed even if the\ninput field is not focused.\n\nHowever, this does not mean that you should use this\nas a hack, to create a minimalistic and clean user interface. Not providing labels\nwill cause accessibility issues for users of assistive technologies,\nand strains users’ short-term memory as explained above.\nAdditionally, users may confuse the placeholder text, as an automatically\ninputted value, and skip filling in information.\n:::","Multiple Fields","Input Field of Type Number","Input Field with Completions","Input Field with Leading Icon\n\nA leading icon can be used to visually \"decorate\" the input field. The\npurpose for adding a leading icon should be to help the user understand what\nthe field is for.\n\nIn this example, we use a map icon in addition to the \"Address\" label, to\nindicate that this field is meant for a physical address.\n\nThe example has a minimum length just to show what an invalid field looks\nlike.","Input Field with Trailing Icon & Action\n\nA trailing icon can be added to input fields along with an action\nfor that trailing icon.\n:::note\nUse trailing icons only when you intend to have an action associated with them.\nTrailing icons of input fields will get an interactive visual effect when\nhovered to hint users that they are clickable.\n\nTherefore, a purely ornamental trailing icon that has this interactive effect\nwill be confusing for users.\n:::","Input Field with Leading and Trailing Icons & Action","With `showLink=true`","Input Field with Error Icon","Input Field of Type Textarea","Suffix\nAn Input Field with a unit of measurement displayed as suffix","Prefix\nAn input Field with a currency symbol text displayed as prefix","Input Field of Type Search","Input Field with pattern","Setting focus programmatically\n\nTo set focus programmatically, call `.focus()` on the `limel-input-field`\nelement. Note that, for this to work, the `tabindex` property must be set\non the `limel-input-field`.\n\n- `tabindex=\"0\"` means that the element should be focusable in sequential\nkeyboard navigation, after any positive tabindex values and its order is\ndefined by the document's source order.\n- A _positive value_ means the element should be focusable in sequential\nkeyboard navigation, with its order defined by the value of the number.\n\nRead more on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)."],"props":[{"name":"completions","tags":[],"text":"list of suggestions `value` can autocomplete to.","type":"string[]"},{"name":"disabled","tags":[],"text":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","type":"boolean"},{"name":"formatNumber","tags":[],"text":"Set to `true` to format the current value of the input field only\nif the field is of type number.\nThe number format is determined by the current language of the browser.","type":"boolean"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the input field when it has focus","type":"string"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value of the input field is\ninvalid.","type":"boolean"},{"name":"label","tags":[],"text":"The input label.","type":"string"},{"name":"leadingIcon","tags":[],"text":"Leading icon to show to the far left in the field.","type":"string"},{"name":"max","tags":[],"text":"Maximum allowed value if input type is `number`.","type":"number"},{"name":"maxlength","tags":[],"text":"Maximum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","type":"number"},{"name":"min","tags":[],"text":"Minimum allowed value if input type is `number`.","type":"number"},{"name":"minlength","tags":[],"text":"Minimum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","type":"number"},{"name":"pattern","tags":[],"text":"Regular expression that the current value of the input field must match.\nNo forward slashes should be specified around the pattern.\nOnly used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n`password`, or `search`.","type":"string"},{"name":"placeholder","tags":[],"text":"The placeholder text shown inside the input field, when the field is focused and empty.","type":"string"},{"name":"prefix","tags":[],"text":"A short piece of text to display before the value inside the input field.\nDisplayed for all types except `textarea`.","type":"string"},{"name":"readonly","tags":[],"text":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","type":"boolean"},{"name":"required","tags":[],"text":"Set to `true` to indicate that the field is required.","type":"boolean"},{"name":"showLink","tags":[],"text":"For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n`true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\nrespectively. The default icon can be overridden using the `trailingIcon`\nproperty.","type":"boolean"},{"name":"step","tags":[],"text":"Incremental values that are valid if the field type is `number`.","type":"\"any\" | number"},{"name":"suffix","tags":[],"text":"A short piece of text to display after the value inside the input field.\nDisplayed for all types except `textarea`.","type":"string"},{"name":"trailingIcon","tags":[],"text":"Trailing icon to show to the far right in the field.","type":"string"},{"name":"type","tags":[],"text":"Type of input.\n\nNote** regarding type `url`: `limel-input` uses the native validation\nbuilt into the browser for many types of input fields. The native\nvalidation for `url` is very strict, and does not allow relative urls,\nnor any other formats that are not a \"fully qualified\" url. To allow\nsuch urls, use the type `urlAsText` instead. `urlAsText` works exactly\nlike `text` in all regards, except that it enables use of the `showLink`\nproperty.","type":"\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"urlAsText\" | \"week\""},{"name":"value","tags":[],"text":"The value of the field.","type":"string"}],"events":[{"name":"action","tags":[],"text":"Emitted when `trailingIcon` or `leadingIcon` is set\nand the icon is interacted with.","type":"void"},{"name":"change","tags":[],"text":"Emitted when the input value is changed.","type":"string"}],"tags":["exampleComponent limel-example-input-field-text","exampleComponent limel-example-input-field-placeholder","exampleComponent limel-example-input-field-text-multiple","exampleComponent limel-example-input-field-number","exampleComponent limel-example-input-field-autocomplete","exampleComponent limel-example-input-field-icon-leading","exampleComponent limel-example-input-field-icon-trailing","exampleComponent limel-example-input-field-icon-both","exampleComponent limel-example-input-field-showlink","exampleComponent limel-example-input-field-error-icon","exampleComponent limel-example-input-field-textarea","exampleComponent limel-example-input-field-suffix","exampleComponent limel-example-input-field-prefix","exampleComponent limel-example-input-field-search","exampleComponent limel-example-input-field-pattern","exampleComponent limel-example-input-field-focus"]},{"path":"/component/limel-linear-progress/","title":"Linear progress","text":["","","Setting the color","Indeterminate progress bar"],"props":[{"name":"indeterminate","tags":[],"text":"Puts the progress bar in an indeterminate state","type":"boolean"},{"name":"value","tags":[],"text":"The value of the progress bar. Should be between `0` and `1`.","type":"number"}],"events":[],"tags":["exampleComponent limel-example-linear-progress","exampleComponent limel-example-linear-progress-color","exampleComponent limel-example-linear-progress-indeterminate"]},{"path":"/component/limel-list/","title":"List","text":["","Basic list with separator","List with secondary text","List with selectable items","List with icons","List with badge icons","List with checkboxes","List with checkboxes and icons","List with radio buttons","List with radio buttons and icons","List with action menu","List with custom styles\n\nAdding the `has-striped-rows` class to the list will make the items more\ndistinct by adding different background colors to even and odd rows.\n\nAlso, by taking advantage of the `has-interactive-items`, hovering on a list\nitem which is not `disabled` will display an elevated visual effect, giving\nit more affordance and a solid feeling of interactivity.\n\n| Class name              | Description                                                                                     |\n| ----------------------- | ----------------------------------------------------------------------------------------------- |\n| `has-striped-rows`      | Adds distinct styling by which every other row (list item) gets a darker background.            |\n| `has-interactive-items` | Adds more affordance by applying an elevated visual effect on list item, when they are hovered. |\n\n:::note\nto get both effects, you need to apply both of these classes.\n:::","Multi-line versus single-line layout\nBy default, list items will always truncate the `text` line, which is displayed\neither alone, or as a primary heading (when there are both `text` and `secondaryText`)\navailable. This means users will only see one line of text which is as wides as\nthe list item, and no more. Thus, it is a good idea not to add long strings of\ntext in the heading, as on mobile phones or small containers, they will be\nchopped off and truncated.\n\nHowever, the `secondaryText` which appears as a sub-heading is not truncated\nthat quickly. By default, lists will display 3 lines of text, and then truncate\nthe rest. Nevertheless, you can increase or decrease this number by specifying\n`maxLinesSecondaryText`.\n:::note\nDo not use `0`, negative numbers, decimal numbers, or very large numbers.\n:::","List with grid layout\nTo display list items in a grid layout instead of a vertical column,\nsimply add `has-grid-layout` class to\nthe component.\n\nThis layout can be customized, using a few CSS variables.\n:::warning\n- This layout should not be used with lists that have checkboxes or radio buttons.\n- Also, it is recommended to avoid using secondary text with this layout.","List with a primary component"],"props":[{"name":"badgeIcons","tags":[],"text":"Set to `true` if the list should display larger icons with a background","type":"boolean"},{"name":"iconSize","tags":[],"text":"Size of the icons in the list","type":"\"large\" | \"medium\" | \"small\" | \"x-small\""},{"name":"items","tags":[],"text":"List of items to display","type":"(ListSeparator | ListItem<any>)[]"},{"name":"maxLinesSecondaryText","tags":[],"text":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","type":"number"},{"name":"type","tags":[],"text":"The type of the list, omit to get a regular list. Available types are:\n`selectable`: regular list with single selection.\n`radio`: radio button list with single selection.\n`checkbox`: checkbox list with multiple selection.","type":"\"checkbox\" | \"radio\" | \"selectable\""}],"events":[{"name":"change","tags":[],"text":"Fired when a new value has been selected from the list. Only fired if selectable is set to true","type":"ListItem<any> | ListItem<any>[]"},{"name":"select","tags":[],"text":"Fired when an action has been selected from the action menu of a list item","type":"ListItem<any> | ListItem<any>[]"}],"tags":["exampleComponent limel-example-list","exampleComponent limel-example-list-secondary","exampleComponent limel-example-list-selectable","exampleComponent limel-example-list-icons","exampleComponent limel-example-list-badge-icons","exampleComponent limel-example-list-checkbox","exampleComponent limel-example-list-checkbox-icons","exampleComponent limel-example-list-radio-button","exampleComponent limel-example-list-radio-button-icons","exampleComponent limel-example-list-action","exampleComponent limel-example-list-striped","exampleComponent limel-example-list-badge-icons-with-multiple-lines","exampleComponent limel-example-list-grid","exampleComponent limel-example-list-primary-component"]},{"path":"/component/limel-menu/","title":"Menu","text":["","Basic example\n\nWith a simple `onSelect` handler.","Disabled\n\nNote that you don't need to disable the trigger button separately, as the\ncomponent takes care of this for you.","openDirection\n\nThe value of the `openDirection` property defines how the menu content\nis aligned with its trigger element, and in which direction it opens.","With icons","With badge icons","With grid layout\nTo render items of a menu in a grid layout instead of a vertical list,\nsimply setting the `gridLayout` property to `true`.\n\n:::note\nMenus with the grid layout has a responsive width by default,\nwhich will not grow wider than a certain size. However, if the default size is not\nwide enough for your use case, you can try setting another responsive width, using\nthe `--menu-surface-width` variable.\n\nTo achieve a responsive width, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(100vw, 40rem);` will output\n`width: min(100wv, 40rem);` which will tell the browser to render the menu\ncontent in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\nis larger than `40rem`.\n:::\n\n\nTo tweak the grid layout, a few other variables are available:\n- `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n- `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n- `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.","Menu with supporting hotkeys","With `secondaryText`\n\nMenu items can display secondary text as well. By default, the secondary text\nwill be displayed in two lines, and then get truncated.\n\n:::important\nKeep in mind that a menu's drop-down surface will stretch as much as its default\nmaximum width values allow. However, if this default maximum width does not suit\nyour use case, you can override it using the `--menu-surface-width` variable.\n\nBut do not forget that menus should still behave responsively, thus assigning a fixed value\nshould be avoided. To make the width responsive, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(90vw, 40rem);` will output\n`width: min(90wv, 40rem);` which will tell the browser to render the menu\ncontent in a grid that's allowed to take up 90% of the viewport's width (`90vw`)\nup to a maximum of `40rem`.\n:::","With notification\n\nIt is possible to display a notification badge on each individual\nlist item inside the menu's dropdown.\n\nThese notification badges are supposed to inform the user that\nthere is something in the menu item that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\nHowever, if a number is not meaningful, it is possible to send an\nempty string (`badge: ''`), which will display a circle on the\nlist item.\n\nSince list items in the menu are hidden away, users would not\nrealize that there is something inside the menu which requires their\nattention. Which is why the trigger automatically displays a\nnotification badge on its top-right corner,\nwhen the menu contains badges.\n\nBy default, the badge is red and its text is white.\nThis is to attract users' attention. However, this is possible to override using\n[provided style variables](/#/component/limel-menu/styles/).\n\n:::warning\n- Do not negatively exploit this possibility and spam users' attention.\nCrowding the UI with too much noise _will_ negatively affect the user experience.\n- Notification badges *must* be cleared as soon as the list item is clicked by the user!\n:::","Composite\n\nA place to try different combinations of states. This example has a slightly\nmore advanced `onSelect` handler, which disables the last selected value."],"props":[{"name":"badgeIcons","tags":[],"text":"Defines whether the menu should show badges.","type":"boolean"},{"name":"disabled","tags":[],"text":"Sets the disabled state of the menu.","type":"boolean"},{"name":"gridLayout","tags":[],"text":"Renders list items in a grid layout, rather than a vertical list","type":"boolean"},{"name":"items","tags":[],"text":"A list of items and separators to show in the menu.","type":"(MenuItem<any> | ListSeparator)[]"},{"name":"open","tags":[],"text":"Sets the open state of the menu.","type":"boolean"},{"name":"openDirection","tags":[],"text":"Decides the menu's location in relation to its trigger","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\""}],"events":[{"name":"cancel","tags":[],"text":"Is emitted when the menu is cancelled.","type":"void"},{"name":"select","tags":[],"text":"Is emitted when a menu item is selected.","type":"MenuItem<any> | MenuItem<any>[]"}],"tags":["slot trigger - Element to use as a trigger for the menu.","exampleComponent limel-example-menu-basic","exampleComponent limel-example-menu-disabled","exampleComponent limel-example-menu-open-direction","exampleComponent limel-example-menu-icons","exampleComponent limel-example-menu-badge-icons","exampleComponent limel-example-menu-grid","exampleComponent limel-example-menu-hotkeys","exampleComponent limel-example-menu-secondary-text","exampleComponent limel-example-menu-notification","exampleComponent limel-example-menu-composite"]},{"path":"/component/limel-picker/","title":"Picker","text":["","Single value can be picked.\n\n- \"Search\" is done locally in the frontend.","Multiple values can be picked.\n\n- \"Search\" is done locally in the frontend.\n- Already picked items are removed from the available options.","With icons","With no suggestions and a message for empty search results\n\n:::important\nThis example simulates that searching is done on the server. Because these\nexamples do not _actually_ send requests to the server, we simulate a small\ndelay, using `setTimeout`. **Please do NOT copy that to production code!**\nSee the other examples for code that does not include this artificial delay.\n:::","With a \"search\" leading icon","With static actions\n\nStatic items can be added to the picker to enable triggering custom actions\ndirectly from the results dropdown list.\n\n:::tip\nA typical use case of such actions is scenarios in which the picker's search\nresults or suggestions list does not include what the user wants to pick. By\noffering custom actions right in the list, we can enable users to add missing\nitems.\n:::","Composite\n\nA place to try different combinations of states."],"props":[{"name":"actionPosition","tags":[],"text":"Position of the custom static actions in the picker's results dropdown.\nCan be set to `'top'` or `'bottom'`.","type":"\"bottom\" | \"top\""},{"name":"actionScrollBehavior","tags":[],"text":"Scroll behavior of the custom static actions, when user scrolls\nin the picker's results dropdown. Can be set to `'scroll'` which means\nthe action items will scroll together with the list, or `'sticky'` which\nretains their position at the top or bottom of the drop down while\nscrolling.","type":"\"scroll\" | \"sticky\""},{"name":"actions","tags":[],"text":"Static actions that can be clicked by the user.","type":"ListItem<Action>[]"},{"name":"badgeIcons","tags":[],"text":"Whether badge icons should be used in the result list or not","type":"boolean"},{"name":"delimiter","tags":[],"text":"Sets delimiters between chips. Works only when `multiple` is `true`.","type":"string"},{"name":"disabled","tags":[],"text":"True if the picker should be disabled","type":"boolean"},{"name":"emptyResultMessage","tags":[],"text":"A message to display when the search returned an empty result","type":"string"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the input field when it has focus","type":"string"},{"name":"label","tags":[],"text":"Text to display for the input field of the picker","type":"string"},{"name":"leadingIcon","tags":[],"text":"Leading icon to show to the far left in the text field","type":"string"},{"name":"multiple","tags":[],"text":"True if multiple values are allowed","type":"boolean"},{"name":"readonly","tags":[],"text":"Set to `true` to disable adding and removing items,\nbut allow interaction with existing items.","type":"boolean"},{"name":"required","tags":[],"text":"True if the control requires a value","type":"boolean"},{"name":"searchLabel","tags":[],"text":"Search label to display in the input field when searching","type":"string"},{"name":"searcher","tags":[],"text":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `ListItem`:s.\n\nSee the docs for the type `Searcher` for type information on\nthe searcher function itself.","type":"(query: string) => Promise<ListItem<any>[]>"},{"name":"value","tags":[],"text":"Currently selected value or values","type":"ListItem<string | number> | ListItem<string | number>[]"}],"events":[{"name":"action","tags":[],"text":"Emitted when the user selects an action.","type":"Action"},{"name":"change","tags":[],"text":"Fired when a new value has been selected from the picker","type":"ListItem<string | number> | ListItem<string | number>[]"},{"name":"interact","tags":[],"text":"Fired when clicking on a selected value","type":"ListItem<string | number>"}],"tags":["exampleComponent limel-example-picker-single","exampleComponent limel-example-picker-multiple","exampleComponent limel-example-picker-icons","exampleComponent limel-example-picker-empty-suggestions","exampleComponent limel-example-picker-leading-icon","exampleComponent limel-example-picker-static-actions","exampleComponent limel-example-picker-composite"]},{"path":"/component/limel-popover/","title":"Popover","text":["A popover is an impermanent layer that is displayed on top of other content\nwhen user taps an element that triggers the popover. This element can be\npractically anything, a button, piece of text, and icon, etc.\n\nPopovers are nonmodal, thus they don't have a semi-transparent backdrop layer\nthat darkens the content below them. Also for the same reason, they can be\ndismissed by tapping or clicking another part of the screen, but not by a\nclicking a button or link on the popover itself.\n\n:::warning\nThe component is emitting a close event when you click outside its container\nor press the <kbd>Esc</kbd> key. However, it’s up to you as consumer to react\nproperly on this event and hide the component (preferably by setting the\nproperty `open` to `false`).\n:::\n\n## Usage\nUse a popover to show **options** or **information** related to the trigger\nonscreen. A typical use case for popovers is a tooltip, in which you show\nhelp text or contextual information to users.\n\nPopovers are most appropriate on larger screens but can be used on smaller\nscreens too, as long as their content is responsive and takes into account\nthe context they are displayed on.\n\nWhen a popover is displayed, interactions with other controls are blocked,\nuntil user dismisses the popover.\n\n\n## Layout\nPopovers has only one slot in which you can import a custom web-component.\n\n:::note\nYou must make sure that web-components that you import into the slot has\na `width: 100%;` style so that it can horizontally stretch across the popover.\n\nHowever, `width` of the popover can be controlled by specifying a CSS variable\nof `--popover-surface-width`. If you don't specify any width, the popover\nwill grow as wide as its content.\n:::\n\n:::important\nDo not make a popover too big. They should never take over the entire screen.\nIf your content is that big, you should probably be using a Modal instead.\n:::",""],"props":[{"name":"open","tags":[],"text":"True if the content within the popover should be visible","type":"boolean"},{"name":"openDirection","tags":[],"text":"Decides the popover's location in relation to its trigger","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\""}],"events":[{"name":"close","tags":[],"text":"Emits an event when the component is closing","type":"void"}],"tags":["slot - Content to put inside the surface","exampleComponent limel-example-popover"]},{"path":"/component/limel-progress-flow/","title":"Progress flow","text":["","Basic Example\n\nProgress flow can visualize linear process, consisting of distinct steps.\nSometimes, this is a great alternative to use instead of `limel-select`.\nFor instance, when there are too few options available to choose from, and\nthe options have an incremental order.\n\nEach step can optionally get an icon, to help users understand its meaning\nfaster, and recognize it quicker next time.","Example with secondary text\n\nA `secondaryText` can be used to add further information to steps.\nThis could be for instance a timestamp of when a step was activated by the user\nor an explainatory text.","Disabled steps\n\nWhile the entire component can be `disabled`,\neach step can also be `disabled` individually.\nThis enables you to ask users to provide required data to be able to continue.","Using colors\n\nBy default, each step appears with a light grey background, and when\nselected, it gets the defined `--lime-primary-color` as background. Also,\npassed steps will get the same background color as selected steps by default.\n\nHowever, both of these colors can be customized by specifying color values\nfor `selectedColor` and `passedColor`.\n\nAny icons will get the same color as the text for that step, but the color of\nicons for steps which are neither selected nor passed can be specified using\nthe `iconColor` property.","Customizing colors further, using CSS\n\nA few CSS variables can be used to customize the look and feel of the steps.\nBut keep in mind that it is not possible to target steps individually and\nchange their colors, using these CSS variables.\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual steps!\n:::\n:::note\nMake sure that:\n- text has enough contrast with its background and is readable.\n- the `--progress-flow-step-divider-color` has the same color as the component's\ncontainer.\n:::","Example with off-progress steps\n\nNaturally, the Progress Flow component is used to visualize a continuous linear\nprocess. But sometimes such processes can be abrupted, despite the level of progress.\n\nAbruptions can be excluded and displayed separately (not as a part of the flow)\nusing the `isOffProgress` property.","Compact layout\n\nFor cases where this component needs to take as little space as possible,\nwe offer an alternative layout. All you need to do is addin the `is-narrow`\nclass to the component."],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the progress flow.\nUse `disabled` to indicate that the component can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","type":"boolean"},{"name":"flowItems","tags":[],"text":"What flow items to render","type":"FlowItem[]"},{"name":"readonly","tags":[],"text":"Disables the progress flow when `true`.\nThis does not visualize the component that much differently.\nBut since the component does not provide any feedback that users can\ninteract with the component, it makes it perfect for illustrative and\ninformative porpuses.","type":"boolean"}],"events":[{"name":"change","tags":[],"text":"Fired when a new value has been selected from the progress flow","type":"FlowItem"}],"tags":["exampleComponent limel-example-progress-flow-basic","exampleComponent limel-example-progress-flow-secondary-text","exampleComponent limel-example-progress-flow-disabled-step","exampleComponent limel-example-progress-flow-colors","exampleComponent limel-example-progress-flow-colors-css","exampleComponent limel-example-progress-flow-off-progress-steps","exampleComponent limel-example-progress-flow-narrow"]},{"path":"/component/limel-select/","title":"Select","text":["","","Select with icons for options","Select multiple values","With Empty Option\n\nAdding an empty option makes it possible for the user to \"unset\"\nthe value. Try selecting a value below, and then selecting the empty\noption again.\n\nIf the component is set as required, the empty option is removed.","Specific Value Preselected","Changing Available Options","Narrow layout\nThe `limel-select` component has the same height and layout as other input types\nin Lime elements. This makes the UI nice and tidy, when elements are placed\nbeside or on top of each other; for instance in a form.\n\nHowever, sometimes you may need to render the `limel-select` component with a\nnarrower layout (smaller in height). For instance when the component is used\nin a header, or when it is placed beside a component like `limel-button-group`.\n\nFor such cases, you can simply apply the class of `is-narrow` to your component.\n:::tip\nIn such use cases, the select usually does not need a `label`. Consider having\nits first `option` pre-chosen and displayed by default instead. Also avoid using\n`helperText` if possible.\n:::","Select field inside a dialog"],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to make the field disabled.\nand visually shows that the `select` component is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe component may become interactable.","type":"boolean"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the input field when it has focus.","type":"string"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value of the select is\ninvalid.","type":"boolean"},{"name":"label","tags":[],"text":"Text to display next to the select.","type":"string"},{"name":"multiple","tags":[],"text":"Set to `true` to allow multiple values to be selected.","type":"boolean"},{"name":"options","tags":[],"text":"List of options.","type":"Option<string>[]"},{"name":"readonly","tags":[],"text":"Set to `true` to make the field read-only.\nThis visualizes the component slightly differently.\nBut shows no visual sign indicating that the component is disabled\nor can ever become interactable.","type":"boolean"},{"name":"required","tags":[],"text":"True if the control requires a value.","type":"boolean"},{"name":"value","tags":[],"text":"Currently selected value or values.\nIf `multiple` is `true`, this must be an array. Otherwise it must be a\nsingle value.","type":"Option<string> | Option<string>[]"}],"events":[{"name":"change","tags":[],"text":"Emitted when the value is changed.","type":"Option<string> | Option<string>[]"}],"tags":["exampleComponent limel-example-select","exampleComponent limel-example-select-with-icons","exampleComponent limel-example-select-multiple","exampleComponent limel-example-select-with-empty-option","exampleComponent limel-example-select-preselected","exampleComponent limel-example-select-change-options","exampleComponent limel-example-select-narrow","exampleComponent limel-example-select-dialog"]},{"path":"/component/limel-shortcut/","title":"Shortcut","text":["This component can be used on places such as a start page or a dashboard.\nClicking on the component should navigate the user to a new screen,\nto which you need to provide a URL, by specifying an `href` for the `link` property.\n\nBy default, this navigation will happen within the same browser tab.\nHowever, it is possible to override that behavior, by specifying a `target`\nfor the `link` property","Basic example\n\nThis component acts as a link, and therefore comes with features\nsuch as `title` and `target`.\n\nThe `title` tag of the hyperlink can be used to\nprovide additional information about the link.\nIt improves accessibility both for users with assistive technologies,\nand sighted users. Hovering and holding the mouse cursor will\ndisplay a tooltip generated with the specified `title`.\n\nWhat the `target` does is described well in\n[mdn web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).","Displaying a notification badge\n\nThe component can display a notification badge, which could either be\na `number` or a `string`. Read more about how the badge truncates\nor abbreviates the provided label [here](#/component/limel-badge/).","How to style the shortcut\n\nThe component offers different CSS variables for styling\nthe color of the shortcut, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","Example with click handler"],"props":[{"name":"badge","tags":[],"text":"If specified, will display a notification badge\non the shortcut.","type":"number | string"},{"name":"disabled","tags":[],"text":"Set to `true` if shortcut is disabled.","type":"boolean"},{"name":"icon","tags":[],"text":"Name of icon for the shortcut.","type":"string"},{"name":"label","tags":[],"text":"The text to show below the shortcut. Long label will be truncated.","type":"string"},{"name":"link","tags":[],"text":"If supplied, the shortcut will be a clickable link.","type":"Link"}],"events":[],"tags":["exampleComponent limel-example-shortcut","exampleComponent limel-example-shortcut-notification","exampleComponent limel-example-shortcut-styling","exampleComponent limel-example-shortcut-with-click-handler"]},{"path":"/component/limel-slider/","title":"Slider","text":["","Basic example","With multiplier and step\n\nWhen step is configured and the initial value is not a multiple of the step\nvalue, the slider will round the value to the nearest step when it is changed\nfor the first time. After a valid value has been set, only discrete valid\nvalues will be possible to pick.","With percentage colors\nYou can add the `displays-percentage-colors` class to your slider component\nand it will automatically visualize current percentage colors in real-time.\n\nThe colors change with intervals of 10 as users drags the slider pin.\nThe color spectrum is not modifiable, and looks like red → orange → yellow\n→ green → teal.","Composite\n\nA place to try different combinations of states."],"props":[{"name":"disabled","tags":[],"text":"Disables the slider when `true`,\nand visually shows that the field is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe slider may become interactable.","type":"boolean"},{"name":"factor","tags":[],"text":"Default value: 1.\nThe factor that the properties `value`, `valuemax`, `valuemin`, and\n`step` are multiplied by. On `change` divides the value by the factor,\nso the original format stays the same.","type":"number"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the slider","type":"string"},{"name":"label","tags":[],"text":"Label to display next to the input","type":"string"},{"name":"readonly","tags":[],"text":"Disables the slider when `true`. This visualizes the slider slightly differently.\nBut shows no visual sign indicating that the slider field\nis disabled or can ever become interactable.","type":"boolean"},{"name":"step","tags":[],"text":"The stepping interval to use when adjusting the value","type":"number"},{"name":"unit","tags":[],"text":"Unit to display next to the value","type":"string"},{"name":"value","tags":[],"text":"The value of the input","type":"number"},{"name":"valuemax","tags":[],"text":"The maximum value allowed","type":"number"},{"name":"valuemin","tags":[],"text":"The minimum value allowed","type":"number"}],"events":[{"name":"change","tags":[],"text":"Emitted when the value has been changed","type":"number"}],"tags":["exampleComponent limel-example-slider","exampleComponent limel-example-slider-multiplier","exampleComponent limel-example-slider-multiplier-percentage-colors","exampleComponent limel-example-slider-composite"]},{"path":"/component/limel-snackbar/","title":"Snackbar","text":["",""],"props":[{"name":"actionText","tags":[],"text":"The text to display for the action button.","type":"string"},{"name":"dismissible","tags":[],"text":"True if the snackbar is dismissible, false otherwise","type":"boolean"},{"name":"language","tags":[],"text":"Defines the language for translations.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"message","tags":[],"text":"The text message to display.","type":"string"},{"name":"multiline","tags":[],"text":"Whether to show the snackbar with space for multiple lines of text","type":"boolean"},{"name":"timeout","tags":[],"text":"The amount of time in milliseconds to show the snackbar.","type":"number"}],"events":[{"name":"action","tags":[],"text":"Emitted when the action button is pressed","type":"void"},{"name":"hide","tags":[],"text":"Emitted when the snackbar hides itself","type":"void"}],"tags":["exampleComponent limel-example-snackbar"]},{"path":"/component/limel-spinner/","title":"Spinner","text":["","With a generic design or branded for Lime Technologies\nThe `limel-spinner` makes the boring waiting times slightly more cheerful by\ncycling through nine delightful colors.\n\nBy default spinner's shape represents Lime Technologies' logo, as it is used\nprimarily in our own products.\n\nHowever, it is easy render the spinner as a generic circle by specifying\n`limeBranded={false}`, which may be useful for instance when the\nspinner is used on a small component like a button.","With custom colors\nThe `limel-spinner` is designed to cycle through ten colors which are all\nfrom Lime Technologies' brand colors.\n\nIt is of course possible to override these colors.","Spinner sizes"],"props":[{"name":"limeBranded","tags":[],"text":"Gives the spinner the shape of Lime Technologies' logo","type":"boolean"},{"name":"size","tags":[],"text":"Determines the size of the spinner.","type":"\"large\" | \"medium\" | \"mini\" | \"small\" | \"x-small\""}],"events":[],"tags":["exampleComponent limel-example-spinner","exampleComponent limel-example-spinner-color","exampleComponent limel-example-spinner-size"]},{"path":"/component/limel-split-button/","title":"Split button","text":["A split button is a button with two components:\na button and a side-menu attached to it.\n\nClicking on the button runs a default action,\nand clicking on the arrow opens up a list of other possible actions.\n\n:::warning\n- Never use a split button for navigation purposes, such as going to next page.\nThe button should only be used for performing commands!\n- Never use this component instead of a Select or Menu component!\n:::","Basic Example\n\nWhen used correctly, a split button reduces visual complexity of the user interface\nby grouping similar commands together.\n\n:::important\nCommands which are included in the menu must be variations of the default command,\nor be very relevant to it.\n:::","Repeating the default command in the menu\n\nThe default command must be the most commonly used action.\nSuch actions typically have a very short label.\n\nHowever, sometimes it could be useful to repeat the default command again\nin the list of commands, using a more descriptive label which\nclarifies the default action.\n\n:::tip\n- **Limit the overall number of choices** within the menu to less than 10\n- **Order the items within the menu by popularity** and put the most popular ones on top.\n:::"],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the button.","type":"boolean"},{"name":"icon","tags":[],"text":"Set icon for the button","type":"string"},{"name":"items","tags":[],"text":"A list of items and separators to show in the menu.","type":"(MenuItem<any> | ListSeparator)[]"},{"name":"label","tags":[],"text":"The text to show on the default action part of the button.","type":"string"},{"name":"primary","tags":[],"text":"Set to `true` to make the button primary.","type":"boolean"}],"events":[{"name":"select","tags":[],"text":"Is emitted when a menu item is selected.","type":"MenuItem<any>"}],"tags":["exampleComponent limel-example-split-button-basic","exampleComponent limel-example-split-button-repeat-default-command"]},{"path":"/component/limel-switch/","title":"Switch","text":["",""],"props":[{"name":"disabled","tags":[],"text":"Disables the switch when `true`,\nand visually shows that the switch is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe switch may become interactable.","type":"boolean"},{"name":"label","tags":[],"text":"Label to display next to the switch","type":"string"},{"name":"readonly","tags":[],"text":"Disables the switch when `true`. This visualizes the switch slightly differently.\nBut shows no visual sign indicating that the switch is disabled\nor can ever become interactable.","type":"boolean"},{"name":"value","tags":[],"text":"The value of the switch","type":"boolean"}],"events":[{"name":"change","tags":[],"text":"Emitted when the value has changed","type":"boolean"}],"tags":["exampleComponent limel-example-switch"]},{"path":"/component/limel-tab-bar/","title":"Tab bar","text":["Tabs are great to organize information hierarchically in the interface and divide it into distinct categories. Using tabs, you can create groups of content that are related and at the same level in the hierarchy.\n:::warning\nTab bars should be strictly used for navigation at the top levels.\nThey should never be used to perform actions, or navigate away from the view which contains them.\n:::\nAn exception for using tab bars in a high level of hierarchy is their usage in modals. This is because modals are perceived as a separate place and not a part of the current context. Therefore you can use tab bars in a modal to group and organize its content.\nA tab bar can contain an unlimited number of tabs. However, depending on the device width and width of the tabs, the number of tabs that are visible at the same time will vary. When there is limited horizontal space, the component shows a left-arrow and/or right-arrow button, which scrolls and reveals the additional tabs. The tab bar can also be swiped left and right on a touch-device.\n:::tip Other things to consider\nNever divide the content of a tab using a nested tab bar.\nNever place two tab bars within the same screen.\nNever use background color for icons in tabs.\nAvoid having long labels for tabs.\nA tab will never be removed or get disabled, even if there is no content under it.\n:::","","Default UI of Tab bars\nBy default, tabs dynamically adjust their width to their own content, which\nmeans a tab with a larger label will be bigger than one with a shorter one.\nThis is the preferred layout for tabs.","Tab bars with custom styles\nIn some situations and for the sake of UI design, you may want to have tabs\nthat equally share the available screen width and stretch. To get such a\nresult, you can add the `has-tabs-with-equal-width` class to the tab bar."],"props":[{"name":"tabs","tags":[],"text":"List of tabs to display","type":"Tab[]"}],"events":[{"name":"changeTab","tags":[],"text":"Emitted when a tab has been changed","type":"Tab"}],"tags":["exampleComponent limel-example-tab-bar","exampleComponent limel-example-tab-bar-with-dynamic-tab-width","exampleComponent limel-example-tab-bar-with-equal-tab-width"]},{"path":"/component/limel-tab-panel/","title":"Tab panel","text":["The `limel-tab-panel` component uses the `limel-tab-bar` component together\nwith custom slotted components and will display the content for the currently\nactive tab. Each slotted component must have an id equal to the id of the\ncorresponding tab it belongs to. These components should implement the\n[TabPanelComponent](#/type/TabPanelComponent/) interface.\n\nThe `limel-tab-panel` component will automatically set each tab configuration\non the corresponding slotted component as a property named `tab` so that the\ncomponent can take action upon that. Sometimes it might be desirable to not\nload data or render anything until the tab is active.\n\nThe slotted components can also emit the `changeTab` event to update anything\ninside the actual tab, e.g. to change the icon, color or badge.","This example illustrates how to add custom components inside the `limel-tab-panel`.\n\nEach component will simulate loading the data it needs once the tab has been\nactivated and then display the actual content. If the button is pressed, the\ncomponent will emit the `changeTab` event to change the badge inside the\ncorresponding tab."],"props":[{"name":"tabs","tags":[],"text":"The tabs to display in the panel","type":"Tab[]"}],"events":[{"name":"changeTab","tags":[],"text":"Emitted when a tab has been changed","type":"Tab"}],"tags":["slot - Content to put inside the `limel-tab-panel`. Each slotted element\nmust have the `id` attribute equal to the id of the tab it belongs to.","exampleComponent limel-example-tab-panel"]},{"path":"/component/limel-table/","title":"Table","text":["","","Custom components\n\nYou can specify a custom component to use for any column in your table. This\nis done under the `component` key in the schema, following the\n[TableComponentDefinition](#/type/TableComponentDefinition/) specification,\nfor example:\n\n```ts\nconst columns = [\n    {\n        title: 'Food',\n        field: 'food',\n        component: { name: 'my-fancy-food-displayer' },\n    },\n];\n```\n\nWhile you can, in principle, use any component in a table, your custom table\ncomponents should implement the [TableComponent](#/type/TableComponent/)\ninterface.","Column header menu\n\nYou can also add custom components to the header cell of a column. In\ncontrast to custom components used elsewhere in the table, custom components\nused in the header do not replace the entire content of the cell. Instead,\nthey appear in a slot next to the column sorting icon.","Movable columns","Disable column sorting\n\nBy default, all columns can be sorted by end-users, if they click on\na column header. An arrow icon on the header visualizes the\ndirection of sorting, when a column is sorted.\n\nHowever, you can disable the sorting possibility in individual columns,\nby setting the `headerSort` to `false`.","Local sorting and pagination","Remote sorting and pagination","Activate a row","Selectable rows with updating aggregates","Default sorted columns\n\nIn this example, the table is sorted on *two* columns. Primary sorting is\ndone on the \"Eggs per clutch\" column, and secondary sorting is done on the\n\"Name\" column. The result is that within each \"group\" of birds that have the\nsame number of eggs per clutch, the birds are sorted by name.","Layout\nColumns and their content can be decisive factors in how a table is\npreferred to rendered in the user interface. To set your preferred\nrendering, choose one of the available `layout` properties.\n\n\n````tsx\nlayout=\"default\"\n````\nThe default layout resizes the table's columns,\nin a way that each column becomes as wide as the data it holds.\n\n:::important\nNote that be default, table columns have a maximum width of `40rem`.\nThis means, they can never grow wider than that, unless you specify\nanother size using the `--table-max-column-width` CSS variable.\n\nThis applies to all other layouts presented further down as well!\n:::\n\nIf there is additional space available on the right side of the last column,\nrows will stretch to fill the space and look visually as wide as the table.\n\n:::note\nWhile scrolling, new rows get lazy-loaded. Since the new data may have wider\nlength, it might affect rendering of the layout in real-time.\nThis means columns can get resized while user is scrolling down.\n:::\n\n:::tip\nIt is also possible to affect internal layout of each column, by specifying\n`horizontalAlign` on the column headers, to `left` (default), `center`,\nor `right`. This basically defines the text-alignment for all the cells in that column.\n:::","\n````tsx\nlayout=\"stretchLastColumn\"\n````\n\nWorks just like `default`, but unlike the default layout\nwhich resulted in having an empty last column, in this layout\nthe last existing column will stretch out to fill up the remaining table width.","\n````tsx\nlayout=\"stretchColumns\"\n````\n\nWith this layout, the table stretches columns so that all\nfit perfectly in the table container, when extra space is available.\nIf all columns cannot fit within the available width,\nthen a horizontal scrollbar will appear.","\n````tsx\nlayout=\"lowDensity\"\n````\nBy using this layout option, you can easily convert the table into an airy list of items.\n\nThis type of UI is suitable for generating minimalist lists of items with\nonly a few properties on each. Especially when the property values are not\nself-explanatory (such as an email address) and require a bit of extra help\nto know what they are.\n\nUsing this UI, you can take advantage of the sticky header of the table which\nexplains what each cell is about, and also enjoy sorting possibilities it\noffers.\n\n:::note usage notes\n- In this low-density UI, all cells will get a fixed height, which may affect\nthe layout of custom components that you place inside them.\n- This UI is not preferred for data intensive views, in which the user's main\ntask is processing the presented data and making sense of it. For such views,\nuse the table component with its normal density.\n:::","Visualizing clickable rows better\nBy taking advantage of the `has-interactive-rows` class, hovering on a row\nwill display an elevated visual effect, giving it more affordance and a solid\nfeeling of interactivity.\n\n:::note usage notes\n- Only use this class when clicking on an entire row triggers a reaction in\nthe system, for example a card or a modal is opened to show further details.\n:::"],"props":[{"name":"activeRow","tags":[],"text":"Active row in the table","type":"object"},{"name":"aggregates","tags":[],"text":"Column aggregates to be displayed in the table","type":"ColumnAggregate[]"},{"name":"columns","tags":[],"text":"Columns used to display the data","type":"Column<any>[]"},{"name":"data","tags":[],"text":"Data to be displayed in the table","type":"object[]"},{"name":"emptyMessage","tags":[],"text":"A message to display when the table has no data","type":"string"},{"name":"layout","tags":[],"text":"Defines the layout of the table, based on how width of the columns are calculated.\n\n- `default`: makes columns as wide as their contents.\n- `stretchLastColumn`: makes columns as wide as their contents, stretch the last column to fill up the remaining table width.\n- `stretchColumns`: stretches all columns to fill the available width when possible.\n- `lowDensity`: makes columns as wide as their contents, and creates a low density and airy layout.","type":"\"default\" | \"lowDensity\" | \"stretchColumns\" | \"stretchLastColumn\""},{"name":"loading","tags":[],"text":"Set to `true` to trigger loading animation","type":"boolean"},{"name":"mode","tags":[],"text":"Set to either `local` or `remote` to change how the table handles the\nloaded data. When in `local` mode, all sorting and pagination will be\ndone locally with the data given. When in `remote` mode, the consumer\nis responsible to give the table new data when a `load` event occurs","type":"\"local\" | \"remote\""},{"name":"movableColumns","tags":[],"text":"Set to `true` to enable reordering of the columns by dragging them","type":"boolean"},{"name":"page","tags":[],"text":"The page to show","type":"number"},{"name":"pageSize","tags":[],"text":"Number of rows per page","type":"number"},{"name":"selectable","tags":[],"text":"Enables row selection","type":"boolean"},{"name":"selection","tags":[],"text":"Selected data. Requires `selectable` to be true.","type":"object[]"},{"name":"sorting","tags":[],"text":"The initial sorted columns","type":"ColumnSorter[]"},{"name":"totalRows","tags":[],"text":"The number of total rows available for the data","type":"number"}],"events":[{"name":"activate","tags":[],"text":"Emitted when a row is activated","type":"object"},{"name":"changeColumns","tags":[],"text":"Emitted when the columns have been changed","type":"Column<any>[]"},{"name":"changePage","tags":[],"text":"Emitted when a new page has been set","type":"number"},{"name":"load","tags":[],"text":"Emitted when `mode` is `remote` and the table is loading new data. The\nconsumer is responsible for giving the table new data","type":"TableParams"},{"name":"select","tags":[],"text":"Emitted when the row selection has been changed","type":"object[]"},{"name":"selectAll","tags":[],"text":"Emitted when the select all rows state is toggled","type":"boolean"},{"name":"sort","tags":[],"text":"Emitted when `mode` is `local` the data is sorted","type":"ColumnSorter[]"}],"tags":["exampleComponent limel-example-table","exampleComponent limel-example-table-custom-components","exampleComponent limel-example-table-header-menu","exampleComponent limel-example-table-movable-columns","exampleComponent limel-example-table-sorting-disabled","exampleComponent limel-example-table-local","exampleComponent limel-example-table-remote","exampleComponent limel-example-table-activate-row","exampleComponent limel-example-table-selectable-rows","exampleComponent limel-example-table-default-sorted","exampleComponent limel-example-table-layout-default","exampleComponent limel-example-table-layout-stretch-last-column","exampleComponent limel-example-table-layout-stretch-columns","exampleComponent limel-example-table-layout-low-density","exampleComponent limel-example-table-interactive-rows"]}],"data":{"keys":[{"path":["tags"],"id":"tags","weight":1,"src":"tags"},{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["path"],"id":"path","weight":1,"src":"path"},{"path":["text"],"id":"text","weight":1,"src":"text"},{"path":["props","name"],"id":"props.name","weight":1,"src":"props.name"},{"path":["props","text"],"id":"props.text","weight":1,"src":"props.text"},{"path":["props","tags"],"id":"props.tags","weight":1,"src":"props.tags"},{"path":["props","type"],"id":"props.type","weight":1,"src":"props.type"},{"path":["events","name"],"id":"events.name","weight":1,"src":"events.name"},{"path":["events","text"],"id":"events.text","weight":1,"src":"events.text"},{"path":["events","tags"],"id":"events.tags","weight":1,"src":"events.tags"},{"path":["events","type"],"id":"events.type","weight":1,"src":"events.type"}],"records":[{"i":0,"$":{"1":{"v":"Home","n":1},"2":{"v":"/Home/","n":1}}},{"i":1,"$":{"1":{"v":"Design Guidelines","n":0.707},"2":{"v":"/DesignGuidelines/","n":1}}},{"i":2,"$":{"0":[{"v":"exampleComponent limel-example-badge-string","i":2,"n":0.707},{"v":"exampleComponent limel-example-badge-number","i":1,"n":0.707},{"v":"exampleComponent limel-example-badge","i":0,"n":0.707}],"1":{"v":"Badge","n":1},"2":{"v":"/component/limel-badge/","n":1},"3":[{"v":"String badges\n\nString labels get truncated if their visual length is longer than\nsix characters placed side by side (six `0`s to be exact).\n\nWhen users hover the truncated badge, the complete\n`label` will be displayed in a tooltip.","i":3,"n":0.169},{"v":"Number badges\n\nNumeric labels larger than 999 will get both rounded and abbreviated.\nFor example, if the label is `1090` the badge will display `1.1K`.\nAbbreviation units used are `k` (Kilo) that stands for Thousands,\n`M` for Millions, `B` for Billions, and `T` for Trillions.\n\nWhen users hover the abbreviated badge, the complete\n`label` will be displayed in a tooltip.","i":2,"n":0.136},{"v":"Badge without a `label`\nWhen no `label` is provided, the badge will only render as a circle.\nThis is a convention which is used in many applications to attract the\nuser's attention to a certain element on the user interface; typically to\nmenus or buttons that navigate the user to another pane or screen.\n\nIn such cases, the idea is to provide the users with a \"red thread\"\nand help them find something that requires their attention, but is located\non another place in the app, and not directly visible.\n\n:::tip\nMake sure that the dot is noticeable, by providing an\neye-catching background color, as shown in this example.\n:::","i":1,"n":0.101},{"v":"The Badge component can be used to display a notification badge,\noptionally with a number or a text label.","i":0,"n":0.236}],"4":[{"v":"label","i":0,"n":1}],"5":[{"v":"Label to display in the badge.\nNumeric labels larger than 999 will be rounded and abbreviated.\nString labels get truncated if their length is longer than\nsix characters.","i":0,"n":0.2}],"6":[],"7":[{"v":"number | string","i":0,"n":0.577}],"8":[],"9":[],"10":[],"11":[]}},{"i":3,"$":{"0":[{"v":"slot buttons - Buttons to show in the banner","i":1,"n":0.333},{"v":"exampleComponent limel-example-banner","i":0,"n":0.707}],"1":{"v":"Banner","n":1},"2":{"v":"/component/limel-banner/","n":1},"3":[],"4":[{"v":"message","i":1,"n":1},{"v":"icon","i":0,"n":1}],"5":[{"v":"The text to show on the banner.","i":1,"n":0.378},{"v":"Set icon for the banner","i":0,"n":0.447}],"6":[],"7":[{"v":"string","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":4,"$":{"0":[{"v":"exampleComponent limel-example-button-composite","i":10,"n":0.707},{"v":"exampleComponent limel-example-button-colors","i":9,"n":0.707},{"v":"exampleComponent limel-example-button-reduce-presence","i":8,"n":0.707},{"v":"exampleComponent limel-example-button-click-fail","i":7,"n":0.707},{"v":"exampleComponent limel-example-button-click-success","i":6,"n":0.707},{"v":"exampleComponent limel-example-button-loading","i":5,"n":0.707},{"v":"exampleComponent limel-example-button-icon","i":4,"n":0.707},{"v":"exampleComponent limel-example-button-disabled","i":3,"n":0.707},{"v":"exampleComponent limel-example-button-outlined","i":2,"n":0.707},{"v":"exampleComponent limel-example-button-primary","i":1,"n":0.707},{"v":"exampleComponent limel-example-button-basic","i":0,"n":0.707}],"1":{"v":"Button","n":1},"2":{"v":"/component/limel-button/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":11,"n":0.354},{"v":"How to color button text and background\nWhen a button is a \"primary\" button (`primary={true}`), the color value you specify\nfor `--lime-primary-color` will apply to its background. By default, text color\nof primary buttons is white. To change their text color you must send a color\nvalue with the `--lime-on-primary-color` variable.\n\nWhen a button is not a \"primary\" button, the value of `--lime-primary-color`\nwill be applied to its text, and `--lime-on-primary-color` will have no effect.\n\nKeep in mind that `disabled` buttons don't care about your specified colors at all.","i":10,"n":0.11},{"v":"Reduce Presence\n\nThis example is identical to the \"With click handler\" example, except that\nhere, the `has-reduced-presence` class has been set to `true`. This will hide\nthe button when it is disabled. However, it will also make sure that the\nbutton remains visible while the loading animation is ongoing. When the\nanimation is done and the checkmark has been shown, the button will hide.\n\nRead more in the [Design Guidelines](#/DesignGuidelines/decluttering.md/)","i":9,"n":0.125},{"v":"With click handler, and failed feedback\n\nThis example works just like the \"With click handler\" example, except that,\nwhen the `loading` attribute changes from `true` to `false`, the button\nautomatically indicates that the previously ongoing process just failed.","i":8,"n":0.169},{"v":"With click handler\n\nThe click handler in this example simulates saving some changed values in a\nform. When the button is clicked, the `loading` attribute is set to `true`.\nAfter a short while, we pretend that the saving was successful, and set\n`loading` to `false`. We also set `disabled` to `true`, because we just\nsuccessfully saved, so until the user updates our imaginary form again, there\nis nothing to save.\n\nWhen the `loading` attribute changes from `true` to `false`, the button\nautomatically displays a checkmark icon for 2 seconds. Note that our click\nhandler isn't actually involved in this.\n\nA short while after the checkmark has disappeared, we enable the button\nagain. This is just so that you can try the functionality again. Normally,\nthe button would stay disabled until the user made some changes, so there's\nsomething new to save!","i":7,"n":0.088},{"v":"Loading\n\nNote that the example is also using `disabled`, because a button that is\nloading should normally also be disabled.","i":6,"n":0.236},{"v":"Icon","i":5,"n":1},{"v":"Disabled","i":4,"n":1},{"v":"Outlined\n\nBy setting `outlined={true}`, you can create a style\nof buttons which could be used to indicate an action\nwith medium emphasis.\n\n:::note\nThis style is useful to indicate the \"secondariness\" of an action.\nTherefore, only use this style, if there is another related\n`primary` button present on the same view or screen,\nalong with another normal button.\n\nAlso, give such a choice a second thought by reading\n[our guidelines for Split button](#/component/limel-split-button/).\n:::","i":3,"n":0.126},{"v":"Primary\n\nEach screen (modal, or section with action buttons)\nshould contain a single prominent button like this one,\nto emphasize the primary action.\n\n:::note\nThink twice before setting `primary={true}` on buttons.\nThe arrangement of buttons and their colors should clearly\ncommunicate their importance and primariness or secondariness.\n\nSee some examples at [our design guidelines for\nAction buttons](#/DesignGuidelines/action-buttons.md/).\n:::","i":2,"n":0.144},{"v":"Basic Example\n\nJust a label and a click-handler.\nOpen the dev-tools console to see logged clicks.","i":1,"n":0.267}],"4":[{"v":"primary","i":6,"n":1},{"v":"outlined","i":5,"n":1},{"v":"loadingFailed","i":4,"n":1},{"v":"loading","i":3,"n":1},{"v":"label","i":2,"n":1},{"v":"icon","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"Set to `true` to make the button primary.","i":6,"n":0.354},{"v":"Set to `true` to make the button outlined.","i":5,"n":0.354},{"v":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","i":4,"n":0.236},{"v":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","i":3,"n":0.258},{"v":"The text to show on the button.","i":2,"n":0.378},{"v":"Set icon for the button","i":1,"n":0.447},{"v":"Set to `true` to disable the button.","i":0,"n":0.378}],"6":[],"7":[{"v":"boolean","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":5,"$":{"0":[{"v":"exampleComponent limel-example-button-group-composite","i":4,"n":0.707},{"v":"exampleComponent limel-example-button-group-badges","i":3,"n":0.707},{"v":"exampleComponent limel-example-button-group-mix","i":2,"n":0.707},{"v":"exampleComponent limel-example-button-group","i":1,"n":0.707},{"v":"exampleComponent limel-example-button-group-icons","i":0,"n":0.707}],"1":{"v":"Button group","n":0.707},"2":{"v":"/component/limel-button-group/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":5,"n":0.354},{"v":"Button group with badges\n\nBadges can be used to add further contextual information.\nFor example, if the component is used to filter a set of data\nthe badges could visualize the number of entries\nfor each filter option.\n\nThe badge can either\nhave a `number` or `string` label.\nRead more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","i":4,"n":0.137},{"v":"Mixed text and icon within the same group\n\nGenerally, you should avoid mixing text and images in button group. Although\nindividual buttons can contain text or images, mixing the two in a single\ngroup can lead to an inconsistent and confusing interface.\n\nHowever, in some case your design may benefit from having only one button in\na different format.","i":3,"n":0.136},{"v":"Text only\n\nThis layout is good when you do not have access to icons which are\ndescriptive enough.","i":2,"n":0.25},{"v":"Icon only\n\nIf you pick well descriptive icons, this layout will usually suffice. When\nyou specify an `icon`, it will automatically be shown instead of the `title`.\n:::important\nAdding titles for buttons is compulsory. The reason is that when\nonly icons are shown, titles will appear as `aria-label` for screen readers,\nas well as `title` attribute when users hover and hold their cursors on the\nbuttons.\n:::\nThis makes it easier for them to know what the button actually does\nor what the icon tries to indicate.\n\nSo, make sure to label your icons properly and descriptively.","i":1,"n":0.108},{"v":"A button group control is a linear set of two or more buttons.\n\n## Usage\n\nButton groups are often used to display different views of the same thing. A\ncommon example of this component is when you switch between [ Map | Transit\n| Satellite ] views to look at an area on the map.\n\nIn some cases, button groups may serve as quick filters as well. For example\na list of contacts, in which the user can switch to [ All | Favorites\n| Frequently contacted ] can incorporate a button group to quickly filter out\nitems and display subsets of them.\n\n## Layout\n\nThe button groups are usually placed in top headers and action bars,\nsometimes with other elements. Since the group items will always be rendered\nin a row, you must make sure not to have too many buttons in the group.\nBecause if the container of your button group does not get enough space to\nfit in all its buttons, they will have to truncate their text and may appear\nvery cramped together. Always think about how your button group will appear\non a small screen such as phones.\n:::note\nButton can contain text or icons, but not both simultaneously!\n:::\n\nWithin the group, icon buttons will all have the same width, while each text button\ninherits its width from its content.","i":0,"n":0.07}],"4":[{"v":"value","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"List of buttons for the group","i":1,"n":0.408},{"v":"True if the button-group should be disabled","i":0,"n":0.378}],"6":[],"7":[{"v":"Button[]","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Dispatched when a button is selected/deselected","i":0,"n":0.408}],"10":[],"11":[{"v":"Button","i":0,"n":1}]}},{"i":6,"$":{"0":[{"v":"exampleComponent limel-example-checkbox-helper-text","i":1,"n":0.707},{"v":"exampleComponent limel-example-checkbox","i":0,"n":0.707}],"1":{"v":"Checkbox","n":1},"2":{"v":"/component/limel-checkbox/","n":1},"3":[{"v":"With `helperText`\n\nCheckboxes can have a helper text, which is useful when providing additional information\ncan clarify functionality of the checkbox for the user.\n\nThe helper text is displayed when user hovers the checkbox, or focuses on it using keyboard\nnavigation. However, on touchscreen devices, the helper text is always displayed.","i":2,"n":0.146}],"4":[{"v":"required","i":6,"n":1},{"v":"readonly","i":5,"n":1},{"v":"label","i":4,"n":1},{"v":"indeterminate","i":3,"n":1},{"v":"helperText","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"checked","i":0,"n":1}],"5":[{"v":"Set to `true` to indicate that the checkbox must be checked.","i":6,"n":0.302},{"v":"Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\nBut shows no visual sign indicating that the checkbox is disabled\nor can ever become interactable.","i":5,"n":0.2},{"v":"The checkbox label.","i":4,"n":0.577},{"v":"Enables indeterminate state. Set to `true` to signal indeterminate check.","i":3,"n":0.316},{"v":"Optional helper text to display below the checkbox","i":2,"n":0.354},{"v":"Disables the checkbox when `true`. Works exactly the same as `readonly`.\nIf either property is `true`, the checkbox will be disabled.","i":1,"n":0.224},{"v":"The value of the checkbox. Set to `true` to make the checkbox checked.","i":0,"n":0.277}],"6":[],"7":[{"v":"boolean","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"string","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the input value is changed.","i":0,"n":0.378}],"10":[],"11":[{"v":"boolean","i":0,"n":1}]}},{"i":7,"$":{"0":[{"v":"exampleComponent limel-example-chip-set-composite","i":8,"n":0.707},{"v":"exampleComponent limel-example-chip-icon-color","i":7,"n":0.707},{"v":"exampleComponent limel-example-chip-set-input-type-search","i":6,"n":0.707},{"v":"exampleComponent limel-example-chip-set-input-type-text","i":5,"n":0.707},{"v":"exampleComponent limel-example-chip-set-input","i":4,"n":0.707},{"v":"exampleComponent limel-example-chip-set-filter-badge","i":3,"n":0.707},{"v":"exampleComponent limel-example-chip-set-filter","i":2,"n":0.707},{"v":"exampleComponent limel-example-chip-set-choice","i":1,"n":0.707},{"v":"exampleComponent limel-example-chip-set","i":0,"n":0.707}],"1":{"v":"Chip set","n":0.707},"2":{"v":"/component/limel-chip-set/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":9,"n":0.354},{"v":"Chip Icon Color\n\nThe color and background color of each chip's icon can be individually\nconfigured.","i":8,"n":0.267},{"v":"Input chip set with `inputType` of `search`\n\nWhen autocorrection is potentially harmful for the user experience and for\nyour intended result, use `search` as `inputType`. For instance, for a\nquestion like \"Please suggest unique names for our newly founded company\",\nyou probably don't want autocorrection, because you would expect many\nvalid suggestions to not exist in the autocorrection dictionary. Therefore,\nyou do not want the respondent's input to be regarded as a typo and to be\nchanged when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.","i":7,"n":0.115},{"v":"Input chip set with `inputType` of `text`\n\nThere is a slight difference in the way browsers treat `input` field\nwith `type=\"text\"` and `type=\"search\"`. You can read more about this\ndifference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\nbut the most important difference in this case is activation of the\nautocorrection feature on most smart devices.\n\nWhen a user makes a spelling mistake while typing in an input field with\n`type=\"text\"`, the mistake will be corrected automatically, right after they\npress <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\ndo not auto correct the user's input.\n\nIf you want to use limel-chip-set in a form context, where autocorrection is\na good thing, use `text` as `inputType`. It is important to know that the\nchip-set component creates a chip from the autocorrected value, after the\nuser has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\nexisting typos! For example, for a question like \"Please type five of your\nfavorite fruits\", you would want to avoid misspellings, to collect higher\nquality data.","i":6,"n":0.082},{"v":"Input chip set\n\nUseful for collections of tags or labels. Can also be used as an advanced\nsearch input, with leading icon and a delimiter between search terms.","i":5,"n":0.196},{"v":"Filter chip set with badge.\nThe badge can be used to visulize the number of results using each filter.","i":4,"n":0.236},{"v":"Filter chip set\n\nAny number of options can be selected at once, including none. As the name\nsuggests, this one is good for filtering things.","i":3,"n":0.209},{"v":"Choice chip set\n\nOnly one option can be selected at once. Kind of like radio-buttons, but the\nuser can deselect the chosen option too. Good as an alternative to using a\n`select` when there are only a few options.","i":2,"n":0.167},{"v":"Basic example with no `type` set\n\nMay be useful as a read-only presentation of a collection of tags, or\nsimilar.\n\nDepending on the use case, you may also wish to consider\n[limel-button](#/component/limel-button/) or\n[limel-button-group](#/component/limel-button-group/).","i":1,"n":0.186}],"4":[{"v":"value","i":14,"n":1},{"v":"type","i":13,"n":1},{"v":"searchLabel","i":12,"n":1},{"v":"required","i":11,"n":1},{"v":"readonly","i":10,"n":1},{"v":"maxItems","i":9,"n":1},{"v":"leadingIcon","i":8,"n":1},{"v":"language","i":7,"n":1},{"v":"label","i":6,"n":1},{"v":"inputType","i":5,"n":1},{"v":"helperText","i":4,"n":1},{"v":"emptyInputOnBlur","i":3,"n":1},{"v":"disabled","i":2,"n":1},{"v":"delimiter","i":1,"n":1},{"v":"clearAllButton","i":0,"n":1}],"5":[{"v":"List of chips for the set","i":14,"n":0.408},{"v":"Type of chip set\n\n- `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n- `filter` renders a set of selectable chips where all are selectable. The `icon` property is ignored\n- `input` renders a set of chips that can be used in conjunction with an input field\n\nIf no type is set, a basic set of chips without additional functionality will be rendered","i":13,"n":0.121},{"v":"Search label to display when type is `input` and component is in search mode","i":12,"n":0.267},{"v":"True if the control requires a value","i":11,"n":0.378},{"v":"For chip-sets of type `input`, set to `true` to disable adding and\nremoving chips, but allow interaction with existing chips in the set.\nFor any other types, setting either `readonly` or `disabled` disables\nthe chip-set.","i":10,"n":0.177},{"v":"For chip-sets of type `input`. Limits the maximum number of chips.\nWhen the value is `0` or not set, no limit is applied.","i":9,"n":0.213},{"v":"For chip-sets of type `input`. When the value is null, no leading icon is used.\nLeading icon to show to the far left in the text field","i":8,"n":0.196},{"v":"Defines the language for translations.\nWill translate the translatable strings on the components. For example, the clear all chips label.","i":7,"n":0.229},{"v":"Label for the chip-set","i":6,"n":0.5},{"v":"For chip-sets of type `input`. Value to use for the `type` attribute on the\ninput field inside the chip-set.","i":5,"n":0.236},{"v":"Optional helper text to display below the chipset.\nWhen type is `input`, the helper text is displayed below the\ninput field when it has focus.\nWhen type is not `input`, the helper text is always displayed\nif the device is touch screen; otherwise it is shown when chip-set\nis hovered or focused using keyboard navigation.","i":4,"n":0.141},{"v":"Whether the input field should be emptied when the chip-set loses focus.","i":3,"n":0.289},{"v":"True if the chip set should be disabled","i":2,"n":0.354},{"v":"For chip-set of type `input`. Sets delimiters between chips.","i":1,"n":0.333},{"v":"Whether the \"Clear all\" buttons should be shown","i":0,"n":0.354}],"6":[],"7":[{"v":"Chip<any>[]","i":14,"n":1},{"v":"\"choice\" | \"filter\" | \"input\"","i":13,"n":0.447},{"v":"string","i":12,"n":1},{"v":"boolean","i":11,"n":1},{"v":"boolean","i":10,"n":1},{"v":"number","i":9,"n":1},{"v":"string","i":8,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":7,"n":0.243},{"v":"string","i":6,"n":1},{"v":"\"search\" | \"text\"","i":5,"n":0.577},{"v":"string","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"stopEdit","i":4,"n":1},{"v":"startEdit","i":3,"n":1},{"v":"interact","i":2,"n":1},{"v":"input","i":1,"n":1},{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when an input chip set has lost focus and editing in the text field has ended","i":4,"n":0.243},{"v":"Emitted when an input chip set has received focus and editing in the text field has started","i":3,"n":0.243},{"v":"Dispatched when a chip is interacted with","i":2,"n":0.378},{"v":"Dispatched when the input is changed for type `input`","i":1,"n":0.333},{"v":"Dispatched when a chip is selected/deselected","i":0,"n":0.408}],"10":[],"11":[{"v":"void","i":4,"n":1},{"v":"void","i":3,"n":1},{"v":"Chip<any>","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"Chip<any> | Chip<any>[]","i":0,"n":0.577}]}},{"i":8,"$":{"0":[{"v":"exampleComponent limel-example-circular-progress-percentage-colors","i":4,"n":0.707},{"v":"exampleComponent limel-example-circular-progress-css-variables","i":3,"n":0.707},{"v":"exampleComponent limel-example-circular-progress-props","i":2,"n":0.707},{"v":"exampleComponent limel-example-circular-progress-sizes","i":1,"n":0.707},{"v":"exampleComponent limel-example-circular-progress","i":0,"n":0.707}],"1":{"v":"Circular progress","n":0.707},"2":{"v":"/component/limel-circular-progress/","n":1},"3":[{"v":"Displaying percentage colors\nAt Lime Technologies we have a convention for displaying percentage colors.\nThe colors we use to display a range change with intervals of 10.\nThe color spectrum is not modifiable, and looks like\nred → orange → yellow → green → teal.\nTo enable this feature, simply set `displayPercentageColors` to `true`.\n\nTry changing the value in the example below to see how colors change\nfor different percentages.","i":5,"n":0.126},{"v":"Tweaking the style, using CSS variables\nThe component offers a few possibilities for tweaking its size and colors\nusing a few CSS variables.\n\n:::note\nIf you have tweaked component's size using size presets offered by the\n`size` prop, the css variable of `--circular-progress-size` will not have any\neffect.\n:::\n:::important\nMake sure that the track color is lighter than the fill color. Otherwise the\nUI will be very confusing for the users.\n:::","i":4,"n":0.127},{"v":"Using the props\nThis component is initially designed to visualize a percentage on a scale of\nzero to 100. However, you can easily visualize a progress in other scales,\nsimply by setting `maxValue`, `prefix` and `suffix`.\n\nLook at this example to see how the component displays an angle in a\n360-degrees scale, a 60-seconds scale, and a 5-stars rating.","i":3,"n":0.136},{"v":"Size presets\nYou can chose a preset size for the component to render it desireably,\nusing the `size` prop.\nHowever, if these preset sizes do not suit your UI needs, do not specify them\nand instead specify the size using the `--circular-progress-size` variable,\nwhich must always be according to our\n[size rhythm](#/DesignGuidelines/size-rhythms.md/) guidelines.\n\nNote that the text size is automatically adjusted, based on the visual size\nof the component.","i":2,"n":0.128},{"v":"The circular progress component can be used to visualize the curent state of\na progress in a scale; for example percentage of completion of a task.\n\nIts compact UI makes the component suitable when there is not enough screen\nspace available to visualise such information.\n\nThis component allows you to define your scale, from `0` to a desired\n`maxValue`; and also lets you chose a proper `suffix` for your scale.\n\n:::note\nThe component will round up the value when it is displayed, and only shows\none decimal digit.\nIt also abbreviates large numbers. For example 1234 will be displayed as 1.2k.\nOf course such numbers, if bigger than `maxValue` will be visualized as a\nfull progress.\n:::","i":0,"n":0.098}],"4":[{"v":"value","i":5,"n":1},{"v":"suffix","i":4,"n":1},{"v":"size","i":3,"n":1},{"v":"prefix","i":2,"n":1},{"v":"maxValue","i":1,"n":1},{"v":"displayPercentageColors","i":0,"n":1}],"5":[{"v":"The value of the progress bar.","i":5,"n":0.408},{"v":"The suffix which is displayed after the `value`, must be one or two characters long. Defaults to `%`","i":4,"n":0.236},{"v":"Determines the visual size of the visualization from a preset size. This property can override the `--circular-progress-size` variable if it is specified.","i":3,"n":0.213},{"v":"The prefix which is displayed before the `value`, must be a few characters characters long.","i":2,"n":0.258},{"v":"The maximum value within the scale that the progress bar should visualize. Defaults to `100`.","i":1,"n":0.258},{"v":"When set to `true`, makes the filled section showing the percentage colorful. Colors change with intervals of 10%.","i":0,"n":0.236}],"6":[],"7":[{"v":"number","i":5,"n":1},{"v":"string","i":4,"n":1},{"v":"\"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\"","i":3,"n":0.333},{"v":"string","i":2,"n":1},{"v":"number","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":9,"$":{"0":[{"v":"exampleComponent limel-example-code-editor-fold-lint","i":2,"n":0.707},{"v":"exampleComponent limel-example-code-editor-readonly-with-line-numbers","i":1,"n":0.707},{"v":"exampleComponent limel-example-code-editor","i":0,"n":0.707}],"1":{"v":"Code editor","n":0.707},"2":{"v":"/component/limel-code-editor/","n":1},"3":[{"v":"Editable with JSON linting and folding\nHere you see an instance of the Code Editor component with linting and\nfolding support, which allows the user to see syntax errors in the JSON\ncode shown in the editor. Folding makes it easier to collapse larger pieces\nof code.","i":3,"n":0.152},{"v":"Readonly, with line numbers and dark theme\nHere you see a `readonly` instance of the Code Editor component. This means\nyou cannot edit the code. We also display line numbers here.\nAdditionally, this instance has a `dark` `colorScheme`, which means it does not\nrespect the operating system's settings for preferred appearance (dark or light).","i":2,"n":0.141},{"v":"Editable with automatic theme\nHere you see an instance of the Code Editor component which allows editing the\npresented code.\nThis instance has an `auto` `colorScheme`, which means it reacts\nto the operating system's settings for preferred appearance (dark or light).","i":1,"n":0.164},{"v":"Currently this component support syntax highlighting for `javascript`,\n`json` and `typescript` formats.","i":0,"n":0.302}],"4":[{"v":"value","i":6,"n":1},{"v":"readonly","i":5,"n":1},{"v":"lint","i":4,"n":1},{"v":"lineNumbers","i":3,"n":1},{"v":"language","i":2,"n":1},{"v":"fold","i":1,"n":1},{"v":"colorScheme","i":0,"n":1}],"5":[{"v":"The code to be rendered","i":6,"n":0.447},{"v":"Disables editing of the editor content","i":5,"n":0.408},{"v":"Enables linting of JSON content","i":4,"n":0.447},{"v":"Displays line numbers in the editor","i":3,"n":0.408},{"v":"The language of the code","i":2,"n":0.447},{"v":"Allows the user to fold code","i":1,"n":0.408},{"v":"Select color scheme for the editor","i":0,"n":0.408}],"6":[],"7":[{"v":"string","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"\"javascript\" | \"json\" | \"typescript\"","i":2,"n":0.447},{"v":"boolean","i":1,"n":1},{"v":"\"auto\" | \"dark\" | \"light\"","i":0,"n":0.447}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the code has changed. Will only be emitted when the code\narea has lost focus","i":0,"n":0.25}],"10":[],"11":[{"v":"string","i":0,"n":1}]}},{"i":10,"$":{"0":[{"v":"exampleComponent limel-example-collapsible-section-with-slider","i":5,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section-external-control","i":4,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section-css-props","i":3,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section-actions","i":2,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section","i":1,"n":0.707},{"v":"slot - Content to put inside the collapsible section","i":0,"n":0.333}],"1":{"v":"Collapsible section","n":0.707},"2":{"v":"/component/limel-collapsible-section/","n":1},"3":[{"v":"With a limel-slider - for testing\n:::note\nSome elements need to be redrawn if they were created\nwhile their container was hidden. The collapsible\nsection will emit a resize event after opening, to make this happen.\n:::","i":5,"n":0.177},{"v":"Opening and closing from outside the component","i":4,"n":0.378},{"v":"Using the CSS properties","i":3,"n":0.5},{"v":"Example with actions","i":2,"n":0.577}],"4":[{"v":"isOpen","i":2,"n":1},{"v":"header","i":1,"n":1},{"v":"actions","i":0,"n":1}],"5":[{"v":"`true` if the section is expanded, `false` if collapsed.","i":2,"n":0.333},{"v":"Text to display in the header of the section","i":1,"n":0.333},{"v":"Actions to place to the far right inside the header","i":0,"n":0.316}],"6":[],"7":[{"v":"boolean","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"Action[]","i":0,"n":1}],"8":[{"v":"open","i":2,"n":1},{"v":"close","i":1,"n":1},{"v":"action","i":0,"n":1}],"9":[{"v":"Emitted when the section is expanded","i":2,"n":0.408},{"v":"Emitted when the section is collapsed","i":1,"n":0.408},{"v":"Emitted when an action is clicked inside the header","i":0,"n":0.333}],"10":[],"11":[{"v":"void","i":2,"n":1},{"v":"void","i":1,"n":1},{"v":"Action","i":0,"n":1}]}},{"i":11,"$":{"0":[{"v":"exampleComponent limel-example-color-picker-readonly","i":1,"n":0.707},{"v":"exampleComponent limel-example-color-picker","i":0,"n":0.707}],"1":{"v":"Color picker","n":0.707},"2":{"v":"/component/limel-color-picker/","n":1},"3":[{"v":"Using the component in `readonly` mode\nIt is possible to use the component to visualize a color of your choice.\nIn this case, users cannot pick any colors, but they can view what you have picked.","i":2,"n":0.171},{"v":"This component enables you to select a swatch from out color palette, simply\nby clicking on it. You can then copy the css variable name of the chosen color\nand use it where desired.\n\nThe color picker can also show you a preview of any valid color name or color value.\n\n:::note\nMake sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n:::","i":0,"n":0.129}],"4":[{"v":"value","i":5,"n":1},{"v":"tooltipLabel","i":4,"n":1},{"v":"required","i":3,"n":1},{"v":"readonly","i":2,"n":1},{"v":"label","i":1,"n":1},{"v":"helperText","i":0,"n":1}],"5":[{"v":"Name or code of the chosen color","i":5,"n":0.378},{"v":"Displayed as tooltips when picker is hovered.","i":4,"n":0.378},{"v":"Set to `true` if a value is required","i":3,"n":0.354},{"v":"Set to `true` if a value is readonly. This makes the component un-interactive.","i":2,"n":0.277},{"v":"The label of the input field","i":1,"n":0.408},{"v":"Helper text of the input field","i":0,"n":0.408}],"6":[],"7":[{"v":"string","i":5,"n":1},{"v":"string","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emits chosen value to the parent component","i":0,"n":0.378}],"10":[],"11":[{"v":"string","i":0,"n":1}]}},{"i":12,"$":{"0":[{"v":"exampleComponent limel-example-date-picker-custom-formatter","i":10,"n":0.707},{"v":"exampleComponent limel-example-date-picker-composite","i":9,"n":0.707},{"v":"exampleComponent limel-example-date-picker-programmatic-change","i":8,"n":0.707},{"v":"exampleComponent limel-example-date-picker-formatted","i":7,"n":0.707},{"v":"exampleComponent limel-example-date-picker-year","i":6,"n":0.707},{"v":"exampleComponent limel-example-date-picker-quarter","i":5,"n":0.707},{"v":"exampleComponent limel-example-date-picker-month","i":4,"n":0.707},{"v":"exampleComponent limel-example-date-picker-week","i":3,"n":0.707},{"v":"exampleComponent limel-example-date-picker-time","i":2,"n":0.707},{"v":"exampleComponent limel-example-date-picker-date","i":1,"n":0.707},{"v":"exampleComponent limel-example-date-picker-datetime","i":0,"n":0.707}],"1":{"v":"Date picker","n":0.707},"2":{"v":"/component/limel-date-picker/","n":1},"3":[{"v":"Custom date formatter\n\nYou can provide a function to customize the date formatting.","i":11,"n":0.289},{"v":"Composite\n\nA place to try different combinations of states.","i":10,"n":0.354},{"v":"Changing the input programmatically","i":9,"n":0.5},{"v":"With defined localization","i":8,"n":0.577},{"v":"year","i":7,"n":1},{"v":"quarter","i":6,"n":1},{"v":"month","i":5,"n":1},{"v":"week","i":4,"n":1},{"v":"time","i":3,"n":1},{"v":"date","i":2,"n":1},{"v":"datetime","i":1,"n":1}],"4":[{"v":"value","i":11,"n":1},{"v":"type","i":10,"n":1},{"v":"required","i":9,"n":1},{"v":"readonly","i":8,"n":1},{"v":"placeholder","i":7,"n":1},{"v":"language","i":6,"n":1},{"v":"label","i":5,"n":1},{"v":"invalid","i":4,"n":1},{"v":"helperText","i":3,"n":1},{"v":"formatter","i":2,"n":1},{"v":"format","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"The value of the field.","i":11,"n":0.447},{"v":"Type of date picker.","i":10,"n":0.5},{"v":"Set to `true` to indicate that the field is required.","i":9,"n":0.316},{"v":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","i":8,"n":0.18},{"v":"The placeholder text shown inside the input field, when the field is focused and empty","i":7,"n":0.258},{"v":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","i":6,"n":0.267},{"v":"Text to display next to the date picker","i":5,"n":0.354},{"v":"Set to `true` to indicate that the current value of the date picker is\ninvalid.","i":4,"n":0.267},{"v":"Optional helper text to display below the input field when it has focus","i":3,"n":0.277},{"v":"Custom formatting function. Will be used for date formatting.\n\n:::note\noverrides `format` and `language`\n:::","i":2,"n":0.289},{"v":"Format to display the selected date in.","i":1,"n":0.378},{"v":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","i":0,"n":0.167}],"6":[],"7":[{"v":"Date","i":11,"n":1},{"v":"\"date\" | \"datetime\" | \"month\" | \"quarter\" | \"time\" | \"week\" | \"year\"","i":10,"n":0.277},{"v":"boolean","i":9,"n":1},{"v":"boolean","i":8,"n":1},{"v":"string","i":7,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":6,"n":0.243},{"v":"string","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"(date: Date) => string","i":2,"n":0.5},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the date picker value is changed.","i":0,"n":0.354}],"10":[],"11":[{"v":"Date","i":0,"n":1}]}},{"i":13,"$":{"0":[{"v":"slot button - The dialog buttons","i":9,"n":0.408},{"v":"slot - Content to put inside the dialog","i":8,"n":0.354},{"v":"exampleComponent limel-example-dialog-action-buttons","i":7,"n":0.707},{"v":"exampleComponent limel-example-dialog-closing-actions","i":6,"n":0.707},{"v":"exampleComponent limel-example-dialog-fullscreen","i":5,"n":0.707},{"v":"exampleComponent limel-example-dialog-size","i":4,"n":0.707},{"v":"exampleComponent limel-example-dialog-form","i":3,"n":0.707},{"v":"exampleComponent limel-example-dialog-heading","i":2,"n":0.707},{"v":"exampleComponent limel-example-dialog-nested-close-events","i":1,"n":0.707},{"v":"exampleComponent limel-example-dialog","i":0,"n":0.707}],"1":{"v":"Dialog","n":1},"2":{"v":"/component/limel-dialog/","n":1},"3":[{"v":"Example with three action buttons\n\nThis example shows how more than two buttons can be positioned in a dialog's\nfooter. Pay attention to how they are labeled & styled, and how you can\nenable important actions conditionally.\n\n:::note\nWhen it comes to details such as placement of action buttons, choice of\nlabels, and adding meaningful graphical details, it's important to follow\na few design conventions which are explained in\n[this guide](#/DesignGuidelines/action-buttons.md/).","i":8,"n":0.126},{"v":"Custom closing actions\n\nAction buttons in dialogs can be used to add a clear visual indication for\nthe sighted users to realize that the dialog can be closed by pressing\na button as well.\nThis may sometimes be considered an unnecessary usage of action buttons for\nsighted users. Because majority of them users know that clicking or tapping\noutside the dialog closes it.\n\nSuch buttons are usually labeled ***OK***, ***Dismiss*** or ***Close***.\n\n:::tip\nWhen to use action buttons for simple \"close\" actions?\n- In fullscreen dialogs where clicking outside to close is hard.\n- When big dialogs are opened on phones, which make tapping outside hard for users.\n- When designing with accessibility in mind, and for those users who\nuse screen readers to navigate the user interface.\n:::\n\nBut sometimes, depending on the importance of the message which is displayed,\nyou have to choose to display a close button, and disable other means of\ndismissing the dialog.\n\n:::tip\nWhen to use custom closing actions?\n- To make sure that the user really reads and understands the dialog's content.\n- To make sure that the user does not accidentally click outside and close the dialog.\n:::\n\nFor such cases, avoid generic labels like ***OK***, or ***Close*** which unconsciously\nmotivate users to dismiss the message; and instead use more purposeful labels\nsuch as ***I understand***, ***Looks good!***, ***Continue***, and similar;\nlike in the example below.","i":7,"n":0.069},{"v":"Fullscreen","i":6,"n":1},{"v":"Custom size","i":5,"n":0.707},{"v":"Dialog with form and header","i":4,"n":0.447},{"v":"Dialog with heading\n\nIn this example you can also see how available style properties can be used.","i":3,"n":0.25},{"v":"Nested `close` events\n\nWhen putting other elements that emit `close` events inside a dialog, those\nevents must be caught and stopped inside the dialog. If not, they will bubble\nto the event handler listening for `close` events on the dialog, which will\nclose the dialog too.\n\nThis example has an event handler for the `close` event on the dialog, and\na second event handler for the `close` event on the collapsible-section.\n\nTry it out with the _Stop the inner close-event_ switch disabled, and then\nwith the switch enabled, to see the difference.","i":2,"n":0.109},{"v":":::note\nRegarding the `close` event: When putting other elements that emit `close`\nevents inside a dialog, those events must be caught and stopped inside the\ndialog. If not, they will bubble to the event handler listening for `close`\nevents on the dialog, which will close the dialog too.\n\nSee the example _Nested `close` events_.\n:::\n\n:::important\nAre you developing for\n[Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\nyou should use the [DialogService](https://lundalogik.github.io/lime-web-components/versions/latest/#/api/dialog-service)\nfrom Lime Web Components to open dialogs in Lime CRM.\n:::","i":0,"n":0.12}],"4":[{"v":"open","i":3,"n":1},{"v":"heading","i":2,"n":1},{"v":"fullscreen","i":1,"n":1},{"v":"closingActions","i":0,"n":1}],"5":[{"v":"`true` if the dialog is open, `false` otherwise.","i":3,"n":0.354},{"v":"The heading for the dialog, if any.","i":2,"n":0.378},{"v":"Set to `true` to make the dialog \"fullscreen\".","i":1,"n":0.354},{"v":"Defines which action triggers a close-event.","i":0,"n":0.408}],"6":[],"7":[{"v":"boolean","i":3,"n":1},{"v":"DialogHeading | string","i":2,"n":0.577},{"v":"boolean","i":1,"n":1},{"v":"ClosingActions","i":0,"n":1}],"8":[{"v":"closing","i":1,"n":1},{"v":"close","i":0,"n":1}],"9":[{"v":"Emitted when the dialog is in the process of being closed.","i":1,"n":0.302},{"v":"Emitted when the dialog is closed from inside the component.\n(*Not* emitted when the consumer sets the `open`-property to `false`.)","i":0,"n":0.229}],"10":[],"11":[{"v":"void","i":1,"n":1},{"v":"void","i":0,"n":1}]}},{"i":14,"$":{"0":[{"v":"exampleComponent limel-example-dock-colors-css","i":5,"n":0.707},{"v":"exampleComponent limel-example-dock-expanded","i":4,"n":0.707},{"v":"exampleComponent limel-example-dock-mobile","i":3,"n":0.707},{"v":"exampleComponent limel-example-dock-notification","i":2,"n":0.707},{"v":"exampleComponent limel-example-dock-custom-component","i":1,"n":0.707},{"v":"exampleComponent limel-example-dock-basic","i":0,"n":0.707}],"1":{"v":"Dock","n":1},"2":{"v":"/component/limel-dock/","n":1},"3":[{"v":"Using CSS color variables for theming the Dock\n\nA few CSS variables can be used to customize the look and feel of the steps.\n\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual Dock items!\n:::\n:::important\nMake sure that:\n- text has enough contrast with its background and is readable.\n:::","i":6,"n":0.139},{"v":"Basic Example expanded","i":5,"n":0.577},{"v":"Setting a horizontal layout for mobile devices.\n\nBy default, the component has a vertical layout, placing the\nDock items in a column. However, the component will render the\nDock items in a horizontal layout when the screen width is smaller\nthan `700px`.\n\nIf you prefer the component to switch to the horizontal mobile layout\nat another breakpoint, use the `mobileBreakPoint` property and give it\na desired value in pixels (without `px`).\n\nIn this example, we have chosen a very large number (`5000`) to force\nthe component to be rendered in mobile layout here in the documentation,\nno matter how large the reader's screen size is.\n\n:::important\nTriggering the mobile layout does not automatically adjust the position\nof the component at the bottom of the screen. You should do that manually\nyourself in a proper way, depending on where the component is used;\nfor example by using CSS media queries, and setting `position: fixed`.\n:::\n\n:::note\nLabels are not displayed in horizontal layout, but they will be instead\ndisplayed as tooltips.\n:::","i":4,"n":0.081},{"v":"Displaying a notification badge\n\nIt is possible to display a notification badge on each individual\nbutton in the Dock. Badges are supposed to inform the user that\nthere is something in the menu that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\n\n:::important\nThe menus are not a part of the Dock. They are individual components\nthat you develop separately. Make sure that the information\nand interactions regarding the notifications are correctly handled.\n\nFor example, when the items that require user's attention are\nseen or handled by the user after opening the menu, the badge on the\nDock button should disappear.\n:::\n\nWhen this quantity is unclear or undefined, you can simply pass an\nempty string (`badge: ''`), which will only render a circle on the button.\nThis is enough to attract user's attention.\nHowever, it is also possible to use a short string such as \"·\" or \"!\"\nfor such cases, if considered necessary.\n\n:::warning\nDo not negatively exploit this possibility and spam users' awareness.\nThe Dock is the most important and most dominant structural part of\nthe UI of your application. Therefore crowding it with too much noise\n_will_ negatively affect the user experience.\n:::","i":3,"n":0.073},{"v":"Displaying a custom component after Dock item is clicked\n\nIt is possible to display a custom component in a popover,\nwhen the Dock item is clicked. This enables you to design\nthe content of the menu as you wish, independently from the Dock.\n\n:::note\nPay attention to the `--popover-surface-width` variable in the\n`.SCSS` file. That defines the width the popover component, which is `auto`\nby default. But modifying it may be helpful depending on the usage.\n:::","i":2,"n":0.12},{"v":"Basic Example\n\nThe Dock component can be used as a place for displaying the app's\nprimary navigation.\n\n:::important\nAvoid having too many items in the Dock, because it will become\nproblematic on mobile devices, when the component is rendered horizontally.\n:::\n\nIt is possible to split the dock items into two sections and place one or\nmore items at the bottom of the column. To do so, you can use `isFooterStart`\non one of the items, which will act as a separator between the two sections,\npushing itself and preceding to the bottom.\n\n:::important\nYou must provide `label`s for to improve accesibility! Without labels,\nscreen-readers cannot tell visually impared persons about the content\nof the Dock.\n:::\n\nIt is possible to add extra information about the items using `helperLabel`.\n\nWhen the component is expanded, only the `helpeLabel` is used\nin the tooltip, when items are hovered.\nWhen the component is shrunk, both `label` and `helperLabel` are displayed\ninside the tooltip.\n\nKeep in mind that on a mobile phone, the component will be displayed horizontally\nand no labels are displayed! Instead, both `label` and `helperLabel` will be used\nas a tooltip to improve accessibility for screen-reader technologies.\n\nHowever, since hovering is not possible on touch-only mobile devices, users who\nrely on their vision to navigate the app will only see your chosen icons.\nSo pick them carefully.","i":1,"n":0.071}],"4":[{"v":"mobileBreakPoint","i":5,"n":1},{"v":"expanded","i":4,"n":1},{"v":"dockItems","i":3,"n":1},{"v":"dockFooterItems","i":2,"n":1},{"v":"allowResize","i":1,"n":1},{"v":"accessibleLabel","i":0,"n":1}],"5":[{"v":"Defines the breakpoint in pixles, at which the component will be rendered\nin a hoizontal layout. Default breakpoint is `700` pixels, which means\nwhen the screen size is smaller than `700px`, the component will automatically\nswitch to a horizontal layout.","i":5,"n":0.164},{"v":"Defines the width of the component, when it loads.\n- `true`: shows both icons and labels of the Dock items.\n- `false`: only shows icons of the doc items, and displays\ntheir labels as tooltip.\n\nNote: when `useMobileLayout` is `true`, labels will always\nbe shown as tooltips. Read more below…","i":4,"n":0.149},{"v":"Items that are placed in the dock.","i":3,"n":0.378},{"v":"Items that are placed at the bottom of the dock. (Or at the end in mobile\nlayout.)","i":2,"n":0.25},{"v":"Set to `false` if you do not want to allow end-users\nto exapnd or shrink the Dock. This will hide the\nexpand/shrink button, and the only things that defines\nthe layout will be the `expanded` property, and\nthe `mobileBreakPoint`.","i":1,"n":0.169},{"v":"A label used to describe the purpose of the navigation element to users\nof assistive technologies, like screen readers. Especially useful when\nthere are multiple navigation elements in the user interface.\nExample value: \"Primary navigation\"","i":0,"n":0.177}],"6":[],"7":[{"v":"number","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"DockItem[]","i":3,"n":1},{"v":"DockItem[]","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"menuOpen","i":3,"n":1},{"v":"itemSelected","i":2,"n":1},{"v":"dockExpanded","i":1,"n":1},{"v":"close","i":0,"n":1}],"9":[{"v":"Fired when a dock menu is opened.","i":3,"n":0.378},{"v":"Fired when a dock item has been selected from the dock.","i":2,"n":0.302},{"v":"Fired when a Dock is expanded or collapsed.","i":1,"n":0.354},{"v":"Fired when the popover is closed.","i":0,"n":0.408}],"10":[],"11":[{"v":"DockItem","i":3,"n":1},{"v":"DockItem","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"void","i":0,"n":1}]}},{"i":15,"$":{"0":[{"v":"exampleComponent limel-example-file-composite","i":3,"n":0.707},{"v":"exampleComponent limel-example-file-accepted-types","i":2,"n":0.707},{"v":"exampleComponent limel-example-file-custom-icon","i":1,"n":0.707},{"v":"exampleComponent limel-example-file","i":0,"n":0.707}],"1":{"v":"File","n":1},"2":{"v":"/component/limel-file/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":4,"n":0.354},{"v":"Limit accepted file types","i":3,"n":0.5},{"v":"Custom icon and color\nThis component automatically visualizes the file type, based on the extension\nof the selected file. The visualization is done by displaying a colorful icon\nalong with the filename, for the most common file types.\n\nHowever, you can also customize the icon and its fill color & background color.","i":2,"n":0.144},{"v":"Basic example","i":1,"n":0.707},{"v":"This component lets end-users select a *single* file from their device\nstorage. Regardless of the user's device or operating system, this component\nopens up a file picker dialog that allows the user to choose a file.\n\n## Using correct labels\n\nThis file picker can be used in different contexts. The component's distinct\nvisual design including the upload icon hints end-users that this is not a\nnormal input field like other fields in the form for example.\n\n:::important\nyou need to use a descriptive `label` that clarifies the\nfunctionality of the file picker, and/or provides users with clear\ninstructions.\n\nDepending on the context, you may need to avoid labels such as:\n- File\n- Document\n\nand instead consider using labels like:\n- Attach a file\n- Upload a file\n- Choose a document\n- Choose a file\n\nand similar phrases...\n:::","i":0,"n":0.091}],"4":[{"v":"value","i":6,"n":1},{"v":"required","i":5,"n":1},{"v":"readonly","i":4,"n":1},{"v":"language","i":3,"n":1},{"v":"label","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"accept","i":0,"n":1}],"5":[{"v":"The selected file.","i":6,"n":0.577},{"v":"Set to `true` to indicate that the field is required.","i":5,"n":0.316},{"v":"Set to `true` to disable adding and removing files, but allow interaction\nwith any already existing file.","i":4,"n":0.25},{"v":"Defines the localisation for translations.","i":3,"n":0.447},{"v":"The input label.","i":2,"n":0.577},{"v":"True if the input should be disabled","i":1,"n":0.378},{"v":"The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)","i":0,"n":0.5}],"6":[],"7":[{"v":"FileInfo","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":3,"n":0.243},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"interact","i":1,"n":1},{"v":"change","i":0,"n":1}],"9":[{"v":"Dispatched when clicking on a chip","i":1,"n":0.408},{"v":"Dispatched when a file is selected/deselected","i":0,"n":0.408}],"10":[],"11":[{"v":"number | string","i":1,"n":0.577},{"v":"FileInfo","i":0,"n":1}]}},{"i":16,"$":{"0":[{"v":"exampleComponent limel-example-form-row-layout","i":10,"n":0.707},{"v":"exampleComponent limel-example-server-errors","i":9,"n":0.707},{"v":"exampleComponent limel-example-custom-error-message","i":8,"n":0.707},{"v":"exampleComponent limel-example-form-span-fields","i":7,"n":0.707},{"v":"exampleComponent limel-example-form-layout","i":6,"n":0.707},{"v":"exampleComponent limel-example-props-factory-form","i":5,"n":0.707},{"v":"exampleComponent limel-example-custom-component-form","i":4,"n":0.707},{"v":"exampleComponent limel-example-dynamic-form","i":3,"n":0.707},{"v":"exampleComponent limel-example-list-form","i":2,"n":0.707},{"v":"exampleComponent limel-example-nested-form","i":1,"n":0.707},{"v":"exampleComponent limel-example-form","i":0,"n":0.707}],"1":{"v":"Form","n":1},"2":{"v":"/component/limel-form/","n":1},"3":[{"v":"Row layout","i":11,"n":0.707},{"v":"Form with server validation","i":10,"n":0.5},{"v":"Form with custom error message","i":9,"n":0.447},{"v":"Stretching fields in a form\n\nSometimes, you need a field in the form to occupy several columns or the\nentire row, and stretch itself as wide as the form's width,\ndisregarding the form's layout and placement of the item in the list.\n\nThis could be nice for fields that require more space to provide better\nusability.\n\n:::tip\nFor example, a larger `textarea` is easier for the user to type in and\na `slider` that has many steps is easier to interact with when it is rendered wider.\n:::\n\nTo do so, in your schema you need to specify a `layout` for the field itself.\n`span` specifies the number of columns that the field should span.\n\nThus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\nSince we do not offer a *form layout* that has more than five columns,\nvalues higher than 5 (or higher than the maximum number of columns in the form)\nwill only force the field to be full-width, just like `all` does.\n\n```ts\nexport const schema = {\n    …\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                layout: {\n                      colSpan: 'all',\n                  },\n              },\n        },\n        …\n    },\n    …\n};\n```\n\n###### Dense layout (Auto reorder fields to avoid empty cells)\nThe order of fields and the number of columns that a field must span, can\naffect the layout of your responsive form when the container width changes.\n\nLet's say you have a form with a 4 column layout, and you specify that its\nsecond field must span 3 columns.\nIf the container's width decreases, it will force the form to render its\nlayout in 3 columns instead. Therefore, the second field has to jump\nto the next line to still be able to span 3 columns.\nThis will leave 2 empty cells in the first row, right after the first field.\n\nTo avoid these empty cells in the UI, limel-form will place the next available\nfield in this hole, provided it fits. So the hole may be filled by a single 2 column\nwide field, by two 1 column wide fields, or only partially filled by a single 1 column\nwide field. If none of the remaining fields fit, the hole will be left as it is.\n\nHowever, you can disable this functionality by setting `dense` to `false` in the\noptions for the grid layout.\n\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            dense: false,\n        },\n    },\n};\n```\n\n:::note\nSometimes, the order of fields are important for the way users perceive the form.\nIf you choose to use the default auto-reordering behavior, make sure to test your\nform's layout in different screen sizes to see whether you can mitigate unwanted\nlayout changes.\n\nSome unwanted results can be avoided by changing the order of the fields,\nso that they render appropriately on different screens, or by dividing\nthe form into more sections.\n:::\n\n###### Stretching a field vertically\nMost standard elements that can be used in forms, such as `limel-input`,\n`limel-select`, `limel-slider`, etc, have a fixed height, and therefore\nit does not really make sense to stretch them vertically, and we strongly\nrecommend you not to!\n\nBut there are some exceptions. One of them is `limel-input-field` with\n`type='textarea'`.\n\nAlso, if you create a custom component for your form—let's say a map—you\ncan use `rowSpan` to increase the height of your custom component.\n```ts\nexport const schema = {\n    type: 'object',\n    properties: {\n        comment: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                      colSpan: 3,\n                      rowSpan: 2,\n                },\n            },\n        },\n    },\n};\n```\n\n:::note\nIf you do *not* set the `rowSpan` for a component, it can stretch vertically\nwithin its row, and the row will simply expand with the component.\n\nIf you *do* set a `rowSpan`, even if you set it to `1`, the component is\nfixed to that height. What happens to any potential overflow depends on the\ncomponent.\n:::\n\n:::warning\nCustom web-components that you include in the forms should not have hard-coded\n`width` or `height` values! Otherwise they will stretch out of their cell and break\nthe UI. Make sure that such components are internally designed to be responsive,\nand that their `:host` and any potential wrapping container has the following styles:\n```scss\n:host {\n    display: block; // or another suitable property\n    width: 100%;\n    height: 100%;\n}\n:host([hidden]) {\n    display: none;\n}\n.my-component {\n    width: 100%;\n    height: 100%;\n}\n```\n:::","i":8,"n":0.039},{"v":"Layout\nBy default, each item in a limel-form will be rendered in a single row, and\neach row occupies the entire available width of the form's container.\n\nThis default layout may work fine on small screens or narrow containers,\nbut on larger screens it usually won't produce a nice layout. Thus we\nrecommend that you choose an appropriate responsive layout for your form.\n\n###### Enabling responsive layouts\n\nBy specifying `'grid'` as the layout `type` in your schema, as well as your desired\nnumber of `columns`, you can leave the job of responsively handling the form\nlayout to Lime Elements.\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 3,\n        },\n    },\n    …\n};\n```\n:::note\nValue for `columns` can only be `5`, `4`, `3`, `2`, or `1`. If you do not\nspecify a value, `limel-form` will choose `5` by default.\n:::\n\nSo if you have chosen `4` for instance, the form will do its best to fit\nfour columns in a row. But for smaller containers in which placement of four\nitems per row is not possible, the form will automatically change the layout\nand fit 3 items per row. As the container's width decreases, the number of\ncolumns will also decrease.\n\n:::tip\nYou can divide a form into sections,\nand specify a different layout for each section.\n:::\n\nIn this example, each collapsible section has its own `colSpan`.\nHowever, since the layout is responsive, make sure to change the browser\nwindow size to see how their responsive layout changes.","i":7,"n":0.066},{"v":"Using `propsFactory`","i":6,"n":0.707},{"v":"Custom form component\n\nYou can specify a custom component to use for any property in your form. This\nis done under the `lime` key in the schema, following the\n[LimeSchemaOptions](#/type/LimeSchemaOptions/) specification, for example:\n\n```ts\nconst schema = {\n    type: 'object',\n    properties: {\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'my-useful-hero-picker',\n                },\n            },\n        },\n    },\n};\n```\n\nWhile you can, in principle, use any component in a form, your custom form\ncomponents should implement the [FormComponent](#/type/FormComponent/)\ninterface.","i":5,"n":0.12},{"v":"Dynamic schema","i":4,"n":0.707},{"v":"List data","i":3,"n":0.707},{"v":"Nested data","i":2,"n":0.707},{"v":"Basic form with validation","i":1,"n":0.5}],"4":[{"v":"value","i":5,"n":1},{"v":"transformErrors","i":4,"n":1},{"v":"schema","i":3,"n":1},{"v":"propsFactory","i":2,"n":1},{"v":"errors","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"Value of the form","i":5,"n":0.5},{"v":"Custom function to customize the default error messages","i":4,"n":0.354},{"v":"The schema used to render the form","i":3,"n":0.378},{"v":"Factory for creating properties for custom form components\n\nWhen using custom components in the form some properties might have to be\nset dynamically. If this factory is set, it will be called with the\ncurrent schema for the field for each custom component in the form. The\nfactory must return an object where each key is the name of the property\nthat should be set, along with its value.","i":2,"n":0.125},{"v":"Extra errors to display in the form. Typical use case is asynchronous\nerrors generated server side.","i":1,"n":0.258},{"v":"Set to `true` to disable the whole form.","i":0,"n":0.354}],"6":[],"7":[{"v":"object","i":5,"n":1},{"v":"(errors: FormError[]) => FormError[]","i":4,"n":0.5},{"v":"{ [key: string]: any; id?: string; }","i":3,"n":0.378},{"v":"(schema: Record<string, any>) => Record<string, any>","i":2,"n":0.408},{"v":"{ [key: string]: ValidationError | string[]; }","i":1,"n":0.378},{"v":"boolean","i":0,"n":1}],"8":[{"v":"validate","i":1,"n":1},{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the validity of the form changes, or when\na change is made to an invalid form","i":1,"n":0.243},{"v":"Emitted when a change is made within the form","i":0,"n":0.333}],"10":[],"11":[{"v":"ValidationStatus","i":1,"n":1},{"v":"object","i":0,"n":1}]}},{"i":17,"$":{"0":[{"v":"slot - Grid content","i":1,"n":0.5},{"v":"exampleComponent limel-example-grid","i":0,"n":0.707}],"1":{"v":"Grid","n":1},"2":{"v":"/component/limel-grid/","n":1},"3":[{"v":"We use the `grid-area` property to give each component a unique name, and\nthen use this name to \"draw\" our grid layout.\n\nYou can name each component anything you want, like `salespipe`, or\n`infotile-active-support-tickets`, but keeping the names to a fixed number of\ncharacters makes the \"drawing\" of the grid look more like the actual grid.\nOne to three characters is probably a good number for most cases.\n\nAny \"name\" that doesn't match a named element will create empty cells. In our\ncase, we use a dot (`.`) to mark empty cells. Empty cells can be put anywhere\nin the grid, not just at the end.\n\nNote that we can add some extra spaces after the dot marking an empty cell,\nin order to align the next cell in our config-string. This can also be used\nif your elements have named of differing lengths. The extra whitespace is\nignored when the CSS is parsed.\n\nIf the name of an element does not appear in the grid-configuration, it will\nnot be displayed at all. This might be useful if you wish to show a specific\ncomponent only under certain circumstances, like if the viewport is large\nenough to accomodate it.","i":1,"n":0.074},{"v":"The `limel-grid` component creates a grid which can be used to control the\nlayout of other components. It uses CSS [grid-template-areas](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\nto enable easy configuration of its child-elements.","i":0,"n":0.196}],"4":[],"5":[],"6":[],"7":[],"8":[],"9":[],"10":[],"11":[]}},{"i":18,"$":{"0":[{"v":"slot [no name] - DEPRECATED. The `actions` slot used to be unnamed. This\nbehavior has been deprecated, and support will be dropped in a future\nversion. Please add `slot=\"actions\"` to your elements to ensure your code\nwill continue to work with future versions of Lime Elements.","i":5,"n":0.152},{"v":"slot actions - Content (actions) to be put inside the far right surface of\nthe header","i":4,"n":0.258},{"v":"exampleComponent limel-example-header-narrow","i":3,"n":0.707},{"v":"exampleComponent limel-example-header-responsive","i":2,"n":0.707},{"v":"exampleComponent limel-example-header-colors","i":1,"n":0.707},{"v":"exampleComponent limel-example-header","i":0,"n":0.707}],"1":{"v":"Header","n":1},"2":{"v":"/component/limel-header/","n":1},"3":[{"v":"Narrow headers\nSometimes your UI design may require having a narrower header.\nThis will be easy to achieve by sending in the class of `is-narrow`\nto your component.\n\nThis will render the header icon smaller, and reduces the font size of\nthe `heading`.\n\n:::tip\nKeep in mind that headers are programmed to grow in height, depending\non their content. So if you have large custom components in the `actions`\nslot or use both `heading` and `subheading`, they will still force the header\nto appear tall.\n:::","i":4,"n":0.115},{"v":"How Responsive layout of header works\nHowever, sometimes you may need to make the layout be responsive and split\ninto two rows, at a break point.\n\nTo activate this responsive layout, you can simply add the `has-responsive-layout`\nclass to your `limel-header` component.\n\nThis makes a few changes in the layout. Firstly, both the left side (icon and\nheadings) and right side (actions slot) will occupy 50% of the total header\nwidth each. However, the width of left and right side will never become smaller\nthan `22rem`.\n\n:::tip\nThe value of `22rem` is the default breakpoint. But you can easily change it\nby tweaking the `--header-responsive-breakpoint` variable in your component.\n:::","i":3,"n":0.101},{"v":"Colorful header\nIt's up to you to choose colors for the background, text or icon.\nWhen you change the default colors pay attention to how they look together.\nFor instance the text is readable and has enough contrast with a background color.","i":2,"n":0.16},{"v":"How default layout of header works\nAll content of a header by default are placed on a horizontal row.\nThis will always render the headings on the left side, and the actions\non the right side.\n\nIn small containers when having the default layout, the `actions` area\nwins the battle of limited space! It means, if you have a very wide\ncomponent in the actions area, it will never shrink in size, and instead\nforces the headings to truncate.\n\n:::tip\nUsers can still hover the cursor on the truncated headings to read the full\ntext.\n:::","i":1,"n":0.108},{"v":"A header is the top most visual element in a component, page, card, or a view.\n\n## Usage\nA header is the first thing that clarifies a context for users.\nDue to their positions in the UI hierarchy, headers are the most\nprominent elements of a user interface; and because of that, they carry both\nvital information and fundamental controls for the area of the interface\nthey represent.\n\nFor example, when a header is placed on top of a card, it should quickly\nexplain the card to the user. When placed on top of a modal, it should easily\nclarify what the modal is about. When displayed on top of a fullscreen view,\nit should indicate where in the system users are, and what part of the app\nthey are looking at.\n\n\n## Layout\nThe vital information in a header is usually manifested in form of an icon,\nand a heading. A subheading also could be added to provide supplementary\ninformation. There is also a third place for displaying supplementary information\nor \"supporting text\", which will be rendered as a part of the subheading.\nAlong with this information, headers can also include actions, controls, or\nmenus.\n\n:::important\nSuch actions or menus must affect the entire section of the interface\nwhich the header is representing. For example, a _Delete_ button on a card\nheader must delete that entire card and its respective contents all together,\nnot for example a selected item which is visible in the content of that card.\n:::\n\n\n:::warning\nDo not user background color on icons in the headers. It is much better and\nmuch easier for the eye if your icon itself has a color.\nBackground colors behind icons make them look like \"call to action\" buttons\nand take a lot of attention from users.\n:::","i":0,"n":0.061}],"4":[{"v":"supportingText","i":3,"n":1},{"v":"subheading","i":2,"n":1},{"v":"icon","i":1,"n":1},{"v":"heading","i":0,"n":1}],"5":[{"v":"An extra string of text to display along with with the Subheading","i":3,"n":0.289},{"v":"Subheading to display","i":2,"n":0.577},{"v":"Icon to display","i":1,"n":0.577},{"v":"Title to display","i":0,"n":0.577}],"6":[],"7":[{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":19,"$":{"0":[{"v":"exampleComponent limel-example-icon-background","i":1,"n":0.707},{"v":"exampleComponent limel-example-icon","i":0,"n":0.707}],"1":{"v":"Icon","n":1},"2":{"v":"/component/limel-icon/","n":1},"3":[{"v":"Example with background color\n:::note\nNote that `badge` is set to `true` to provide more space around the icon,\nand make sure the background color is nicely displayed.\n:::","i":2,"n":0.2},{"v":"The recommended icon library for use with Lime Elements is the Windows 10 set\nfrom Icons8 (https://icons8.com/icons/windows). This set is included in the\nrelevant Lime products. If you are using Lime Elements in a non-Lime product,\nyou will have to supply your own icons.\n\nThe size and color of the icon is set in CSS, however there are a few\nstandard sizes defined that can be used with the `size` property.\n\n### Setup\nTo use **@lundalogik/lime-icons8**, the `/assets` folder from\n__@lundalogik/lime-icons8__ must be made available on the webserver.\nTo use a different icon set, the icons must be placed in a folder structure\nthat looks like this: `assets/icons/<name-of-icon>.svg`\n\nIf `assets` is placed in the root, no other setup is needed. The icons will\nbe fetched with a relative URL from `/assets/icons/<name-of-icon>.svg`.\n\nIf `assets` is placed in a sub-folder somewhere, the easiest way to make the\nicons available is to use the HTML `base` element:\n\n```\n<base href=\"/my/parent/path/\">\n```\n\nIf this is not enough, or if the `base` element is already in use for\nsomething else, a global icon path can be configured with the `limel-config`\nelement:\n```\n<limel-config config={{iconPath: '/my/parent/path/'}} />\n```\n\n### Lime icons\nThere are icons included in the **@lundalogik/lime-icons8** package which are\ndesigned by our designers at Lime.\nThe names of these icons start with `-lime-`, which makes them easy to\nfind using the Icon Finder tool below.\n:::note\nSome of the `-lime-` icons have multiple colors and use our own CSS variables\ninstead of HEX or RGB values to visualize their colors. Thus, you must import\nour color palette css files into your project to render the icons properly.\nRead more about our [Color System](#/DesignGuidelines/color-system.md/)\nand how to do this.\n:::\n\n### Icon Finder\n\nSearch for an icon and **click on it to copy its name to clipboard**.\n\n<limel-example-icon-finder />","i":0,"n":0.061}],"4":[{"v":"size","i":2,"n":1},{"v":"name","i":1,"n":1},{"v":"badge","i":0,"n":1}],"5":[{"v":"Size of the icon","i":2,"n":0.5},{"v":"Name of the icon","i":1,"n":0.5},{"v":"Set to `true` to give the icon a round background with some padding.\nOnly works when the `size` attribute is also set.","i":0,"n":0.218}],"6":[],"7":[{"v":"\"large\" | \"medium\" | \"small\" | \"x-small\"","i":2,"n":0.378},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":20,"$":{"0":[{"v":"exampleComponent limel-example-icon-button-composite","i":4,"n":0.707},{"v":"exampleComponent limel-example-icon-button-toggle-state","i":3,"n":0.707},{"v":"exampleComponent limel-example-icon-button-elevated","i":2,"n":0.707},{"v":"exampleComponent limel-example-icon-button-disabled","i":1,"n":0.707},{"v":"exampleComponent limel-example-icon-button-basic","i":0,"n":0.707}],"1":{"v":"Icon button","n":0.707},"2":{"v":"/component/limel-icon-button/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":5,"n":0.354},{"v":"Toggle State\n\nThis isn't really a feature of `limel-icon-button`, but since it is a common\nuse case, here is a simple way to make the icon button toggle between two\ndifferent \"states\", each with its own icon and label.","i":4,"n":0.167},{"v":"Elevated\n\nAn alternative button style, which helps communicate that this is a button\nwhich can be clicked.","i":3,"n":0.258},{"v":"Disabled","i":2,"n":1},{"v":"Basic Example\n\nJust an icon and a click-handler.\nOpen the dev-tools console to see logged clicks.","i":1,"n":0.267}],"4":[{"v":"label","i":3,"n":1},{"v":"icon","i":2,"n":1},{"v":"elevated","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"The text to show to screenreaders and other assistive tech.","i":3,"n":0.316},{"v":"The icon to display.","i":2,"n":0.5},{"v":"Set to `true` to give the button our standard \"elevated\" look, lifting\nit off the flat layout.","i":1,"n":0.25},{"v":"Set to `true` to disable the button.","i":0,"n":0.378}],"6":[],"7":[{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":21,"$":{"0":[{"v":"exampleComponent limel-example-info-tile-styling","i":4,"n":0.707},{"v":"exampleComponent limel-example-info-tile-loading","i":3,"n":0.707},{"v":"exampleComponent limel-example-info-tile-progress","i":2,"n":0.707},{"v":"exampleComponent limel-example-info-tile-badge","i":1,"n":0.707},{"v":"exampleComponent limel-example-info-tile","i":0,"n":0.707}],"1":{"v":"Info tile","n":0.707},"2":{"v":"/component/limel-info-tile/","n":1},"3":[{"v":"How to style the Info tile\n\nThe component offers different CSS variables for styling\nthe color of the text, background, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","i":5,"n":0.167},{"v":"Loading state\n\nSometimes the value needs to be calculated, updated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow an indeterminate progressbar indicating the data is being updated,\nwhile the older value is still being displayed.\n\n:::note\nNote that this does _not_ disable the link, and most probably you\ndo not need it to be disabled either.\nIf the link should be disabled while loading, the\n`disabled` property should be set to `true` as well.\n:::","i":4,"n":0.102},{"v":"Displaying a progress bar\n\nBy defining a numeric `progressValue`, you can display\na circular progress bar to visualize more data on the component.\nThis can for instance help illustrate how much of a\nset goal has been reached, which together with the `value` will help users\nget a better overview of the provided data.\n\nWhen the circular progress is shown, that would become the primary\nillustrative element on the component,\nwhich means the icon will be rendered smaller, only as a supportive\ncontextual visual element.\n\n:::tip\nIt is possible to customize the progress bar's suffix, but it is\nset to display the percentage sign (**%**) by default.\n:::","i":3,"n":0.103},{"v":"Displaying a notification badge\n\nThe component can display a badge, which could either be a `number` or\na `string`. Read more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","i":2,"n":0.186},{"v":"Basic example\n\nThis component does its best to offer a responsive layout\nthat reacts both to the length of text, and size of the container.\n\n:::note\nTo use this component properly, you need to define both\na declared `height` and a declared `width` for it. Alternatively,\nmake sure that its container enforces a width and height,\nfor instance, use it as a flex or grid child.\n:::\n\nIn this example, you can resize the component to see how it\ntries to adjust its content to the size of its container.\n\n:::tip\nTry to avoid long textual content to get\nthe best possible visualization. They can cause\nundesired overlapping of the content, depending on the size of the\ncomponent.\n:::","i":1,"n":0.099},{"v":"This component can be used on places such as a start page or a dashboard.\nIt offers features for visualizing aggregated data along with supplementary\ninformation.\n\nIf clicking on the component should navigate the user to\na new screen or web page, you need to provide a URL,\nusing the `link` property.","i":0,"n":0.146}],"4":[{"v":"value","i":9,"n":1},{"v":"suffix","i":8,"n":1},{"v":"progress","i":7,"n":1},{"v":"prefix","i":6,"n":1},{"v":"loading","i":5,"n":1},{"v":"link","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"icon","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"badge","i":0,"n":1}],"5":[{"v":"A piece of text or number that is the main piece of information\nwhich the component is intended to visualize.","i":9,"n":0.229},{"v":"A string of text that is visually placed after the value.","i":8,"n":0.302},{"v":"Properties of the optional circular progress bar.\n\nDefaults:\n- `maxValue`: 100\n- `suffix`: %\n- `percentageColors`: false\n\nColors change with intervals of 10 %.","i":7,"n":0.229},{"v":"A string of text that is visually placed before the value.","i":6,"n":0.302},{"v":"Set to `true` to put the component in the `loading` state.\nThis does _not_ disable the link. To do so, the\n`disabled` property should be set to `true` as well.","i":5,"n":0.189},{"v":"If supplied, the info tile will be a clickable link.\n\nSupplying a value also adds an elevated effect using a shadow,\nas well as `cursor: pointer`, which appears on hover.\nWhile we strongly recommend supplying a link whenever the\ncomponent should act as a link, if this is not possible, and\nyou need to provide interaction through a click handler,\nyou can still get the correct styling by supplying a `Link`\nobject with the `href` property set to `'#'`.","i":4,"n":0.118},{"v":"The text to show below the info tile. Long labels will be truncated.","i":3,"n":0.277},{"v":"Name of icon for the info tile.","i":2,"n":0.378},{"v":"Set to `true` if info tile is disabled.","i":1,"n":0.354},{"v":"If supplied, the info tile will display a notification badge.","i":0,"n":0.316}],"6":[],"7":[{"v":"number | string","i":9,"n":0.577},{"v":"string","i":8,"n":1},{"v":"InfoTileProgress","i":7,"n":1},{"v":"string","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"Link","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"number | string","i":0,"n":0.577}],"8":[],"9":[],"10":[],"11":[]}},{"i":22,"$":{"0":[{"v":"exampleComponent limel-example-input-field-focus","i":15,"n":0.707},{"v":"exampleComponent limel-example-input-field-pattern","i":14,"n":0.707},{"v":"exampleComponent limel-example-input-field-search","i":13,"n":0.707},{"v":"exampleComponent limel-example-input-field-prefix","i":12,"n":0.707},{"v":"exampleComponent limel-example-input-field-suffix","i":11,"n":0.707},{"v":"exampleComponent limel-example-input-field-textarea","i":10,"n":0.707},{"v":"exampleComponent limel-example-input-field-error-icon","i":9,"n":0.707},{"v":"exampleComponent limel-example-input-field-showlink","i":8,"n":0.707},{"v":"exampleComponent limel-example-input-field-icon-both","i":7,"n":0.707},{"v":"exampleComponent limel-example-input-field-icon-trailing","i":6,"n":0.707},{"v":"exampleComponent limel-example-input-field-icon-leading","i":5,"n":0.707},{"v":"exampleComponent limel-example-input-field-autocomplete","i":4,"n":0.707},{"v":"exampleComponent limel-example-input-field-number","i":3,"n":0.707},{"v":"exampleComponent limel-example-input-field-text-multiple","i":2,"n":0.707},{"v":"exampleComponent limel-example-input-field-placeholder","i":1,"n":0.707},{"v":"exampleComponent limel-example-input-field-text","i":0,"n":0.707}],"1":{"v":"Input field","n":0.707},"2":{"v":"/component/limel-input-field/","n":1},"3":[{"v":"Setting focus programmatically\n\nTo set focus programmatically, call `.focus()` on the `limel-input-field`\nelement. Note that, for this to work, the `tabindex` property must be set\non the `limel-input-field`.\n\n- `tabindex=\"0\"` means that the element should be focusable in sequential\nkeyboard navigation, after any positive tabindex values and its order is\ndefined by the document's source order.\n- A _positive value_ means the element should be focusable in sequential\nkeyboard navigation, with its order defined by the value of the number.\n\nRead more on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).","i":16,"n":0.115},{"v":"Input Field with pattern","i":15,"n":0.5},{"v":"Input Field of Type Search","i":14,"n":0.447},{"v":"Prefix\nAn input Field with a currency symbol text displayed as prefix","i":13,"n":0.302},{"v":"Suffix\nAn Input Field with a unit of measurement displayed as suffix","i":12,"n":0.302},{"v":"Input Field of Type Textarea","i":11,"n":0.447},{"v":"Input Field with Error Icon","i":10,"n":0.447},{"v":"With `showLink=true`","i":9,"n":0.707},{"v":"Input Field with Leading and Trailing Icons & Action","i":8,"n":0.333},{"v":"Input Field with Trailing Icon & Action\n\nA trailing icon can be added to input fields along with an action\nfor that trailing icon.\n:::note\nUse trailing icons only when you intend to have an action associated with them.\nTrailing icons of input fields will get an interactive visual effect when\nhovered to hint users that they are clickable.\n\nTherefore, a purely ornamental trailing icon that has this interactive effect\nwill be confusing for users.\n:::","i":7,"n":0.122},{"v":"Input Field with Leading Icon\n\nA leading icon can be used to visually \"decorate\" the input field. The\npurpose for adding a leading icon should be to help the user understand what\nthe field is for.\n\nIn this example, we use a map icon in addition to the \"Address\" label, to\nindicate that this field is meant for a physical address.\n\nThe example has a minimum length just to show what an invalid field looks\nlike.","i":6,"n":0.12},{"v":"Input Field with Completions","i":5,"n":0.5},{"v":"Input Field of Type Number","i":4,"n":0.447},{"v":"Multiple Fields","i":3,"n":0.707},{"v":"Input Field with a placeholder\n\nThe placeholder text is displayed inside the input field,\nwhen the field is focused and empty.\n\n:::tip\nA `placeholder` text is good for providing hints and examples about the expected input.\nWhile the `helperText` is better for providing instructions.\n:::\n\nUnlike `helperText` which is constantly visible while the user is typing\ninside the field, the `placeholder` text disappears as soon as the user has\ninput anything.\n\n:::note\nMake an informed decision when using `placeholder` instead of `helperText`!\nYou may have good intentions to reduce clutter on the user interface\nand use a placeholder text, because it will disappear after user has started typing.\nHowever, if the additional tips or instructions that you are trying to provide is\ncrucial or hard to remember, it is better to display them as helper text instead.\n\nThis is because disappearing crucial information will strains users’ short-term memory.\nIn a form with many fields, users can easily forget\nwhat each field was for. Especially if a field has validations that fail\nfor example after submitting. Instructions that are not visible anymore will make it\nhard for the user to realize what the problem is or how to solve it.\n:::\n:::warning\nIf no `label` is provided, then the placeholder text will be displayed even if the\ninput field is not focused.\n\nHowever, this does not mean that you should use this\nas a hack, to create a minimalistic and clean user interface. Not providing labels\nwill cause accessibility issues for users of assistive technologies,\nand strains users’ short-term memory as explained above.\nAdditionally, users may confuse the placeholder text, as an automatically\ninputted value, and skip filling in information.\n:::","i":2,"n":0.063},{"v":"Input Field of Type Text","i":1,"n":0.447}],"4":[{"v":"value","i":21,"n":1},{"v":"type","i":20,"n":1},{"v":"trailingIcon","i":19,"n":1},{"v":"suffix","i":18,"n":1},{"v":"step","i":17,"n":1},{"v":"showLink","i":16,"n":1},{"v":"required","i":15,"n":1},{"v":"readonly","i":14,"n":1},{"v":"prefix","i":13,"n":1},{"v":"placeholder","i":12,"n":1},{"v":"pattern","i":11,"n":1},{"v":"minlength","i":10,"n":1},{"v":"min","i":9,"n":1},{"v":"maxlength","i":8,"n":1},{"v":"max","i":7,"n":1},{"v":"leadingIcon","i":6,"n":1},{"v":"label","i":5,"n":1},{"v":"invalid","i":4,"n":1},{"v":"helperText","i":3,"n":1},{"v":"formatNumber","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"completions","i":0,"n":1}],"5":[{"v":"The value of the field.","i":21,"n":0.447},{"v":"Type of input.\n\nNote** regarding type `url`: `limel-input` uses the native validation\nbuilt into the browser for many types of input fields. The native\nvalidation for `url` is very strict, and does not allow relative urls,\nnor any other formats that are not a \"fully qualified\" url. To allow\nsuch urls, use the type `urlAsText` instead. `urlAsText` works exactly\nlike `text` in all regards, except that it enables use of the `showLink`\nproperty.","i":20,"n":0.123},{"v":"Trailing icon to show to the far right in the field.","i":19,"n":0.302},{"v":"A short piece of text to display after the value inside the input field.\nDisplayed for all types except `textarea`.","i":18,"n":0.229},{"v":"Incremental values that are valid if the field type is `number`.","i":17,"n":0.302},{"v":"For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n`true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\nrespectively. The default icon can be overridden using the `trailingIcon`\nproperty.","i":16,"n":0.177},{"v":"Set to `true` to indicate that the field is required.","i":15,"n":0.316},{"v":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","i":14,"n":0.18},{"v":"A short piece of text to display before the value inside the input field.\nDisplayed for all types except `textarea`.","i":13,"n":0.229},{"v":"The placeholder text shown inside the input field, when the field is focused and empty.","i":12,"n":0.258},{"v":"Regular expression that the current value of the input field must match.\nNo forward slashes should be specified around the pattern.\nOnly used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n`password`, or `search`.","i":11,"n":0.18},{"v":"Minimum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","i":10,"n":0.267},{"v":"Minimum allowed value if input type is `number`.","i":9,"n":0.354},{"v":"Maximum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","i":8,"n":0.267},{"v":"Maximum allowed value if input type is `number`.","i":7,"n":0.354},{"v":"Leading icon to show to the far left in the field.","i":6,"n":0.302},{"v":"The input label.","i":5,"n":0.577},{"v":"Set to `true` to indicate that the current value of the input field is\ninvalid.","i":4,"n":0.267},{"v":"Optional helper text to display below the input field when it has focus","i":3,"n":0.277},{"v":"Set to `true` to format the current value of the input field only\nif the field is of type number.\nThe number format is determined by the current language of the browser.","i":2,"n":0.183},{"v":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","i":1,"n":0.167},{"v":"list of suggestions `value` can autocomplete to.","i":0,"n":0.378}],"6":[],"7":[{"v":"string","i":21,"n":1},{"v":"\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"urlAsText\" | \"week\"","i":20,"n":0.192},{"v":"string","i":19,"n":1},{"v":"string","i":18,"n":1},{"v":"\"any\" | number","i":17,"n":0.577},{"v":"boolean","i":16,"n":1},{"v":"boolean","i":15,"n":1},{"v":"boolean","i":14,"n":1},{"v":"string","i":13,"n":1},{"v":"string","i":12,"n":1},{"v":"string","i":11,"n":1},{"v":"number","i":10,"n":1},{"v":"number","i":9,"n":1},{"v":"number","i":8,"n":1},{"v":"number","i":7,"n":1},{"v":"string","i":6,"n":1},{"v":"string","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"string[]","i":0,"n":1}],"8":[{"v":"change","i":1,"n":1},{"v":"action","i":0,"n":1}],"9":[{"v":"Emitted when the input value is changed.","i":1,"n":0.378},{"v":"Emitted when `trailingIcon` or `leadingIcon` is set\nand the icon is interacted with.","i":0,"n":0.289}],"10":[],"11":[{"v":"string","i":1,"n":1},{"v":"void","i":0,"n":1}]}},{"i":23,"$":{"0":[{"v":"exampleComponent limel-example-linear-progress-indeterminate","i":2,"n":0.707},{"v":"exampleComponent limel-example-linear-progress-color","i":1,"n":0.707},{"v":"exampleComponent limel-example-linear-progress","i":0,"n":0.707}],"1":{"v":"Linear progress","n":0.707},"2":{"v":"/component/limel-linear-progress/","n":1},"3":[{"v":"Indeterminate progress bar","i":3,"n":0.577},{"v":"Setting the color","i":2,"n":0.577}],"4":[{"v":"value","i":1,"n":1},{"v":"indeterminate","i":0,"n":1}],"5":[{"v":"The value of the progress bar. Should be between `0` and `1`.","i":1,"n":0.289},{"v":"Puts the progress bar in an indeterminate state","i":0,"n":0.354}],"6":[],"7":[{"v":"number","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":24,"$":{"0":[{"v":"exampleComponent limel-example-list-primary-component","i":13,"n":0.707},{"v":"exampleComponent limel-example-list-grid","i":12,"n":0.707},{"v":"exampleComponent limel-example-list-badge-icons-with-multiple-lines","i":11,"n":0.707},{"v":"exampleComponent limel-example-list-striped","i":10,"n":0.707},{"v":"exampleComponent limel-example-list-action","i":9,"n":0.707},{"v":"exampleComponent limel-example-list-radio-button-icons","i":8,"n":0.707},{"v":"exampleComponent limel-example-list-radio-button","i":7,"n":0.707},{"v":"exampleComponent limel-example-list-checkbox-icons","i":6,"n":0.707},{"v":"exampleComponent limel-example-list-checkbox","i":5,"n":0.707},{"v":"exampleComponent limel-example-list-badge-icons","i":4,"n":0.707},{"v":"exampleComponent limel-example-list-icons","i":3,"n":0.707},{"v":"exampleComponent limel-example-list-selectable","i":2,"n":0.707},{"v":"exampleComponent limel-example-list-secondary","i":1,"n":0.707},{"v":"exampleComponent limel-example-list","i":0,"n":0.707}],"1":{"v":"List","n":1},"2":{"v":"/component/limel-list/","n":1},"3":[{"v":"List with a primary component","i":14,"n":0.447},{"v":"List with grid layout\nTo display list items in a grid layout instead of a vertical column,\nsimply add `has-grid-layout` class to\nthe component.\n\nThis layout can be customized, using a few CSS variables.\n:::warning\n- This layout should not be used with lists that have checkboxes or radio buttons.\n- Also, it is recommended to avoid using secondary text with this layout.","i":13,"n":0.134},{"v":"Multi-line versus single-line layout\nBy default, list items will always truncate the `text` line, which is displayed\neither alone, or as a primary heading (when there are both `text` and `secondaryText`)\navailable. This means users will only see one line of text which is as wides as\nthe list item, and no more. Thus, it is a good idea not to add long strings of\ntext in the heading, as on mobile phones or small containers, they will be\nchopped off and truncated.\n\nHowever, the `secondaryText` which appears as a sub-heading is not truncated\nthat quickly. By default, lists will display 3 lines of text, and then truncate\nthe rest. Nevertheless, you can increase or decrease this number by specifying\n`maxLinesSecondaryText`.\n:::note\nDo not use `0`, negative numbers, decimal numbers, or very large numbers.\n:::","i":12,"n":0.091},{"v":"List with custom styles\n\nAdding the `has-striped-rows` class to the list will make the items more\ndistinct by adding different background colors to even and odd rows.\n\nAlso, by taking advantage of the `has-interactive-items`, hovering on a list\nitem which is not `disabled` will display an elevated visual effect, giving\nit more affordance and a solid feeling of interactivity.\n\n| Class name              | Description                                                                                     |\n| ----------------------- | ----------------------------------------------------------------------------------------------- |\n| `has-striped-rows`      | Adds distinct styling by which every other row (list item) gets a darker background.            |\n| `has-interactive-items` | Adds more affordance by applying an elevated visual effect on list item, when they are hovered. |\n\n:::note\nto get both effects, you need to apply both of these classes.\n:::","i":11,"n":0.095},{"v":"List with action menu","i":10,"n":0.5},{"v":"List with radio buttons and icons","i":9,"n":0.408},{"v":"List with radio buttons","i":8,"n":0.5},{"v":"List with checkboxes and icons","i":7,"n":0.447},{"v":"List with checkboxes","i":6,"n":0.577},{"v":"List with badge icons","i":5,"n":0.5},{"v":"List with icons","i":4,"n":0.577},{"v":"List with selectable items","i":3,"n":0.5},{"v":"List with secondary text","i":2,"n":0.5},{"v":"Basic list with separator","i":1,"n":0.5}],"4":[{"v":"type","i":4,"n":1},{"v":"maxLinesSecondaryText","i":3,"n":1},{"v":"items","i":2,"n":1},{"v":"iconSize","i":1,"n":1},{"v":"badgeIcons","i":0,"n":1}],"5":[{"v":"The type of the list, omit to get a regular list. Available types are:\n`selectable`: regular list with single selection.\n`radio`: radio button list with single selection.\n`checkbox`: checkbox list with multiple selection.","i":4,"n":0.183},{"v":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","i":3,"n":0.158},{"v":"List of items to display","i":2,"n":0.447},{"v":"Size of the icons in the list","i":1,"n":0.378},{"v":"Set to `true` if the list should display larger icons with a background","i":0,"n":0.277}],"6":[],"7":[{"v":"\"checkbox\" | \"radio\" | \"selectable\"","i":4,"n":0.447},{"v":"number","i":3,"n":1},{"v":"(ListSeparator | ListItem<any>)[]","i":2,"n":0.577},{"v":"\"large\" | \"medium\" | \"small\" | \"x-small\"","i":1,"n":0.378},{"v":"boolean","i":0,"n":1}],"8":[{"v":"select","i":1,"n":1},{"v":"change","i":0,"n":1}],"9":[{"v":"Fired when an action has been selected from the action menu of a list item","i":1,"n":0.258},{"v":"Fired when a new value has been selected from the list. Only fired if selectable is set to true","i":0,"n":0.229}],"10":[],"11":[{"v":"ListItem<any> | ListItem<any>[]","i":1,"n":0.577},{"v":"ListItem<any> | ListItem<any>[]","i":0,"n":0.577}]}},{"i":25,"$":{"0":[{"v":"exampleComponent limel-example-menu-composite","i":10,"n":0.707},{"v":"exampleComponent limel-example-menu-notification","i":9,"n":0.707},{"v":"exampleComponent limel-example-menu-secondary-text","i":8,"n":0.707},{"v":"exampleComponent limel-example-menu-hotkeys","i":7,"n":0.707},{"v":"exampleComponent limel-example-menu-grid","i":6,"n":0.707},{"v":"exampleComponent limel-example-menu-badge-icons","i":5,"n":0.707},{"v":"exampleComponent limel-example-menu-icons","i":4,"n":0.707},{"v":"exampleComponent limel-example-menu-open-direction","i":3,"n":0.707},{"v":"exampleComponent limel-example-menu-disabled","i":2,"n":0.707},{"v":"exampleComponent limel-example-menu-basic","i":1,"n":0.707},{"v":"slot trigger - Element to use as a trigger for the menu.","i":0,"n":0.289}],"1":{"v":"Menu","n":1},"2":{"v":"/component/limel-menu/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states. This example has a slightly\nmore advanced `onSelect` handler, which disables the last selected value.","i":10,"n":0.213},{"v":"With notification\n\nIt is possible to display a notification badge on each individual\nlist item inside the menu's dropdown.\n\nThese notification badges are supposed to inform the user that\nthere is something in the menu item that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\nHowever, if a number is not meaningful, it is possible to send an\nempty string (`badge: ''`), which will display a circle on the\nlist item.\n\nSince list items in the menu are hidden away, users would not\nrealize that there is something inside the menu which requires their\nattention. Which is why the trigger automatically displays a\nnotification badge on its top-right corner,\nwhen the menu contains badges.\n\nBy default, the badge is red and its text is white.\nThis is to attract users' attention. However, this is possible to override using\n[provided style variables](/#/component/limel-menu/styles/).\n\n:::warning\n- Do not negatively exploit this possibility and spam users' attention.\nCrowding the UI with too much noise _will_ negatively affect the user experience.\n- Notification badges *must* be cleared as soon as the list item is clicked by the user!\n:::","i":9,"n":0.075},{"v":"With `secondaryText`\n\nMenu items can display secondary text as well. By default, the secondary text\nwill be displayed in two lines, and then get truncated.\n\n:::important\nKeep in mind that a menu's drop-down surface will stretch as much as its default\nmaximum width values allow. However, if this default maximum width does not suit\nyour use case, you can override it using the `--menu-surface-width` variable.\n\nBut do not forget that menus should still behave responsively, thus assigning a fixed value\nshould be avoided. To make the width responsive, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(90vw, 40rem);` will output\n`width: min(90wv, 40rem);` which will tell the browser to render the menu\ncontent in a grid that's allowed to take up 90% of the viewport's width (`90vw`)\nup to a maximum of `40rem`.\n:::","i":8,"n":0.085},{"v":"Menu with supporting hotkeys","i":7,"n":0.5},{"v":"With grid layout\nTo render items of a menu in a grid layout instead of a vertical list,\nsimply setting the `gridLayout` property to `true`.\n\n:::note\nMenus with the grid layout has a responsive width by default,\nwhich will not grow wider than a certain size. However, if the default size is not\nwide enough for your use case, you can try setting another responsive width, using\nthe `--menu-surface-width` variable.\n\nTo achieve a responsive width, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(100vw, 40rem);` will output\n`width: min(100wv, 40rem);` which will tell the browser to render the menu\ncontent in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\nis larger than `40rem`.\n:::\n\n\nTo tweak the grid layout, a few other variables are available:\n- `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n- `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n- `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.","i":6,"n":0.078},{"v":"With badge icons","i":5,"n":0.577},{"v":"With icons","i":4,"n":0.707},{"v":"openDirection\n\nThe value of the `openDirection` property defines how the menu content\nis aligned with its trigger element, and in which direction it opens.","i":3,"n":0.213},{"v":"Disabled\n\nNote that you don't need to disable the trigger button separately, as the\ncomponent takes care of this for you.","i":2,"n":0.229},{"v":"Basic example\n\nWith a simple `onSelect` handler.","i":1,"n":0.408}],"4":[{"v":"openDirection","i":5,"n":1},{"v":"open","i":4,"n":1},{"v":"items","i":3,"n":1},{"v":"gridLayout","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"badgeIcons","i":0,"n":1}],"5":[{"v":"Decides the menu's location in relation to its trigger","i":5,"n":0.333},{"v":"Sets the open state of the menu.","i":4,"n":0.378},{"v":"A list of items and separators to show in the menu.","i":3,"n":0.302},{"v":"Renders list items in a grid layout, rather than a vertical list","i":2,"n":0.289},{"v":"Sets the disabled state of the menu.","i":1,"n":0.378},{"v":"Defines whether the menu should show badges.","i":0,"n":0.378}],"6":[],"7":[{"v":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","i":5,"n":0.209},{"v":"boolean","i":4,"n":1},{"v":"(MenuItem<any> | ListSeparator)[]","i":3,"n":0.577},{"v":"boolean","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"select","i":1,"n":1},{"v":"cancel","i":0,"n":1}],"9":[{"v":"Is emitted when a menu item is selected.","i":1,"n":0.354},{"v":"Is emitted when the menu is cancelled.","i":0,"n":0.378}],"10":[],"11":[{"v":"MenuItem<any> | MenuItem<any>[]","i":1,"n":0.577},{"v":"void","i":0,"n":1}]}},{"i":26,"$":{"0":[{"v":"exampleComponent limel-example-picker-composite","i":6,"n":0.707},{"v":"exampleComponent limel-example-picker-static-actions","i":5,"n":0.707},{"v":"exampleComponent limel-example-picker-leading-icon","i":4,"n":0.707},{"v":"exampleComponent limel-example-picker-empty-suggestions","i":3,"n":0.707},{"v":"exampleComponent limel-example-picker-icons","i":2,"n":0.707},{"v":"exampleComponent limel-example-picker-multiple","i":1,"n":0.707},{"v":"exampleComponent limel-example-picker-single","i":0,"n":0.707}],"1":{"v":"Picker","n":1},"2":{"v":"/component/limel-picker/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":7,"n":0.354},{"v":"With static actions\n\nStatic items can be added to the picker to enable triggering custom actions\ndirectly from the results dropdown list.\n\n:::tip\nA typical use case of such actions is scenarios in which the picker's search\nresults or suggestions list does not include what the user wants to pick. By\noffering custom actions right in the list, we can enable users to add missing\nitems.\n:::","i":6,"n":0.13},{"v":"With a \"search\" leading icon","i":5,"n":0.447},{"v":"With no suggestions and a message for empty search results\n\n:::important\nThis example simulates that searching is done on the server. Because these\nexamples do not _actually_ send requests to the server, we simulate a small\ndelay, using `setTimeout`. **Please do NOT copy that to production code!**\nSee the other examples for code that does not include this artificial delay.\n:::","i":4,"n":0.135},{"v":"With icons","i":3,"n":0.707},{"v":"Multiple values can be picked.\n\n- \"Search\" is done locally in the frontend.\n- Already picked items are removed from the available options.","i":2,"n":0.218},{"v":"Single value can be picked.\n\n- \"Search\" is done locally in the frontend.","i":1,"n":0.289}],"4":[{"v":"value","i":15,"n":1},{"v":"searcher","i":14,"n":1},{"v":"searchLabel","i":13,"n":1},{"v":"required","i":12,"n":1},{"v":"readonly","i":11,"n":1},{"v":"multiple","i":10,"n":1},{"v":"leadingIcon","i":9,"n":1},{"v":"label","i":8,"n":1},{"v":"helperText","i":7,"n":1},{"v":"emptyResultMessage","i":6,"n":1},{"v":"disabled","i":5,"n":1},{"v":"delimiter","i":4,"n":1},{"v":"badgeIcons","i":3,"n":1},{"v":"actions","i":2,"n":1},{"v":"actionScrollBehavior","i":1,"n":1},{"v":"actionPosition","i":0,"n":1}],"5":[{"v":"Currently selected value or values","i":15,"n":0.447},{"v":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `ListItem`:s.\n\nSee the docs for the type `Searcher` for type information on\nthe searcher function itself.","i":14,"n":0.169},{"v":"Search label to display in the input field when searching","i":13,"n":0.316},{"v":"True if the control requires a value","i":12,"n":0.378},{"v":"Set to `true` to disable adding and removing items,\nbut allow interaction with existing items.","i":11,"n":0.267},{"v":"True if multiple values are allowed","i":10,"n":0.408},{"v":"Leading icon to show to the far left in the text field","i":9,"n":0.289},{"v":"Text to display for the input field of the picker","i":8,"n":0.316},{"v":"Optional helper text to display below the input field when it has focus","i":7,"n":0.277},{"v":"A message to display when the search returned an empty result","i":6,"n":0.302},{"v":"True if the picker should be disabled","i":5,"n":0.378},{"v":"Sets delimiters between chips. Works only when `multiple` is `true`.","i":4,"n":0.316},{"v":"Whether badge icons should be used in the result list or not","i":3,"n":0.289},{"v":"Static actions that can be clicked by the user.","i":2,"n":0.333},{"v":"Scroll behavior of the custom static actions, when user scrolls\nin the picker's results dropdown. Can be set to `'scroll'` which means\nthe action items will scroll together with the list, or `'sticky'` which\nretains their position at the top or bottom of the drop down while\nscrolling.","i":1,"n":0.151},{"v":"Position of the custom static actions in the picker's results dropdown.\nCan be set to `'top'` or `'bottom'`.","i":0,"n":0.243}],"6":[],"7":[{"v":"ListItem<string | number> | ListItem<string | number>[]","i":15,"n":0.378},{"v":"(query: string) => Promise<ListItem<any>[]>","i":14,"n":0.5},{"v":"string","i":13,"n":1},{"v":"boolean","i":12,"n":1},{"v":"boolean","i":11,"n":1},{"v":"boolean","i":10,"n":1},{"v":"string","i":9,"n":1},{"v":"string","i":8,"n":1},{"v":"string","i":7,"n":1},{"v":"string","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"string","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"ListItem<Action>[]","i":2,"n":1},{"v":"\"scroll\" | \"sticky\"","i":1,"n":0.577},{"v":"\"bottom\" | \"top\"","i":0,"n":0.577}],"8":[{"v":"interact","i":2,"n":1},{"v":"change","i":1,"n":1},{"v":"action","i":0,"n":1}],"9":[{"v":"Fired when clicking on a selected value","i":2,"n":0.378},{"v":"Fired when a new value has been selected from the picker","i":1,"n":0.302},{"v":"Emitted when the user selects an action.","i":0,"n":0.378}],"10":[],"11":[{"v":"ListItem<string | number>","i":2,"n":0.577},{"v":"ListItem<string | number> | ListItem<string | number>[]","i":1,"n":0.378},{"v":"Action","i":0,"n":1}]}},{"i":27,"$":{"0":[{"v":"exampleComponent limel-example-popover","i":1,"n":0.707},{"v":"slot - Content to put inside the surface","i":0,"n":0.354}],"1":{"v":"Popover","n":1},"2":{"v":"/component/limel-popover/","n":1},"3":[{"v":"A popover is an impermanent layer that is displayed on top of other content\nwhen user taps an element that triggers the popover. This element can be\npractically anything, a button, piece of text, and icon, etc.\n\nPopovers are nonmodal, thus they don't have a semi-transparent backdrop layer\nthat darkens the content below them. Also for the same reason, they can be\ndismissed by tapping or clicking another part of the screen, but not by a\nclicking a button or link on the popover itself.\n\n:::warning\nThe component is emitting a close event when you click outside its container\nor press the <kbd>Esc</kbd> key. However, it’s up to you as consumer to react\nproperly on this event and hide the component (preferably by setting the\nproperty `open` to `false`).\n:::\n\n## Usage\nUse a popover to show **options** or **information** related to the trigger\nonscreen. A typical use case for popovers is a tooltip, in which you show\nhelp text or contextual information to users.\n\nPopovers are most appropriate on larger screens but can be used on smaller\nscreens too, as long as their content is responsive and takes into account\nthe context they are displayed on.\n\nWhen a popover is displayed, interactions with other controls are blocked,\nuntil user dismisses the popover.\n\n\n## Layout\nPopovers has only one slot in which you can import a custom web-component.\n\n:::note\nYou must make sure that web-components that you import into the slot has\na `width: 100%;` style so that it can horizontally stretch across the popover.\n\nHowever, `width` of the popover can be controlled by specifying a CSS variable\nof `--popover-surface-width`. If you don't specify any width, the popover\nwill grow as wide as its content.\n:::\n\n:::important\nDo not make a popover too big. They should never take over the entire screen.\nIf your content is that big, you should probably be using a Modal instead.\n:::","i":0,"n":0.059}],"4":[{"v":"openDirection","i":1,"n":1},{"v":"open","i":0,"n":1}],"5":[{"v":"Decides the popover's location in relation to its trigger","i":1,"n":0.333},{"v":"True if the content within the popover should be visible","i":0,"n":0.316}],"6":[],"7":[{"v":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","i":1,"n":0.209},{"v":"boolean","i":0,"n":1}],"8":[{"v":"close","i":0,"n":1}],"9":[{"v":"Emits an event when the component is closing","i":0,"n":0.354}],"10":[],"11":[{"v":"void","i":0,"n":1}]}},{"i":28,"$":{"0":[{"v":"exampleComponent limel-example-progress-flow-narrow","i":6,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-off-progress-steps","i":5,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-colors-css","i":4,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-colors","i":3,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-disabled-step","i":2,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-secondary-text","i":1,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-basic","i":0,"n":0.707}],"1":{"v":"Progress flow","n":0.707},"2":{"v":"/component/limel-progress-flow/","n":1},"3":[{"v":"Compact layout\n\nFor cases where this component needs to take as little space as possible,\nwe offer an alternative layout. All you need to do is addin the `is-narrow`\nclass to the component.","i":7,"n":0.183},{"v":"Example with off-progress steps\n\nNaturally, the Progress Flow component is used to visualize a continuous linear\nprocess. But sometimes such processes can be abrupted, despite the level of progress.\n\nAbruptions can be excluded and displayed separately (not as a part of the flow)\nusing the `isOffProgress` property.","i":6,"n":0.152},{"v":"Customizing colors further, using CSS\n\nA few CSS variables can be used to customize the look and feel of the steps.\nBut keep in mind that it is not possible to target steps individually and\nchange their colors, using these CSS variables.\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual steps!\n:::\n:::note\nMake sure that:\n- text has enough contrast with its background and is readable.\n- the `--progress-flow-step-divider-color` has the same color as the component's\ncontainer.\n:::","i":5,"n":0.115},{"v":"Using colors\n\nBy default, each step appears with a light grey background, and when\nselected, it gets the defined `--lime-primary-color` as background. Also,\npassed steps will get the same background color as selected steps by default.\n\nHowever, both of these colors can be customized by specifying color values\nfor `selectedColor` and `passedColor`.\n\nAny icons will get the same color as the text for that step, but the color of\nicons for steps which are neither selected nor passed can be specified using\nthe `iconColor` property.","i":4,"n":0.114},{"v":"Disabled steps\n\nWhile the entire component can be `disabled`,\neach step can also be `disabled` individually.\nThis enables you to ask users to provide required data to be able to continue.","i":3,"n":0.189},{"v":"Example with secondary text\n\nA `secondaryText` can be used to add further information to steps.\nThis could be for instance a timestamp of when a step was activated by the user\nor an explainatory text.","i":2,"n":0.177},{"v":"Basic Example\n\nProgress flow can visualize linear process, consisting of distinct steps.\nSometimes, this is a great alternative to use instead of `limel-select`.\nFor instance, when there are too few options available to choose from, and\nthe options have an incremental order.\n\nEach step can optionally get an icon, to help users understand its meaning\nfaster, and recognize it quicker next time.","i":1,"n":0.134}],"4":[{"v":"readonly","i":2,"n":1},{"v":"flowItems","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"Disables the progress flow when `true`.\nThis does not visualize the component that much differently.\nBut since the component does not provide any feedback that users can\ninteract with the component, it makes it perfect for illustrative and\ninformative porpuses.","i":2,"n":0.167},{"v":"What flow items to render","i":1,"n":0.447},{"v":"Set to `true` to disable the progress flow.\nUse `disabled` to indicate that the component can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","i":0,"n":0.164}],"6":[],"7":[{"v":"boolean","i":2,"n":1},{"v":"FlowItem[]","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Fired when a new value has been selected from the progress flow","i":0,"n":0.289}],"10":[],"11":[{"v":"FlowItem","i":0,"n":1}]}},{"i":29,"$":{"0":[{"v":"exampleComponent limel-example-select-dialog","i":7,"n":0.707},{"v":"exampleComponent limel-example-select-narrow","i":6,"n":0.707},{"v":"exampleComponent limel-example-select-change-options","i":5,"n":0.707},{"v":"exampleComponent limel-example-select-preselected","i":4,"n":0.707},{"v":"exampleComponent limel-example-select-with-empty-option","i":3,"n":0.707},{"v":"exampleComponent limel-example-select-multiple","i":2,"n":0.707},{"v":"exampleComponent limel-example-select-with-icons","i":1,"n":0.707},{"v":"exampleComponent limel-example-select","i":0,"n":0.707}],"1":{"v":"Select","n":1},"2":{"v":"/component/limel-select/","n":1},"3":[{"v":"Select field inside a dialog","i":8,"n":0.447},{"v":"Narrow layout\nThe `limel-select` component has the same height and layout as other input types\nin Lime elements. This makes the UI nice and tidy, when elements are placed\nbeside or on top of each other; for instance in a form.\n\nHowever, sometimes you may need to render the `limel-select` component with a\nnarrower layout (smaller in height). For instance when the component is used\nin a header, or when it is placed beside a component like `limel-button-group`.\n\nFor such cases, you can simply apply the class of `is-narrow` to your component.\n:::tip\nIn such use cases, the select usually does not need a `label`. Consider having\nits first `option` pre-chosen and displayed by default instead. Also avoid using\n`helperText` if possible.\n:::","i":7,"n":0.095},{"v":"Changing Available Options","i":6,"n":0.577},{"v":"Specific Value Preselected","i":5,"n":0.577},{"v":"With Empty Option\n\nAdding an empty option makes it possible for the user to \"unset\"\nthe value. Try selecting a value below, and then selecting the empty\noption again.\n\nIf the component is set as required, the empty option is removed.","i":4,"n":0.164},{"v":"Select multiple values","i":3,"n":0.577},{"v":"Select with icons for options","i":2,"n":0.447}],"4":[{"v":"value","i":8,"n":1},{"v":"required","i":7,"n":1},{"v":"readonly","i":6,"n":1},{"v":"options","i":5,"n":1},{"v":"multiple","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"invalid","i":2,"n":1},{"v":"helperText","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"Currently selected value or values.\nIf `multiple` is `true`, this must be an array. Otherwise it must be a\nsingle value.","i":8,"n":0.229},{"v":"True if the control requires a value.","i":7,"n":0.378},{"v":"Set to `true` to make the field read-only.\nThis visualizes the component slightly differently.\nBut shows no visual sign indicating that the component is disabled\nor can ever become interactable.","i":6,"n":0.192},{"v":"List of options.","i":5,"n":0.577},{"v":"Set to `true` to allow multiple values to be selected.","i":4,"n":0.316},{"v":"Text to display next to the select.","i":3,"n":0.378},{"v":"Set to `true` to indicate that the current value of the select is\ninvalid.","i":2,"n":0.277},{"v":"Optional helper text to display below the input field when it has focus.","i":1,"n":0.277},{"v":"Set to `true` to make the field disabled.\nand visually shows that the `select` component is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe component may become interactable.","i":0,"n":0.18}],"6":[],"7":[{"v":"Option<string> | Option<string>[]","i":8,"n":0.577},{"v":"boolean","i":7,"n":1},{"v":"boolean","i":6,"n":1},{"v":"Option<string>[]","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the value is changed.","i":0,"n":0.408}],"10":[],"11":[{"v":"Option<string> | Option<string>[]","i":0,"n":0.577}]}},{"i":30,"$":{"0":[{"v":"exampleComponent limel-example-shortcut-with-click-handler","i":3,"n":0.707},{"v":"exampleComponent limel-example-shortcut-styling","i":2,"n":0.707},{"v":"exampleComponent limel-example-shortcut-notification","i":1,"n":0.707},{"v":"exampleComponent limel-example-shortcut","i":0,"n":0.707}],"1":{"v":"Shortcut","n":1},"2":{"v":"/component/limel-shortcut/","n":1},"3":[{"v":"Example with click handler","i":4,"n":0.5},{"v":"How to style the shortcut\n\nThe component offers different CSS variables for styling\nthe color of the shortcut, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","i":3,"n":0.171},{"v":"Displaying a notification badge\n\nThe component can display a notification badge, which could either be\na `number` or a `string`. Read more about how the badge truncates\nor abbreviates the provided label [here](#/component/limel-badge/).","i":2,"n":0.183},{"v":"Basic example\n\nThis component acts as a link, and therefore comes with features\nsuch as `title` and `target`.\n\nThe `title` tag of the hyperlink can be used to\nprovide additional information about the link.\nIt improves accessibility both for users with assistive technologies,\nand sighted users. Hovering and holding the mouse cursor will\ndisplay a tooltip generated with the specified `title`.\n\nWhat the `target` does is described well in\n[mdn web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).","i":1,"n":0.126},{"v":"This component can be used on places such as a start page or a dashboard.\nClicking on the component should navigate the user to a new screen,\nto which you need to provide a URL, by specifying an `href` for the `link` property.\n\nBy default, this navigation will happen within the same browser tab.\nHowever, it is possible to override that behavior, by specifying a `target`\nfor the `link` property","i":0,"n":0.124}],"4":[{"v":"link","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"icon","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"badge","i":0,"n":1}],"5":[{"v":"If supplied, the shortcut will be a clickable link.","i":4,"n":0.333},{"v":"The text to show below the shortcut. Long label will be truncated.","i":3,"n":0.289},{"v":"Name of icon for the shortcut.","i":2,"n":0.408},{"v":"Set to `true` if shortcut is disabled.","i":1,"n":0.378},{"v":"If specified, will display a notification badge\non the shortcut.","i":0,"n":0.333}],"6":[],"7":[{"v":"Link","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"number | string","i":0,"n":0.577}],"8":[],"9":[],"10":[],"11":[]}},{"i":31,"$":{"0":[{"v":"exampleComponent limel-example-slider-composite","i":3,"n":0.707},{"v":"exampleComponent limel-example-slider-multiplier-percentage-colors","i":2,"n":0.707},{"v":"exampleComponent limel-example-slider-multiplier","i":1,"n":0.707},{"v":"exampleComponent limel-example-slider","i":0,"n":0.707}],"1":{"v":"Slider","n":1},"2":{"v":"/component/limel-slider/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":4,"n":0.354},{"v":"With percentage colors\nYou can add the `displays-percentage-colors` class to your slider component\nand it will automatically visualize current percentage colors in real-time.\n\nThe colors change with intervals of 10 as users drags the slider pin.\nThe color spectrum is not modifiable, and looks like red → orange → yellow\n→ green → teal.","i":3,"n":0.143},{"v":"With multiplier and step\n\nWhen step is configured and the initial value is not a multiple of the step\nvalue, the slider will round the value to the nearest step when it is changed\nfor the first time. After a valid value has been set, only discrete valid\nvalues will be possible to pick.","i":2,"n":0.141},{"v":"Basic example","i":1,"n":0.707}],"4":[{"v":"valuemin","i":9,"n":1},{"v":"valuemax","i":8,"n":1},{"v":"value","i":7,"n":1},{"v":"unit","i":6,"n":1},{"v":"step","i":5,"n":1},{"v":"readonly","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"helperText","i":2,"n":1},{"v":"factor","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"The minimum value allowed","i":9,"n":0.5},{"v":"The maximum value allowed","i":8,"n":0.5},{"v":"The value of the input","i":7,"n":0.447},{"v":"Unit to display next to the value","i":6,"n":0.378},{"v":"The stepping interval to use when adjusting the value","i":5,"n":0.333},{"v":"Disables the slider when `true`. This visualizes the slider slightly differently.\nBut shows no visual sign indicating that the slider field\nis disabled or can ever become interactable.","i":4,"n":0.196},{"v":"Label to display next to the input","i":3,"n":0.378},{"v":"Optional helper text to display below the slider","i":2,"n":0.354},{"v":"Default value: 1.\nThe factor that the properties `value`, `valuemax`, `valuemin`, and\n`step` are multiplied by. On `change` divides the value by the factor,\nso the original format stays the same.","i":1,"n":0.189},{"v":"Disables the slider when `true`,\nand visually shows that the field is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe slider may become interactable.","i":0,"n":0.192}],"6":[],"7":[{"v":"number","i":9,"n":1},{"v":"number","i":8,"n":1},{"v":"number","i":7,"n":1},{"v":"string","i":6,"n":1},{"v":"number","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"number","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the value has been changed","i":0,"n":0.378}],"10":[],"11":[{"v":"number","i":0,"n":1}]}},{"i":32,"$":{"0":[{"v":"exampleComponent limel-example-snackbar","i":0,"n":0.707}],"1":{"v":"Snackbar","n":1},"2":{"v":"/component/limel-snackbar/","n":1},"3":[],"4":[{"v":"timeout","i":5,"n":1},{"v":"multiline","i":4,"n":1},{"v":"message","i":3,"n":1},{"v":"language","i":2,"n":1},{"v":"dismissible","i":1,"n":1},{"v":"actionText","i":0,"n":1}],"5":[{"v":"The amount of time in milliseconds to show the snackbar.","i":5,"n":0.316},{"v":"Whether to show the snackbar with space for multiple lines of text","i":4,"n":0.289},{"v":"The text message to display.","i":3,"n":0.447},{"v":"Defines the language for translations.","i":2,"n":0.447},{"v":"True if the snackbar is dismissible, false otherwise","i":1,"n":0.354},{"v":"The text to display for the action button.","i":0,"n":0.354}],"6":[],"7":[{"v":"number","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":2,"n":0.243},{"v":"boolean","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"hide","i":1,"n":1},{"v":"action","i":0,"n":1}],"9":[{"v":"Emitted when the snackbar hides itself","i":1,"n":0.408},{"v":"Emitted when the action button is pressed","i":0,"n":0.378}],"10":[],"11":[{"v":"void","i":1,"n":1},{"v":"void","i":0,"n":1}]}},{"i":33,"$":{"0":[{"v":"exampleComponent limel-example-spinner-size","i":2,"n":0.707},{"v":"exampleComponent limel-example-spinner-color","i":1,"n":0.707},{"v":"exampleComponent limel-example-spinner","i":0,"n":0.707}],"1":{"v":"Spinner","n":1},"2":{"v":"/component/limel-spinner/","n":1},"3":[{"v":"Spinner sizes","i":3,"n":0.707},{"v":"With custom colors\nThe `limel-spinner` is designed to cycle through ten colors which are all\nfrom Lime Technologies' brand colors.\n\nIt is of course possible to override these colors.","i":2,"n":0.196},{"v":"With a generic design or branded for Lime Technologies\nThe `limel-spinner` makes the boring waiting times slightly more cheerful by\ncycling through nine delightful colors.\n\nBy default spinner's shape represents Lime Technologies' logo, as it is used\nprimarily in our own products.\n\nHowever, it is easy render the spinner as a generic circle by specifying\n`limeBranded={false}`, which may be useful for instance when the\nspinner is used on a small component like a button.","i":1,"n":0.122}],"4":[{"v":"size","i":1,"n":1},{"v":"limeBranded","i":0,"n":1}],"5":[{"v":"Determines the size of the spinner.","i":1,"n":0.408},{"v":"Gives the spinner the shape of Lime Technologies' logo","i":0,"n":0.333}],"6":[],"7":[{"v":"\"large\" | \"medium\" | \"mini\" | \"small\" | \"x-small\"","i":1,"n":0.333},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":34,"$":{"0":[{"v":"exampleComponent limel-example-split-button-repeat-default-command","i":1,"n":0.707},{"v":"exampleComponent limel-example-split-button-basic","i":0,"n":0.707}],"1":{"v":"Split button","n":0.707},"2":{"v":"/component/limel-split-button/","n":1},"3":[{"v":"Repeating the default command in the menu\n\nThe default command must be the most commonly used action.\nSuch actions typically have a very short label.\n\nHowever, sometimes it could be useful to repeat the default command again\nin the list of commands, using a more descriptive label which\nclarifies the default action.\n\n:::tip\n- **Limit the overall number of choices** within the menu to less than 10\n- **Order the items within the menu by popularity** and put the most popular ones on top.\n:::","i":2,"n":0.115},{"v":"Basic Example\n\nWhen used correctly, a split button reduces visual complexity of the user interface\nby grouping similar commands together.\n\n:::important\nCommands which are included in the menu must be variations of the default command,\nor be very relevant to it.\n:::","i":1,"n":0.167},{"v":"A split button is a button with two components:\na button and a side-menu attached to it.\n\nClicking on the button runs a default action,\nand clicking on the arrow opens up a list of other possible actions.\n\n:::warning\n- Never use a split button for navigation purposes, such as going to next page.\nThe button should only be used for performing commands!\n- Never use this component instead of a Select or Menu component!\n:::","i":0,"n":0.121}],"4":[{"v":"primary","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"items","i":2,"n":1},{"v":"icon","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"Set to `true` to make the button primary.","i":4,"n":0.354},{"v":"The text to show on the default action part of the button.","i":3,"n":0.289},{"v":"A list of items and separators to show in the menu.","i":2,"n":0.302},{"v":"Set icon for the button","i":1,"n":0.447},{"v":"Set to `true` to disable the button.","i":0,"n":0.378}],"6":[],"7":[{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"(MenuItem<any> | ListSeparator)[]","i":2,"n":0.577},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"select","i":0,"n":1}],"9":[{"v":"Is emitted when a menu item is selected.","i":0,"n":0.354}],"10":[],"11":[{"v":"MenuItem<any>","i":0,"n":1}]}},{"i":35,"$":{"0":[{"v":"exampleComponent limel-example-switch","i":0,"n":0.707}],"1":{"v":"Switch","n":1},"2":{"v":"/component/limel-switch/","n":1},"3":[],"4":[{"v":"value","i":3,"n":1},{"v":"readonly","i":2,"n":1},{"v":"label","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"The value of the switch","i":3,"n":0.447},{"v":"Disables the switch when `true`. This visualizes the switch slightly differently.\nBut shows no visual sign indicating that the switch is disabled\nor can ever become interactable.","i":2,"n":0.2},{"v":"Label to display next to the switch","i":1,"n":0.378},{"v":"Disables the switch when `true`,\nand visually shows that the switch is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe switch may become interactable.","i":0,"n":0.192}],"6":[],"7":[{"v":"boolean","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the value has changed","i":0,"n":0.408}],"10":[],"11":[{"v":"boolean","i":0,"n":1}]}},{"i":36,"$":{"0":[{"v":"exampleComponent limel-example-tab-bar-with-equal-tab-width","i":2,"n":0.707},{"v":"exampleComponent limel-example-tab-bar-with-dynamic-tab-width","i":1,"n":0.707},{"v":"exampleComponent limel-example-tab-bar","i":0,"n":0.707}],"1":{"v":"Tab bar","n":0.707},"2":{"v":"/component/limel-tab-bar/","n":1},"3":[{"v":"Tab bars with custom styles\nIn some situations and for the sake of UI design, you may want to have tabs\nthat equally share the available screen width and stretch. To get such a\nresult, you can add the `has-tabs-with-equal-width` class to the tab bar.","i":3,"n":0.154},{"v":"Default UI of Tab bars\nBy default, tabs dynamically adjust their width to their own content, which\nmeans a tab with a larger label will be bigger than one with a shorter one.\nThis is the preferred layout for tabs.","i":2,"n":0.164},{"v":"Tabs are great to organize information hierarchically in the interface and divide it into distinct categories. Using tabs, you can create groups of content that are related and at the same level in the hierarchy.\n:::warning\nTab bars should be strictly used for navigation at the top levels.\nThey should never be used to perform actions, or navigate away from the view which contains them.\n:::\nAn exception for using tab bars in a high level of hierarchy is their usage in modals. This is because modals are perceived as a separate place and not a part of the current context. Therefore you can use tab bars in a modal to group and organize its content.\nA tab bar can contain an unlimited number of tabs. However, depending on the device width and width of the tabs, the number of tabs that are visible at the same time will vary. When there is limited horizontal space, the component shows a left-arrow and/or right-arrow button, which scrolls and reveals the additional tabs. The tab bar can also be swiped left and right on a touch-device.\n:::tip Other things to consider\nNever divide the content of a tab using a nested tab bar.\nNever place two tab bars within the same screen.\nNever use background color for icons in tabs.\nAvoid having long labels for tabs.\nA tab will never be removed or get disabled, even if there is no content under it.\n:::","i":0,"n":0.066}],"4":[{"v":"tabs","i":0,"n":1}],"5":[{"v":"List of tabs to display","i":0,"n":0.447}],"6":[],"7":[{"v":"Tab[]","i":0,"n":1}],"8":[{"v":"changeTab","i":0,"n":1}],"9":[{"v":"Emitted when a tab has been changed","i":0,"n":0.378}],"10":[],"11":[{"v":"Tab","i":0,"n":1}]}},{"i":37,"$":{"0":[{"v":"exampleComponent limel-example-tab-panel","i":1,"n":0.707},{"v":"slot - Content to put inside the `limel-tab-panel`. Each slotted element\nmust have the `id` attribute equal to the id of the tab it belongs to.","i":0,"n":0.2}],"1":{"v":"Tab panel","n":0.707},"2":{"v":"/component/limel-tab-panel/","n":1},"3":[{"v":"This example illustrates how to add custom components inside the `limel-tab-panel`.\n\nEach component will simulate loading the data it needs once the tab has been\nactivated and then display the actual content. If the button is pressed, the\ncomponent will emit the `changeTab` event to change the badge inside the\ncorresponding tab.","i":1,"n":0.144},{"v":"The `limel-tab-panel` component uses the `limel-tab-bar` component together\nwith custom slotted components and will display the content for the currently\nactive tab. Each slotted component must have an id equal to the id of the\ncorresponding tab it belongs to. These components should implement the\n[TabPanelComponent](#/type/TabPanelComponent/) interface.\n\nThe `limel-tab-panel` component will automatically set each tab configuration\non the corresponding slotted component as a property named `tab` so that the\ncomponent can take action upon that. Sometimes it might be desirable to not\nload data or render anything until the tab is active.\n\nThe slotted components can also emit the `changeTab` event to update anything\ninside the actual tab, e.g. to change the icon, color or badge.","i":0,"n":0.097}],"4":[{"v":"tabs","i":0,"n":1}],"5":[{"v":"The tabs to display in the panel","i":0,"n":0.378}],"6":[],"7":[{"v":"Tab[]","i":0,"n":1}],"8":[{"v":"changeTab","i":0,"n":1}],"9":[{"v":"Emitted when a tab has been changed","i":0,"n":0.378}],"10":[],"11":[{"v":"Tab","i":0,"n":1}]}},{"i":38,"$":{"0":[{"v":"exampleComponent limel-example-table-interactive-rows","i":14,"n":0.707},{"v":"exampleComponent limel-example-table-layout-low-density","i":13,"n":0.707},{"v":"exampleComponent limel-example-table-layout-stretch-columns","i":12,"n":0.707},{"v":"exampleComponent limel-example-table-layout-stretch-last-column","i":11,"n":0.707},{"v":"exampleComponent limel-example-table-layout-default","i":10,"n":0.707},{"v":"exampleComponent limel-example-table-default-sorted","i":9,"n":0.707},{"v":"exampleComponent limel-example-table-selectable-rows","i":8,"n":0.707},{"v":"exampleComponent limel-example-table-activate-row","i":7,"n":0.707},{"v":"exampleComponent limel-example-table-remote","i":6,"n":0.707},{"v":"exampleComponent limel-example-table-local","i":5,"n":0.707},{"v":"exampleComponent limel-example-table-sorting-disabled","i":4,"n":0.707},{"v":"exampleComponent limel-example-table-movable-columns","i":3,"n":0.707},{"v":"exampleComponent limel-example-table-header-menu","i":2,"n":0.707},{"v":"exampleComponent limel-example-table-custom-components","i":1,"n":0.707},{"v":"exampleComponent limel-example-table","i":0,"n":0.707}],"1":{"v":"Table","n":1},"2":{"v":"/component/limel-table/","n":1},"3":[{"v":"Visualizing clickable rows better\nBy taking advantage of the `has-interactive-rows` class, hovering on a row\nwill display an elevated visual effect, giving it more affordance and a solid\nfeeling of interactivity.\n\n:::note usage notes\n- Only use this class when clicking on an entire row triggers a reaction in\nthe system, for example a card or a modal is opened to show further details.\n:::","i":15,"n":0.131},{"v":"\n````tsx\nlayout=\"lowDensity\"\n````\nBy using this layout option, you can easily convert the table into an airy list of items.\n\nThis type of UI is suitable for generating minimalist lists of items with\nonly a few properties on each. Especially when the property values are not\nself-explanatory (such as an email address) and require a bit of extra help\nto know what they are.\n\nUsing this UI, you can take advantage of the sticky header of the table which\nexplains what each cell is about, and also enjoy sorting possibilities it\noffers.\n\n:::note usage notes\n- In this low-density UI, all cells will get a fixed height, which may affect\nthe layout of custom components that you place inside them.\n- This UI is not preferred for data intensive views, in which the user's main\ntask is processing the presented data and making sense of it. For such views,\nuse the table component with its normal density.\n:::","i":14,"n":0.084},{"v":"\n````tsx\nlayout=\"stretchColumns\"\n````\n\nWith this layout, the table stretches columns so that all\nfit perfectly in the table container, when extra space is available.\nIf all columns cannot fit within the available width,\nthen a horizontal scrollbar will appear.","i":13,"n":0.174},{"v":"\n````tsx\nlayout=\"stretchLastColumn\"\n````\n\nWorks just like `default`, but unlike the default layout\nwhich resulted in having an empty last column, in this layout\nthe last existing column will stretch out to fill up the remaining table width.","i":12,"n":0.177},{"v":"Layout\nColumns and their content can be decisive factors in how a table is\npreferred to rendered in the user interface. To set your preferred\nrendering, choose one of the available `layout` properties.\n\n\n````tsx\nlayout=\"default\"\n````\nThe default layout resizes the table's columns,\nin a way that each column becomes as wide as the data it holds.\n\n:::important\nNote that be default, table columns have a maximum width of `40rem`.\nThis means, they can never grow wider than that, unless you specify\nanother size using the `--table-max-column-width` CSS variable.\n\nThis applies to all other layouts presented further down as well!\n:::\n\nIf there is additional space available on the right side of the last column,\nrows will stretch to fill the space and look visually as wide as the table.\n\n:::note\nWhile scrolling, new rows get lazy-loaded. Since the new data may have wider\nlength, it might affect rendering of the layout in real-time.\nThis means columns can get resized while user is scrolling down.\n:::\n\n:::tip\nIt is also possible to affect internal layout of each column, by specifying\n`horizontalAlign` on the column headers, to `left` (default), `center`,\nor `right`. This basically defines the text-alignment for all the cells in that column.\n:::","i":11,"n":0.075},{"v":"Default sorted columns\n\nIn this example, the table is sorted on *two* columns. Primary sorting is\ndone on the \"Eggs per clutch\" column, and secondary sorting is done on the\n\"Name\" column. The result is that within each \"group\" of birds that have the\nsame number of eggs per clutch, the birds are sorted by name.","i":10,"n":0.139},{"v":"Selectable rows with updating aggregates","i":9,"n":0.447},{"v":"Activate a row","i":8,"n":0.577},{"v":"Remote sorting and pagination","i":7,"n":0.5},{"v":"Local sorting and pagination","i":6,"n":0.5},{"v":"Disable column sorting\n\nBy default, all columns can be sorted by end-users, if they click on\na column header. An arrow icon on the header visualizes the\ndirection of sorting, when a column is sorted.\n\nHowever, you can disable the sorting possibility in individual columns,\nby setting the `headerSort` to `false`.","i":5,"n":0.147},{"v":"Movable columns","i":4,"n":0.707},{"v":"Column header menu\n\nYou can also add custom components to the header cell of a column. In\ncontrast to custom components used elsewhere in the table, custom components\nused in the header do not replace the entire content of the cell. Instead,\nthey appear in a slot next to the column sorting icon.","i":3,"n":0.143},{"v":"Custom components\n\nYou can specify a custom component to use for any column in your table. This\nis done under the `component` key in the schema, following the\n[TableComponentDefinition](#/type/TableComponentDefinition/) specification,\nfor example:\n\n```ts\nconst columns = [\n    {\n        title: 'Food',\n        field: 'food',\n        component: { name: 'my-fancy-food-displayer' },\n    },\n];\n```\n\nWhile you can, in principle, use any component in a table, your custom table\ncomponents should implement the [TableComponent](#/type/TableComponent/)\ninterface.","i":2,"n":0.13}],"4":[{"v":"totalRows","i":14,"n":1},{"v":"sorting","i":13,"n":1},{"v":"selection","i":12,"n":1},{"v":"selectable","i":11,"n":1},{"v":"pageSize","i":10,"n":1},{"v":"page","i":9,"n":1},{"v":"movableColumns","i":8,"n":1},{"v":"mode","i":7,"n":1},{"v":"loading","i":6,"n":1},{"v":"layout","i":5,"n":1},{"v":"emptyMessage","i":4,"n":1},{"v":"data","i":3,"n":1},{"v":"columns","i":2,"n":1},{"v":"aggregates","i":1,"n":1},{"v":"activeRow","i":0,"n":1}],"5":[{"v":"The number of total rows available for the data","i":14,"n":0.333},{"v":"The initial sorted columns","i":13,"n":0.5},{"v":"Selected data. Requires `selectable` to be true.","i":12,"n":0.378},{"v":"Enables row selection","i":11,"n":0.577},{"v":"Number of rows per page","i":10,"n":0.447},{"v":"The page to show","i":9,"n":0.5},{"v":"Set to `true` to enable reordering of the columns by dragging them","i":8,"n":0.289},{"v":"Set to either `local` or `remote` to change how the table handles the\nloaded data. When in `local` mode, all sorting and pagination will be\ndone locally with the data given. When in `remote` mode, the consumer\nis responsible to give the table new data when a `load` event occurs","i":7,"n":0.146},{"v":"Set to `true` to trigger loading animation","i":6,"n":0.378},{"v":"Defines the layout of the table, based on how width of the columns are calculated.\n\n- `default`: makes columns as wide as their contents.\n- `stretchLastColumn`: makes columns as wide as their contents, stretch the last column to fill up the remaining table width.\n- `stretchColumns`: stretches all columns to fill the available width when possible.\n- `lowDensity`: makes columns as wide as their contents, and creates a low density and airy layout.","i":5,"n":0.12},{"v":"A message to display when the table has no data","i":4,"n":0.316},{"v":"Data to be displayed in the table","i":3,"n":0.378},{"v":"Columns used to display the data","i":2,"n":0.408},{"v":"Column aggregates to be displayed in the table","i":1,"n":0.354},{"v":"Active row in the table","i":0,"n":0.447}],"6":[],"7":[{"v":"number","i":14,"n":1},{"v":"ColumnSorter[]","i":13,"n":1},{"v":"object[]","i":12,"n":1},{"v":"boolean","i":11,"n":1},{"v":"number","i":10,"n":1},{"v":"number","i":9,"n":1},{"v":"boolean","i":8,"n":1},{"v":"\"local\" | \"remote\"","i":7,"n":0.577},{"v":"boolean","i":6,"n":1},{"v":"\"default\" | \"lowDensity\" | \"stretchColumns\" | \"stretchLastColumn\"","i":5,"n":0.378},{"v":"string","i":4,"n":1},{"v":"object[]","i":3,"n":1},{"v":"Column<any>[]","i":2,"n":1},{"v":"ColumnAggregate[]","i":1,"n":1},{"v":"object","i":0,"n":1}],"8":[{"v":"sort","i":6,"n":1},{"v":"selectAll","i":5,"n":1},{"v":"select","i":4,"n":1},{"v":"load","i":3,"n":1},{"v":"changePage","i":2,"n":1},{"v":"changeColumns","i":1,"n":1},{"v":"activate","i":0,"n":1}],"9":[{"v":"Emitted when `mode` is `local` the data is sorted","i":6,"n":0.333},{"v":"Emitted when the select all rows state is toggled","i":5,"n":0.333},{"v":"Emitted when the row selection has been changed","i":4,"n":0.354},{"v":"Emitted when `mode` is `remote` and the table is loading new data. The\nconsumer is responsible for giving the table new data","i":3,"n":0.218},{"v":"Emitted when a new page has been set","i":2,"n":0.354},{"v":"Emitted when the columns have been changed","i":1,"n":0.378},{"v":"Emitted when a row is activated","i":0,"n":0.408}],"10":[],"11":[{"v":"ColumnSorter[]","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"object[]","i":4,"n":1},{"v":"TableParams","i":3,"n":1},{"v":"number","i":2,"n":1},{"v":"Column<any>[]","i":1,"n":1},{"v":"object","i":0,"n":1}]}}]}}}