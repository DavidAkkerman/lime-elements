{"version":3,"names":["chipCss","Chip","this","chipId","crypto","randomUUID","renderAsButton","h","id","class","role","disabled","readonly","onKeyDown","handleDeleteKeyDown","renderIcon","renderLabel","renderBadge","renderRemoveButton","renderAsLink","href","link","title","target","tabindex","text","filterClickWhenDisabled","e","preventDefault","handleRemoveClick","event","stopPropagation","remove","emit","removable","keys","DELETE","BACKSPACE","keycodes","DELETE_KEY_CODE","BACKSPACE_KEY_CODE","includes","key","keyCode","removeChipLabel","translate","get","language","componentWillLoad","makeEnterClickable","host","disconnectedCallback","removeEnterClickable","render","Host","onClick","icon","getIconName","badge","name","style","color","_a","_b","backgroundColor","label","svgData","tabIndex","innerHTML","handleKeyboardEvent","textValue","length","value","isLeft","ARROW_LEFT","ARROW_LEFT_KEY_CODE","isRight","ARROW_RIGHT","ARROW_RIGHT_KEY_CODE","isEnter","ENTER","ENTER_KEY_CODE","isDelete","isBackspace","isEscape","ESCAPE","ESCAPE_KEY_CODE","handleLeft","handleRight","handleEnter","handleDelete","handleBackspace","handleEscape","inputChipIndexSelected","emitInteraction","removeChip","repeat","chipSetCss","INPUT_FIELD_TABINDEX","ChipSet","constructor","hostRef","handleKeyDown","getValue","map","chip","Object","assign","selected","selectedChipIds","renderEmptyValueForReadonly","floatLabelAbove","editMode","dropZoneTip","hasHelperText","helperText","undefined","renderHelperLine","maxItems","maxLength","invalid","isInvalid","newValue","filter","change","catchInputChipClicks","selectedChip","type","isChipClicked","index","indexOf","splice","push","clearAllChipsLabel","renderChip","bind","renderInputChip","isFull","handleTextFieldFocus","handleInputBlur","handleTextInput","inputFieldOnChange","inputHidden","handleDeleteAllIconClick","renderDelimiter","val","a","async","emptyInput","shadowRoot","querySelector","focus","startEdit","syncEmptyInput","componentDidLoad","triggerIconColorWarning","mdcTextField","MDCTextField","componentWillUpdate","componentDidUpdate","input","destroy","renderInputChips","classes","chipSetLabel","renderChipSetLabel","handleChangeChips","oldValue","isEqual","leadingIcon","clearAllButton","inputType","hidden","onBlur","onFocus","onInput","onChange","placeholder","searchLabel","required","renderLeadingIcon","renderClearAllChipsButton","labelClassList","htmlFor","blurred","emptyInputOnBlur","setTimeout","stopEdit","trim","interact","chipType","chipProps","getChipProps","onRemove","getHref","getTarget","delimiter","iconFillColor","iconBackgroundColor","iconTitle","console","warn"],"sources":["./src/components/chip/chip.scss?tag=limel-chip&encapsulation=shadow","./src/components/chip/chip.tsx","./src/components/chip-set/chip-set-input-helpers.ts","./src/components/chip-set/chip-set.scss?tag=limel-chip-set&encapsulation=shadow","./src/components/chip-set/chip-set.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n* @prop --chip-max-width: Maximum width of the chip. Defaults to `10rem`. Keep in mind that the chips should not appear too big.\n*/\n\n:host(limel-chip) {\n    --limel-chip-height: 1.75rem;\n    --limel-chip-gap: 0.5rem;\n    isolation: isolate;\n    display: inline-flex;\n    align-items: center;\n}\n\n* {\n    box-sizing: border-box;\n}\n\n.chip {\n    all: unset;\n    position: relative;\n\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    max-width: var(--chip-max-width, 10rem);\n    height: var(--limel-chip-height);\n\n    border-radius: var(--limel-chip-height);\n    font-size: 0.875rem;\n    padding: 0 0.125rem;\n\n    &:has(limel-icon) {\n        .text {\n            padding-left: 0.25rem;\n        }\n    }\n\n    &:not([disabled]) {\n        @include mixins.visualize-keyboard-focus;\n        @include mixins.is-elevated-inset-clickable;\n    }\n\n    &:has(limel-badge) {\n        padding-right: 0.375rem;\n\n        .text {\n            padding-right: 0;\n        }\n    }\n\n    &:has(+ .remove-button:hover) {\n        box-shadow: var(--shadow-depth-8-error);\n    }\n\n    &:has(+ .trailing-button) {\n        padding-right: calc(var(--limel-chip-height) + 0.125rem);\n\n        .text {\n            padding-right: 0;\n        }\n    }\n}\n\n:host(limel-chip[disabled]) {\n    .chip {\n        // Similar to `limel-button[disabled]`\n        color: rgba(var(--contrast-1600), 0.37);\n        background-color: rgba(var(--contrast-1600), 0.1);\n        box-shadow: none;\n    }\n}\n\n:host(limel-chip[readonly]) {\n    .chip {\n        box-shadow: 0 0 0 1px rgba(var(--contrast-800), 0.5);\n    }\n}\n\n:host(limel-chip[selected]) {\n    .chip {\n        box-shadow: var(--button-shadow-inset);\n\n        &:focus-visible {\n            box-shadow: var(--button-shadow-inset),\n                var(--shadow-depth-8-focused);\n        }\n\n        &:active {\n            box-shadow: var(--button-shadow-inset-pressed);\n        }\n    }\n    .text {\n        color: var(--mdc-theme-primary);\n    }\n}\n\n:host(limel-chip[type='filter']) {\n    .chip {\n        border-top-left-radius: 0.5rem;\n        border-bottom-left-radius: 0.5rem;\n\n        &:after {\n            content: '';\n            transition:\n                background-color 0.4s ease 0.2s,\n                box-shadow 0.6s ease 0.2s;\n            box-sizing: border-box;\n            position: absolute;\n            bottom: 0.125rem;\n            left: 0.125rem;\n            width: 0.5rem;\n            height: 0.5rem;\n            border-radius: 50%;\n            background-color: rgb(var(--contrast-800), 0.8);\n            box-shadow: 0 0 0 1px rgb(var(--color-white)) inset;\n        }\n    }\n}\n\n:host(limel-chip[type='filter'][selected]) {\n    .chip {\n        &:after {\n            background-color: rgb(var(--color-green-default));\n            box-shadow:\n                0 0 0.375rem 0 rgb(var(--color-green-light)),\n                0 0 0 1px rgb(var(--color-white)) inset;\n        }\n    }\n}\n\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-chip-height) - 0.25rem);\n    height: calc(var(--limel-chip-height) - 0.25rem);\n    padding: 0.0625rem;\n}\n\nlimel-badge {\n    pointer-events: none;\n}\n\n.text {\n    @include mixins.truncate-text;\n    line-height: 1.2;\n    padding: 0 0.5rem;\n}\n\n.trailing-button {\n    all: unset;\n    @include mixins.is-flat-clickable(\n        $color--hovered: rgb(var(--color-red-dark))\n    );\n\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    margin-left: calc(var(--limel-chip-height) * -1 + 0.125rem);\n    margin-right: 0.125rem;\n    width: calc(var(--limel-chip-height) - 0.25rem);\n    height: calc(var(--limel-chip-height) - 0.25rem);\n\n    border-radius: 50%;\n\n    svg {\n        transition:\n            color 0.2s ease,\n            transform 0.2s ease;\n        width: 1.25rem;\n    }\n\n    &:hover {\n        svg {\n            transform: scale(0.8);\n        }\n    }\n}\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n} from '@stencil/core';\nimport { Icon, Languages, Link } from '../../interface';\nimport { getIconName } from '../icon/get-icon-props';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport translate from '../../global/translations';\nimport {\n    BACKSPACE,\n    BACKSPACE_KEY_CODE,\n    DELETE,\n    DELETE_KEY_CODE,\n} from '../../util/keycodes';\nimport { ChipType, Chip as OldChipInterface } from '../chip-set/chip.types';\n\ninterface ChipInterface extends Omit<OldChipInterface, 'id' | 'badge'> {\n    badge?: string | number;\n}\n\n/**\n * Chips and buttons are both interactive elements in UI design,\n * but they serve different purposes and are used in different contexts.\n *\n * :::warning\n * Do not use the chip component carelessly, as an alternative for\n * [`limel-button`](#/component/limel-button/) in the UI design!\n *\n * **Buttons:**\n * Buttons are used to trigger actions. They are typically used to\n * submit forms, open dialogs, initiate a process, or perform any action\n * that changes the state of the application.\n * Buttons' labels usually contain action words, in other words, the labels is\n * a _verb in imperative mood_ such as \"Submit\" or \"Delete\".\n * Buttons are placed in areas where it's clear they will initiate\n * an action when clicked.\n *\n * **Chips:**\n * Chips however are elements which may look like buttons, but they are\n * representing choices, filters, or tags, in a small block\n * or clearly bundled into a group. Chips are rarely used alone in the\n * user interface.\n * They are often used in a so called \"chip-set\", or placed together in\n * a section of the UI, where the user can expect more than one chip to be present.\n *\n * For example, a chip may represent a filter in a filter bar, or a tag in a tag list,\n * or an item in a shopping list.\n * Clicking a chip can also trigger an action, for example toggling a filter ON or OFF,\n * or opening a page with all posts tagged with the tag represented by the chip,\n * or navigating to a page with more information about the item in the shopping list.\n * :::\n *\n * @private\n * @exampleComponent limel-example-chip-button\n * @exampleComponent limel-example-chip-link\n * @exampleComponent limel-example-chip-icon-colors\n * @exampleComponent limel-example-chip-badge\n * @exampleComponent limel-example-chip-filter\n * @exampleComponent limel-example-chip-removable\n * @exampleComponent limel-example-chip-aria-role\n */\n@Component({\n    tag: 'limel-chip',\n    shadow: true,\n    styleUrl: 'chip.scss',\n})\nexport class Chip implements ChipInterface {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Label displayed on the chip\n     */\n    @Prop({ reflect: true })\n    public text: string;\n\n    /**\n     * Icon of the chip.\n     */\n    @Prop()\n    public icon?: string | Icon;\n\n    /**\n     * If supplied, the chip will become a clickable link.\n     */\n    @Prop()\n    public link?: Omit<Link, 'text'>;\n\n    /**\n     * The value of the badge, displayed on the chip.\n     */\n    @Prop({ reflect: true })\n    public badge?: string | number;\n\n    /**\n     * Set to `true` to disable the chip.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to render the chip as a static UI element.\n     * Useful when the parent component has a `readonly` state.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to visualize the chip in a \"selected\" state.\n     * This is typically used when the chip is used in a chip-set\n     * along with other chips.\n     */\n    @Prop({ reflect: true })\n    public selected = false;\n\n    /**\n     * Set to `true` to render a remove button on the chip.\n     */\n    @Prop({ reflect: true })\n    public removable = false;\n\n    /**\n     * Set to `filter` to render the chip with a distinct style\n     * suitable for visualizing filters.\n     */\n    @Prop({ reflect: true })\n    public type?: ChipType = 'default';\n\n    /**\n     * Fired when clicking on the remove button of a `removable` chip.\n     */\n    @Event()\n    public remove: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelChipElement;\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    private chipId = 'chip-' + crypto.randomUUID();\n\n    public render() {\n        return (\n            <Host onClick={this.filterClickWhenDisabled}>\n                {this.link ? this.renderAsLink() : this.renderAsButton()}\n            </Host>\n        );\n    }\n\n    private renderAsButton = () => {\n        return [\n            <button\n                id={this.chipId}\n                class=\"chip\"\n                role=\"button\"\n                disabled={this.disabled || this.readonly}\n                onKeyDown={this.handleDeleteKeyDown}\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n            </button>,\n            this.renderRemoveButton(),\n        ];\n    };\n\n    private renderAsLink = () => {\n        return [\n            <a\n                id={this.chipId}\n                class=\"chip\"\n                href={this.link.href}\n                title={this.link.title}\n                target={this.link.target}\n                aria-disabled={this.disabled || this.readonly}\n                tabindex={this.disabled || this.readonly ? -1 : 0}\n                onKeyDown={this.handleDeleteKeyDown}\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n            </a>,\n            this.renderRemoveButton(),\n        ];\n    };\n\n    private renderLabel = () => {\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderIcon() {\n        const icon = getIconName(this.icon);\n\n        if (!icon) {\n            return;\n        }\n\n        return (\n            <limel-icon\n                badge={true}\n                name={icon}\n                style={{\n                    color: `${(this.icon as Icon)?.color}`,\n                    'background-color': `${\n                        (this.icon as Icon)?.backgroundColor\n                    }`,\n                }}\n            />\n        );\n    }\n\n    private renderBadge() {\n        if (!this.badge) {\n            return;\n        }\n\n        return <limel-badge label={this.badge} />;\n    }\n\n    private renderRemoveButton() {\n        if (!this.removable || this.readonly || this.disabled) {\n            return;\n        }\n\n        const svgData =\n            '<svg viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" d=\"m8 8 16 16M24 8 8 24\"/></svg>';\n\n        return (\n            <button\n                class=\"trailing-button remove-button\"\n                tabIndex={-1}\n                aria-label={this.removeChipLabel}\n                aria-controls={this.chipId}\n                innerHTML={svgData}\n                onClick={this.handleRemoveClick}\n            />\n        );\n    }\n\n    private filterClickWhenDisabled = (e) => {\n        if (this.disabled || this.readonly) {\n            e.preventDefault();\n        }\n    };\n\n    private handleRemoveClick = (event: MouseEvent | KeyboardEvent) => {\n        event.stopPropagation();\n        this.remove.emit();\n    };\n\n    private handleDeleteKeyDown = (event: KeyboardEvent) => {\n        if (!this.removable) {\n            return;\n        }\n\n        const keys = [DELETE, BACKSPACE];\n        const keycodes = [DELETE_KEY_CODE, BACKSPACE_KEY_CODE];\n\n        if (keys.includes(event.key) || keycodes.includes(event.keyCode)) {\n            this.handleRemoveClick(event);\n        }\n    };\n\n    private removeChipLabel = (): string => {\n        return translate.get('chip-set.remove-chip', this.language);\n    };\n}\n","import {\n    ARROW_LEFT,\n    ARROW_LEFT_KEY_CODE,\n    ARROW_RIGHT,\n    ARROW_RIGHT_KEY_CODE,\n    BACKSPACE,\n    BACKSPACE_KEY_CODE,\n    DELETE,\n    DELETE_KEY_CODE,\n    ENTER,\n    ENTER_KEY_CODE,\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n} from '../../util/keycodes';\n\n/**\n * Key handler for the input field.\n * Lets the user select, activate, and remove chips with the keyboard.\n *\n * @param event - event\n\n */\nexport function handleKeyboardEvent(event: KeyboardEvent) {\n    if (this.textValue.length) {\n        // If there is any text in the input field, keyboard input should\n        // navigate the text, not the chips.\n        return;\n    }\n\n    if (!this.value || !this.value.length) {\n        // If there are no chips, there is nothing to select.\n        return;\n    }\n\n    const isLeft =\n        event.key === ARROW_LEFT || event.keyCode === ARROW_LEFT_KEY_CODE;\n    const isRight =\n        event.key === ARROW_RIGHT || event.keyCode === ARROW_RIGHT_KEY_CODE;\n    const isEnter = event.key === ENTER || event.keyCode === ENTER_KEY_CODE;\n    const isDelete = event.key === DELETE || event.keyCode === DELETE_KEY_CODE;\n    const isBackspace =\n        event.key === BACKSPACE || event.keyCode === BACKSPACE_KEY_CODE;\n    const isEscape = event.key === ESCAPE || event.keyCode === ESCAPE_KEY_CODE;\n\n    if (isLeft) {\n        return handleLeft(this, event);\n    }\n\n    if (isRight) {\n        return handleRight(this, event);\n    }\n\n    if (isEnter) {\n        return handleEnter(this, event);\n    }\n\n    if (isDelete) {\n        return handleDelete(this, event);\n    }\n\n    if (isBackspace) {\n        return handleBackspace(this, event);\n    }\n\n    if (isEscape) {\n        return handleEscape(this, event);\n    }\n}\n\nfunction handleLeft(host, event) {\n    event.preventDefault();\n    if (host.inputChipIndexSelected === null) {\n        host.inputChipIndexSelected = host.value.length - 1;\n\n        return;\n    }\n\n    if (host.inputChipIndexSelected <= 0) {\n        return;\n    }\n\n    host.inputChipIndexSelected -= 1;\n}\n\nfunction handleRight(host, event) {\n    event.preventDefault();\n    if (host.inputChipIndexSelected === null) {\n        host.inputChipIndexSelected = 0;\n\n        return;\n    }\n\n    if (host.inputChipIndexSelected >= host.value.length - 1) {\n        return;\n    }\n\n    host.inputChipIndexSelected += 1;\n}\n\nfunction handleEnter(host, event) {\n    if (host.inputChipIndexSelected !== null) {\n        event.preventDefault();\n        host.emitInteraction(host.value[host.inputChipIndexSelected]);\n    }\n}\n\nfunction handleEscape(host, event) {\n    if (host.inputChipIndexSelected !== null) {\n        event.preventDefault();\n        host.inputChipIndexSelected = null;\n    }\n}\n\nfunction handleDelete(host, event) {\n    if (host.inputChipIndexSelected !== null) {\n        event.preventDefault();\n        removeChip(host);\n    }\n}\n\nfunction handleBackspace(host, event) {\n    if (host.inputChipIndexSelected !== null) {\n        event.preventDefault();\n        removeChip(host);\n    } else if (!event.repeat) {\n        host.inputChipIndexSelected = host.value.length - 1;\n    }\n}\n\nfunction removeChip(host) {\n    if (host.inputChipIndexSelected !== null) {\n        host.removeChip(host.value[host.inputChipIndexSelected].id);\n        host.inputChipIndexSelected = null;\n    }\n}\n","@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/textfield';\n@use '@material/textfield/icon';\n@use '@material/notched-outline/mdc-notched-outline';\n@use '@material/floating-label';\n@use '@material/floating-label/mdc-floating-label';\n\n/**\n * @prop --icon-background-color: Background color of the icon. Defaults to transparent.\n * @prop --icon-color: Color of the icon. Defaults to `rgb(var(--contrast-1100))`.\n * @prop --background-color: Background color of the field when type is set to input.\n * @prop --background-color-disabled: Background color of the field when type is set to input and the component is disabled or readonly.\n * @prop --input-chip-set-selected-chip-color: Color of the highlight around selected chips in input chip-sets.\n */\n\n@include textfield.core-styles;\n@include icon.icon-core-styles;\n\n@include shared_input-select-picker.outlined-style-overrides;\n@include shared_input-select-picker.floating-label-overrides;\n@include shared_input-select-picker.cropped-label-hack;\n@include shared_input-select-picker.disabled-overrides;\n@include shared_input-select-picker.readonly-overrides;\n@include shared_input-select-picker.leading-icon;\n@include shared_input-select-picker.lime-empty-value-for-readonly;\n@include shared_input-select-picker.lime-looks-like-input-value;\n\n$height-of-chip-set-input: functions.pxToRem(36);\n$leading-icon-space: functions.pxToRem(40);\n\n:host(limel-chip-set) {\n    isolation: isolate;\n}\n\n.mdc-chip-set {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    min-height: shared_input-select-picker.$height-of-mdc-text-field;\n    position: relative;\n\n    &.chip-set--with-label {\n        .lime-floating-label--float-above {\n            padding-left: functions.pxToRem(4);\n        }\n    }\n\n    &.mdc-chip-set--input {\n        padding: functions.pxToRem(8);\n\n        width: 100%;\n    }\n\n    &.has-clear-all-button {\n        &.mdc-chip-set--input {\n            padding-right: functions.pxToRem(\n                32\n            ); // This leaves space for \"clear all\" button and avoids overlapping with chips\n        }\n    }\n}\n\n.mdc-text-field {\n    height: auto;\n    cursor: text;\n    flex-wrap: wrap;\n    row-gap: 0.5rem;\n\n    .mdc-text-field__input {\n        @include shared_input-select-picker.input-field-placeholder;\n\n        width: auto;\n        padding: 0 functions.pxToRem(12);\n\n        flex-grow: 1;\n        flex-shrink: 0;\n\n        &.hidden {\n            // This class is added, as soon as there is a chip selected and displayed\n            // This input field should not be visually visible as it breaks the UI in some cases\n            // But it should be rendered to be able to tab between fields and do other keyboard commands /Kia\n            transition: all 0s;\n            opacity: 0;\n            position: absolute;\n            z-index: -100; // to let users interact with chips, in case they're covered\n        }\n        &[type='search'] {\n            -webkit-appearance: textfield; // Removes the default magnifying glass icon on iOS which appears automatically on input fields with type of search\n            background-color: transparent; // overides styles caused by previous line\n\n            &::-webkit-search-cancel-button {\n                display: none; // removes the default X button\n            }\n        }\n    }\n}\n\n// used only in chipsets that do not have input\n.chip-set__label {\n    @include mixins.truncate-text;\n    width: 120%; // `120%` instead of `100%`,\n    // because this class is always together with `mdc-floating-label--float-above`,\n    // which scales the label down. So there is more horizontal space to display the label in.\n    top: functions.pxToRem(13);\n    padding-left: functions.pxToRem(20);\n}\n\n// Because MDC removes some classes in chipset, we add custom\n// classes with similar names and expected behavior & styles.\n// These class names start with `lime-`, instead of `mdc-`.\n.lime-notched-outline--notched {\n    .mdc-notched-outline__notch {\n        border-top: 1px solid transparent !important;\n\n        .lime-floating-label--float-above {\n            // This overrides MDC's original top value which is `top: 50%`.\n            // The reason is that a % value aligns the label in a wrong position\n            // vertically, when there are multiple rows of chips.\n            top: functions.pxToRem(27);\n\n            transform: translateY(-34.75px) scale(0.75);\n            font-size: shared_input-select-picker.$cropped-label-hack--font-size;\n        }\n    }\n}\n\n.force-invalid {\n    @extend .mdc-text-field--invalid;\n}\n\n.clear-all-button {\n    @include mixins.clear-all-button;\n    @include mixins.visualize-keyboard-focus;\n\n    position: absolute;\n    right: functions.pxToRem(8);\n    top: functions.pxToRem(18);\n\n    opacity: 0; // Is hidden, but can receive focus (such as when navigating through tab indexes).\n\n    &:focus,\n    .has-chips:not(.mdc-text-field--disabled):hover &,\n    .has-chips:not(.mdc-text-field--disabled).mdc-text-field--focused & {\n        opacity: 1;\n        outline: none;\n    }\n\n    :not(.has-chips) &,\n    .has-chips.mdc-text-field--disabled & {\n        display: none; // Won't receive focus when disabled\n    }\n}\n\n.has-leading-icon {\n    &:not(.has-chips) {\n        .mdc-text-field__input {\n            padding-left: $leading-icon-space;\n        }\n\n        .mdc-floating-label {\n            &:not(.lime-floating-label--float-above) {\n                left: $leading-icon-space;\n            }\n            &.mdc-floating-label--float-above {\n                left: functions.pxToRem(4);\n            }\n        }\n    }\n\n    limel-chip {\n        &:first-of-type {\n            margin-left: 40px;\n        }\n    }\n\n    .search-icon {\n        transition: transform 0.2s ease;\n        position: absolute;\n        top: functions.pxToRem(16);\n        left: functions.pxToRem(16);\n    }\n\n    limel-icon {\n        background-color: transparent;\n    }\n}\n\n.delimiter {\n    opacity: 0.5;\n    padding: 0 functions.pxToRem(2);\n    color: var(--mdc-theme-on-surface);\n}\n\nlimel-chip {\n    border-radius: 2rem;\n\n    &.can-be-removed {\n        // When chip is selected with keyboard (backspace / arrow-keys) to be deleted\n        box-shadow: var(--shadow-depth-8-error);\n    }\n}\n\n@import './partial-styles/_readonly';\n@import './partial-styles/_file-picker';\n@import './partial-styles/_helper-text';\n","import { Chip, ChipType } from '../chip-set/chip.types';\nimport { Languages } from '../date-picker/date.types';\n// import {\n//     MDCChipInteractionEvent,\n//     MDCChipSelectionEvent,\n//     MDCChipSet,\n// } from '@material/chips/deprecated';\nimport { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Method,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { handleKeyboardEvent } from './chip-set-input-helpers';\nimport translate from '../../global/translations';\nimport { getHref, getTarget } from '../../util/link-helper';\nimport { isEqual } from 'lodash-es';\n\nconst INPUT_FIELD_TABINDEX = 1;\n\n/**\n * @exampleComponent limel-example-chip-set\n * @exampleComponent limel-example-chip-set-choice\n * @exampleComponent limel-example-chip-set-filter\n * @exampleComponent limel-example-chip-set-filter-badge\n * @exampleComponent limel-example-chip-set-input\n * @exampleComponent limel-example-chip-set-input-type-text\n * @exampleComponent limel-example-chip-set-input-type-search\n * @exampleComponent limel-example-chip-icon-color\n * @exampleComponent limel-example-chip-set-composite\n */\n@Component({\n    tag: 'limel-chip-set',\n    shadow: true,\n    styleUrl: 'chip-set.scss',\n})\nexport class ChipSet {\n    /**\n     * List of chips for the set\n     */\n    @Prop()\n    public value: Chip[] = [];\n\n    /**\n     * Type of chip set\n     *\n     * - `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n     * - `filter` renders a set of selectable chips where all are selectable.\n     * - `input` renders a set of chips that can be used in conjunction with an input field\n     *\n     * If no type is set, a basic set of chips without additional functionality will be rendered\n     */\n    @Prop({ reflect: true })\n    public type?: 'choice' | 'filter' | 'input';\n\n    /**\n     * Label for the chip-set\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the chipset.\n     * When type is `input`, the helper text is displayed below the\n     * input field when it has focus.\n     * When type is not `input`, the helper text is always displayed\n     * if the device is touch screen; otherwise it is shown when chip-set\n     * is hovered or focused using keyboard navigation.\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * True if the chip set should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * For chip-sets of type `input`, set to `true` to disable adding and\n     * removing chips, but allow interaction with existing chips in the set.\n     * For any other types, setting either `readonly` or `disabled` disables\n     * the chip-set.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * For chip-sets of type `input`. Value to use for the `type` attribute on the\n     * input field inside the chip-set.\n     */\n    @Prop({ reflect: true })\n    public inputType: 'search' | 'text' = 'text';\n\n    /**\n     * For chip-sets of type `input`. Limits the maximum number of chips.\n     * When the value is `0` or not set, no limit is applied.\n     */\n    @Prop({ reflect: true })\n    public maxItems: number;\n\n    /**\n     * True if the control requires a value\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    /**\n     * Search label to display when type is `input` and component is in search mode\n     */\n    @Prop({ reflect: true })\n    public searchLabel: string;\n\n    /**\n     * Whether the input field should be emptied when the chip-set loses focus.\n     */\n    @Prop({ reflect: true })\n    public emptyInputOnBlur: boolean = true;\n\n    /**\n     * Whether the \"Clear all\" buttons should be shown\n     */\n    @Prop()\n    public clearAllButton: boolean = true;\n\n    /**\n     * For chip-sets of type `input`. When the value is null, no leading icon is used.\n     * Leading icon to show to the far left in the text field\n     */\n    @Prop({ reflect: true })\n    public leadingIcon: string = null;\n\n    /**\n     * For chip-set of type `input`. Sets delimiters between chips.\n     */\n    @Prop({ reflect: true })\n    public delimiter: string = null;\n\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components. For example, the clear all chips label.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Dispatched when a chip is interacted with\n     */\n    @Event()\n    private interact: EventEmitter<Chip>;\n\n    /**\n     * Dispatched when a chip is selected/deselected\n     */\n    @Event()\n    private change: EventEmitter<Chip | Chip[]>;\n\n    /**\n     * Emitted when an input chip set has received focus and editing in the text field has started\n     */\n    @Event()\n    private startEdit: EventEmitter<void>;\n\n    /**\n     * Emitted when an input chip set has lost focus and editing in the text field has ended\n     */\n    @Event()\n    private stopEdit: EventEmitter<void>;\n\n    /**\n     * Dispatched when the input is changed for type `input`\n     */\n    @Event()\n    private input: EventEmitter<string>;\n\n    @Element()\n    private host: HTMLLimelChipSetElement;\n\n    @State()\n    private editMode: boolean = false;\n\n    @State()\n    private textValue: string = '';\n\n    @State()\n    private blurred: boolean = false;\n\n    @State()\n    private inputChipIndexSelected: number = null;\n\n    @State()\n    private selectedChip: Chip;\n\n    @State()\n    private selectedChipIds: Array<string | number>;\n\n    // private mdcChipSet: MDCChipSet;\n    private mdcTextField: MDCTextField;\n    private handleKeyDown = handleKeyboardEvent;\n\n    constructor() {\n        this.renderChip = this.renderChip.bind(this);\n        this.renderInputChip = this.renderInputChip.bind(this);\n        this.isFull = this.isFull.bind(this);\n        // this.handleInteractionEvent = this.handleInteractionEvent.bind(this);\n        // this.handleSelection = this.handleSelection.bind(this);\n        this.handleTextFieldFocus = this.handleTextFieldFocus.bind(this);\n        this.handleInputBlur = this.handleInputBlur.bind(this);\n        this.handleTextInput = this.handleTextInput.bind(this);\n        this.inputFieldOnChange = this.inputFieldOnChange.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.inputHidden = this.inputHidden.bind(this);\n        this.handleDeleteAllIconClick =\n            this.handleDeleteAllIconClick.bind(this);\n        this.renderDelimiter = this.renderDelimiter.bind(this);\n        this.selectedChipIds = this.value\n            .filter((val) => val.selected)\n            .map((a) => a.id);\n    }\n\n    /**\n     * Used to find out whether the chip-set is in edit mode.\n     *\n     * @returns `true` if the chip-set is in edit mode, `false` otherwise.\n     */\n    @Method()\n    public async getEditMode(): Promise<boolean> {\n        return this.editMode;\n    }\n\n    /**\n     * Used to set focus to the chip-set input field.\n     *\n     * @param emptyInput - if `true`, any text in the input is discarded\n     * @returns does not return anything, but methods have to be async\n     */\n    @Method()\n    public async setFocus(emptyInput: boolean = false) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.editMode = true;\n        if (emptyInput) {\n            this.textValue = '';\n        }\n\n        this.host.shadowRoot.querySelector('input').focus();\n        this.startEdit.emit();\n    }\n\n    /**\n     * Used to empty the input field. Used in conjunction with `emptyInputOnBlur` to let the\n     * consumer control when the input is emptied.\n     *\n     * @returns does not return anything, but methods have to be async\n     */\n    @Method()\n    public async emptyInput() {\n        this.syncEmptyInput();\n    }\n\n    public componentDidLoad() {\n        this.triggerIconColorWarning(this.value);\n\n        if (this.type === 'input') {\n            this.mdcTextField = new MDCTextField(\n                this.host.shadowRoot.querySelector('.mdc-text-field'),\n            );\n        }\n\n        // this.createMDCChipSet();\n    }\n\n    public componentWillUpdate() {\n        // this.destroyMDCChipSet();\n    }\n\n    public componentDidUpdate() {\n        // this.createMDCChipSet();\n        const input = this.host.shadowRoot.querySelector('input');\n        if (input && this.editMode) {\n            input.focus();\n        }\n    }\n\n    public disconnectedCallback() {\n        // this.destroyMDCChipSet();\n\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n    }\n\n    public render() {\n        if (this.type === 'input') {\n            return this.renderInputChips();\n        }\n\n        const classes = {\n            'mdc-chip-set': true,\n            disabled: this.disabled || this.readonly,\n            'mdc-text-field--with-trailing-icon': true,\n        };\n        if (this.type) {\n            classes[`mdc-chip-set--${this.type}`] = true;\n        }\n\n        const chipSetLabel = this.renderChipSetLabel();\n        if (chipSetLabel) {\n            classes['chip-set--with-label'] = true;\n        }\n\n        const value = this.getValue();\n\n        return (\n            <div class={classes} role=\"grid\">\n                {chipSetLabel}\n                {value.map(this.renderChip)}\n                {this.renderHelperLine()}\n            </div>\n        );\n    }\n\n    private getValue = () => {\n        return this.value.map((chip) => ({\n            ...chip,\n            selected: this.selectedChipIds.includes(chip.id),\n        }));\n    };\n\n    @Watch('value')\n    protected handleChangeChips(newValue: Chip[], oldValue: Chip[]) {\n        if (isEqual(newValue, oldValue)) {\n            return;\n        }\n\n        this.syncEmptyInput();\n    }\n\n    // private createMDCChipSet() {\n    //     this.mdcChipSet = new MDCChipSet(\n    //         this.host.shadowRoot.querySelector('.mdc-chip-set'),\n    //     );\n\n    //     if (!this.type || this.type === 'input') {\n    //         this.mdcChipSet.listen(\n    //             'MDCChip:interaction',\n    //             this.handleInteractionEvent,\n    //         );\n    //     }\n\n    //     if (this.type === 'choice' || this.type === 'filter') {\n    //         this.mdcChipSet.listen('MDCChip:selection', this.handleSelection);\n    //     }\n    // }\n\n    // private destroyMDCChipSet() {\n    //     if (this.mdcChipSet) {\n    //         this.mdcChipSet.unlisten(\n    //             'MDCChip:interaction',\n    //             this.handleInteractionEvent,\n    //         );\n    //         this.mdcChipSet.unlisten('MDCChip:selection', this.handleSelection);\n\n    //         this.mdcChipSet.destroy();\n    //     }\n    // }\n\n    private renderChipSetLabel() {\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <label class=\"chip-set__label mdc-floating-label mdc-floating-label--float-above\">\n                {this.label}\n            </label>\n        );\n    }\n\n    private renderInputChips() {\n        return [\n            <div\n                class={{\n                    'mdc-text-field mdc-text-field--outlined': true,\n                    'mdc-chip-set mdc-chip-set--input': true,\n                    'force-invalid': this.isInvalid(),\n                    'mdc-text-field--disabled': this.readonly || this.disabled,\n                    'lime-text-field--readonly': this.readonly,\n                    'has-chips mdc-text-field--label-floating':\n                        this.value.length !== 0,\n                    'has-leading-icon': this.leadingIcon !== null,\n                    'has-clear-all-button': this.clearAllButton,\n                }}\n                onClick={this.handleTextFieldFocus}\n            >\n                {this.value.map(this.renderInputChip)}\n                <input\n                    tabIndex={INPUT_FIELD_TABINDEX}\n                    type={this.inputType}\n                    id=\"input-element\"\n                    disabled={this.readonly || this.disabled}\n                    class={{\n                        'mdc-text-field__input': true,\n                        hidden: this.inputHidden(),\n                    }}\n                    value={this.textValue}\n                    onBlur={this.handleInputBlur}\n                    onFocus={this.handleTextFieldFocus}\n                    onKeyDown={this.handleKeyDown}\n                    onInput={this.handleTextInput}\n                    // Some browsers emit a change event on input elements, we need to stop\n                    // that event from propagating since we are emitting our own change event\n                    onChange={this.inputFieldOnChange}\n                    placeholder={this.isFull() ? '' : this.searchLabel}\n                    readonly={this.isFull()}\n                />\n                <div\n                    class={{\n                        'mdc-notched-outline': true,\n                        'mdc-notched-outline--upgraded': true,\n                        'mdc-text-field--required': this.required,\n                        'lime-notched-outline--notched': this.floatLabelAbove(),\n                    }}\n                    dropzone-tip={this.dropZoneTip()}\n                >\n                    <div class=\"mdc-notched-outline__leading\" />\n                    {this.renderLabel()}\n                    <div class=\"mdc-notched-outline__trailing\" />\n                </div>\n                {this.renderLeadingIcon()}\n                {this.renderEmptyValueForReadonly()}\n                {this.renderClearAllChipsButton()}\n            </div>,\n            this.renderHelperLine(),\n        ];\n    }\n\n    private renderEmptyValueForReadonly = () => {\n        if (this.readonly && this.value.length === 0) {\n            return (\n                <span class=\"lime-empty-value-for-readonly lime-looks-like-input-value\">\n                    –\n                </span>\n            );\n        }\n    };\n\n    private renderLabel() {\n        const labelClassList = {\n            'mdc-floating-label': true,\n            'mdc-text-field--disabled': this.readonly || this.disabled,\n            'mdc-floating-label--required': this.required,\n            'lime-floating-label--float-above': this.floatLabelAbove(),\n        };\n\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <div class=\"mdc-notched-outline__notch\">\n                <label class={labelClassList} htmlFor=\"input-element\">\n                    {this.label}\n                </label>\n            </div>\n        );\n    }\n\n    private floatLabelAbove = () => {\n        if (!!this.value.length || this.editMode || this.readonly) {\n            return true;\n        }\n    };\n\n    private dropZoneTip = (): string => {\n        return translate.get('file.drag-and-drop-tips', this.language);\n    };\n\n    private isFull(): boolean {\n        return !!this.maxItems && this.value.length >= this.maxItems;\n    }\n\n    private isInvalid() {\n        if (this.readonly) {\n            // A readonly field can never be invalid.\n            return false;\n        }\n\n        if (this.invalid) {\n            return true;\n        }\n\n        if (!this.required) {\n            return false;\n        }\n\n        if (!this.blurred) {\n            return false;\n        }\n\n        return !this.value || !this.value.length;\n    }\n\n    private inputFieldOnChange(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Enter edit mode when the text field receives focus. When editMode is true, the input element will be visible\n     */\n    private handleTextFieldFocus() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        if (this.editMode) {\n            return;\n        }\n\n        this.editMode = true;\n        this.startEdit.emit();\n    }\n\n    /**\n     * Exit edit mode when the input element loses focus. This makes sure the input element does not take up any\n     * additional space when the user it not typing anything\n     */\n    private handleInputBlur() {\n        if (this.emptyInputOnBlur) {\n            this.syncEmptyInput();\n        }\n\n        this.editMode = false;\n        this.blurred = true;\n        this.inputChipIndexSelected = null;\n\n        // This timeout is needed in order to let a new element receive focus\n        setTimeout(() => {\n            this.stopEdit.emit();\n        }, 0);\n    }\n\n    private syncEmptyInput() {\n        this.textValue = '';\n    }\n\n    private inputHidden() {\n        if (this.editMode) {\n            return this.isFull();\n        }\n\n        // If there are chips in the picker, hide the input to avoid the input\n        // being placed on a new line and adding ugly space beneath the chips.\n        // If there are no chips, show the input, or the picker will look weird.\n        return !!(this.value && this.value.length);\n    }\n\n    private handleTextInput(event) {\n        event.stopPropagation();\n        this.inputChipIndexSelected = null;\n        this.textValue = event.target.value;\n        this.input.emit(event.target.value && event.target.value.trim());\n    }\n\n    // private handleInteractionEvent(event: MDCChipInteractionEvent) {\n    //     const chip = this.value.find((item) => {\n    //         return `${item.id}` === event.detail.chipId;\n    //     });\n    //     this.emitInteraction(chip);\n    // }\n\n    private emitInteraction(chip: Chip) {\n        this.interact.emit(chip);\n    }\n\n    // private handleSelection(event: MDCChipSelectionEvent) {\n    //     let chip = this.value.find((item) => {\n    //         return `${item.id}` === event.detail.chipId;\n    //     });\n    //     chip = { ...chip, selected: event.detail.selected };\n    //     this.change.emit(chip);\n    // }\n\n    private renderChip(chip: Chip) {\n        const chipType: ChipType =\n            this.type === 'filter' ? 'filter' : 'default';\n\n        const chipProps = this.getChipProps(chip, chipType);\n\n        return <limel-chip {...chipProps} />;\n    }\n\n    private hasHelperText = () => {\n        return this.helperText !== null && this.helperText !== undefined;\n    };\n\n    private renderHelperLine = () => {\n        if (!this.maxItems && !this.hasHelperText()) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                length={this.value.length}\n                maxLength={this.maxItems}\n                helperText={this.helperText}\n                invalid={this.isInvalid()}\n            />\n        );\n    };\n\n    private renderInputChip(chip: Chip, index: number) {\n        const chipProps = this.getChipProps(chip, 'default');\n\n        return [\n            <limel-chip\n                key={chip.id}\n                class={{\n                    'can-be-removed': this.inputChipIndexSelected === index,\n                }}\n                {...chipProps}\n                onRemove={this.removeChip(chip.id)}\n            />,\n            this.renderDelimiter(),\n        ];\n    }\n\n    private removeChip = (id: string | number) => () => {\n        const newValue = this.value.filter((chip) => {\n            return `${chip.id}` !== `${id}`;\n        });\n        this.change.emit(newValue);\n    };\n\n    private getChipProps(chip: Chip, chipType: ChipType) {\n        const removable =\n            this.type === 'input' &&\n            (chip.removable || !this.readonly || !this.disabled);\n\n        return {\n            role: 'row',\n            id: `${chip.id}`,\n            text: chip.text,\n            icon: chip.icon,\n            badge: chip.badge,\n            selected: chip.selected,\n            disabled: this.disabled,\n            readonly: this.readonly,\n            type: chipType,\n            removable: removable,\n            onClick: this.catchInputChipClicks(chip),\n            ...(chip.href && {\n                link: {\n                    href: getHref(chip.href),\n                    target: getTarget(chip.href),\n                },\n            }),\n        };\n    }\n\n    private catchInputChipClicks = (chip: Chip) => () => {\n        this.selectedChip = chip;\n        const id = chip.id;\n        if (this.type === 'choice') {\n            const isChipClicked = this.selectedChipIds[0] === id;\n            this.selectedChipIds = isChipClicked ? [] : [id];\n        } else if (this.type === 'filter') {\n            const index = this.selectedChipIds.indexOf(id);\n            // Handling toggle\n            if (index !== -1) {\n                this.selectedChipIds.splice(index, 1);\n            } else {\n                this.selectedChipIds.push(id);\n            }\n        }\n\n        this.emitInteraction(chip);\n        this.change.emit({\n            ...chip,\n            selected: this.selectedChipIds.includes(chip.id),\n        });\n    };\n\n    private renderLeadingIcon() {\n        if (!this.leadingIcon) {\n            return;\n        }\n\n        return (\n            <i class=\"mdc-text-field__icon search-icon\">\n                <limel-icon name={this.leadingIcon} />\n            </i>\n        );\n    }\n\n    private renderClearAllChipsButton() {\n        if (this.disabled || this.readonly || !this.clearAllButton) {\n            return;\n        }\n\n        return (\n            <a\n                href=\"\"\n                onClick={this.handleDeleteAllIconClick}\n                class=\"mdc-text-field__icon clear-all-button\"\n                tabindex=\"0\"\n                role=\"button\"\n                title={this.clearAllChipsLabel()}\n                aria-label={this.clearAllChipsLabel()}\n            />\n        );\n    }\n\n    private clearAllChipsLabel = (): string => {\n        return translate.get('chip-set.clear-all', this.language);\n    };\n\n    private handleDeleteAllIconClick(event: Event) {\n        event.preventDefault();\n        this.change.emit([]);\n    }\n\n    private renderDelimiter() {\n        if (!this.delimiter) {\n            return;\n        }\n\n        return <div class=\"delimiter\">{this.delimiter}</div>;\n    }\n\n    private triggerIconColorWarning(value: Chip[]) {\n        for (const chip of value) {\n            if (\n                chip.icon &&\n                (chip.iconFillColor ||\n                    chip.iconBackgroundColor ||\n                    chip.iconTitle)\n            ) {\n                /* eslint-disable-next-line no-console */\n                console.warn(\n                    \"The `iconFillColor`, `iconBackgroundColor`, and `iconTitle` props are deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name', `iconBackgroundColor: 'color-name', and `iconTitle: 'title'`, write `icon { name: 'icon-name', color: 'color-name', backgroundColor: 'color-name', title: 'title' }`.\",\n                );\n            }\n        }\n    }\n}\n"],"mappings":"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"}