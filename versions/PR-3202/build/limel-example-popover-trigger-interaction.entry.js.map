{"version":3,"names":["TRIGGER_DELAY","PopoverTriggerInteractionExample","this","openPopoverWithDelay","event","stopPropagation","console","log","clearTimeout","hoverTimeout","window","setTimeout","isOpen","onPopoverClose","handleClick","alert","render","chipImage","src","alt","markdown","h","open","onClose","text","image","slot","title","onMouseEnter","onFocus","onClick","style","display","gap","padding","tabIndex","value"],"sources":["./src/components/popover/examples/popover-trigger-interaction.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\nconst TRIGGER_DELAY = 1000;\n/**\n * Trigger Interaction for Popovers\n *\n * Popovers are typically triggered by a click event, but they can also be triggered\n * by hover or focus events. This approach is especially useful when the click event\n * is reserved for other interactions, such as navigating to another page or activating\n * a different function.\n *\n * Triggering a popover with hover or focus is useful when clicking the trigger element\n * is required for actions like navigation, while still providing contextual information\n * or options through the popover.\n *\n * :::important\n * Key considerations when using hover and focus triggers:\n *\n * **Delayed Popover Opening**:\n * Hovering or focusing on the trigger element should not immediately open the popover.\n * Always introduce a reasonable delay before opening the popover to prevent accidental activation.\n * This prevents an annoying user experience where the popover opens as the user moves\n * their cursor across the UI. It's especially important in UIs with multiple trigger elements.\n *\n * **Popover Should Remain Open**:\n * The popover should remain open even if the user moves the cursor away from\n * the trigger element or navigates away with the keyboard.\n * This allows the user to interact with the popover content without it closing unexpectedly.\n *\n * **Touchscreen Accessibility**:\n * Consider the experience for users on touchscreen devices. Hover interactions might not be available,\n * so ensure the design is accessible to them.\n *\n * **Clear Visual Cues**:\n * Provide clear visual indicators, or use accessible attributes like `title` or `aria-label`,\n * to signal that the trigger element is interactive when hovered or focused.\n * This ensures that users understand they can interact with the element even without clicking.\n *\n * **Low discoverability**:\n * Remember that such interaction are not easily discovered by the end-users.\n * Therefore, you should avoid having any critical functionality to be hidden\n * behind such interactions, and only use it as supplementary means of enriching\n * the user experience.\n * :::\n */\n\n@Component({\n    tag: 'limel-example-popover-trigger-interaction',\n    shadow: true,\n})\nexport class PopoverTriggerInteractionExample {\n    @State()\n    private isOpen = false;\n\n    private hoverTimeout: number;\n\n    public render() {\n        const chipImage = {\n            src: 'https://lundalogik.github.io/lime-elements/0e6f74c0-11d9-465b-aac6-44f33da3cb7c.png',\n            alt: 'A picture of Adrian Schmidt, Head of Smooth Operations at Lime Technologies',\n        };\n\n        const markdown = `\n![Adrian Schmidt](https://lundalogik.github.io/lime-elements/0e6f74c0-11d9-465b-aac6-44f33da3cb7c.png)\n### Adrian Schmidt\nHead of\nSmooth Operations\n\n[Get in touch](https://github.com/adrianschmidt)\n        `;\n\n        return [\n            <limel-popover\n                open={this.isOpen}\n                onClose={this.onPopoverClose}\n                open-direction=\"top\"\n            >\n                <limel-chip\n                    text=\"Adrian Schmidt\"\n                    image={chipImage}\n                    slot=\"trigger\"\n                    title=\"Hover or focus me!\"\n                    onMouseEnter={this.openPopoverWithDelay}\n                    onFocus={this.openPopoverWithDelay}\n                    onClick={this.handleClick}\n                />\n                <limel-markdown\n                    style={{\n                        display: 'flex',\n                        'flex-direction': 'column',\n                        gap: '0.5rem',\n                        padding: '0.5rem',\n                    }}\n                    tabIndex={0}\n                    value={markdown}\n                />\n            </limel-popover>,\n        ];\n    }\n\n    private openPopoverWithDelay = (event: FocusEvent | MouseEvent) => {\n        event.stopPropagation();\n        console.log('opening popover with delay');\n\n        clearTimeout(this.hoverTimeout);\n\n        this.hoverTimeout = window.setTimeout(() => {\n            this.isOpen = true;\n        }, TRIGGER_DELAY);\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        console.log('closing popover instantly');\n        this.isOpen = false;\n    };\n\n    private handleClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        console.log('chip is clicked, closing popover and opening alert');\n        this.isOpen = false;\n\n        alert('Popover closed, you clicked on the trigger!');\n    };\n}\n"],"mappings":"+CACA,MAAMA,EAAgB,I,MAgDTC,EAAgC,M,yBAkDjCC,KAAAC,qBAAwBC,IAC5BA,EAAMC,kBACNC,QAAQC,IAAI,8BAEZC,aAAaN,KAAKO,cAElBP,KAAKO,aAAeC,OAAOC,YAAW,KAClCT,KAAKU,OAAS,IAAI,GACnBZ,EAAc,EAGbE,KAAAW,eAAkBT,IACtBA,EAAMC,kBACNC,QAAQC,IAAI,6BACZL,KAAKU,OAAS,KAAK,EAGfV,KAAAY,YAAeV,IACnBA,EAAMC,kBACNC,QAAQC,IAAI,sDACZL,KAAKU,OAAS,MAEdG,MAAM,8CAA8C,E,YAtEvC,K,CAIVC,SACH,MAAMC,EAAY,CACdC,IAAK,sFACLC,IAAK,+EAGT,MAAMC,EAAW,yNASjB,MAAO,CACHC,EAAA,iBACIC,KAAMpB,KAAKU,OACXW,QAASrB,KAAKW,eAAc,iBACb,OAEfQ,EAAA,cACIG,KAAK,iBACLC,MAAOR,EACPS,KAAK,UACLC,MAAM,qBACNC,aAAc1B,KAAKC,qBACnB0B,QAAS3B,KAAKC,qBACd2B,QAAS5B,KAAKY,cAElBO,EAAA,kBACIU,MAAO,CACHC,QAAS,OACT,iBAAkB,SAClBC,IAAK,SACLC,QAAS,UAEbC,SAAU,EACVC,MAAOhB,K"}