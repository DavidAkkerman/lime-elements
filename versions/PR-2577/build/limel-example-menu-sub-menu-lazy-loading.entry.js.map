{"version":3,"names":["LazyLoaderService","constructor","this","loadItems","async","subMenu","items","fakeServer","forEach","item","lazyLoader","NETWORK_DELAY","Promise","resolve","setTimeout","text","formatItems","editItems","bulletsAndNumberingItems","icon","separator","MenuSubMenuLazyLoadingExample","handleSelect","event","lastSelectedItem","detail","render","h","onSelect","label","slot","value"],"sources":["./src/components/menu/examples/menu-sub-menu-lazy-loading-service-mock.ts","./src/components/menu/examples/menu-sub-menu-lazy-loading.tsx"],"sourcesContent":["import { ListSeparator } from 'src/interface';\nimport { MenuItem } from '../menu.types';\n\n/**\n * This example service can be copied and used in your package or solution.\n */\nclass LazyLoaderService {\n    public loadItems = async (\n        subMenu: MenuItem\n    ): Promise<Array<MenuItem | ListSeparator>> => {\n        // Load the items to show in the sub-menu.\n        // If you copy this service, you should replace this with\n        // something that actually loads the items from the server.\n        const items = await fakeServer.loadItems(subMenu);\n\n        // Once items are loaded, we can replace the loader with the\n        // actual items, so we don't have load them again.\n        subMenu.items = items;\n\n        // If any of the items have their own sub-menu, and those items\n        // are not loaded yet, we add a function for loading them.\n        items.forEach((item) => {\n            if ('items' in item && item.items === null) {\n                item.items = this.loadItems;\n            }\n        });\n\n        return items;\n    };\n}\n\nexport const lazyLoader = new LazyLoaderService();\n\nconst NETWORK_DELAY = 1000;\n\n/**\n * This is a fake server that simulates a network delay.\n * It should NOT be copied and used in your package or solution.\n */\nconst fakeServer = {\n    loadItems: (item: MenuItem): Promise<Array<MenuItem | ListSeparator>> => {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                switch (item.text) {\n                    case 'Format':\n                        resolve(formatItems);\n                        break;\n                    case 'Edit':\n                        resolve(editItems);\n                        break;\n                    case 'Bullets and numbering':\n                        resolve(bulletsAndNumberingItems);\n                        break;\n                    default:\n                        resolve([]);\n                        break;\n                }\n            }, NETWORK_DELAY);\n        });\n    },\n};\n\nconst formatItems: MenuItem[] = [\n    {\n        text: 'Bold',\n        icon: 'bold',\n    },\n    {\n        text: 'Italic',\n        icon: 'italic',\n    },\n    {\n        text: 'Bullets and numbering',\n        icon: 'bulleted_list',\n        items: null,\n    },\n];\n\nconst bulletsAndNumberingItems: MenuItem[] = [\n    {\n        text: 'Numbered list',\n        icon: 'numbered_list',\n    },\n    {\n        text: 'Bullet list',\n        icon: 'bulleted_list',\n    },\n    {\n        text: 'Checklist',\n        icon: 'todo_list',\n    },\n];\n\nconst editItems: Array<MenuItem | ListSeparator> = [\n    {\n        text: 'Copy',\n        icon: 'copy',\n    },\n    {\n        text: 'Cut',\n        icon: 'cut',\n    },\n    { separator: true },\n    {\n        text: 'Paste',\n        icon: 'paste',\n    },\n];\n","import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\nimport { lazyLoader } from './menu-sub-menu-lazy-loading-service-mock';\n\n/**\n * Lazy loading items in sub-menus.\n * @link menu-sub-menu-lazy-loading-service-mock.ts\n */\n@Component({\n    tag: 'limel-example-menu-sub-menu-lazy-loading',\n    shadow: true,\n})\nexport class MenuSubMenuLazyLoadingExample {\n    @State()\n    private lastSelectedItem: string;\n\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Format',\n            items: lazyLoader.loadItems,\n        },\n        {\n            text: 'Edit',\n            items: lazyLoader.loadItems,\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"],"mappings":"+CAMA,MAAMA,EAANC,cACWC,KAAAC,UAAYC,MACfC,IAKA,MAAMC,QAAcC,EAAWJ,UAAUE,GAIzCA,EAAQC,MAAQA,EAIhBA,EAAME,SAASC,IACX,GAAI,UAAWA,GAAQA,EAAKH,QAAU,KAAM,CACxCG,EAAKH,MAAQJ,KAAKC,S,KAI1B,OAAOG,CAAK,C,EAIb,MAAMI,EAAa,IAAIV,EAE9B,MAAMW,EAAgB,IAMtB,MAAMJ,EAAa,CACfJ,UAAYM,GACD,IAAIG,SAASC,IAChBC,YAAW,KACP,OAAQL,EAAKM,MACT,IAAK,SACDF,EAAQG,GACR,MACJ,IAAK,OACDH,EAAQI,GACR,MACJ,IAAK,wBACDJ,EAAQK,GACR,MACJ,QACIL,EAAQ,IACR,M,GAETF,EAAc,KAK7B,MAAMK,EAA0B,CAC5B,CACID,KAAM,OACNI,KAAM,QAEV,CACIJ,KAAM,SACNI,KAAM,UAEV,CACIJ,KAAM,wBACNI,KAAM,gBACNb,MAAO,OAIf,MAAMY,EAAuC,CACzC,CACIH,KAAM,gBACNI,KAAM,iBAEV,CACIJ,KAAM,cACNI,KAAM,iBAEV,CACIJ,KAAM,YACNI,KAAM,cAId,MAAMF,EAA6C,CAC/C,CACIF,KAAM,OACNI,KAAM,QAEV,CACIJ,KAAM,MACNI,KAAM,OAEV,CAAEC,UAAW,MACb,CACIL,KAAM,QACNI,KAAM,U,MCzFDE,EAA6B,M,yBAI9BnB,KAAAI,MAAyC,CAC7C,CACIS,KAAM,SACNT,MAAOI,EAAWP,WAEtB,CACIY,KAAM,OACNT,MAAOI,EAAWP,YAgBlBD,KAAAoB,aAAgBC,IACpBrB,KAAKsB,iBAAmBD,EAAME,OAAOV,IAAI,E,gCAbtCW,SACH,MAAO,CACHC,EAAA,cAAYrB,MAAOJ,KAAKI,MAAOsB,SAAU1B,KAAKoB,cAC1CK,EAAA,gBAAcE,MAAM,OAAOC,KAAK,aAEpCH,EAAA,uBACIE,MAAM,qBACNE,MAAO7B,KAAKsB,mB"}