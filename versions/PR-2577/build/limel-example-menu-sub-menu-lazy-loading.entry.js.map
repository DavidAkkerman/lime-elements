{"version":3,"names":["LazyLoader","constructor","this","cache","loadItems","async","subMenu","cachedItems","getFromCache","items","fakeServer","forEach","item","setToCache","value","parentItem","NETWORK_DELAY","Promise","resolve","setTimeout","formatItems","editItems","bulletsAndNumberingItems","text","icon","separator","MenuSubMenuLazyLoadingExample","hostRef","handleSelect","event","lastSelectedItem","detail","lazyLoader","render","h","onSelect","label","slot"],"sources":["./src/components/menu/examples/menu-sub-menu-lazy-loading-service-mock.ts","./src/components/menu/examples/menu-sub-menu-lazy-loading.tsx"],"sourcesContent":["import { ListSeparator } from 'src/interface';\nimport { MenuItem } from '../menu.types';\n\n/**\n * This example service can be copied and used in your package or solution.\n */\nexport class LazyLoader {\n    private cache: Record<string, Array<MenuItem | ListSeparator>> = {};\n\n    public loadItems = async (\n        subMenu: MenuItem\n    ): Promise<Array<MenuItem | ListSeparator>> => {\n        // First check if the items are already in the cache.\n        const cachedItems = this.getFromCache(subMenu);\n\n        if (cachedItems) {\n            return cachedItems;\n        }\n\n        // If not cached, load them from the server.\n        //\n        // ::: note\n        // If you copy this service, you should replace this with\n        // something that actually loads the items from the server.\n        // :::\n        const items = await fakeServer.loadItems(subMenu);\n\n        // If any of the items have their own sub-menu, and those items\n        // are not loaded yet, we add a function for loading them.\n        items.forEach((item) => {\n            if ('items' in item && item.items === null) {\n                item.items = this.loadItems;\n            }\n        });\n\n        // Remember to cache the items, so we don't have to load them again later.\n        this.setToCache(subMenu, items);\n\n        return items;\n    };\n\n    private getFromCache(subMenu: MenuItem): Array<MenuItem | ListSeparator> {\n        return this.cache[subMenu.value];\n    }\n\n    private setToCache(\n        parentItem: MenuItem,\n        items: Array<MenuItem | ListSeparator>\n    ): void {\n        this.cache[parentItem.value] = items;\n    }\n}\n\nconst NETWORK_DELAY = 1000;\n\n/**\n * This is a fake server that simulates a network delay.\n * It should NOT be copied and used in your package or solution.\n */\nconst fakeServer = {\n    loadItems: (item: MenuItem): Promise<Array<MenuItem | ListSeparator>> => {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                switch (item.value) {\n                    case 'format_menu':\n                        resolve(formatItems);\n                        break;\n                    case 'edit_menu':\n                        resolve(editItems);\n                        break;\n                    case 'bullets_menu':\n                        resolve(bulletsAndNumberingItems);\n                        break;\n                    default:\n                        resolve([]);\n                        break;\n                }\n            }, NETWORK_DELAY);\n        });\n    },\n};\n\nconst formatItems: MenuItem[] = [\n    {\n        text: 'Bold',\n        icon: 'bold',\n        value: 'bold',\n    },\n    {\n        text: 'Italic',\n        icon: 'italic',\n        value: 'italic',\n    },\n    {\n        text: 'Bullets and numbering',\n        icon: 'bulleted_list',\n        items: null,\n        value: 'bullets_menu',\n    },\n];\n\nconst bulletsAndNumberingItems: MenuItem[] = [\n    {\n        text: 'Numbered list',\n        icon: 'numbered_list',\n        value: 'numbered_list',\n    },\n    {\n        text: 'Bullet list',\n        icon: 'bulleted_list',\n        value: 'bullet_list',\n    },\n    {\n        text: 'Checklist',\n        icon: 'todo_list',\n        value: 'checklist',\n    },\n    {\n        text: 'Pets',\n        icon: 'octopus',\n        items: [\n            {\n                text: 'Cat',\n                icon: 'cat',\n                value: 'cat',\n            },\n            {\n                text: 'Dog',\n                icon: 'dog',\n                value: 'dog',\n            },\n        ],\n        value: 'pet_menu',\n    },\n];\n\nconst editItems: Array<MenuItem | ListSeparator> = [\n    {\n        text: 'Copy',\n        icon: 'copy',\n        value: 'copy',\n    },\n    {\n        text: 'Cut',\n        icon: 'cut',\n        value: 'cut',\n    },\n    { separator: true },\n    {\n        text: 'Paste',\n        icon: 'paste',\n        value: 'paste',\n    },\n];\n","import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\nimport { LazyLoader } from './menu-sub-menu-lazy-loading-service-mock';\n\n/**\n * Lazy loading items in sub-menus.\n * @link menu-sub-menu-lazy-loading-service-mock.ts\n */\n@Component({\n    tag: 'limel-example-menu-sub-menu-lazy-loading',\n    shadow: true,\n})\nexport class MenuSubMenuLazyLoadingExample {\n    @State()\n    private lastSelectedItem: string;\n\n    private lazyLoader: LazyLoader;\n\n    private items: Array<MenuItem | ListSeparator>;\n\n    constructor() {\n        this.lazyLoader = new LazyLoader();\n        this.items = [\n            {\n                text: 'Format',\n                items: this.lazyLoader.loadItems,\n                value: 'format_menu',\n            },\n            {\n                text: 'Edit',\n                items: this.lazyLoader.loadItems,\n                value: 'edit_menu',\n            },\n        ];\n    }\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"],"mappings":"qDAMaA,EAAbC,cACYC,KAAAC,MAAyD,GAE1DD,KAAAE,UAAYC,MACfC,IAGA,MAAMC,EAAcL,KAAKM,aAAaF,GAEtC,GAAIC,EAAa,CACb,OAAOA,C,CASX,MAAME,QAAcC,EAAWN,UAAUE,GAIzCG,EAAME,SAASC,IACX,GAAI,UAAWA,GAAQA,EAAKH,QAAU,KAAM,CACxCG,EAAKH,MAAQP,KAAKE,S,KAK1BF,KAAKW,WAAWP,EAASG,GAEzB,OAAOA,CAAK,C,CAGRD,aAAaF,GACjB,OAAOJ,KAAKC,MAAMG,EAAQQ,M,CAGtBD,WACJE,EACAN,GAEAP,KAAKC,MAAMY,EAAWD,OAASL,C,EAIvC,MAAMO,EAAgB,IAMtB,MAAMN,EAAa,CACfN,UAAYQ,GACD,IAAIK,SAASC,IAChBC,YAAW,KACP,OAAQP,EAAKE,OACT,IAAK,cACDI,EAAQE,GACR,MACJ,IAAK,YACDF,EAAQG,GACR,MACJ,IAAK,eACDH,EAAQI,GACR,MACJ,QACIJ,EAAQ,IACR,M,GAETF,EAAc,KAK7B,MAAMI,EAA0B,CAC5B,CACIG,KAAM,OACNC,KAAM,OACNV,MAAO,QAEX,CACIS,KAAM,SACNC,KAAM,SACNV,MAAO,UAEX,CACIS,KAAM,wBACNC,KAAM,gBACNf,MAAO,KACPK,MAAO,iBAIf,MAAMQ,EAAuC,CACzC,CACIC,KAAM,gBACNC,KAAM,gBACNV,MAAO,iBAEX,CACIS,KAAM,cACNC,KAAM,gBACNV,MAAO,eAEX,CACIS,KAAM,YACNC,KAAM,YACNV,MAAO,aAEX,CACIS,KAAM,OACNC,KAAM,UACNf,MAAO,CACH,CACIc,KAAM,MACNC,KAAM,MACNV,MAAO,OAEX,CACIS,KAAM,MACNC,KAAM,MACNV,MAAO,QAGfA,MAAO,aAIf,MAAMO,EAA6C,CAC/C,CACIE,KAAM,OACNC,KAAM,OACNV,MAAO,QAEX,CACIS,KAAM,MACNC,KAAM,MACNV,MAAO,OAEX,CAAEW,UAAW,MACb,CACIF,KAAM,QACNC,KAAM,QACNV,MAAO,U,MCvIFY,EAA6B,MAQtCzB,YAAA0B,G,UA4BQzB,KAAA0B,aAAgBC,IACpB3B,KAAK4B,iBAAmBD,EAAME,OAAOR,IAAI,E,gCA5BzCrB,KAAK8B,WAAa,IAAIhC,EACtBE,KAAKO,MAAQ,CACT,CACIc,KAAM,SACNd,MAAOP,KAAK8B,WAAW5B,UACvBU,MAAO,eAEX,CACIS,KAAM,OACNd,MAAOP,KAAK8B,WAAW5B,UACvBU,MAAO,a,CAKZmB,SACH,MAAO,CACHC,EAAA,cAAYzB,MAAOP,KAAKO,MAAO0B,SAAUjC,KAAK0B,cAC1CM,EAAA,gBAAcE,MAAM,OAAOC,KAAK,aAEpCH,EAAA,uBACIE,MAAM,qBACNtB,MAAOZ,KAAK4B,mB"}