{"version":3,"names":["detectExtension","fileName","url","pathLike","extension","split","pop","toLowerCase","extensionsToTypes","pdf","jpg","jpeg","heic","bmp","png","gif","svg","svgz","ep","eps","avi","flv","h264","mov","mp4","mwv","mkv","mp3","wav","wma","ogg","txt","json","html","xml","doc","docx","ppt","xls","xlsx","odt","ods","odp","dot","dotx","docm","dotm","pages","pptx","csv","numbers","pot","pps","ppsx","pptm","potx","potm","ppam","ppsm","sldx","sldm","key","Fullscreen","constructor","element","this","enter","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","bind","window","document","exit","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","toggle","isFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","isSupported","fileViewerCss","FileViewer","hostRef","emitOnAction","event","stopPropagation","action","emit","detail","fullscreen","HostElement","fileType","filename","render","sameDomain","includes","webserverDomain","isOfficeFilePubliclyAvailable","renderNoFileSupportMessage","renderPdf","renderImage","renderVideo","renderAudio","renderText","renderOffice","startsWith","getOfficeViewerUrl","officeViewer","buttonStyle","position","float","right","bottom","transition","h","href","style","class","renderActionMenu","src","frameborder","renderButtons","data","type","alt","controls","name","size","role","getTranslation","id","download","label","elementId","openDirection","renderFullscreenButtons","renderDownloadButton","renderOpenInNewTabButton","onClick","target","rel","actions","items","onSelect","slot","translate","get","language"],"sources":["./src/components/file-viewer/extensionMapping.tsx","./src/components/file-viewer/fullscreen.ts","./src/components/file-viewer/file-viewer.scss?tag=limel-file-viewer&encapsulation=shadow","./src/components/file-viewer/file-viewer.tsx"],"sourcesContent":["/* eslint-disable @stencil/dependency-suggestions */\n\n/* eslint-disable @stencil/dependency-suggestions */\n\nexport function detectExtension(fileName, url): any {\n    const pathLike = fileName || url;\n\n    if (!pathLike) {\n        return 'unknown';\n    }\n\n    const extension = pathLike.split('.').pop().toLowerCase();\n    const extensionsToTypes = {\n        pdf: 'pdf',\n        jpg: 'image',\n        jpeg: 'image',\n        heic: 'image',\n        bmp: 'image',\n        png: 'image',\n        gif: 'image',\n        svg: 'image',\n        svgz: 'image',\n        ep: 'image',\n        eps: 'image',\n        avi: 'video',\n        flv: 'video',\n        h264: 'video',\n        mov: 'video',\n        mp4: 'video',\n        mwv: 'video',\n        mkv: 'video',\n        mp3: 'audio',\n        wav: 'audio',\n        wma: 'audio',\n        ogg: 'audio',\n        txt: 'text',\n        json: 'text',\n        html: 'text',\n        xml: 'text',\n        doc: 'office',\n        docx: 'office',\n        ppt: 'office',\n        xls: 'office',\n        xlsx: 'office',\n        odt: 'office',\n        ods: 'office',\n        odp: 'office',\n        dot: 'office',\n        dotx: 'office',\n        docm: 'office', // not supported https://example-files.online-convert.com/document/docm/example.docm\n        dotm: 'office', // not yet tested\n        pages: 'office', // not supported https://example-files.online-convert.com/document/pages/example.pages\n        pptx: 'office',\n        csv: 'office', // not supported https://file-examples-com.github.io/uploads/2017/02/file_example_CSV_5000.csv\n        numbers: 'office', // not supported https://example-files.online-convert.com/spreadsheet/numbers/example.numbers\n        pot: 'office', // not tested\n        pps: 'office',\n        ppsx: 'office',\n        pptm: 'office', // not supported https://israeltekahun.com/pptm.pptm\n        potx: 'office', // not supported https://israeltekahun.com/potx.potx\n        potm: 'office', // not supported https://israeltekahun.com/potm.potm\n        ppam: 'office', // could not find file\n        ppsm: 'office', // not supported https://israeltekahun.com/ppsm.ppsm\n        sldx: 'office', // not tested\n        sldm: 'office', // not tested\n        key: 'office', // not tested\n    };\n\n    return extensionsToTypes[extension] || 'unknown';\n}\n\n","export class Fullscreen {\n    private enter: () => void;\n    private exit: () => void;\n\n    constructor(element: any) {\n        this.enter =\n            element.requestFullscreen ||\n            element.msRequestFullscreen ||\n            element.mozRequestFullScreen ||\n            element.webkitRequestFullscreen;\n        this.enter = this.enter.bind(element);\n        const doc: any = window.document;\n        this.exit =\n            doc.exitFullscreen ||\n            doc.msExitFullscreen ||\n            doc.mozCancelFullScreen ||\n            doc.webkitExitFullscreen;\n        this.requestFullscreen = this.requestFullscreen.bind(this);\n        this.exitFullscreen = this.exitFullscreen.bind(this);\n        this.toggle = this.toggle.bind(this);\n    }\n\n    public requestFullscreen() {\n        if (this.enter) {\n            this.enter();\n        }\n    }\n\n    public exitFullscreen() {\n        if (this.exit) {\n            this.exit.bind(window.document)();\n        }\n    }\n\n    public toggle() {\n        const doc: any = window.document;\n        const isFullscreen =\n            doc.fullscreenElement ||\n            doc.mozFullScreenElement ||\n            doc.webkitFullscreenElement ||\n            doc.msFullscreenElement;\n\n        if (isFullscreen) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    }\n\n    public isSupported(): boolean {\n        return !!this.requestFullscreen;\n    }\n}\n","@use '../../style/internal/variables';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n$size-of-buttons: 2rem;\n$limel-file-viewer-buttons: 1 !default;\n\n:host {\n    isolation: isolate;\n    position: relative;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nimg,\nvideo,\naudio,\nobject,\niframe {\n    max-height: 100%;\n    max-width: 100%;\n    box-sizing: border-box;\n}\n\niframe {\n    border: none;\n    width: 100%;\n    height: 100%;\n    min-height: 20rem; // makes sure to get minimum comfortable space for viewing office files, and Microsoft Office viewers toolbars\n}\n\nimg {\n    min-width: 7rem;\n    object-fit: contain; // increases or decreases the size of the image to fill the box whilst preserving its aspect-ratio.\n}\n\nvideo {\n    width: 100%;\n    height: auto;\n}\n\naudio {\n    width: 100%;\n}\n\nobject[type='application/pdf'] {\n    width: 100%;\n    height: 100%;\n    min-height: 20rem; // makes sure to get browsers' native controls for the PDF\n}\n\nobject:not([type='application/pdf']) {\n    border-radius: 0.25rem;\n    padding: 0.75rem $size-of-buttons 0.75rem 0.75rem;\n\n    width: 100%;\n    height: 100%;\n    overflow-y: auto;\n\n    color: rgb(var(--contrast-1300));\n    background-color: rgb(var(--contrast-200));\n}\n\n:host(:fullscreen) {\n    background-color: rgb(var(--color-gray-darker));\n\n    object[type='text/plain'] {\n        max-width: 50rem;\n        max-height: calc(100% - 2rem);\n    }\n}\n\n:host(:-webkit-full-screen) {\n    // this is repetition of the previous block, but needed for Safari to work. There is no way to write SCSS rules for `:host` using commas sadly. You have to repeat.\n    background-color: rgb(var(--color-gray-darker));\n\n    object[type='text/plain'] {\n        max-width: 50rem;\n        max-height: calc(100% - 2rem);\n    }\n}\n\n@import './partial-styles/ui-controls.scss';\n","import {\n    Component,\n    Element,\n    h,\n    Prop,\n    State,\n    Event,\n    EventEmitter,\n} from '@stencil/core';\nimport { Languages, ListItem } from '@limetech/lime-elements';\nimport translate from '../../global/translations';\nimport { detectExtension } from './extensionMapping';\nimport { Fullscreen } from './fullscreen';\nimport { FileType, OfficeViewer } from './file-viewer.types';\n\n/**\n * This is a smart component that automatically detects\n * the most common file types such as image, audio, video, and text,\n * and properly displays them in the browser.\n * The component is also capable to render the most common office files.\n *\n * :::note\n * Image files will always be contained in their containers, which means\n * they automatically increases or decreases in size to fill their containing box\n * whilst preserving their aspect-ratio.\n *\n * Text and PDF files will also always respect the width and height of the\n * container in which the `limel-file-viewer` is loaded.\n * :::\n *\n * For some file types such as text and images, the component will display a\n * download button and a button to open the file in a new browser tab.\n * This will allow users to preview the file in a fullscreen more with the\n * browser and take advantage of for example native zooming and panning\n * functionalities.\n *\n *:::important\n * The download button will not work here in this documentation,\n * due to the security policies of the web browsers,\n * since example files are not hosted in the same domain.\n *:::\n * @exampleComponent limel-example-file-viewer\n * @exampleComponent limel-example-file-viewer-office\n * @exampleComponent limel-example-file-viewer-filename\n * @exampleComponent limel-example-file-viewer-actions\n * @exampleComponent limel-example-file-viewer-with-picker\n */\n\n@Component({\n    tag: 'limel-file-viewer',\n    shadow: true,\n    styleUrl: 'file-viewer.scss',\n})\nexport class FileViewer {\n    /**\n     * Link to the file\n     */\n    @Prop({ reflect: true })\n    public url: string;\n\n    /**\n     * The name of the file that also contains its extension.\n     * Overrides the filename provided by the URL.\n     * Useful when the URL does not contain the filename.\n     */\n    @Prop({ reflect: true })\n    public filename: string;\n\n    /**\n     * Alternative text for assistive technologies and screen readers,\n     * used for image files.\n     */\n    @Prop({ reflect: true })\n    public alt: string;\n\n    /**\n     * Defines the localization for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Defines the third-party viewer that should be used to render\n     * the content of office files, such as word processing documents,\n     * presentations, or spreadsheets.\n     */\n    @Prop()\n    public officeViewer: OfficeViewer = 'microsoft-office';\n\n    /**\n     * An array of custom actions that can be displayed\n     * as an action menu on the file which is being displayed.\n     */\n    @Prop()\n    public actions: ListItem[];\n\n    /**\n     *\n     */\n    @Prop()\n    public webserverDomain: string;\n\n    /**\n     * determines if the document is hosted on the same domain as the current webserver\n     */\n    @State()\n    public sameDomain: boolean = false;\n\n    /**\n     *\n     */\n    @Event()\n    public action: EventEmitter<ListItem>;\n\n    @Element()\n    public HostElement: HTMLLimelFileViewerElement;\n\n    private fullscreen: Fullscreen;\n\n    private fileType: FileType;\n\n    constructor() {\n        this.fullscreen = new Fullscreen(this.HostElement);\n        this.fileType = detectExtension(this.filename, this.url);\n    }\n\n    public render() {\n        this.sameDomain = this.url.includes(this.webserverDomain);\n\n        if (!this.url) {\n            return;\n        }\n\n        if (!this.isOfficeFilePubliclyAvailable) {\n            return this.renderNoFileSupportMessage();\n        }\n\n        switch (this.fileType) {\n            case 'pdf':\n                return this.renderPdf();\n            case 'image':\n                return this.renderImage();\n            case 'video':\n                return this.renderVideo();\n            case 'audio':\n                return this.renderAudio();\n            case 'text':\n                return this.renderText();\n            case 'office':\n                return this.renderOffice();\n            default:\n                return this.renderNoFileSupportMessage();\n        }\n    }\n\n    private isOfficeFilePubliclyAvailable() {\n        return (\n            this.fileType === 'office' &&\n            !(this.url.startsWith('http://') || this.url.startsWith('https://'))\n        );\n    }\n\n    private getOfficeViewerUrl() {\n        if (this.officeViewer === 'microsoft-office') {\n            return 'https://view.officeapps.live.com/op/embed.aspx?src=';\n        }\n\n        if (this.officeViewer === 'google-drive') {\n            return 'https://docs.google.com/gview?url=';\n        }\n    }\n\n    private renderOffice() {\n        // the button needs more styling, it is currently sitting beside the iframe\n        const buttonStyle = {\n            position: 'relative',\n            float: 'right',\n            right: '10px',\n            bottom: '35px',\n            transition: '0.5s',\n        };\n\n        if (this.sameDomain) {\n            return [\n                <a href={this.url} style={buttonStyle}>\n                    download\n                </a>,\n                <div class=\"action-menu-for-office-files\">\n                    {this.renderActionMenu()}\n                </div>,\n                <iframe\n                    src={\n                        this.getOfficeViewerUrl() + this.url + '&embedded=true'\n                    }\n                    frameborder=\"0\"\n                ></iframe>,\n            ];\n        }\n\n        return [\n            <div class=\"action-menu-for-office-files\">\n                {this.renderActionMenu()}\n            </div>,\n            <iframe\n                src={this.getOfficeViewerUrl() + this.url + '&embedded=true'}\n                frameborder=\"0\"\n            ></iframe>,\n        ];\n    }\n\n    private renderText() {\n        return [\n            this.renderButtons(),\n            <object data={this.url} type=\"text/plain\" />,\n        ];\n    }\n\n    private renderPdf() {\n        return <object data={this.url} type=\"application/pdf\" />;\n    }\n\n    private renderImage() {\n        return [this.renderButtons(), <img src={this.url} alt={this.alt} />];\n    }\n\n    private renderAudio() {\n        return (\n            <audio controls>\n                <source src={this.url} />\n            </audio>\n        );\n    }\n\n    private renderVideo() {\n        return (\n            <video controls>\n                <source src={this.url} />\n            </video>\n        );\n    }\n\n    private renderNoFileSupportMessage() {\n        return (\n            <div class=\"no-support\">\n                <div class=\"no-support__info\">\n                    <limel-icon\n                        class=\"icon--warning\"\n                        name=\"brake_warning\"\n                        size=\"large\"\n                        role=\"presentation\"\n                    />\n                    <p>{this.getTranslation('message.unsupported-filetype')}</p>\n                </div>\n                <a\n                    href={this.url}\n                    id=\"tooltip-download-unsupported\"\n                    class=\"button--download\"\n                    role=\"button\"\n                    download\n                >\n                    <limel-icon name=\"download_2\" size=\"large\" />\n                    <limel-tooltip\n                        label={this.getTranslation('title.download')}\n                        elementId=\"tooltip-download-unsupported\"\n                        openDirection=\"left\"\n                    />\n                </a>\n            </div>\n        );\n    }\n\n    private renderButtons() {\n        return (\n            <div class=\"buttons\">\n                {this.renderActionMenu()}\n                {this.renderFullscreenButtons()}\n                {this.renderDownloadButton()}\n                {this.renderOpenInNewTabButton()}\n            </div>\n        );\n    }\n\n    private renderFullscreenButtons() {\n        if (this.fullscreen.isSupported()) {\n            return [\n                <button\n                    class=\"button--exit-fullscreen\"\n                    id=\"tooltip-enter-fullscreen\"\n                    role=\"button\"\n                    onClick={this.fullscreen.toggle}\n                >\n                    <limel-icon name=\"multiply\" />\n                    <limel-tooltip\n                        label={this.getTranslation('title.exit-fullscreen')}\n                        elementId=\"tooltip-enter-fullscreen\"\n                        openDirection=\"left\"\n                    />\n                </button>,\n                <button\n                    class=\"button--enter-fullscreen\"\n                    id=\"tooltip-exit-fullscreen\"\n                    role=\"button\"\n                    onClick={this.fullscreen.toggle}\n                >\n                    <limel-icon name=\"fit_to_width\" />\n                    <limel-tooltip\n                        label={this.getTranslation('title.open-in-fullscreen')}\n                        elementId=\"tooltip-exit-fullscreen\"\n                        openDirection=\"left\"\n                    />\n                </button>,\n            ];\n        }\n    }\n\n    private renderDownloadButton() {\n        return (\n            <a\n                class=\"button--download\"\n                id=\"tooltip-download\"\n                role=\"button\"\n                download={this.filename}\n                href={this.url}\n                target=\"_blank\"\n            >\n                <limel-icon name=\"download_2\" />\n                <limel-tooltip\n                    label={this.getTranslation('title.download')}\n                    elementId=\"tooltip-download\"\n                    openDirection=\"left\"\n                />\n            </a>\n        );\n    }\n\n    private renderOpenInNewTabButton() {\n        return (\n            <a\n                class=\"button--new-tab\"\n                id=\"tooltip-new-tab\"\n                role=\"button\"\n                href={this.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <limel-icon name=\"external_link\" />\n                <limel-tooltip\n                    label={this.getTranslation('title.open-in-new-tab')}\n                    elementId=\"tooltip-new-tab\"\n                    openDirection=\"left\"\n                />\n            </a>\n        );\n    }\n\n    private renderActionMenu() {\n        if (!this.actions) {\n            return;\n        }\n\n        return (\n            <limel-menu\n                class=\"action-menu\"\n                items={this.actions}\n                onSelect={this.emitOnAction}\n                open-direction=\"left\"\n            >\n                <button\n                    class=\"button--action\"\n                    id=\"tooltip-more\"\n                    role=\"button\"\n                    slot=\"trigger\"\n                >\n                    {/* FIXME: add proper translation for `More…`*/}\n                    <limel-icon name=\"menu_2\" />\n                    <limel-tooltip\n                        label=\"More…\"\n                        elementId=\"tooltip-more\"\n                        openDirection=\"left\"\n                    />\n                </button>\n            </limel-menu>\n        );\n    }\n\n    private emitOnAction = (event: CustomEvent<ListItem>) => {\n        event.stopPropagation();\n        this.action.emit(event.detail);\n    };\n\n    private getTranslation(key: string) {\n        return translate.get(`file-viewer.${key}`, this.language);\n    }\n}\n"],"mappings":"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"}