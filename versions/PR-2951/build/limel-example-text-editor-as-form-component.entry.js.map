{"version":3,"names":["schema","type","properties","name","title","description","value","lime","component","props","TextEditorAsFormComponentExample","this","handleFormChange","event","stopPropagation","formData","detail","render","h","onChange"],"sources":["./src/components/text-editor/examples/text-editor-form-data.ts","./src/components/text-editor/examples/text-editor-as-form-component.tsx"],"sourcesContent":["import { FormSchema } from '@limetech/lime-elements';\n\nexport interface FormComponentFormData {\n    name?: string;\n    value?: string;\n}\n\nexport const schema: FormSchema<FormComponentFormData> = {\n    type: 'object',\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Name',\n            description: 'Your name',\n        },\n        value: {\n            type: 'object',\n            title: 'Description',\n            description: 'A personal description',\n            lime: {\n                component: {\n                    name: 'limel-text-editor',\n                    props: {},\n                },\n            },\n        },\n    },\n};\n","import { Component, h, State } from '@stencil/core';\nimport { FormComponentFormData, schema } from './text-editor-form-data';\n/**\n * Using the text editor as a form component\n *\n * Here we have a simple form that uses the `limel-text-editor` component,\n * instead of a regular text input field.\n *\n * :::note\n * This allows the user to write rich text, with markdown support, in the form.\n * But keep in mind that the value will be saved as a markdown string,\n * and can also contain HTML tags, depending on what the users input\n * in the filed.\n * :::\n * @sourceFile text-editor-form-data.ts\n */\n@Component({\n    tag: 'limel-example-text-editor-as-form-component',\n    shadow: true,\n})\nexport class TextEditorAsFormComponentExample {\n    @State()\n    private formData: FormComponentFormData = {\n        name: 'Muhammad Ali',\n        value: '<p>I am the <b>greatest</b>.</p>',\n    };\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event: CustomEvent<FormComponentFormData>) => {\n        event.stopPropagation();\n        this.formData = event.detail;\n    };\n}\n"],"mappings":"+CAOO,MAAMA,EAA4C,CACrDC,KAAM,SACNC,WAAY,CACRC,KAAM,CACFF,KAAM,SACNG,MAAO,OACPC,YAAa,aAEjBC,MAAO,CACHL,KAAM,SACNG,MAAO,cACPC,YAAa,yBACbE,KAAM,CACFC,UAAW,CACPL,KAAM,oBACNM,MAAO,Q,MCFdC,EAAgC,M,yBAkBjCC,KAAAC,iBAAoBC,IACxBA,EAAMC,kBACNH,KAAKI,SAAWF,EAAMG,MAAM,E,cAlBU,CACtCb,KAAM,eACNG,MAAO,mC,CAGJW,SACH,MAAO,CACHC,EAAA,cACIC,SAAUR,KAAKC,iBACfN,MAAOK,KAAKI,SACZf,OAAQA,IAEZkB,EAAA,uBAAqBZ,MAAOK,KAAKI,W"}