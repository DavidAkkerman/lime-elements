{"version":3,"names":["tabPanelContentCss","LOAD_TIME","TabPanelContentExample","this","vote","votes","changeTab","emit","Object","assign","tab","badge","render","loaded","h","style","backgroundColor","iconColor","color","class","size","name","icon","text","outlined","label","onClick","watchTab","active","loadTabContent","setTimeout","tabPanelCss","TabPanel","constructor","hostRef","slotElements","handleChangeTabs","bind","setSlotElements","setTabStatus","connectedCallback","initialize","componentDidLoad","slot","getSlot","addEventListener","tabs","forEach","disconnectedCallback","removeEventListener","tabsChanged","hidePanels","Host","onChangeTab","slice","call","assignedElements","element","find","e","id","display","event","map","detail","dispatchResizeEvent","host","shadowRoot","querySelector"],"sources":["./src/components/tab-panel/examples/tab-panel-content.scss?tag=limel-example-tab-panel-content&encapsulation=shadow","./src/components/tab-panel/examples/tab-panel-content.tsx","./src/components/tab-panel/tab-panel.scss?tag=limel-tab-panel&encapsulation=shadow","./src/components/tab-panel/tab-panel.tsx"],"sourcesContent":[".text {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.container {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n}\n\np {\n    margin: 0;\n}\n\nlimel-icon {\n    margin-right: 1rem;\n}\n","import {\n    Component,\n    h,\n    Prop,\n    EventEmitter,\n    Event,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { Tab, TabPanelComponent } from '@limetech/lime-elements';\n\nconst LOAD_TIME = 1000;\n\n@Component({\n    tag: 'limel-example-tab-panel-content',\n    shadow: true,\n    styleUrl: 'tab-panel-content.scss',\n})\nexport class TabPanelContentExample implements TabPanelComponent {\n    /**\n     * The tab that this component belongs to\n     */\n    @Prop()\n    public tab: Tab;\n\n    /**\n     * Emitted when the vote button is clicked to update the badge in the tab\n     */\n    @Event()\n    public changeTab: EventEmitter<Tab>;\n\n    @State()\n    private votes = 0;\n\n    @State()\n    private loaded = false;\n\n    public render() {\n        if (!this.loaded) {\n            return <limel-spinner />;\n        }\n\n        const style = {\n            backgroundColor: this.tab.iconColor,\n            color: 'white',\n        };\n\n        return (\n            <div class=\"container\">\n                <div class=\"text\">\n                    <limel-icon\n                        badge={true}\n                        size=\"large\"\n                        name={this.tab.icon}\n                        style={style}\n                    />\n                    <p>\n                        {this.tab.text} has received {this.votes} votes!\n                    </p>\n                </div>\n                <limel-button\n                    outlined={true}\n                    icon=\"star\"\n                    label=\"Vote\"\n                    onClick={this.vote}\n                />\n            </div>\n        );\n    }\n\n    /**\n     * Load the tab contents the first time the tab is activated\n     */\n    @Watch('tab')\n    protected watchTab() {\n        if (!this.loaded && this.tab.active) {\n            this.loadTabContent();\n        }\n    }\n\n    /**\n     * Simulate loading the tab content\n     */\n    private loadTabContent() {\n        setTimeout(() => {\n            this.loaded = true;\n        }, LOAD_TIME);\n    }\n\n    private vote = () => {\n        this.votes++;\n        this.changeTab.emit({\n            ...this.tab,\n            badge: this.votes,\n        });\n    };\n}\n","/**\n* @prop --tab-panel-background-color: Background color of the contents of the tab and the active tab of the tab bar. Defaults to `--contrast-100`.\n*/\n\n:host(limel-tab-panel) {\n    --tab-panel-background-color: rgb(var(--contrast-100));\n    display: block;\n    height: 100%;\n}\n\n.tab-panel {\n    // contains both limel-tab-bar and tab-content\n    height: 100%;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n.tab-content {\n    height: 100%;\n    flex: 1;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n    box-sizing: border-box;\n    background-color: var(--tab-panel-background-color);\n}\n","import {\n    Component,\n    Element,\n    h,\n    Prop,\n    EventEmitter,\n    Event,\n    Host,\n    Watch,\n} from '@stencil/core';\nimport { Tab } from '../../interface';\nimport { dispatchResizeEvent } from '../../util/dispatch-resize-event';\n\n/**\n * The `limel-tab-panel` component uses the `limel-tab-bar` component together\n * with custom slotted components and will display the content for the currently\n * active tab. Each slotted component must have an id equal to the id of the\n * corresponding tab it belongs to. These components should implement the\n * [TabPanelComponent](#/type/TabPanelComponent/) interface.\n *\n * The `limel-tab-panel` component will automatically set each tab configuration\n * on the corresponding slotted component as a property named `tab` so that the\n * component can take action upon that. Sometimes it might be desirable to not\n * load data or render anything until the tab is active.\n *\n * The slotted components can also emit the `changeTab` event to update anything\n * inside the actual tab, e.g. to change the icon, color or badge.\n * @slot - Content to put inside the `limel-tab-panel`. Each slotted element\n * must have the `id` attribute equal to the id of the tab it belongs to.\n * @exampleComponent limel-example-tab-panel\n */\n@Component({\n    tag: 'limel-tab-panel',\n    styleUrl: 'tab-panel.scss',\n    shadow: true,\n})\nexport class TabPanel {\n    /**\n     * The tabs to display in the panel\n     */\n    @Prop({ mutable: true })\n    public tabs: Tab[] = [];\n\n    /**\n     * Emitted when a tab has been changed\n     */\n    @Event()\n    protected changeTab: EventEmitter<Tab>;\n\n    @Element()\n    private host: HTMLLimelTabPanelElement;\n\n    private slotElements: HTMLElement[] = [];\n\n    constructor() {\n        this.handleChangeTabs = this.handleChangeTabs.bind(this);\n        this.setSlotElements = this.setSlotElements.bind(this);\n        this.setTabStatus = this.setTabStatus.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const slot = this.getSlot();\n        if (!slot) {\n            return;\n        }\n\n        slot.addEventListener('slotchange', this.setSlotElements);\n        this.setSlotElements();\n        this.tabs.forEach(this.setTabStatus);\n    }\n\n    public disconnectedCallback() {\n        const slot = this.getSlot();\n        slot.removeEventListener('slotchange', this.setSlotElements);\n    }\n\n    @Watch('tabs')\n    public tabsChanged() {\n        this.hidePanels();\n        this.tabs.forEach(this.setTabStatus);\n    }\n\n    public render() {\n        return (\n            <Host onChangeTab={this.handleChangeTabs}>\n                <div class=\"tab-panel\">\n                    <limel-tab-bar tabs={this.tabs} />\n                    <div class=\"tab-content\">\n                        <slot />\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n\n    private setSlotElements() {\n        const slot = this.getSlot();\n        this.hidePanels();\n        this.slotElements = [].slice.call(slot.assignedElements());\n        this.tabs.forEach(this.setTabStatus);\n    }\n\n    private setTabStatus(tab: Tab) {\n        const element = this.slotElements.find((e) => e.id === tab.id);\n        if (!element) {\n            return;\n        }\n\n        if (tab.active) {\n            element.style.display = '';\n        } else {\n            element.style.display = 'none';\n        }\n\n        element['tab'] = tab; // eslint-disable-line @typescript-eslint/dot-notation\n    }\n\n    private handleChangeTabs(event: CustomEvent<Tab>) {\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n\n        this.setTabStatus(event.detail);\n\n        // Content inside the newly activated tab may need to redraw once\n        // visible, so we use the resize event trick. /Ads\n        setTimeout(dispatchResizeEvent);\n    }\n\n    private getSlot(): HTMLSlotElement {\n        return this.host.shadowRoot.querySelector('slot');\n    }\n\n    private hidePanels() {\n        this.slotElements.forEach((element) => {\n            element.style.display = 'none';\n        });\n    }\n}\n"],"mappings":"4HAAA,MAAMA,EAAqB,qKCW3B,MAAMC,EAAY,I,MAOLC,EAAsB,M,8DAuEvBC,KAAAC,KAAO,KACXD,KAAKE,QACLF,KAAKG,UAAUC,KAAIC,OAAAC,OAAAD,OAAAC,OAAA,GACZN,KAAKO,KAAG,CACXC,MAAOR,KAAKE,QACd,E,8BA9DU,E,YAGC,K,CAEVO,SACH,IAAKT,KAAKU,OAAQ,CACd,OAAOC,EAAA,qB,CAGX,MAAMC,EAAQ,CACVC,gBAAiBb,KAAKO,IAAIO,UAC1BC,MAAO,SAGX,OACIJ,EAAA,OAAKK,MAAM,aACPL,EAAA,OAAKK,MAAM,QACPL,EAAA,cACIH,MAAO,KACPS,KAAK,QACLC,KAAMlB,KAAKO,IAAIY,KACfP,MAAOA,IAEXD,EAAA,SACKX,KAAKO,IAAIa,KAAI,iBAAgBpB,KAAKE,MAAK,YAGhDS,EAAA,gBACIU,SAAU,KACVF,KAAK,OACLG,MAAM,OACNC,QAASvB,KAAKC,O,CAUpBuB,WACN,IAAKxB,KAAKU,QAAUV,KAAKO,IAAIkB,OAAQ,CACjCzB,KAAK0B,gB,EAOLA,iBACJC,YAAW,KACP3B,KAAKU,OAAS,IAAI,GACnBZ,E,4DCtFX,MAAM8B,EAAc,gV,MCoCPC,EAAQ,MAkBjBC,YAAAC,G,+CAFQ/B,KAAAgC,aAA8B,G,UAXjB,GAcjBhC,KAAKiC,iBAAmBjC,KAAKiC,iBAAiBC,KAAKlC,MACnDA,KAAKmC,gBAAkBnC,KAAKmC,gBAAgBD,KAAKlC,MACjDA,KAAKoC,aAAepC,KAAKoC,aAAaF,KAAKlC,K,CAGxCqC,oBACHrC,KAAKsC,Y,CAGFC,mBACHvC,KAAKsC,Y,CAGDA,aACJ,MAAME,EAAOxC,KAAKyC,UAClB,IAAKD,EAAM,CACP,M,CAGJA,EAAKE,iBAAiB,aAAc1C,KAAKmC,iBACzCnC,KAAKmC,kBACLnC,KAAK2C,KAAKC,QAAQ5C,KAAKoC,a,CAGpBS,uBACH,MAAML,EAAOxC,KAAKyC,UAClBD,EAAKM,oBAAoB,aAAc9C,KAAKmC,gB,CAIzCY,cACH/C,KAAKgD,aACLhD,KAAK2C,KAAKC,QAAQ5C,KAAKoC,a,CAGpB3B,SACH,OACIE,EAACsC,EAAI,CAACC,YAAalD,KAAKiC,kBACpBtB,EAAA,OAAKK,MAAM,aACPL,EAAA,iBAAegC,KAAM3C,KAAK2C,OAC1BhC,EAAA,OAAKK,MAAM,eACPL,EAAA,e,CAOZwB,kBACJ,MAAMK,EAAOxC,KAAKyC,UAClBzC,KAAKgD,aACLhD,KAAKgC,aAAe,GAAGmB,MAAMC,KAAKZ,EAAKa,oBACvCrD,KAAK2C,KAAKC,QAAQ5C,KAAKoC,a,CAGnBA,aAAa7B,GACjB,MAAM+C,EAAUtD,KAAKgC,aAAauB,MAAMC,GAAMA,EAAEC,KAAOlD,EAAIkD,KAC3D,IAAKH,EAAS,CACV,M,CAGJ,GAAI/C,EAAIkB,OAAQ,CACZ6B,EAAQ1C,MAAM8C,QAAU,E,KACrB,CACHJ,EAAQ1C,MAAM8C,QAAU,M,CAG5BJ,EAAQ,OAAS/C,C,CAGb0B,iBAAiB0B,GACrB3D,KAAK2C,KAAO3C,KAAK2C,KAAKiB,KAAKrD,IACvB,GAAIA,EAAIkD,KAAOE,EAAME,OAAOJ,GAAI,CAC5B,OAAOE,EAAME,M,CAGjB,OAAOtD,CAAG,IAGdP,KAAKoC,aAAauB,EAAME,QAIxBlC,WAAWmC,E,CAGPrB,UACJ,OAAOzC,KAAK+D,KAAKC,WAAWC,cAAc,O,CAGtCjB,aACJhD,KAAKgC,aAAaY,SAASU,IACvBA,EAAQ1C,MAAM8C,QAAU,MAAM,G"}