{"version":3,"names":["SearchMenuItems","searchValue","menuItems","toLowerCase","flattenedItems","flattenMenuItems","filter","i","_a","separator","text","includes","flatten","menuItem","push","items","subItem","MenuSubItemsExample","this","icon","Array","from","_value","index","handleSearch","async","queryString","handleSelect","event","lastSelectedItem","detail","render","h","searcher","onSelect","label","slot","value","_b"],"sources":["./src/components/menu/examples/subitems-search.ts","./src/components/menu/examples/menu-searchable.tsx"],"sourcesContent":["import { MenuItem, ListSeparator } from '@limetech/lime-elements';\n\nexport function SearchMenuItems(\n    searchValue: string,\n    menuItems: Array<MenuItem | ListSeparator>\n): MenuItem[] {\n    if (!searchValue) {\n        return [];\n    }\n\n    searchValue = searchValue?.toLowerCase();\n    const flattenedItems = flattenMenuItems(menuItems);\n\n    return flattenedItems.filter(\n        (i) => !i.separator && i.text?.toLowerCase().includes(searchValue)\n    );\n}\n\nfunction flattenMenuItems(menuItems: MenuItem[]): MenuItem[] {\n    const flattenedItems: MenuItem[] = [];\n\n    function flatten(menuItem: MenuItem) {\n        flattenedItems.push(menuItem);\n\n        if (menuItem.items) {\n            for (const subItem of menuItem.items) {\n                flatten(subItem);\n            }\n        }\n    }\n\n    for (const menuItem of menuItems) {\n        flatten(menuItem);\n    }\n\n    return flattenedItems;\n}\n","import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\nimport { SearchMenuItems } from './subitems-search';\n\n/**\n * Searchable items\n * @link subitems-search.ts\n */\n@Component({\n    tag: 'limel-example-menu-searchable',\n    shadow: true,\n})\nexport class MenuSubItemsExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Format',\n            items: [\n                {\n                    text: 'Bold',\n                    icon: 'bold',\n                },\n                {\n                    text: 'Italic',\n                    icon: 'italic',\n                },\n                {\n                    text: 'Bullets and numbering',\n                    icon: 'bulleted_list',\n                    items: [\n                        {\n                            text: 'Numbered list',\n                            icon: 'numbered_list',\n                        },\n                        {\n                            text: 'Bullet list',\n                            icon: 'bulleted_list',\n                        },\n                        {\n                            text: 'Checklist',\n                            icon: 'todo_list',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            text: 'Edit',\n            items: [\n                {\n                    text: 'Copy',\n                    icon: 'copy',\n                },\n                {\n                    text: 'Cut',\n                    icon: 'cut',\n                },\n                { separator: true },\n                {\n                    text: 'Paste',\n                    icon: 'paste',\n                },\n            ],\n        },\n        {\n            text: 'Long sub list',\n            items: Array.from(Array(50), (_value, index) => {\n                return {\n                    text: `Item ${index + 1}`,\n                };\n            }),\n        },\n    ];\n\n    @State()\n    private lastSelectedItem: MenuItem;\n\n    public render() {\n        return [\n            <limel-menu\n                items={this.items}\n                searcher={this.handleSearch}\n                onSelect={this.handleSelect}\n            >\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem?.text ?? ''}\n            />,\n        ];\n    }\n\n    private handleSearch = async (queryString: string) => {\n        return SearchMenuItems(queryString, this.items);\n    };\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail;\n    };\n}\n"],"mappings":"wDAEgBA,EACZC,EACAC,GAEA,IAAKD,EAAa,CACd,MAAO,E,CAGXA,EAAcA,IAAW,MAAXA,SAAW,SAAXA,EAAaE,cAC3B,MAAMC,EAAiBC,EAAiBH,GAExC,OAAOE,EAAeE,QACjBC,IAAC,IAAAC,EAAK,OAACD,EAAEE,aAAaD,EAAAD,EAAEG,QAAI,MAAAF,SAAA,SAAAA,EAAEL,cAAcQ,SAASV,GAAY,GAE1E,CAEA,SAASI,EAAiBH,GACtB,MAAME,EAA6B,GAEnC,SAASQ,EAAQC,GACbT,EAAeU,KAAKD,GAEpB,GAAIA,EAASE,MAAO,CAChB,IAAK,MAAMC,KAAWH,EAASE,MAAO,CAClCH,EAAQI,E,GAKpB,IAAK,MAAMH,KAAYX,EAAW,CAC9BU,EAAQC,E,CAGZ,OAAOT,CACX,C,MCpBaa,EAAmB,M,yBACpBC,KAAAH,MAAyC,CAC7C,CACIL,KAAM,SACNK,MAAO,CACH,CACIL,KAAM,OACNS,KAAM,QAEV,CACIT,KAAM,SACNS,KAAM,UAEV,CACIT,KAAM,wBACNS,KAAM,gBACNJ,MAAO,CACH,CACIL,KAAM,gBACNS,KAAM,iBAEV,CACIT,KAAM,cACNS,KAAM,iBAEV,CACIT,KAAM,YACNS,KAAM,iBAM1B,CACIT,KAAM,OACNK,MAAO,CACH,CACIL,KAAM,OACNS,KAAM,QAEV,CACIT,KAAM,MACNS,KAAM,OAEV,CAAEV,UAAW,MACb,CACIC,KAAM,QACNS,KAAM,WAIlB,CACIT,KAAM,gBACNK,MAAOK,MAAMC,KAAKD,MAAM,KAAK,CAACE,EAAQC,KAC3B,CACHb,KAAM,QAAQa,EAAQ,UAyB9BL,KAAAM,aAAeC,MAAOC,GACnB1B,EAAgB0B,EAAaR,KAAKH,OAGrCG,KAAAS,aAAgBC,IACpBV,KAAKW,iBAAmBD,EAAME,MAAM,E,gCArBjCC,S,QACH,MAAO,CACHC,EAAA,cACIjB,MAAOG,KAAKH,MACZkB,SAAUf,KAAKM,aACfU,SAAUhB,KAAKS,cAEfK,EAAA,gBAAcG,MAAM,OAAOC,KAAK,aAEpCJ,EAAA,uBACIG,MAAM,qBACNE,OAAOC,GAAA9B,EAAAU,KAAKW,oBAAgB,MAAArB,SAAA,SAAAA,EAAEE,QAAI,MAAA4B,SAAA,EAAAA,EAAI,K"}