{"version":3,"names":["pickerCss","SEARCH_DEBOUNCE","CHIP_SET_TAG_NAME","Picker","constructor","hostRef","this","chipSetEditMode","handleTextInput","bind","handleInputKeyDown","handleDropdownKeyDown","handleInputFieldFocus","handleChange","handleInteract","handleListChange","handleActionListChange","handleStopEditAndBlur","createDebouncedSearcher","handleCloseMenu","onListKeyDown","portalId","createRandomString","componentWillLoad","chips","createChips","value","componentDidLoad","searcher","chipSet","host","shadowRoot","querySelector","async","getEditMode","render","forEach","chip","iconBackgroundColor","iconFillColor","props","multiple","maxItems","h","Object","assign","type","inputType","label","helperText","leadingIcon","disabled","delimiter","renderDelimiter","readonly","required","searchLabel","onInput","onKeyDown","onChange","onInteract","onStartEdit","onStopEdit","emptyInputOnBlur","clearAllButton","renderDropdown","onChangeValue","newValue","debouncedSearch","AwesomeDebouncePromise","listItems","map","createChip","listItem","id","text","removable","icon","iconColor","dropDownContent","getDropdownContent","content","shouldShowDropDownContent","actionContent","getActionContent","actionPosition","push","renderPortal","actionCount","_b","_a","actions","length","class","actionScrollBehavior","badgeIcons","items","removeUnusedPropertiesOnAction","action","isFull","loading","renderSpinner","renderEmptyMessage","renderListResult","style","width","display","padding","limeBranded","emptyResultMessage","color","margin","hasIcons","some","item","event","keyFound","TAB","ESCAPE","ENTER","includes","key","keyCodeFound","TAB_KEY_CODE","ESCAPE_KEY_CODE","ENTER_KEY_CODE","keyCode","setFocus","dropdownZIndex","getComputedStyle","getPropertyValue","visible","containerId","inheritParentWidth","containerStyle","open","allowClicksElement","onDismiss","element","activeElement","document","portalElement","isDescendant","clearInputField","stopPropagation","query","detail","textValue","searchFn","result","handleSearchResult","change","emit","find","interact","isForwardTab","altKey","metaKey","shiftKey","isUp","ARROW_UP","ARROW_UP_KEY_CODE","isDown","ARROW_DOWN","ARROW_DOWN_KEY_CODE","list","preventDefault","listElement","focus","isEscape","values","filter","emptyInput"],"sources":["./src/components/picker/picker.scss?tag=limel-picker&encapsulation=shadow","./src/components/picker/picker.tsx"],"sourcesContent":["// Note! The `--dropdown-z-index` property is used from `picker.tsx`.\n/**\n  * @prop --dropdown-z-index: z-index of the dropdown menu.\n  */\n\n:host {\n    position: relative;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n","import {\n    Action,\n    ActionPosition,\n    ActionScrollBehavior,\n    Chip,\n    ListItem,\n    Searcher,\n} from '../../interface';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport { isDescendant } from '../../util/dom';\nimport {\n    ARROW_DOWN,\n    ARROW_DOWN_KEY_CODE,\n    ARROW_UP,\n    ARROW_UP_KEY_CODE,\n    ENTER,\n    ENTER_KEY_CODE,\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\nimport { createRandomString } from '../../util/random-string';\nimport { LimelChipSetCustomEvent, LimelListCustomEvent } from 'src/components';\n\nconst SEARCH_DEBOUNCE = 500;\nconst CHIP_SET_TAG_NAME = 'limel-chip-set';\n\n/**\n * @exampleComponent limel-example-picker-single\n * @exampleComponent limel-example-picker-multiple\n * @exampleComponent limel-example-picker-icons\n * @exampleComponent limel-example-picker-empty-suggestions\n * @exampleComponent limel-example-picker-leading-icon\n * @exampleComponent limel-example-picker-static-actions\n * @exampleComponent limel-example-picker-composite\n */\n@Component({\n    tag: 'limel-picker',\n    shadow: true,\n    styleUrl: 'picker.scss',\n})\nexport class Picker {\n    /**\n     * True if the picker should be disabled\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to disable adding and removing items,\n     * but allow interaction with existing items.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Text to display for the input field of the picker\n     */\n    @Prop()\n    public label: string;\n\n    /**\n     * Search label to display in the input field when searching\n     */\n    @Prop()\n    public searchLabel: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Leading icon to show to the far left in the text field\n     */\n    @Prop()\n    public leadingIcon: string;\n\n    /**\n     * A message to display when the search returned an empty result\n     */\n    @Prop()\n    public emptyResultMessage: string;\n\n    /**\n     * True if the control requires a value\n     */\n    @Prop()\n    public required: boolean = false;\n\n    /**\n     * Currently selected value or values\n     */\n    @Prop()\n    public value: ListItem<number | string> | Array<ListItem<number | string>>;\n\n    /**\n     * A search function that takes a search-string as an argument,\n     * and returns a promise that will eventually be resolved with\n     * an array of `ListItem`:s.\n     *\n     * See the docs for the type `Searcher` for type information on\n     * the searcher function itself.\n     */\n    @Prop()\n    public searcher: Searcher;\n\n    /**\n     * True if multiple values are allowed\n     */\n    @Prop()\n    public multiple: boolean = false;\n\n    /**\n     * Sets delimiters between chips. Works only when `multiple` is `true`.\n     */\n    @Prop({ reflect: true })\n    public delimiter: string = null;\n\n    /**\n     * Static actions that can be clicked by the user.\n     */\n    @Prop()\n    public actions: Array<ListItem<Action>> = [];\n\n    /**\n     * Position of the custom static actions in the picker's results dropdown.\n     * Can be set to `'top'` or `'bottom'`.\n     */\n    @Prop()\n    public actionPosition: ActionPosition = 'bottom';\n\n    /**\n     * Scroll behavior of the custom static actions, when user scrolls\n     * in the picker's results dropdown. Can be set to `'scroll'` which means\n     * the action items will scroll together with the list, or `'sticky'` which\n     * retains their position at the top or bottom of the drop down while\n     * scrolling.\n     */\n    @Prop()\n    public actionScrollBehavior: ActionScrollBehavior = 'sticky';\n\n    /**\n     * Whether badge icons should be used in the result list or not\n     */\n    @Prop({ reflect: true })\n    public badgeIcons: boolean = true;\n\n    /**\n     * Fired when a new value has been selected from the picker\n     */\n    @Event()\n    private change: EventEmitter<\n        ListItem<number | string> | Array<ListItem<number | string>>\n    >;\n\n    /**\n     * Fired when clicking on a selected value\n     */\n    @Event()\n    private interact: EventEmitter<ListItem<number | string>>;\n\n    /**\n     * Emitted when the user selects an action.\n     */\n    @Event()\n    private action: EventEmitter<Action>;\n\n    @State()\n    private items: Array<ListItem<number | string>>;\n\n    @State()\n    private textValue: string = '';\n\n    @State()\n    private loading: boolean = false;\n\n    @State()\n    private chips: Chip[] = [];\n\n    @Element()\n    private host: HTMLLimelPickerElement;\n\n    // Should NOT be decorated with State(), since this\n    // should not trigger a re-render by itself.\n    private chipSetEditMode = false;\n\n    private debouncedSearch: Searcher;\n    private chipSet: HTMLLimelChipSetElement;\n    private portalId: string;\n\n    constructor() {\n        this.handleTextInput = this.handleTextInput.bind(this);\n        this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n        this.handleDropdownKeyDown = this.handleDropdownKeyDown.bind(this);\n        this.handleInputFieldFocus = this.handleInputFieldFocus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleInteract = this.handleInteract.bind(this);\n        this.handleListChange = this.handleListChange.bind(this);\n        this.handleActionListChange = this.handleActionListChange.bind(this);\n        this.handleStopEditAndBlur = this.handleStopEditAndBlur.bind(this);\n        this.createDebouncedSearcher = this.createDebouncedSearcher.bind(this);\n        this.handleCloseMenu = this.handleCloseMenu.bind(this);\n        this.onListKeyDown = this.onListKeyDown.bind(this);\n\n        this.portalId = createRandomString();\n    }\n\n    public componentWillLoad() {\n        this.chips = this.createChips(this.value);\n    }\n\n    public componentDidLoad() {\n        this.createDebouncedSearcher(this.searcher);\n        this.chipSet = this.host.shadowRoot.querySelector(CHIP_SET_TAG_NAME);\n    }\n\n    public async componentWillUpdate() {\n        this.chipSetEditMode = false;\n        if (this.chipSet) {\n            this.chipSetEditMode = await this.chipSet.getEditMode();\n        }\n    }\n\n    public render() {\n        this.chips.forEach((chip: Chip) => {\n            if ('iconBackgroundColor' in chip && !!chip.iconBackgroundColor) {\n                chip.iconFillColor = 'rgb(var(--color-white))';\n            }\n        });\n\n        const props: {\n            maxItems?: number;\n        } = {};\n\n        if (!this.multiple) {\n            props.maxItems = 1;\n        }\n\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"search\"\n                label={this.label}\n                helperText={this.helperText}\n                leadingIcon={this.leadingIcon}\n                value={this.chips}\n                disabled={this.disabled}\n                delimiter={this.renderDelimiter()}\n                readonly={this.readonly}\n                required={this.required}\n                searchLabel={this.searchLabel}\n                onInput={this.handleTextInput}\n                onKeyDown={this.handleInputKeyDown}\n                onChange={this.handleChange}\n                onInteract={this.handleInteract}\n                onStartEdit={this.handleInputFieldFocus}\n                onStopEdit={this.handleStopEditAndBlur}\n                emptyInputOnBlur={false}\n                clearAllButton={this.multiple && !this.chipSetEditMode}\n                {...props}\n            />,\n            this.renderDropdown(),\n        ];\n    }\n\n    @Watch('value')\n    protected onChangeValue() {\n        this.chips = this.createChips(this.value);\n    }\n\n    @Watch('searcher')\n    protected createDebouncedSearcher(newValue: Searcher) {\n        if (typeof newValue !== 'function') {\n            return;\n        }\n\n        this.debouncedSearch = AwesomeDebouncePromise(\n            newValue,\n            SEARCH_DEBOUNCE\n        );\n    }\n\n    private renderDelimiter() {\n        if (this.multiple) {\n            return this.delimiter;\n        }\n\n        return null;\n    }\n\n    private createChips(value: ListItem | ListItem[]): Chip[] {\n        if (!value) {\n            return [];\n        }\n\n        if (this.multiple) {\n            const listItems: ListItem[] = value as ListItem[];\n\n            return listItems.map(this.createChip);\n        }\n\n        const listItem: ListItem = value as ListItem;\n\n        return [this.createChip(listItem)];\n    }\n\n    private createChip(listItem: ListItem): Chip {\n        return {\n            id: `${listItem.value}`,\n            text: listItem.text,\n            removable: true,\n            icon: listItem.icon,\n            iconBackgroundColor: listItem.iconColor,\n            value: listItem,\n        };\n    }\n\n    /**\n     * Renders the dropdown with the items to pick from, or a spinner if the picker\n     * is waiting for items to be received\n     * @returns {HTMLElement} picker dropdown\n     */\n    private renderDropdown() {\n        const dropDownContent = this.getDropdownContent();\n\n        const content = [];\n\n        if (this.shouldShowDropDownContent()) {\n            const actionContent = this.getActionContent();\n            if (this.actionPosition === 'top') {\n                content.push(actionContent);\n            }\n\n            if (dropDownContent) {\n                content.push(dropDownContent);\n            }\n\n            if (this.actionPosition === 'bottom') {\n                content.push(actionContent);\n            }\n        }\n\n        return this.renderPortal(content);\n    }\n\n    private getActionContent() {\n        const actionCount = this.actions?.length ?? 0;\n        if (actionCount === 0) {\n            return null;\n        }\n\n        return [\n            <limel-list\n                class={{\n                    'static-actions-list': true,\n                    'is-on-top': this.actionPosition === 'top',\n                    'is-at-bottom': this.actionPosition === 'bottom',\n                    'has-position-sticky':\n                        this.actionScrollBehavior === 'sticky',\n                }}\n                badgeIcons={true}\n                type={'selectable'}\n                onChange={this.handleActionListChange}\n                items={this.actions.map(this.removeUnusedPropertiesOnAction)}\n            />,\n        ];\n    }\n\n    private removeUnusedPropertiesOnAction(\n        action: ListItem<Action>\n    ): ListItem<Action> {\n        return {\n            ...action,\n            actions: [],\n        };\n    }\n\n    private shouldShowDropDownContent() {\n        if (this.isFull()) {\n            return false;\n        }\n\n        return !!this.chipSetEditMode;\n    }\n\n    private getDropdownContent() {\n        if (!this.shouldShowDropDownContent()) {\n            return;\n        }\n\n        if (this.loading) {\n            return this.renderSpinner();\n        }\n\n        if (!this.items || !this.items.length) {\n            return this.renderEmptyMessage();\n        }\n\n        return this.renderListResult();\n    }\n\n    /**\n     * Returns true if the picker is \"full\"\n     * The picker is considered to be full if it has a value and only one is allowed\n     * @returns {boolean} true if the picker is full\n     */\n    private isFull(): boolean {\n        return !this.multiple && !!this.value;\n    }\n\n    private renderSpinner() {\n        return (\n            <div\n                style={{\n                    width: '100%',\n                    display: 'flex',\n                    'align-items': 'center',\n                    'justify-content': 'center',\n                    padding: '1rem 0',\n                }}\n            >\n                <limel-spinner limeBranded={false} />\n            </div>\n        );\n    }\n\n    private renderEmptyMessage() {\n        if (!this.emptyResultMessage) {\n            return;\n        }\n\n        const style = {\n            color: 'rgb(var(--contrast-1100))',\n            'text-align': 'center',\n            margin: '0.5rem 1rem',\n        };\n\n        return <p style={style}>{this.emptyResultMessage}</p>;\n    }\n\n    private renderListResult() {\n        const hasIcons = this.items.some((item) => {\n            return 'icon' in item && !!item.icon;\n        });\n\n        return (\n            <limel-list\n                badgeIcons={hasIcons && this.badgeIcons}\n                onChange={this.handleListChange}\n                onKeyDown={this.onListKeyDown}\n                type=\"selectable\"\n                items={this.items}\n            />\n        );\n    }\n\n    private onListKeyDown(event: KeyboardEvent) {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        const keyCodeFound = [\n            TAB_KEY_CODE,\n            ESCAPE_KEY_CODE,\n            ENTER_KEY_CODE,\n        ].includes(event.keyCode);\n        if (keyFound || keyCodeFound) {\n            this.chipSet.setFocus();\n        }\n    }\n\n    private renderPortal(content: any[] = []) {\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index'\n        );\n\n        return (\n            <limel-portal\n                visible={content.length > 0}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={content.length > 0}\n                    allowClicksElement={this.host}\n                    style={{\n                        '--mdc-menu-min-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {content}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    }\n\n    /**\n     * Check if a descendant still has focus. If not, reset text value and search result.\n     * @returns {void}\n     */\n    private handleStopEditAndBlur() {\n        // In browsers where shadow DOM is not supported activeElement on shadowRoot will return null\n        // However, document.activeElement will return the actual focused element instead of the outermost shadow host\n        const element =\n            this.host.shadowRoot.activeElement || document.activeElement;\n        const portalElement = document.querySelector(`#${this.portalId}`);\n        if (\n            isDescendant(element as HTMLElement, this.host) ||\n            isDescendant(element as HTMLElement, portalElement as HTMLElement)\n        ) {\n            return;\n        }\n\n        this.clearInputField();\n    }\n\n    /**\n     * Input handler for the input field\n     * @param {InputEvent} event event\n     * @returns {void}\n     */\n    private async handleTextInput(event) {\n        event.stopPropagation();\n\n        const query = event.detail;\n        this.textValue = query;\n        this.loading = true;\n\n        // If the search-query is an empty string, bypass debouncing.\n        const searchFn = query === '' ? this.searcher : this.debouncedSearch;\n        const result = await searchFn(query);\n        this.handleSearchResult(query, result);\n    }\n\n    /**\n     * Change handler for the list\n     * @param {LimelListCustomEvent<ListItem>} event event\n     * @returns {void}\n     */\n    private handleListChange(event: LimelListCustomEvent<ListItem>) {\n        event.stopPropagation();\n        if (!this.value || this.value !== event.detail) {\n            let newValue: ListItem | ListItem[] = event.detail;\n            if (this.multiple) {\n                newValue = [...(this.value as ListItem[]), event.detail];\n            }\n\n            this.change.emit(newValue);\n            this.items = [];\n        }\n\n        if (this.multiple) {\n            this.chipSet?.setFocus(true);\n        }\n    }\n\n    /**\n     * Change handler for the list\n     * @param {LimelChipSetCustomEvent} event event\n     * @returns {void}\n     */\n    private handleActionListChange(\n        event: LimelListCustomEvent<ListItem<Action>>\n    ) {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.action.emit(event.detail.value);\n        this.items = [];\n    }\n\n    /**\n     * Focus handler for the chip set\n     * Prevent focus if the picker has a value and does not support multiple values\n     * @returns {void}\n     */\n    private async handleInputFieldFocus() {\n        this.loading = true;\n        const query = this.textValue;\n        const result = await this.searcher(query);\n        this.handleSearchResult(query, result);\n    }\n\n    private handleChange(event: LimelChipSetCustomEvent<Chip | Chip[]>) {\n        event.stopPropagation();\n\n        let newValue = null;\n        if (this.multiple) {\n            const chips = event.detail as Chip[];\n            newValue = chips.map((chip) => {\n                return (this.value as ListItem[]).find((item) => {\n                    return `${item.value}` === chip.id;\n                });\n            });\n        }\n\n        this.change.emit(newValue);\n    }\n\n    private handleInteract(event: LimelChipSetCustomEvent<Chip>) {\n        event.stopPropagation();\n        this.interact.emit(event.detail ? event.detail.value : event.detail);\n    }\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     * @param {KeyboardEvent} event event\n     * @returns {void}\n     */\n    private handleInputKeyDown(event: KeyboardEvent) {\n        const isForwardTab =\n            (event.key === TAB || event.keyCode === TAB_KEY_CODE) &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp =\n            event.key === ARROW_UP || event.keyCode === ARROW_UP_KEY_CODE;\n        const isDown =\n            event.key === ARROW_DOWN || event.keyCode === ARROW_DOWN_KEY_CODE;\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child'\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child'\n            );\n            listElement.focus();\n        }\n    }\n\n    /**\n     * Key handler for the dropdown\n     * @param {KeyboardEvent} event event\n     * @returns {void}\n     */\n    private handleDropdownKeyDown(event: KeyboardEvent) {\n        const isEscape =\n            event.key === ESCAPE || event.keyCode === ESCAPE_KEY_CODE;\n\n        if (isEscape) {\n            event.preventDefault();\n            this.textValue = '';\n            this.chipSet.setFocus(true);\n        }\n    }\n\n    private handleSearchResult(query: string, result: ListItem[]) {\n        if (query === this.textValue) {\n            this.items = result;\n            if (this.multiple) {\n                const values = this.value as ListItem[];\n                this.items = result.filter((item) => {\n                    return !values.includes(item);\n                });\n            }\n\n            this.loading = false;\n        }\n    }\n\n    private handleCloseMenu() {\n        if (this.items.length > 0) {\n            return;\n        }\n\n        this.clearInputField();\n    }\n\n    private clearInputField() {\n        this.chipSet.emptyInput();\n        this.textValue = '';\n        this.handleSearchResult('', []);\n    }\n}\n"],"mappings":"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"}