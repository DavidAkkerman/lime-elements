{"version":3,"names":["reWhitespace","trimmedEndIndex","string","index","length","test","charAt","reTrimStart","baseTrim","slice","replace","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber","value","isSymbol","isObject","other","valueOf","isBinary","isDescendant","element","parent","contains","currentNode","i","DEPTH","getRootNode","nodeName","host"],"sources":["./node_modules/lodash-es/_trimmedEndIndex.js","./node_modules/lodash-es/_baseTrim.js","./node_modules/lodash-es/toNumber.js","./src/util/dom.ts"],"sourcesContent":["/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","/**\n * Check if an element is a descendant of another, even if it is located within a shadow root\n *\n * @param element - The element to check\n * @param parent - The parent element\n * @returns True if the element is a descendant of the parent element, false otherwise\n */\nexport function isDescendant(element: Node, parent: Node): boolean {\n    if (!parent) {\n        return false;\n    }\n\n    if (parent.contains(element)) {\n        return true;\n    }\n\n    let currentNode: Node = element;\n    let i = 0; // Just in case something weird happens, let's not crash the browserâ€¦\n    const DEPTH = 1000; // Max depth to search.\n\n    while (\n        i < DEPTH &&\n        currentNode &&\n        currentNode.getRootNode().nodeName === '#document-fragment'\n    ) {\n        currentNode = (currentNode.getRootNode() as any).host;\n        if (parent.contains(currentNode)) {\n            return true;\n        }\n\n        i += 1;\n    }\n\n    return parent.contains(currentNode);\n}\n"],"mappings":"sFACA,IAAIA,EAAe,KAUnB,SAASC,EAAgBC,GACvB,IAAIC,EAAQD,EAAOE,OAEnB,MAAOD,KAAWH,EAAaK,KAAKH,EAAOI,OAAOH,IAAS,EAC3D,OAAOA,CACT,CCbA,IAAII,EAAc,OASlB,SAASC,EAASN,GAChB,OAAOA,EACHA,EAAOO,MAAM,EAAGR,EAAgBC,GAAU,GAAGQ,QAAQH,EAAa,IAClEL,CACN,CCXA,IAAIS,EAAM,EAAI,EAGd,IAAIC,EAAa,qBAGjB,IAAIC,EAAa,aAGjB,IAAIC,EAAY,cAGhB,IAAIC,EAAeC,SAyBnB,SAASC,EAASC,GAChB,UAAWA,GAAS,SAAU,CAC5B,OAAOA,CACX,CACE,GAAIC,EAASD,GAAQ,CACnB,OAAOP,CACX,CACE,GAAIS,EAASF,GAAQ,CACnB,IAAIG,SAAeH,EAAMI,SAAW,WAAaJ,EAAMI,UAAYJ,EACnEA,EAAQE,EAASC,GAAUA,EAAQ,GAAMA,CAC7C,CACE,UAAWH,GAAS,SAAU,CAC5B,OAAOA,IAAU,EAAIA,GAASA,CAClC,CACEA,EAAQV,EAASU,GACjB,IAAIK,EAAWV,EAAWR,KAAKa,GAC/B,OAAQK,GAAYT,EAAUT,KAAKa,GAC/BH,EAAaG,EAAMT,MAAM,GAAIc,EAAW,EAAI,GAC3CX,EAAWP,KAAKa,GAASP,GAAOO,CACvC,C,SCtDgBM,EAAaC,EAAeC,GACxC,IAAKA,EAAQ,CACT,OAAO,K,CAGX,GAAIA,EAAOC,SAASF,GAAU,CAC1B,OAAO,I,CAGX,IAAIG,EAAoBH,EACxB,IAAII,EAAI,EACR,MAAMC,EAAQ,IAEd,MACID,EAAIC,GACJF,GACAA,EAAYG,cAAcC,WAAa,qBACzC,CACEJ,EAAeA,EAAYG,cAAsBE,KACjD,GAAIP,EAAOC,SAASC,GAAc,CAC9B,OAAO,I,CAGXC,GAAK,C,CAGT,OAAOH,EAAOC,SAASC,EAC3B,Q"}