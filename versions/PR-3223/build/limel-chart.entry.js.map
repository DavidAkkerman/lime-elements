{"version":3,"names":["chartCss","PERCENT","Chart","render","this","items","length","hasNegativeValues","some","item","value","startValue","h","class","chart","renderItems","sumOfAllValues","reduce","acc","totalRange","range","cumulativeRotation","map","itemId","createRandomString","_a","percentage","Math","abs","type","style","color","id","text","tabIndex","renderTooltip","prefix","suffix","PERCENT_DECIMAL","formattedValue","undefined","tooltipProps","label","helperLabel","elementId","toFixed","Object","assign"],"sources":["./src/components/chart/chart.scss?tag=limel-chart&encapsulation=shadow","./src/components/chart/chart.tsx"],"sourcesContent":["*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\n:host(limel-chart) {\n    isolation: isolate;\n    box-sizing: border-box;\n}\n\n.chart {\n    flex-grow: 1;\n    width: inherit;\n    height: inherit;\n\n    &:has(.item:hover),\n    &:has(.item:focus-visible) {\n        .item {\n            opacity: 0.4;\n        }\n    }\n}\n\n.item {\n    transition:\n        background-color 0.2s ease,\n        opacity 0.4s ease;\n    cursor: help;\n\n    &:focus-visible,\n    &:hover {\n        opacity: 1 !important;\n    }\n}\n\n@import './partial-styles/_bar-gantt-scatter';\n@import './partial-styles/_pie-doughnut';\n@import './partial-styles/_stacked-bar';\n","import { Component, h, Prop } from '@stencil/core';\nimport { ChartItem } from './chart.types';\nimport { createRandomString } from '../../util/random-string';\nconst PERCENT = 100;\n\n/**\n * A chart is a graphical representation of data, in which\n * visual symbols such as such bars, dots, lines, or slices, represent\n * each data point, in comparison to others.\n *\n * @exampleComponent limel-example-chart-basic\n * @exampleComponent limel-example-chart-max-value\n * @exampleComponent limel-example-chart-orientation\n * @exampleComponent limel-example-chart-type-bar\n * @exampleComponent limel-example-chart-type-scatter\n * @exampleComponent limel-example-chart-type-doughnut\n * @exampleComponent limel-example-chart-type-pie\n * @exampleComponent limel-example-chart-type-gantt\n * @exampleComponent limel-example-chart-multi-axis\n * @Beta\n */\n\n@Component({\n    tag: 'limel-chart',\n    shadow: true,\n    styleUrl: 'chart.scss',\n})\nexport class Chart {\n    /**\n     * List of items in the chart,\n     * each representing a data point.\n     */\n    @Prop()\n    public items!: ChartItem[];\n\n    /**\n     * Defines how items are visualized in the chart.\n     */\n    @Prop({ reflect: true })\n    public type: 'bar' | 'stacked-bar' | 'pie' | 'doughnut' | 'scatter' =\n        'stacked-bar';\n\n    /**\n     * Defines how the bars in the chart `bar` and `stacked-bar` types\n     * are stretched.\n     */\n    @Prop({ reflect: true })\n    public orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /**\n     * Specifies the range that items' values could be in.\n     * This is used in calculation of the size of the items in the chart.\n     * When not provided, the sum of all values in the items will be considered as the range.\n     */\n    @Prop({ reflect: true })\n    public range?: number;\n\n    /**\n     *\n     */\n    @Prop({ reflect: true })\n    public legend: boolean = true;\n\n    public render() {\n        if (!this.items || this.items.length === 0) {\n            return;\n        }\n\n        const hasNegativeValues = this.items.some(\n            (item) => item.value < 0 || (item.startValue || 0) < 0,\n        );\n\n        return (\n            <div\n                class={{\n                    chart: true,\n                    'has-negative-values': hasNegativeValues,\n                }}\n            >\n                {this.renderItems()}\n            </div>\n        );\n    }\n\n    private renderItems() {\n        const sumOfAllValues = this.items.reduce(\n            (acc, item) => acc + item.value,\n            0,\n        );\n        const totalRange = this.range || sumOfAllValues || 1;\n\n        let cumulativeRotation = 0;\n\n        return this.items.map((item) => {\n            const itemId = createRandomString();\n\n            let startValue: number = item.startValue ?? 0;\n            const percentage =\n                (Math.abs(item.value - startValue) / totalRange) * PERCENT;\n\n            if (this.type === 'pie' || this.type === 'doughnut') {\n                startValue = cumulativeRotation;\n                cumulativeRotation += percentage / PERCENT;\n            } else {\n                startValue = item.startValue || 0;\n            }\n\n            return [\n                <span\n                    class=\"item\"\n                    style={{\n                        '--limel-chart-item-color': item.color,\n                        '--limel-chart-item-start-value': `${startValue}`,\n                        '--limel-chart-item-end-value': `${item.value}`,\n                        '--limel-chart-item-size': `${percentage}`,\n                    }}\n                    id={itemId}\n                    data-item-text={item.text}\n                    tabIndex={0}\n                />,\n                this.renderTooltip(\n                    itemId,\n                    item.text,\n                    item.value,\n                    item.prefix,\n                    item.suffix,\n                    percentage,\n                    item.startValue,\n                ),\n            ];\n        });\n    }\n\n    private renderTooltip(\n        itemId: string,\n        text: string,\n        value: number,\n        prefix: string = '',\n        suffix: string = '',\n        percentage: number,\n        startValue?: number,\n    ) {\n        const PERCENT_DECIMAL = 2;\n\n        const formattedValue =\n            startValue !== undefined\n                ? `${prefix}${startValue}${suffix} - ${prefix}${value}${suffix}`\n                : `${prefix}${value}${suffix}`;\n\n        const tooltipProps: any = {\n            label: `${text}`,\n            helperLabel: `${formattedValue}`,\n            elementId: itemId,\n        };\n\n        if (this.type !== 'bar' && this.type !== 'scatter') {\n            tooltipProps.label = `${text} (${percentage.toFixed(PERCENT_DECIMAL)}%)`;\n        }\n\n        return <limel-tooltip {...tooltipProps} />;\n    }\n}\n"],"mappings":"+FAAA,MAAMA,EAAW,0+LCGjB,MAAMC,EAAU,I,MAwBHC,EAAK,M,wDAaV,c,iBAO4C,a,iCAcvB,I,CAElBC,SACH,IAAKC,KAAKC,OAASD,KAAKC,MAAMC,SAAW,EAAG,CACxC,M,CAGJ,MAAMC,EAAoBH,KAAKC,MAAMG,MAChCC,GAASA,EAAKC,MAAQ,IAAMD,EAAKE,YAAc,GAAK,IAGzD,OACIC,EAAA,OACIC,MAAO,CACHC,MAAO,KACP,sBAAuBP,IAG1BH,KAAKW,c,CAKVA,cACJ,MAAMC,EAAiBZ,KAAKC,MAAMY,QAC9B,CAACC,EAAKT,IAASS,EAAMT,EAAKC,OAC1B,GAEJ,MAAMS,EAAaf,KAAKgB,OAASJ,GAAkB,EAEnD,IAAIK,EAAqB,EAEzB,OAAOjB,KAAKC,MAAMiB,KAAKb,I,MACnB,MAAMc,EAASC,IAEf,IAAIb,GAAqBc,EAAAhB,EAAKE,cAAU,MAAAc,SAAA,EAAAA,EAAI,EAC5C,MAAMC,EACDC,KAAKC,IAAInB,EAAKC,MAAQC,GAAcQ,EAAclB,EAEvD,GAAIG,KAAKyB,OAAS,OAASzB,KAAKyB,OAAS,WAAY,CACjDlB,EAAaU,EACbA,GAAsBK,EAAazB,C,KAChC,CACHU,EAAaF,EAAKE,YAAc,C,CAGpC,MAAO,CACHC,EAAA,QACIC,MAAM,OACNiB,MAAO,CACH,2BAA4BrB,EAAKsB,MACjC,iCAAkC,GAAGpB,IACrC,+BAAgC,GAAGF,EAAKC,QACxC,0BAA2B,GAAGgB,KAElCM,GAAIT,EAAM,iBACMd,EAAKwB,KACrBC,SAAU,IAEd9B,KAAK+B,cACDZ,EACAd,EAAKwB,KACLxB,EAAKC,MACLD,EAAK2B,OACL3B,EAAK4B,OACLX,EACAjB,EAAKE,YAEZ,G,CAIDwB,cACJZ,EACAU,EACAvB,EACA0B,EAAiB,GACjBC,EAAiB,GACjBX,EACAf,GAEA,MAAM2B,EAAkB,EAExB,MAAMC,EACF5B,IAAe6B,UACT,GAAGJ,IAASzB,IAAa0B,OAAYD,IAAS1B,IAAQ2B,IACtD,GAAGD,IAAS1B,IAAQ2B,IAE9B,MAAMI,EAAoB,CACtBC,MAAO,GAAGT,IACVU,YAAa,GAAGJ,IAChBK,UAAWrB,GAGf,GAAInB,KAAKyB,OAAS,OAASzB,KAAKyB,OAAS,UAAW,CAChDY,EAAaC,MAAQ,GAAGT,MAASP,EAAWmB,QAAQP,M,CAGxD,OAAO1B,EAAA,gBAAAkC,OAAAC,OAAA,GAAmBN,G"}